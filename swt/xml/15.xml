<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='browser'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2003 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Browser'></name><comment type='JavadocComment' content=' Instances of this class implement the browser user interface metaphor It allows the user to visualize and navigate through HTML documents p Note that although this class is a subclass of code Composite code it does not make sense to set a layout on it p p IMPORTANT This class is em not em intended to be subclassed p since 3 0 '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='frame'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleFrame'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='site'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleControlSite'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='auto'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleAutomation'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='back'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='forward'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='navigate'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='delaySetText'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='location'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='size'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='true'></initializer><name type='SimpleName' identifier='addressBar'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='true'></initializer><name type='SimpleName' identifier='menuBar'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='true'></initializer><name type='SimpleName' identifier='statusBar'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='true'></initializer><name type='SimpleName' identifier='toolBar'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='info'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='globalDispatch'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='html'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' External Listener management '></comment><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='closeWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='locationListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='openWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='progressListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='statusTextListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='titleListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='visibilityWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xfa'></initializer><name type='SimpleName' identifier='BeforeNavigate2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x69'></initializer><name type='SimpleName' identifier='CommandStateChange'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x103'></initializer><name type='SimpleName' identifier='DocumentComplete'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xfc'></initializer><name type='SimpleName' identifier='NavigateComplete2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xfb'></initializer><name type='SimpleName' identifier='NewWindow2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x100'></initializer><name type='SimpleName' identifier='OnMenuBar'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x101'></initializer><name type='SimpleName' identifier='OnStatusBar'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xff'></initializer><name type='SimpleName' identifier='OnToolBar'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xfe'></initializer><name type='SimpleName' identifier='OnVisible'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x6c'></initializer><name type='SimpleName' identifier='ProgressChange'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x228'></initializer><name type='SimpleName' identifier='RegisterAsBrowser'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x66'></initializer><name type='SimpleName' identifier='StatusTextChange'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x71'></initializer><name type='SimpleName' identifier='TitleChange'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x107'></initializer><name type='SimpleName' identifier='WindowClosing'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x10b'></initializer><name type='SimpleName' identifier='WindowSetHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x108'></initializer><name type='SimpleName' identifier='WindowSetLeft'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x106'></initializer><name type='SimpleName' identifier='WindowSetResizable'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x109'></initializer><name type='SimpleName' identifier='WindowSetTop'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x10a'></initializer><name type='SimpleName' identifier='WindowSetWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='CSC NAVIGATEFORWARD'></name><type type='PrimitiveType' specificType='SHORT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='CSC NAVIGATEBACK'></name><type type='PrimitiveType' specificType='SHORT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x800C0011'></initializer><name type='SimpleName' identifier='INET E DEFAULT ACTION'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='READYSTATE COMPLETE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00'></initializer><name type='SimpleName' identifier='URLPOLICY ALLOW'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x03'></initializer><name type='SimpleName' identifier='URLPOLICY DISALLOW'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='URLZONE LOCAL MACHINE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='URLZONE INTRANET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00001200'></initializer><name type='SimpleName' identifier='URLACTION ACTIVEX MIN'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x000013ff'></initializer><name type='SimpleName' identifier='URLACTION ACTIVEX MAX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00001200'></initializer><name type='SimpleName' identifier='URLACTION ACTIVEX RUN'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00001C00'></initializer><name type='SimpleName' identifier='URLACTION AVA MIN'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00030000'></initializer><name type='SimpleName' identifier='URLPOLICY AVA LOW'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00001Cff'></initializer><name type='SimpleName' identifier='URLACTION AVA MAX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='5512'></expression></initializer><name type='SimpleName' identifier='DISPID AMBIENT DLCONTROL'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000010'></initializer><name type='SimpleName' identifier='DLCTL DLIMAGES'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000020'></initializer><name type='SimpleName' identifier='DLCTL VIDEOS'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000040'></initializer><name type='SimpleName' identifier='DLCTL BGSOUNDS'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000080'></initializer><name type='SimpleName' identifier='DLCTL NO SCRIPTS'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000100'></initializer><name type='SimpleName' identifier='DLCTL NO AVA'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000200'></initializer><name type='SimpleName' identifier='DLCTL NO RUNACTIVEXCTLS'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000400'></initializer><name type='SimpleName' identifier='DLCTL NO DLACTIVEXCTLS'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00000800'></initializer><name type='SimpleName' identifier='DLCTL DOWNLOADONLY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00001000'></initializer><name type='SimpleName' identifier='DLCTL NO FRAMEDOWNLOAD'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00002000'></initializer><name type='SimpleName' identifier='DLCTL RESYNCHRONIZE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00004000'></initializer><name type='SimpleName' identifier='DLCTL PRAGMA NO CACHE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x10000000'></initializer><name type='SimpleName' identifier='DLCTL FORCEOFFLINE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x20000000'></initializer><name type='SimpleName' identifier='DLCTL NO CLIENTPULL'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x40000000'></initializer><name type='SimpleName' identifier='DLCTL SILENT'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00040000'></initializer><name type='SimpleName' identifier='DOCHOSTUIFLAG THEME'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x0000004'></initializer><name type='SimpleName' identifier='DOCHOSTUIFLAG NO3DBORDER'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x00200000'></initializer><name type='SimpleName' identifier='DOCHOSTUIFLAG NO3DOUTERBORDER'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='about blank'></initializer><name type='SimpleName' identifier='ABOUT BLANK'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='http download macromedia com pub shockwave cabs director sw cab'></initializer><name type='SimpleName' identifier='URL DIRECTOR'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='org eclipse swt browser '></initializer><name type='SimpleName' identifier='PACKAGE PREFIX'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument><argument type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='BORDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></right></argument></arguments></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='info'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DOCHOSTUIFLAG THEME'></name><scope type='NameExpr'><name type='SimpleName' identifier='Browser'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='BORDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='info'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DOCHOSTUIFLAG NO3DOUTERBORDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='Browser'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='frame'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleFrame'></name></type><arguments><argument type='ThisExpr'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></value></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='site'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WebSite'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='StringLiteralExpr' value='Shell Explorer'></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SWTException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='doVerb'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='OLEIVERB INPLACEACTIVATE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='auto'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleAutomation'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='site'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='auto'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='auto'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie></entries></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='handleEvent'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleListener'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='BeforeNavigate2'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='varResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='varResult'></name></scope></initializer><name type='SimpleName' identifier='url'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='newEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='location'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='url'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='changing'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='6'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='cancel'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='cancel'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getByRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='cancel'></name></scope></initializer><name type='SimpleName' identifier='pCancel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pCancel'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT TRUE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></thenExpr></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CommandStateChange'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='enabled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='varResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='varResult'></name></scope></initializer><name type='SimpleName' identifier='command'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='varResult'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='enabled'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBoolean'></name><scope type='NameExpr'><name type='SimpleName' identifier='varResult'></name></scope></value></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='command'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CSC NAVIGATEBACK'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='back'></name></target><value type='NameExpr'><name type='SimpleName' identifier='enabled'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CSC NAVIGATEFORWARD'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='forward'></name></target><value type='NameExpr'><name type='SimpleName' identifier='enabled'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='DocumentComplete'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='varResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDispatch'></name><scope type='NameExpr'><name type='SimpleName' identifier='varResult'></name></scope></initializer><name type='SimpleName' identifier='dispatch'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='varResult'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='varResult'></name></scope></initializer><name type='SimpleName' identifier='url'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='html'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='url'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ABOUT BLANK'></name></argument></arguments></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='auto'></name></argument></arguments></initializer><name type='SimpleName' identifier='variant'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDispatch'></name><scope type='NameExpr'><name type='SimpleName' identifier='variant'></name></scope></initializer><name type='SimpleName' identifier='top'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='locationEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='location'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='url'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationEvent'></name></scope></target><value type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='top'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatch'></name></scope></right></value></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='changed'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='locationEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='globalDispatch'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatch'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='globalDispatch'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='globalDispatch'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression><comment type='BlockComment' content=' final document complete '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='progressEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='completed'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='progressEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt><comment type='BlockComment' content=' Note The completion of the page loading is detected as described in the MSDN article Determine when a page is done loading in WebBrowser Control '></comment></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='html'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='html'></name></scope></initializer><name type='SimpleName' identifier='charCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='charCount'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='chars'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChars'></name><scope type='NameExpr'><name type='SimpleName' identifier='html'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='charCount'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='html'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WideCharToMultiByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CP UTF8'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='charCount'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='byteCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xEF'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xBB'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xBF'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='UTF8BOM'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='BlockComment' content=' Note Internet Explorer appears to treat the data loaded with nsIPersistStreamInit Load as if it were encoded using the default local charset There does not seem to be an API to set the desired charset explicitely in this case The fix is to prepend the UTF 8 Byte Order Mark signature to the data '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='UTF8BOM'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='byteCount'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='hGlobal'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hGlobal'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hGlobal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='UTF8BOM'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='UTF8BOM'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='WideCharToMultiByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CP UTF8'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='charCount'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='hGlobal'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='UTF8BOM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='byteCount'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppstm'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='CreateStreamOnHGlobal'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hGlobal'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppstm'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hGlobal'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Document'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDispatch'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></initializer><name type='SimpleName' identifier='dispatchDocument'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatchDocument'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIPersistStreamInit'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IPersistStreamInit'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='persistStreamInit'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IPersistStreamInit'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='InitNew'></name><scope type='NameExpr'><name type='SimpleName' identifier='persistStreamInit'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Load'></name><scope type='NameExpr'><name type='SimpleName' identifier='persistStreamInit'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppstm'></name></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='persistStreamInit'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IUnknown'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppstm'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IUnknown'></name></type></variable></variables></expression><comment type='LineComment' content='dispatchDocument Release '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Note CreateStreamOnHGlobal is called with the flag fDeleteOnRelease If the call succeeds the buffer hGlobal is freed automatically when the IStream object is released If the call fails free the buffer hGlobal '></comment></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></initializer><name type='SimpleName' identifier='runnable'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='delaySetText'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='run'></name><scope type='NameExpr'><name type='SimpleName' identifier='runnable'></name></scope></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='delaySetText'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='asyncExec'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='runnable'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='BreakStmt'><comment type='LineComment' content='dispatch Release '></comment></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='NavigateComplete2'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='varResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDispatch'></name><scope type='NameExpr'><name type='SimpleName' identifier='varResult'></name></scope></initializer><name type='SimpleName' identifier='dispatch'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='globalDispatch'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='globalDispatch'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatch'></name></scope></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='NewWindow2'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='cancel'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getByRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='cancel'></name></scope></initializer><name type='SimpleName' identifier='pCancel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='newEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='required'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='open'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='browser'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></initializer><name type='SimpleName' identifier='browser'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Browser'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='browser'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='browser'></name></scope></expression></right></initializer><name type='SimpleName' identifier='doit'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='doit'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='auto'></name><scope type='NameExpr'><name type='SimpleName' identifier='browser'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='variant'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDispatch'></name><scope type='NameExpr'><name type='SimpleName' identifier='variant'></name></scope></initializer><name type='SimpleName' identifier='iDispatch'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='ppDisp'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getByRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='ppDisp'></name></scope></initializer><name type='SimpleName' identifier='byref'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='byref'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='byref'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDispatch'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='required'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pCancel'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='doit'></name></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT TRUE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></thenExpr></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='OnMenuBar'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg0'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='menuBar'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBoolean'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg0'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='OnStatusBar'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg0'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='statusBar'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBoolean'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg0'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='OnToolBar'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg0'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='toolBar'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBoolean'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg0'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='toolBar'></name></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='addressBar'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='menuBar'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Feature in Internet Explorer OnToolBar FALSE is emitted when both tool bar address bar and menu bar must not be visible OnToolBar TRUE is emitted when either of tool bar address bar or menu bar is visible '></comment></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='OnVisible'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBoolean'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></initializer><name type='SimpleName' identifier='visible'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='newEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='visible'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hide'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='addressBar'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='AddressBar'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='addressBar'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBoolean'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='addressBar'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='addressBar'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='menuBar'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='menuBar'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='statusBar'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='statusBar'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='toolBar'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='toolBar'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='location'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='location'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='size'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='show'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='location'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ProgressChange'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></initializer><name type='SimpleName' identifier='nProgress'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' may be 1'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg2'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg2'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg2'></name></scope></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></initializer><name type='SimpleName' identifier='nProgressMax'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='newEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='current'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='nProgress'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='total'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='nProgressMax'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nProgress'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='changed'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='StatusTextChange'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></initializer><name type='SimpleName' identifier='text'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='newEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='text'></name></value></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='changed'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TitleChange'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></initializer><name type='SimpleName' identifier='title'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='newEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='title'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='title'></name></value></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='changed'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='WindowClosing'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></argument></arguments></initializer><name type='SimpleName' identifier='newEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></scope></target><value type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='Browser'></name></classExpr></value></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='close'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newEvent'></name></argument></arguments></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='cancel'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getByRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='cancel'></name></scope></initializer><name type='SimpleName' identifier='pCancel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pCancel'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='WindowSetHeight'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='size'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='WindowSetLeft'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='location'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='location'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='location'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='WindowSetTop'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='location'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='location'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='location'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='WindowSetWidth'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></name></initializer><name type='SimpleName' identifier='arg1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='size'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='arg1'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='arguments'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='arguments'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></componentType></type></variable></variables></expression><comment type='BlockComment' content=' Dispose all arguments passed in the OleEvent This must be done to properly release any IDispatch reference that was automatically addRef ed when constructing the OleEvent '></comment></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='arguments'></name></name></scope></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='arguments'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='handleEvent'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleEvent'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></initializer><name type='SimpleName' identifier='oleListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='BeforeNavigate2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='CommandStateChange'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='DocumentComplete'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='NavigateComplete2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='NewWindow2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='OnMenuBar'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='OnStatusBar'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='OnToolBar'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='OnVisible'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ProgressChange'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='StatusTextChange'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='TitleChange'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='WindowClosing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='WindowSetHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='WindowSetLeft'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='WindowSetTop'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addEventListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='WindowSetWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oleListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='variant'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='RegisterAsBrowser'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='variant'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='variant'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='variant'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='BooleanLiteralExpr' value='false'></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='RegisterAsDropTarget'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='variant'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='variant'></name></scope></expression></statement></statements></body><name type='SimpleName' identifier='Browser'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a widget which will be the parent of the new instance cannot be null param style the style of widget to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li ul exception SWTError ul li ERROR NO HANDLES if a handle could not be obtained for browser creation li ul see Widget getStyle since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newCloseWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newCloseWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newCloseWindowListeners'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='listener'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addCloseWindowListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the window hosting the receiver should be closed p This notification occurs when a javascript command such as code window close code gets executed by a code Browser code p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newLocationListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newLocationListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newLocationListeners'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='listener'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addLocationListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the current location has changed or is about to change p This notification typically occurs when the application navigates to a new location with link setUrl String or when the user activates a hyperlink p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newOpenWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newOpenWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newOpenWindowListeners'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='listener'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addOpenWindowListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when a new window needs to be created p This notification occurs when a javascript command such as code window open code gets executed by a code Browser code p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newProgressListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newProgressListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newProgressListeners'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='listener'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addProgressListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when a progress is made during the loading of the current URL or when the loading of the current URL has been completed param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newStatusTextListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newStatusTextListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newStatusTextListeners'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='listener'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addStatusTextListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the status text is changed p The status text is typically displayed in the status bar of a browser application p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newTitleListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newTitleListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newTitleListeners'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='listener'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addTitleListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the title of the current document is available or has changed param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newVisibilityWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newVisibilityWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newVisibilityWindowListeners'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='listener'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addVisibilityWindowListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when a window hosting the receiver needs to be displayed or hidden param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='back'></name></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='GoBack'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='back'></name><comment type='JavadocComment' content=' Navigate to the previous session history item return code true code if the operation was successful and code false code otherwise exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul see forward since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClass'></name></scope></initializer><name type='SimpleName' identifier='name'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='lastIndexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='name'></name></scope><arguments><argument type='CharLiteralExpr' value=' '></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='name'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='PACKAGE PREFIX'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID SUBCLASS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkSubclass'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='script'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Document'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></initializer><name type='SimpleName' identifier='dispIdMember'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='dispIdMember'></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getAutomation'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></initializer><name type='SimpleName' identifier='document'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleAutomation'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='document'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='parentWindow'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dispIdMember'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='document'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='dispIdMember'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getAutomation'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></initializer><name type='SimpleName' identifier='ihtmlWindow2'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleAutomation'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='document'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='ihtmlWindow2'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='execScript'></value><value type='StringLiteralExpr' value='code'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgvarg'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='script'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgdispidNamedArgs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='ihtmlWindow2'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='ihtmlWindow2'></name></scope></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='execute'></name><comment type='JavadocComment' content=' Execute the specified script p Execute a script containing javascript commands in the context of the current document param script the script with javascript commands return code true code if the operation was successful and code false code otherwise exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the script is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='script'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='forward'></name></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='GoForward'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='forward'></name><comment type='JavadocComment' content=' Navigate to the next session history item return code true code if the operation was successful and code false code otherwise exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul see back since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='back'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isBackEnabled'></name><comment type='JavadocComment' content=' Returns code true code if the receiver can navigate to the previous session history item and code false code otherwise return the receiver s back command enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see back '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='forward'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isForwardEnabled'></name><comment type='JavadocComment' content=' Returns code true code if the receiver can navigate to the next session history item and code false code otherwise return the receiver s forward command enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see forward '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='LocationURL'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></right></condition><thenStmt type='ReturnStmt'><expression type='StringLiteralExpr' value=''></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getUrl'></name><comment type='JavadocComment' content=' Returns the current URL return the current URL or an empty code String code if there is no current URL exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul see setUrl since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Refresh'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='refresh'></name><comment type='JavadocComment' content=' Refresh the current page exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newCloseWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newCloseWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newCloseWindowListeners'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='closeWindowListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newCloseWindowListeners'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeCloseWindowListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the window hosting the receiver should be closed param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloseWindowListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newLocationListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newLocationListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newLocationListeners'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='locationListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newLocationListeners'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeLocationListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the current location is changed or about to be changed param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LocationListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newOpenWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newOpenWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newOpenWindowListeners'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='openWindowListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newOpenWindowListeners'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeOpenWindowListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when a new window needs to be created param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OpenWindowListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newProgressListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newProgressListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newProgressListeners'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='progressListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newProgressListeners'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeProgressListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when a progress is made during the loading of the current URL or when the loading of the current URL has been completed param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ProgressListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newStatusTextListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newStatusTextListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newStatusTextListeners'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='statusTextListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newStatusTextListeners'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeStatusTextListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the status text is changed param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StatusTextListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newTitleListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newTitleListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newTitleListeners'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='titleListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newTitleListeners'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeTitleListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the title of the current document is available or has changed param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TitleListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newVisibilityWindowListeners'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newVisibilityWindowListeners'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newVisibilityWindowListeners'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visibilityWindowListeners'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newVisibilityWindowListeners'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeVisibilityWindowListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when a window hosting the receiver needs to be displayed or hidden param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='VisibilityWindowListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='html'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='html'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></initializer><name type='SimpleName' identifier='blankLoading'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression><comment type='BlockComment' content=' If the html field is non null then the about blank page is already being loaded so no Stop or Navigate is required ust set the html that is to be shown '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='html'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='html'></name></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='blankLoading'></name></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='BlockComment' content=' Navigate to the blank page and insert the given html when receiving the next DocumentComplete notification See the MSDN article Loading HTML content from a Stream Note Stop any pending request This is required to avoid displaying a blank page as a result of consecutive calls to setUrl and or setText The previous request would otherwise render the new html content and reset the html field before the browser actually navigates to the blank page as requested below Feature in Internet Explorer Stopping pending requests when no request is pending causes a default page Action cancelled to be displayed The workaround is to not invoke stop when no request has been set since that instance was created '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='navigate'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='ReadyState'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getProperty'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='delaySetText'></name></target><value type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='READYSTATE COMPLETE'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Stop'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Navigate'></value><value type='StringLiteralExpr' value='URL'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='navigate'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgvarg'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ABOUT BLANK'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgdispidNamedArgs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></scope></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='setText'></name><comment type='JavadocComment' content=' Renders HTML p The html parameter is Unicode encoded since it is a java code String code As a result the HTML meta tag charset should not be set The charset is implied by the code String code itself param html the HTML content to be rendered return true if the operation was successful and false otherwise exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the html is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul see setUrl since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='html'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='url'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='html'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='endsWith'></name><scope type='NameExpr'><name type='SimpleName' identifier='url'></name></scope><arguments><argument type='StringLiteralExpr' value=' xml'></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='navigate'></name></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Navigate'></value><value type='StringLiteralExpr' value='URL'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgvarg'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ABOUT BLANK'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgdispidNamedArgs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></scope></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Feature in Internet Explorer Stopping pending requests when no request has been issued causes a default Action cancelled page to be displayed Since Stop must be issued here the workaround is to first Navigate to the about blank page before issuing Stop so that the Action cancelled page is not displayed '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Stop'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Bug in Internet Explorer For some reason Navigating to an xml document before a previous Navigate has completed will leave the Browser in a bad state if the Navigate to the xml document does not complete This bad state causes a GP when the parent window is eventually disposed The workaround is to issue a Stop before navigating to any xml document '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Navigate'></value><value type='StringLiteralExpr' value='URL'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='navigate'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgvarg'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='url'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='rgdispidNamedArgs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgdispidNamedArgs'></name></argument></arguments></initializer><name type='SimpleName' identifier='pVarResult'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgvarg'></name></name></scope></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getType'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></right></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='pVarResult'></name></scope></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='setUrl'></name><comment type='JavadocComment' content=' Loads a URL param url the URL to be loaded return true if the operation was successful and false otherwise exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the url is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul see getUrl since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='url'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getIDsOfNames'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='StringLiteralExpr' value='Stop'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='rgdispid'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='auto'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rgdispid'></name></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='stop'></name><comment type='JavadocComment' content=' Stop any loading and rendering activity exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread li li ERROR WIDGET DISPOSED when the widget has been disposed li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
