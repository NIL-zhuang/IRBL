<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='dnd'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='DropTarget'></name><comment type='JavadocComment' content=' Class code DropTarget code defines the target object for a drag and drop transfer IMPORTANT This class is em not em intended to be subclassed p This class identifies the code Control code over which the user must position the cursor in order to drop the data being transferred It also specifies what data types can be dropped on this control and what operations can be performed You may have several DropTragets in an application but there can only be a one to one mapping between a code Control code and a code DropTarget code The DropTarget can receive data from within the same application or from other applications such as text dragged from a text editor like Word p code pre int operations DND DROP MOVE DND DROP COPY DND DROP LINK Transfer types new Transfer TextTransfer getInstance DropTarget target new DropTarget label operations target setTransfer types code pre p The application is notified of data being dragged over this control and of when a drop occurs by implementing the interface code DropTargetListener code which uses the class code DropTargetEvent code The application can modify the type of drag being performed on this Control at any stage of the drag by modifying the code event detail code field or the code event currentDataType code field When the data is dropped it is the responsibility of the application to copy this data for its own purposes code pre target addDropListener new DropTargetListener public void dragEnter DropTargetEvent event public void dragOver DropTargetEvent event public void dragLeave DropTargetEvent event public void dragOperationChanged DropTargetEvent event public void dropAccept DropTargetEvent event public void drop DropTargetEvent event A drop has occurred copy over the data if event data null no data to copy indicate failure in event detail event detail DND DROP NONE return label setText String event data data copied to label text pre code dl dt b Styles b dt dd DND DROP NONE DND DROP COPY DND DROP MOVE DND DROP LINK dd dt b Events b dt dd DND DragEnter DND DragLeave DND DragOver DND DragOperationChanged DND DropAccept DND Drop dd dl '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='controlListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='transferAgents'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='effect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DragUnderEffect'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' Track application selections'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='selectedDataType'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='selectedOperation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' workaround There is no event for operation changed so track operation based on key state'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='keyOperation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' maintain a reference to it '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='iDataObject'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' interfaces'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='iDropTarget'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='refCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='DropTarget'></initializer><name type='SimpleName' identifier='DROPTARGETID'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='checkStyle'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></argument></arguments></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='control'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='control'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='DROPTARGETID'></name></argument></arguments></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT INIT DROP'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='DROPTARGETID'></name></argument><argument type='ThisExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='createCOMInterfaces'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='ThisExpr'></scope></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='CoLockObjectExternal'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></scope></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT INIT DROP'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='RegisterDragDrop'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT INIT DROP'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='controlListener'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='DropTarget'></name></classExpr></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='ThisExpr'><classExpr type='NameExpr'><name type='SimpleName' identifier='DropTarget'></name></classExpr></scope></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='handleEvent'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='controlListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><scope type='ThisExpr'></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='onDispose'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='handleEvent'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></condition><elseStmt type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='effect'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NoDragUnderEffect'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='effect'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableDragUnderEffect'></name></type><arguments><argument type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></argument></arguments></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='effect'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TreeDragUnderEffect'></name></type><arguments><argument type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></argument></arguments></value></expression></statement></statements></thenStmt><comment type='LineComment' content=' Drag under effect'></comment></statement></statements></body><name type='SimpleName' identifier='DropTarget'></name><comment type='JavadocComment' content=' Creates a new code DropTarget code to allow data to be dropped on the specified code Control code Creating an instance of a DropTarget may cause system resources to be allocated depending on the platform It is therefore mandatory that the DropTarget instance be disposed when no longer required param control the code Control code over which the user positions the cursor to drop the data param style the bitwise OR ing of allowed operations this may be a combination of any of DND DROP NONE DND DROP COPY DND DROP MOVE DND DROP LINK exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul exception SWTError ul li ERROR CANNOT INIT DROP unable to initiate drop target this will occur if more than one drop target is created for a control or if the operating system will not allow the creation of the drop target li ul p NOTE ERROR CANNOT INIT DROP should be an SWTException since it is a recoverable error but can not be changed due to backward compatability p see Widget dispose see DropTarget checkSubclass see DND DROP NONE see DND DROP COPY see DND DROP MOVE see DND DROP LINK '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='style'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='checkStyle'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragEnter'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragLeave'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragOver'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragOperationChanged'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Drop'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DropAccept'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addDropListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when a drag and drop operation is in progress by sending it one of the messages defined in the code DropTargetListener code interface p ul li code dragEnter code is called when the cursor has entered the drop target boundaries li code dragLeave code is called when the cursor has left the drop target boundaries and just before the drop occurs or is cancelled li code dragOperationChanged code is called when the operation being performed has changed usually due to the user changing the selected modifier key s while dragging li code dragOver code is called when the cursor is moving over the drop target li code dropAccept code is called just before the drop is performed The drop target is given the chance to change the nature of the drop or veto the drop by setting the code event detail code field li code drop code is called when the data is being dropped ul p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see DropTargetListener see removeDropListener see DropTargetEvent '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DropTargetListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='AddRef'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClass'></name></scope></initializer><name type='SimpleName' identifier='name'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='ClassExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DropTarget'></name></type></scope></initializer><name type='SimpleName' identifier='validName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='validName'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='name'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID SUBCLASS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkSubclass'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method0'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method1'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method2'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DragEnter'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method3'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DragOver'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method4'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DragLeave'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method5'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Drop'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method6'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod></anonymousClassBody><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='5'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' register each of the interfaces that this object implements'></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='createCOMInterfaces'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='disposeCOMInterfaces'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setEventData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pDataObject'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='grfKeyState'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></target><value type='NameExpr'><name type='SimpleName' identifier='pDataObject'></name></value></expression><comment type='LineComment' content=' Remember the iDataObject because it is not passed into the DragOver callback'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='operations'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='allowedOperations'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='dataTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='allowedDataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='dataTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragEnter'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='allowedOperations'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></thenExpr></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='sameType'></name><scope type='NameExpr'><name type='SimpleName' identifier='TransferData'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></left><right type='NullLiteralExpr'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='allowedOperations'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='show'></name><scope type='NameExpr'><name type='SimpleName' identifier='effect'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='feedback'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='opToOs'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='DragEnter'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pDataObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='grfKeyState'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pdwEffect'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='show'></name><scope type='NameExpr'><name type='SimpleName' identifier='effect'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FEEDBACK NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='keyOperation'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ThisExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='time'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetMessageTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragLeave'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='DragLeave'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='keyOperation'></name></initializer><name type='SimpleName' identifier='oldKeyOperation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setEventData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='grfKeyState'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='keyOperation'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='operations'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='allowedOperations'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='dataTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='allowedDataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='dataTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='keyOperation'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldKeyOperation'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DragOperationChanged'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DragOver'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='allowedOperations'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></thenExpr></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='sameType'></name><scope type='NameExpr'><name type='SimpleName' identifier='TransferData'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></left><right type='NullLiteralExpr'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='allowedOperations'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='show'></name><scope type='NameExpr'><name type='SimpleName' identifier='effect'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='feedback'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='opToOs'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='DragOver'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='grfKeyState'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pdwEffect'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='show'></name><scope type='NameExpr'><name type='SimpleName' identifier='effect'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FEEDBACK NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ThisExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='time'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetMessageTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragLeave'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='event'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></value></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setEventData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pDataObject'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='grfKeyState'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='keyOperation'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='keyOperation'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='operations'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='allowedOperations'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='dataTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='allowedDataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='dataTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DropAccept'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='sameType'></name><scope type='NameExpr'><name type='SimpleName' identifier='TransferData'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='allowedOperations'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></expression><comment type='LineComment' content=' Get Data in a ava format'></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isSupportedType'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='object'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='nativeToJava'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='object'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='selectedDataType'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='object'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Drop'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='allowedOperations'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='opToOs'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectedOperation'></name></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression><comment type='LineComment' content='notify source of action taken '></comment></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Drop'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pDataObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='grfKeyState'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pdwEffect'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type><name type='SimpleName' identifier='getControl'></name><comment type='JavadocComment' content=' Returns the Control which is registered for this DropTarget This is the control over which the user positions the cursor to drop the data return the Control which is registered for this DropTarget '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='grfKeyState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='ctrl'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='grfKeyState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='ctrl'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DROP LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ctrl'></name></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DROP COPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='shift'></name></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DROP DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getOperationFromKeyState'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='grfKeyState'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></componentType></type><name type='SimpleName' identifier='getTransfer'></name><comment type='JavadocComment' content=' Returns a list of the data types that can be transferred to this DropTarget return a list of the data types that can be transferred to this DropTarget '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='coordinates'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toControl'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='control'></name><scope type='ThisExpr'></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></initializer><name type='SimpleName' identifier='tree'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='tree'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='tree'></name></scope></initializer><name type='SimpleName' identifier='area'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='contains'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x1'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='tree'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x1'></name></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></right></right></compare><comment type='LineComment' content=' Scan across the width of the tree '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></initializer><name type='SimpleName' identifier='x1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='x1'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='control'></name><scope type='ThisExpr'></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></initializer><name type='SimpleName' identifier='table'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></initializer><name type='SimpleName' identifier='area'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='contains'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x1'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='coordinates'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x1'></name></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></right></right></compare><comment type='LineComment' content=' Scan across the width of the tree '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></initializer><name type='SimpleName' identifier='x1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='x1'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='notifyListeners'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='control'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='RevokeDragDrop'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='controlListener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='controlListener'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='controlListener'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='DROPTARGETID'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='control'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CoLockObjectExternal'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></scope></argument><argument type='BooleanLiteralExpr' value='false'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='ThisExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CoFreeUnusedLibraries'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='onDispose'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osOperation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='operation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP COPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT COPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='operation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='operation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osOperation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='osOperation'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='opToOs'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='operation'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='operation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osOperation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT COPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='operation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP COPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osOperation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='operation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osOperation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='operation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='operation'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='osToOp'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='osOperation'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='riid'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></initializer><name type='SimpleName' identifier='guid'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='riid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='GUID'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIUnknown'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIDropTarget'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDropTarget'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E NOINTERFACE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='QueryInterface'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='riid'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ppvObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='refCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeCOMInterfaces'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CoFreeUnusedLibraries'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Release'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragEnter'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragLeave'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragOver'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragOperationChanged'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Drop'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DropAccept'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeDropListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when a drag and drop operation is in progress param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see DropTargetListener see addDropListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DropTargetListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pDataObject'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getStyle'></name></initializer><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' get allowed operations'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='operations'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='operations'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pdwEffect'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='operations'></name></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='osToOp'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='operations'></name></name></argument></arguments></left><right type='NameExpr'><name type='SimpleName' identifier='style'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='operations'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getOperationFromKeyState'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='grfKeyState'></name></argument></arguments></initializer><name type='SimpleName' identifier='operation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' get current operation'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='keyOperation'></name></target><value type='NameExpr'><name type='SimpleName' identifier='operation'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='operation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='operation'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='operations'></name></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='operation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='operation'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='operations'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='DROP NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='DROP MOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></thenExpr></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='dataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression><comment type='LineComment' content=' Get allowed transfer types'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDataObject'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pDataObject'></name></argument></arguments></initializer><name type='SimpleName' identifier='dataObject'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDataObject'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataObject'></name></scope></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataObject'></name></scope></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='address'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='EnumFormatEtc'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataObject'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DATADIR GET'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='address'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumFORMATETC'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='address'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='enumFormatetc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumFORMATETC'></name></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFormatetc'></name></scope></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='FORMATETC'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='rgelt'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Loop over enumerator and save any types that match what we are looking for'></comment></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rgelt'></name></argument></arguments></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pceltFetched'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Reset'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFormatetc'></name></scope></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></initializer><name type='SimpleName' identifier='transferData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgelt'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='FORMATETC'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='cfFormat'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='pIDataObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='pDataObject'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isSupportedType'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='transferData'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newDataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newDataTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></scope></index><name type='NameExpr'><name type='SimpleName' identifier='newDataTypes'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='transferData'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newDataTypes'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='Next'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFormatetc'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgelt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></right></condition></statement></statements></tryBlock></statement></statements></tryBlock></statement></statements></tryBlock></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ThisExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='pt x'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='pt y'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='time'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetMessageTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='feedback'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='FEEDBACK SELECT'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dataTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dataType'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='operations'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='operations'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='operation'></name></value></expression></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='setEventData'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DNDEvent'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pDataObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='grfKeyState'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pt y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pdwEffect'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='transferAgents'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setTransfer'></name><comment type='JavadocComment' content=' Specifies the data types that can be transferred to this DropTarget If data is being dragged that does not match one of these types the drop target will be notified of the drag and drop operation but the currentDataType will be null and the operation will be DND NONE param transferAgents a list of Transfer objects which define the types of data that can be dropped on this target exception IllegalArgumentException ul li ERROR NULL ARGUMENT if transferAgents is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='transferAgents'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></componentType></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
