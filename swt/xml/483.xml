<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='events'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Widget'></name><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='state'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='eventTable'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='EventTable'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' Global state flags '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='DISPOSED'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='CANVAS'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='2'></right></initializer><name type='SimpleName' identifier='KEYED DATA'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='3'></right></initializer><name type='SimpleName' identifier='DISABLED'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='4'></right></initializer><name type='SimpleName' identifier='HIDDEN'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='5'></right></initializer><name type='SimpleName' identifier='LAYOUT NEEDED'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='6'></right></initializer><name type='SimpleName' identifier='LAYOUT CHANGED'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' Default widths for widgets '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='64'></initializer><name type='SimpleName' identifier='DEFAULT WIDTH'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='64'></initializer><name type='SimpleName' identifier='DEFAULT HEIGHT'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' Check and initialize the Common Controls DLL '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='5'></initializer><name type='SimpleName' identifier='MAJOR'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='80'></initializer><name type='SimpleName' identifier='MINOR'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='MAJOR'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='MINOR'></name></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' WARNING SWT requires comctl32 dll version '></left><right type='NameExpr'><name type='SimpleName' identifier='MAJOR'></name></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='NameExpr'><name type='SimpleName' identifier='MINOR'></name></right></left><right type='StringLiteralExpr' value=' or greater'></right></argument></arguments></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 NON NLS 3 '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' WARNING Detected '></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MINOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument></arguments></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='InitCommonControls'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></statement></statements></body></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='Widget'></name><comment type='JavadocComment' content=' Prevents uninitialized instances from being created outside the package '></comment></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkSubclass'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkParent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='style'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></value></expression></statement></statements></body><name type='SimpleName' identifier='Widget'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a widget which will be the parent of the new instance cannot be null param style the style of widget to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li li ERROR INVALID ARGUMENT if the parent is disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT see checkSubclass see getStyle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='EventTable'></name></type></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notifed when an event of the given type occurs When the event does occur in the widget the listener is notified by sending it the code handleEvent code message param eventType the type of event to listen for param listener the listener which should be notified when the event occurs exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Listener see removeListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addDisposeListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notifed when the widget is disposed When the widget is disposed the listener is notified by sending it the code widgetDisposed code message param listener the listener which should be notified when the receiver is disposed exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see DisposeListener see removeDisposeListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DisposeListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='callWindowProc'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='int0'></name></left><right type='NameExpr'><name type='SimpleName' identifier='int1'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='int2'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='int3'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='int4'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='int5'></name></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='NameExpr'><name type='SimpleName' identifier='int0'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NameExpr'><name type='SimpleName' identifier='int0'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='int0'></name></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NameExpr'><name type='SimpleName' identifier='int1'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='int1'></name></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NameExpr'><name type='SimpleName' identifier='int2'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='int2'></name></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NameExpr'><name type='SimpleName' identifier='int3'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='int3'></name></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NameExpr'><name type='SimpleName' identifier='int4'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='int4'></name></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NameExpr'><name type='SimpleName' identifier='int5'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='int5'></name></right></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='style'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='checkBits'></name><comment type='JavadocComment' content=' Returns a style with exactly one style bit set out of the specified set of exclusive style bits All other possible bits are cleared when the first matching bit is found Bits that are not part of the possible set are untouched param style the original style bits param int0 the 0th possible style bit param int1 the 1st possible style bit param int2 the 2nd possible style bit param int3 the 3rd possible style bit param int4 the 4th possible style bit param int5 the 5th possible style bit return the new style bits '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='int0'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='int1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='int2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='int3'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='int4'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='int5'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='MIRRORED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='checkBits'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkOrientation'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='checkOpened'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkOpened'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkParent'></name><comment type='JavadocComment' content=' Throws an exception if the specified widget can not be used as a parent for the receiver exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li li ERROR INVALID ARGUMENT if the parent is disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li ul '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isValidSubclass'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID SUBCLASS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkSubclass'></name><comment type='JavadocComment' content=' Checks that this class can be subclassed p The SWT class library is intended to be subclassed only at specific controlled points most notably code Composite code and code Canvas code when implementing new widgets This method enforces this rule unless it is overridden p p em IMPORTANT em By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific No support is provided for user written classes which are implemented in this fashion p p The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy p exception SWTException ul li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR WIDGET DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='thread'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='currentThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR THREAD INVALID ACCESS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='DISPOSED'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR WIDGET DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkWidget'></name><comment type='JavadocComment' content=' Throws an code SWTException code if the receiver can not be accessed by the caller This may include both checks on the state of the receiver and more generally on the entire execution context This method em should em be called by widget implementors to enforce the standard SWT invariants p Currently it is an error to invoke any method other than code isDisposed code on a widget that has had its code dispose code method called It is also an error to call widget methods from any thread that is different from the thread that created the widget p p In future releases of SWT there may be more or fewer error checks and exceptions may be thrown for different reasons p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseHandle'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='destroyWidget'></name><comment type='JavadocComment' content=' Destroys the widget in the operating system and releases the widget s handle If the widget does not have a handle this method may hide the widget mark the widget as destroyed or do nothing depending on the widget p When a widget is destroyed in the operating system its descendents are also destroyed by the operating system This means that it is only necessary to call code destroyWidget code on the root of the widget tree p p This method is called after code releaseWidget code p see dispose see releaseChild see releaseWidget see releaseHandle '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SWP NOSIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='lpRect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hWnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='cy'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='cx'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='SWP DRAWFRAME'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></value></expression><comment type='BlockComment' content=' Feature in Windows On Windows CE DeferWindowPos when called with SWP DRAWFRAME always causes a WM SIZE message even when SWP NOSIZE is set and when the new size is the same as the old size The fix is to clear SWP DRAWFRAME when the size is the same '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SWP NOSIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Feature in Windows On Windows CE DeferWindowPos always causes a WM SIZE message even when the new size is the same as the old size The fix is to detect that the size has not changed and set SWP NOSIZE '></comment></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeferWindowPos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hWinPosInfo'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hWnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hWndInsertAfter'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='X'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='Y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cx'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cy'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='DeferWindowPos'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hWinPosInfo'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hWnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hWndInsertAfter'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='X'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='Y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='cx'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='cy'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='uFlags'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'></thenStmt><comment type='BlockComment' content=' Note It is valid to attempt to dispose a widget more than once If this happens fail silently '></comment></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isValidThread'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR THREAD INVALID ACCESS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseChild'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='destroyWidget'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes of the operating system resources associated with the receiver and all its descendents After this method has been invoked the receiver and all descendents will answer code true code when sent the message code isDisposed code Any internal connections between the widgets in the tree will have been removed to facilitate garbage collection p NOTE This method is not called recursively on the descendents of the receiver This means that widget implementers can not detect when a widget is being disposed of by re implementing this method but should instead listen for the code Dispose code event p exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see addDisposeListener see removeDisposeListener see checkWidget '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='error'></name><comment type='JavadocComment' content=' Does whatever widget specific cleanup is required and then uses the code in code SWTError error code to handle the error param code the descriptive error code see SWT error int '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='filters'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></type><name type='SimpleName' identifier='findItem'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChars'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></left><right type='CharLiteralExpr' value=' '></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></target><value type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></left><right type='CharLiteralExpr' value=' '></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></target><value type='CharLiteralExpr' value=' '></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></right></condition></statement><statement type='WhileStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></right></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='buffer'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type><name type='SimpleName' identifier='fixMnemonic'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='data'></name></elseExpr><thenExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></inner></name></thenExpr></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type><name type='SimpleName' identifier='getData'></name><comment type='JavadocComment' content=' Returns the application defined widget data associated with the receiver or null if it has not been set The em widget data em is a single unnamed field that is stored with every widget p Applications may put arbitrary objects in this field If the object stored in the widget data needs to be notified when the widget is disposed of it is the application s responsibility to hook the Dispose event on the widget and do so p return the widget data exception SWTException ul li ERROR WIDGET DISPOSED when the receiver has been disposed li li ERROR THREAD INVALID ACCESS when called from the wrong thread li ul see setData Object '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></initializer><name type='SimpleName' identifier='table'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='key'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='table'></name></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='table'></name></name></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='2'></value></updat></update></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type><name type='SimpleName' identifier='getData'></name><comment type='JavadocComment' content=' Returns the application defined property of the receiver with the specified name or null if it has not been set p Applications may have associated arbitrary objects with the receiver in this fashion If the objects stored in the properties need to be notified when the widget is disposed of it is the application s responsibility to hook the Dispose event on the widget and do so p param key the name of the property return the value of the property or null if it has not been set exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the key is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see setData String Object '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR WIDGET DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='display'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type><name type='SimpleName' identifier='getDisplay'></name><comment type='JavadocComment' content=' Returns the code Display code that is associated with the receiver p A widget s display is either provided when it is created for example top level code Shell code s or is the same as its parent s display p return the receiver s display exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Menu'></name></type><name type='SimpleName' identifier='getMenu'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClass'></name></scope></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='lastIndexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='CharLiteralExpr' value=' '></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='string'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getName'></name><comment type='JavadocComment' content=' Returns the name of the widget This is the name of the class without the package name return the name of the widget '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value=''></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getNameText'></name><comment type='BlockComment' content=' Returns a short printable representation for the contents of a widget For example a button may answer the label text This is used by code toString code to provide a more meaningful description of the widget return the contents string for the widget see toString '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='style'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getStyle'></name><comment type='JavadocComment' content=' Returns the receiver s style information p Note that the value which is returned by this method em may not match em the value which was provided to the constructor when the receiver was created This can occur when the underlying operating system does not support a particular combination of requested styles For example if the platform widget used to implement a particular SWT widget always has scroll bars the result of calling this method would always have the code SWT H SCROLL code and code SWT V SCROLL code bits set p return the style bits exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='hooks'></name><comment type='BlockComment' content=' Returns code true code if the specified eventType is hooked and code false code otherwise Implementations of SWT can avoid creating objects and sending events when an event happens in the operating system but there are no listeners hooked for the event param eventType the event to be checked return code true code when the eventType is hooked and code false code otherwise see isListening '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='DISPOSED'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isDisposed'></name><comment type='JavadocComment' content=' Returns code true code if the widget has been disposed and code false code otherwise p This method gets the dispose state for the widget When a widget has been disposed it is an error to invoke any other method using the widget p return code true code when the widget is disposed and code false code otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isListening'></name><comment type='JavadocComment' content=' Returns code true code if there are any listeners for the specified event type associated with the receiver and code false code otherwise param eventType the type of event return true if the event is hooked exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isValidClass'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getClass'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isValidSubclass'></name><comment type='BlockComment' content=' Returns code true code when subclassing is allowed and code false code otherwise return code true code when subclassing is allowed and code false code otherwise '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isValidThread'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isValidThread'></name><comment type='BlockComment' content=' Returns code true code when the current thread is the thread that created the widget and code false code otherwise return code true code when the current thread is the thread that created the widget and code false code otherwise '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='mapEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type><name type='SimpleName' identifier='new GC'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='event'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='event'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='notifyListeners'></name><comment type='JavadocComment' content=' Notifies all of the receiver s listeners for events of the given type that one such event has occurred by invoking their code handleEvent code method param eventType the type of event which has occurred param event the event data exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NullLiteralExpr'></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='postEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='postEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseChild'></name><comment type='BlockComment' content=' Releases the receiver a child in a widget hierarchy from its parent p When a widget is destroyed it may be necessary to remove it from an internal data structure of the parent When a widget has no handle it may also be necessary for the parent to hide the widget or otherwise indicate that the widget has been disposed For example disposing a menu bar requires that the menu bar first be released from the shell when the menu bar is active This could not be done in code destroyWidget code for the menu bar because the parent shell as well as other fields have been null d out already by code releaseWidget code p This method is called first when a widget is disposed see dispose see releaseChild see releaseWidget see releaseHandle '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='NameExpr'><name type='SimpleName' identifier='DISPOSED'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseHandle'></name><comment type='BlockComment' content=' Releases the widget s handle by zero ing it out Does not destroy or release any operating system resources p This method is called after code releaseWidget code or from code destroyWidget code when a widget is being destroyed to ensure that the widget is marked as destroyed in case the act of destroying the widget in the operating system causes application code to run in callback that could access the widget p see dispose see releaseChild see releaseWidget see releaseHandle '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseHandle'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseResources'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseWidget'></name><comment type='BlockComment' content=' Releases any internal resources back to the operating system and clears all fields except the widget handle p When a widget is destroyed resources that were acquired on behalf of the programmer need to be returned to the operating system For example if the widget made a copy of an icon supplied by the programmer this copy would be freed in code releaseWidget code Also to assist the garbage collector and minimize the amount of memory that is not reclaimed when the programmer keeps a reference to a disposed widget all fields except the handle are zero d The handle is needed by code destroyWidget code p p Typically a widget with children will broadcast this message to all children so that they too can release their resources The code releaseHandle code method is used as part of this broadcast to zero the handle fields of the children without calling code destroyWidget code In this scenario the children are actually destroyed later when the operating system destroys the widget tree p This method is called after code releaseChild code see dispose see releaseChild see releaseWidget see releaseHandle '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notifed when an event of the given type occurs param eventType the type of event to listen for param listener the listener which should no longer be notified when the event occurs exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Listener see addListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notifed when an event of the given type occurs p b IMPORTANT b This method is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It should never be referenced from application code p param eventType the type of event to listen for param listener the listener which should no longer be notified when the event occurs exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Listener see addListener '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SWTEventListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeDisposeListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notifed when the widget is disposed param listener the listener which should no longer be notified when the receiver is disposed exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see DisposeListener see addDisposeListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DisposeListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filterEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='sendEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NullLiteralExpr'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='sendEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='sendEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='eventType'></name></argument></arguments></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='event'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='event'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='eventType'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='display'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='widget'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ThisExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='time'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='time'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLastEventTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='send'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='postEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='sendEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='eventType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='send'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setKeyState'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='sendKeyEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='sendKeyEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='button'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BooleanLiteralExpr' value='false'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='sendMouseEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='button'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument></arguments></expression></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument></arguments></expression></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='button'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='detail'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='count'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='count'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setInputState'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='mapEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='send'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='postEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='sendMouseEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='button'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='detail'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='send'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='data'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='EnclosedExpr'><inner type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='ThisExpr'></scope></expression><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></inner></name></target><value type='NameExpr'><name type='SimpleName' identifier='data'></name></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setData'></name><comment type='JavadocComment' content=' Sets the application defined widget data associated with the receiver to be the argument The em widget data em is a single unnamed field that is stored with every widget p Applications may put arbitrary objects in this field If the object stored in the widget data needs to be notified when the widget is disposed of it is the application s responsibility to hook the Dispose event on the widget and do so p param data the widget data exception SWTException ul li ERROR WIDGET DISPOSED when the receiver has been disposed li li ERROR THREAD INVALID ACCESS when called from the wrong thread li ul see getData '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='table'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='table'></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='key'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='table'></name></name></argument></arguments></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></right></condition></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NullLiteralExpr'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='newTable'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='table'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newTable'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='table'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newTable'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newTable'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='table'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></expression></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='table'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='3'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='table'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='data'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='NameExpr'><name type='SimpleName' identifier='table'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='NameExpr'><name type='SimpleName' identifier='KEYED DATA'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newTable'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='table'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newTable'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='table'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newTable'></name></value></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='table'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='key'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='table'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setData'></name><comment type='JavadocComment' content=' Sets the application defined property of the receiver with the specified name to the given value p Applications may associate arbitrary objects with the receiver in this fashion If the objects stored in the properties need to be notified when the widget is disposed of it is the application s responsibility to hook the Dispose event on the widget and do so p param key the name of the property param value the new value for the property exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the key is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see getData String '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='sendFocusEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK MENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ALT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK MBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK RBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON3'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON4'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK XBUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON5'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='type'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDoubleClick'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='3'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON3'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON4'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='5'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON5'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='MouseUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='3'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON3'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON4'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='button'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='5'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BUTTON5'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Traverse'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ALT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ALT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ALT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ALT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='setInputState'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></selector><comment type='BlockComment' content=' Feature in Windows When the user presses Ctrl Backspace or Ctrl Enter Windows sends a WM CHAR with Delete 0x7F and n instead of b and r This is the correct platform behavior but is not portable The fix is to detect these cases and convert the character '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='DEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='BS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='LF'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0x1000000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='KEYPAD CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Feature in Windows When the user presses either the Enter key or the numeric keypad Enter key Windows sends a WM KEYDOWN with wParam VK RETURN in both cases In order to distinguish between the keys the extended key bit is tested If the bit is set assume that the numeric keypad Enter was pressed '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK DELETE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0x7F'></value></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows The virtual key VK DELETE is not treated as both a virtual key and an ASCII key by Windows Therefore we will not receive a WM CHAR for this key The fix is to treat VK DELETE as a special case and map the ASCII value explictly Delete is 0x7F '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK CANCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0x0'></value></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows When the user presses Ctrl Pause the VK CANCEL key is generated and a WM CHAR is sent with 0x03 possibly to allow an application to look for Ctrl C and the the Break key at the same time This is unexpected and unwanted The fix is to detect the case and set the character to zero '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='mbcsToWcs'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope><arguments><argument type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression><type type='PrimitiveType' specificType='CHAR'></type></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setInputState'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='setKeyState'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SWP NOSIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='lpRect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hWnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='cy'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='cx'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></scope></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='SWP DRAWFRAME'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></value></expression><comment type='BlockComment' content=' Feature in Windows On Windows CE SetWindowPos when called with SWP DRAWFRAME always causes a WM SIZE message even when SWP NOSIZE is set and when the new size is the same as the old size The fix is to clear SWP DRAWFRAME when the size is the same '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SWP NOSIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Feature in Windows On Windows CE SetWindowPos always causes a WM SIZE message even when the new size is the same as the old size The fix is to detect that the size has not changed and set SWP NOSIZE '></comment></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowPos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hWnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hWndInsertAfter'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='X'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='Y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cx'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cy'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='uFlags'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='SetWindowPos'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hWnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hWndInsertAfter'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='X'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='Y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='cx'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='cy'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='uFlags'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='x'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='y'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MenuDetect'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenu'></name></initializer><name type='SimpleName' identifier='menu'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Menu'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='menu'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='menu'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setLocation'></name><scope type='NameExpr'><name type='SimpleName' identifier='menu'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setVisible'></name><scope type='NameExpr'><name type='SimpleName' identifier='menu'></name></scope><arguments><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='showMenu'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=' Disposed '></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='StringLiteralExpr' value=' Wrong Thread '></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isValidThread'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getNameText'></name></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name></left><right type='StringLiteralExpr' value=' '></right></left><right type='NameExpr'><name type='SimpleName' identifier='string'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the receiver '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='captureChanged'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmCaptureChanged'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='IsDBLocale'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></initializer><name type='SimpleName' identifier='lead'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='IsDBCSLeadByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lead'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Do not report a lead byte as a key pressed '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wParam'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0'></right></value></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmChar'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows SHRecognizeGesture sends an undocumented WM CONTEXTMENU notification when the flag SHRG NOTIFY PARENT is not set This causes the context menu to be displayed twice once by the caller of SHRecognizeGesture and once from this method The fix is to ignore WM CONTEXTMENU notifications on all WinCE platforms NOTE This only happens on WM2003 Previous WinCE versions did not support WM CONTEXTMENU '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Feature in Windows When the user presses WM NCRBUTTONUP a WM CONTEXTMENU message is generated This happens when the user releases the mouse over a scroll bar Normally window displays the default scrolling menu but applications can process WM CONTEXTMENU to display a different menu Typically an application does not want to supply a special scroll menu The fix is to look for a WM CONTEXTMENU that originated from a mouse event and display the menu when the mouse was released in the client area '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetMessagePos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='pos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='y'></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='y'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScreenToClient'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClientRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PtInRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='MethodCallExpr'><name type='SimpleName' identifier='showMenu'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument></arguments></condition><elseExpr type='NullLiteralExpr'></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></thenExpr></expression><comment type='BlockComment' content=' Show the menu '></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmContextMenu'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wParam'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></value></value></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM IME CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM IME CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></value></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmIMEChar'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><comment type='BlockComment' content=' Ignore repeating modifier keys by testing key down state '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK MENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK CAPITAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK NUMLOCK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK SCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0x40000000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></value></expression><comment type='BlockComment' content=' Clear last key and last ascii because a new key has been typed '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></value></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='IsDBLocale'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></initializer><name type='SimpleName' identifier='lead'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='IsDBCSLeadByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lead'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Do not report a lead byte as a key pressed '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='mapKey'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Bug in WinCE MapVirtualKey returns incorrect values The fix is to rely on a key mappings table to determine whether the key event must be sent now or if a WM CHAR event will follow The key mappings table maps virtual keys to SWT key codes and does not contain mappings for Windows virtual keys like VK A Virtual keys that are both virtual and ASCII are a special case '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='MapVirtualKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK BACK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK RETURN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK DELETE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK ESCAPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ESC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinNT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0x8000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0x80000000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Bug in Windows 95 and NT When the user types an accent key such as to get an accented character on a German keyboard the accent key should be ignored and the next key that the user types is the accented key The fix is to detect the accent key stroke called a dead key by testing the high bit of the value returned by MapVirtualKey A further problem is that the high bit on Windows NT is bit 32 while the high bit on Windows 95 is bit 16 They should both be bit 32 When the user types an accent key that does not correspond to a virtual key MapVirtualKey won t set the high bit to indicate a dead key This happens when an accent key such as is the result of a modifier such as Shift key and MapVirtualKey always returns the unshifted key The fix is to peek for a WM DEADCHAR and avoid issuing the event '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></initializer><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='PM NOREMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM NOYIELD'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM QS INPUT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM QS POSTMESSAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='flags'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='PeekMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM DEADCHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM DEADCHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='flags'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='wParam'></name></thenExpr></value></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt><comment type='BlockComment' content=' Bug in Windows Somehow the widget is becoming disposed after calling PeekMessage In rare cirucmstances it seems that PeekMessage can allow SWT listeners to run that might contain application code that disposes the widget It is not exactly clear how this can happen PeekMessage is only looking for WM DEADCHAR It is not dispatching any message that it finds or removing any message from the queue Cross thread messages are disabled The fix is to check for a disposed widget and return without calling the window proc '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='numpadKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></right></value></expression><comment type='BlockComment' content=' If we are going to get a WM CHAR ensure that last key has the correct character value for the key down and key up events It is not sufficient to ignore the WM KEYDOWN when we know we are going to get a WM CHAR and compute the key in WM CHAR because there is not enough information by the time we get the WM CHAR For example when the user types Ctrl Shift 6 on a US keyboard we get a WM CHAR with wParam 30 When the user types Ctrl Shift 6 on a German keyboard we also get a WM CHAR with wParam 30 On the US keyboard Shift 6 is on the German keyboard Shift 6 is There is no way to map wParam 30 in WM CHAR to the correct value Also on international keyboards the control key may be down when the user has not entered a control character NOTE On Windows 98 keypad keys are virtual despite the fact that a WM CHAR is issued On Windows 2000 and XP they are not virtual Therefore it is necessary to force numeric keypad keys to be virtual '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CharLower'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></expression><type type='PrimitiveType' specificType='SHORT'></type></argument></arguments></value></expression><comment type='BlockComment' content=' Convert LastKey to lower case because Windows non virtual keys that are also ASCII keys such as like VK A are have upper case values in WM KEYDOWN despite the fact that the Shift was not pressed '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK CANCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows The virtual key VK CANCEL is treated as both a virtual key and ASCII key by Windows This means that a WM CHAR with WPARAM 3 will be issued for this key In order to distinguish between this key and Ctrl C mark the key as virtual '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='asciiKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='asciiKey'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Some key combinations map to Windows ASCII keys depending on the keyboard For example Ctrl Alt Q maps to on a German keyboard If the current key combination is special the correct character is placed in wParam for processing in WM CHAR If this is the case issue the key down event from inside WM CHAR '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='asciiKey'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='asciiKey'></name></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' When the user types Ctrl Space ToAscii maps this to Space Normally ToAscii maps a key to a different key if both a WM KEYDOWN and a WM CHAR will be issued To avoid the extra SWT KeyDown look for a space and issue the event from WM CHAR '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='asciiKey'></name></left><right type='NameExpr'><name type='SimpleName' identifier='wParam'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK CANCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows The virtual key VK CANCEL is treated as both a virtual key and ASCII key by Windows This means that a WM CHAR with WPARAM 3 will be issued for this key To avoid the extra SWT KeyDown look for VK CANCEL and issue the event from WM CHAR '></comment></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' If the control key is not down at this point then the key that was pressed was an accent key or a regular key such as A or Shift A In that case issue the key event from WM CHAR '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CharLower'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></expression><type type='PrimitiveType' specificType='SHORT'></type></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='shiftedKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></value></expression></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Get the shifted state or convert to lower case if necessary If the user types Ctrl A LastAscii should be a not A If the user types Ctrl Shift A LastAscii should be A If the user types Ctrl Shift 6 the value of LastAscii will depend on the international keyboard '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' Note that Ctrl is ASCII NUL and is delivered in WM CHAR '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='controlKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wParam'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK DELETE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0x7F'></value></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows The virtual key VK DELETE is not treated as both a virtual key and an ASCII key by Windows Therefore we will not receive a WM CHAR for this key The fix is to treat VK DELETE as a special case and map the ASCII value explictly Delete is 0x7F '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='VK NUMPAD0'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK DIVIDE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='asciiKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows Calling to ToAscii or ToUnicode clears the accented state such that the next WM CHAR loses the accent This makes is critical that the accent key is detected Also these functions clear the character that is entered using the special Windows keypad sequence when NumLock is down ie typing ALT 0231 should gives c with a cedilla when NumLock is down '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='numpadKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></argument></arguments></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible to get a WM CHAR for a virtual key when Num Lock is on If the user types Home while Num Lock is down a WM CHAR is issued with WPARM 55 for the character 7 If we are going to get a WM CHAR we need to ensure that the last key has the correct value Note that Ctrl Home does not issue a WM CHAR when Num Lock is down '></comment></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmKeyDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='VK APP1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='wParam'></name></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK APP6'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></value></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK APP1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0x40000000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='HardKeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='HardKeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></thenExpr></initializer><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Check the bit 30 to get the key state '></comment></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='setInputState'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument></arguments></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Check for hardware keys '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></value></value></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></thenStmt><comment type='BlockComment' content=' If the key up is not hooked reset last key and last ascii in case the key down is hooked '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='mapKey'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Bug in WinCE MapVirtualKey returns incorrect values The fix is to rely on a key mappings table to determine whether the key event must be sent now or if a WM CHAR event will follow The key mappings table maps virtual keys to SWT key codes and does not contain mappings for Windows virtual keys like VK A Virtual keys that are both virtual and ASCII are a special case '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='MapVirtualKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK BACK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK RETURN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK DELETE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK ESCAPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ESC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinNT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0x8000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0x80000000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Bug in Windows 95 and NT When the user types an accent key such as to get an accented character on a German keyboard the accent key should be ignored and the next key that the user types is the accented key The fix is to detect the accent key stroke called a dead key by testing the high bit of the value returned by MapVirtualKey A further problem is that the high bit on Windows NT is bit 32 while the high bit on Windows 95 is bit 16 They should both be bit 32 '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='numpadKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></right></value></expression><comment type='BlockComment' content=' NOTE On Windows 98 keypad keys are virtual despite the fact that a WM CHAR is issued On Windows 2000 and XP they are not virtual Therefore it is necessary to force numeric keypad keys to be virtual '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK CANCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows The virtual key VK CANCEL is treated as both a virtual key and ASCII key by Windows This means that a WM CHAR with WPARAM 3 will be issued for this key In order to distingush between this key and Ctrl C mark the key as virtual '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></value></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wParam'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></value></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></value></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmKeyUp'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM KILLFOCUS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendFocusEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FocusOut'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt><comment type='BlockComment' content=' It is possible but unlikely that application code could have disposed the widget in the focus or deactivate events If this happens end the processing of the Windows message by returning zero as the result of the window proc '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmKillFocus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression><comment type='BlockComment' content=' Feature in Windows Windows sends the following messages when the user double clicks the mouse WM LBUTTONDOWN mouse down WM LBUTTONUP mouse up WM LBUTTONDBLCLK double click WM LBUTTONUP mouse up Applications that expect matching mouse down up pairs will not see the second mouse down The fix is to send a mouse down event '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDoubleClick'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmLButtonDblClk'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='dragging'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='true'></initializer><name type='SimpleName' identifier='mouseDown'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragDetect'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='dragDetect'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='dragDetect'></name></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></variable></variables></expression><comment type='BlockComment' content=' Feature in Windows It s possible that the drag operation will not be started while the mouse is down meaning that the mouse should be captured This can happen when the user types the ESC key to cancel the drag The fix is to query the state of the mouse and capture the mouse accordingly '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ClientToScreen'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dragging'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='DragDetect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mouseDown'></name></target><value type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsPPC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenu'></name></initializer><name type='SimpleName' identifier='menu'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Menu'></name></type></variable></variables></expression><comment type='BlockComment' content=' Note On WinCE PPC only attempt to recognize the gesture for a context menu when the control contains a valid menu or there are listeners for the MenuDetect event '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='menu'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='menu'></name></scope></expression></right></initializer><name type='SimpleName' identifier='hasMenu'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='NameExpr'><name type='SimpleName' identifier='hasMenu'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MenuDetect'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SHRGINFO'></name></type></initializer><name type='SimpleName' identifier='shrg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SHRGINFO'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cbSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='shrg'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SHRGINFO'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwndClient'></name><scope type='NameExpr'><name type='SimpleName' identifier='shrg'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='ptDown x'></name><scope type='NameExpr'><name type='SimpleName' identifier='shrg'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='x'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='ptDown y'></name><scope type='NameExpr'><name type='SimpleName' identifier='shrg'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='y'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dwFlags'></name><scope type='NameExpr'><name type='SimpleName' identifier='shrg'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SHRG RETURNCMD'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SHRecognizeGesture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='shrg'></name></argument></arguments></initializer><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GN CONTEXTMENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='showMenu'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='mouseDown'></name></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='dragging'></name></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='dragDetect'></name></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK ESCAPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Feature in Windows DragDetect captures the mouse and tracks its movement until the user releases the left mouse button presses the ESC key or moves the mouse outside the drag rectangle If the user moves the mouse outside of the drag rectangle DragDetect returns true and a drag and drop operation can be started When the left mouse button is released or the ESC key is pressed these events are consumed by DragDetect so that application code that matches mouse down up pairs or looks for the ESC key will not function properly The fix is to send the missing events when the drag has not started NOTE For now don t send a fake WM KEYDOWN WM KEYUP events for the ESC key This would require computing wParam the key and lParam the repeat count scan code extended key flag context code previous key state flag and transition state flag which is non trivial '></comment></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='postEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DragDetect'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmLButtonDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='MK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK MBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK RBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmLButtonUp'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression><comment type='BlockComment' content=' Feature in Windows Windows sends the following messages when the user double clicks the mouse WM MBUTTONDOWN mouse down WM MBUTTONUP mouse up WM MLBUTTONDBLCLK double click WM MBUTTONUP mouse up Applications that expect matching mouse down up pairs will not see the second mouse down The fix is to send a mouse down event '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDoubleClick'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMButtonDblClk'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMButtonDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='MK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK MBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK RBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMButtonUp'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseHover'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEHOVER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMouseHover'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseExit'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseExit'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetMessagePos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='pos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScreenToClient'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lParam'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseExit'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSELEAVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMouseLeave'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetMessagePos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='pos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='lastMouse'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='captureChanged'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseEnter'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseEnter'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></right></initializer><name type='SimpleName' identifier='mouseEnter'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseExit'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseExit'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></right></initializer><name type='SimpleName' identifier='mouseExit'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseHover'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseHover'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></right></initializer><name type='SimpleName' identifier='mouseHover'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='NameExpr'><name type='SimpleName' identifier='mouseEnter'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mouseExit'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='mouseHover'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TRACKMOUSEEVENT'></name></type></initializer><name type='SimpleName' identifier='lpEventTrack'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TRACKMOUSEEVENT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cbSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='TRACKMOUSEEVENT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dwFlags'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TME QUERY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwndTrack'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='TrackMouseEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='dwFlags'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dwFlags'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TME HOVER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='TrackMouseEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dwFlags'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='TME LEAVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='TME HOVER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwndTrack'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='TrackMouseEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpEventTrack'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='mouseEnter'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></initializer><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></variable></variables></expression><comment type='BlockComment' content=' Force all outstanding WM MOUSELEAVE messages to be dispatched before issuing a mouse enter This causes mouse exit events to be processed before mouse enter events Note that WM MOUSELEAVE is posted to the event queue by TrackMouseEvent '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='PM REMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM NOYIELD'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM QS INPUT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM QS POSTMESSAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='flags'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='TranslateMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DispatchMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></expression></statement></statements></body><condition type='MethodCallExpr'><name type='SimpleName' identifier='PeekMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSELEAVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSELEAVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='flags'></name></argument></arguments></condition></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseEnter'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='lastMouse'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastMouse'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='pos'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseMove'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='captureChanged'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMouseMove'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseWheel'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseWheel'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='delta'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='value'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='detail'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SystemParametersInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SPI GETWHEELSCROLLLINES'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='value'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WHEEL PAGESCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='detail'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SCROLL LINE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='count'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='value'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='delta'></name></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WHEEL DELTA'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='detail'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SCROLL PAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='count'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='delta'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WHEEL DELTA'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScreenToClient'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lParam'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseWheel'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='count'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='detail'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEWHEEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMouseWheel'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Paint'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Paint'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Exit early don t draw the background '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Issue a paint event '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='CreateRectRgn'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='rgn'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetUpdateRgn'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgn'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM PAINT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='new GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gc'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HideCaret'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetRgnBox'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rgn'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectClipRgn'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgn'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetMetaRgn'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='gc'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='gc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='width'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='height'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Paint'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='gc'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NullLiteralExpr'></value></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ShowCaret'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rgn'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetUpdateRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM PAINT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HideCaret'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression><comment type='BlockComment' content=' Bug in Windows When InvalidateRgn InvalidateRect or RedrawWindow with RDW INVALIDATE is called from within WM PAINT to invalidate a region for a further BeginPaint the caret is not properly erased causing pixel corruption The fix is to hide and show the caret '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='InvalidateRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ShowCaret'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PAINTSTRUCT'></name></type></initializer><name type='SimpleName' identifier='ps'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PAINTSTRUCT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='ps'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='ps'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='new GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gc'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></right></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='gc'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='gc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='width'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='height'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Paint'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='gc'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NullLiteralExpr'></value></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmPaint'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='3'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression><comment type='BlockComment' content=' Feature in Windows Windows sends the following messages when the user double clicks the mouse WM RBUTTONDOWN mouse down WM RBUTTONUP mouse up WM RBUTTONDBLCLK double click WM LBUTTONUP mouse up Applications that expect matching mouse down up pairs will not see the second mouse down The fix is to send a mouse down event '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDoubleClick'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='3'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmRButtonDblClk'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='3'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmRButtonDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='3'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='MK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK MBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK RBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmRButtonUp'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM SETFOCUS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendFocusEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FocusIn'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt><comment type='BlockComment' content=' It is possible but unlikely that application code could have disposed the widget in the focus or activate events If this happens end the processing of the Windows message by returning zero as the result of the window proc '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmSetFocus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wParam'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Do not issue a key down if a menu bar mnemonic was invoked '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='mnemonicKeyHit'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></initializer><name type='SimpleName' identifier='oldKeyHit'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression><comment type='BlockComment' content=' Call the window proc to determine whether it is a system key or mnemonic '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='mnemonicKeyHit'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSCHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='consumed'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='mnemonicKeyHit'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='consumed'></name></target><value type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSCHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='consumed'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='mnemonicKeyHit'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='mnemonicKeyHit'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='oldKeyHit'></name></value></expression></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='consumed'></name></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></thenExpr></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmSysChar'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK F10'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0x20000000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' Make sure WM SYSKEYDOWN was sent by ALT aKey '></comment></statement></statements></thenStmt><comment type='BlockComment' content=' Feature in Windows When WM SYSKEYDOWN is sent the user pressed ALT key or F10 to get to the menu bar In order to issue events for F10 but ignore other key presses when the ALT is not down make sure that either F10 was pressed or that ALT is pressed '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><comment type='BlockComment' content=' Ignore well known system keys '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK F4'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></entrie></entries></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><comment type='BlockComment' content=' Ignore repeating modifier keys by testing key down state '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK MENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK CAPITAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK NUMLOCK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK SCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0x40000000'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></value></expression><comment type='BlockComment' content=' Clear last key and last ascii because a new key has been typed '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastNull'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastDead'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></value></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='mapKey'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Bug in WinCE MapVirtualKey returns incorrect values The fix is to rely on a key mappings table to determine whether the key event must be sent now or if a WM CHAR event will follow The key mappings table maps virtual keys to SWT key codes and does not contain mappings for Windows virtual keys like VK A Virtual keys that are both virtual and ASCII are a special case '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='MapVirtualKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK BACK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='BS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK RETURN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK DELETE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK ESCAPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ESC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='numpadKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></right></value></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lastVirtual'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CharLower'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='mapKey'></name></expression><type type='PrimitiveType' specificType='SHORT'></type></argument></arguments></value></expression><comment type='BlockComment' content=' Convert LastKey to lower case because Windows non virtual keys that are also ASCII keys such as like VK A are have upper case values in WM SYSKEYDOWN despite the fact that the Shift was not pressed '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinNT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows 98 MapVirtualKey indicates that a WM SYSCHAR message will occur for Alt Enter but this message never happens The fix is to issue the event from WM SYSKEYDOWN and map VK RETURN to r '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK RETURN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='CharLiteralExpr' value=' r'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wParam'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK DELETE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='IntegerLiteralExpr' value='0x7F'></value></expression></thenStmt><comment type='BlockComment' content=' Feature in Windows The virtual key VK DELETE is not treated as both a virtual key and an ASCII key by Windows Therefore we will not receive a WM SYSCHAR for this key The fix is to treat VK DELETE as a special case and map the ASCII value explictly Delete is 0x7F '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='VK NUMPAD0'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VK DIVIDE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lastAscii'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='numpadKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lastKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></argument></arguments></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' When a keypad key is typed a WM SYSCHAR is not issued '></comment></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSKEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression><comment type='LineComment' content=' widget could be disposed at this point'></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmSysKeyDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmKeyUp'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmSysKeyUp'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='5'></elseExpr><thenExpr type='IntegerLiteralExpr' value='4'></thenExpr></initializer><name type='SimpleName' identifier='button'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Feature in Windows Windows sends the following messages when the user double clicks the mouse WM XBUTTONDOWN mouse down WM XBUTTONUP mouse up WM XLBUTTONDBLCLK double click WM XBUTTONUP mouse up Applications that expect matching mouse down up pairs will not see the second mouse down The fix is to send a mouse down event '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='button'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDoubleClick'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='button'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmXButtonDblClk'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='5'></elseExpr><thenExpr type='IntegerLiteralExpr' value='4'></thenExpr></initializer><name type='SimpleName' identifier='button'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='button'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmXButtonDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='5'></elseExpr><thenExpr type='IntegerLiteralExpr' value='4'></thenExpr></initializer><name type='SimpleName' identifier='button'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendMouseEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MouseUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='button'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='MK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK MBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK RBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON1'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MK XBUTTON2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmXButtonUp'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></type></types></root>
