<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='events'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Tracker'></name><comment type='JavadocComment' content=' Instances of this class implement rubber banding rectangles that are drawn onto a parent code Composite code or code Display code These rectangles can be specified to respond to mouse and key events by either moving or resizing themselves accordingly Trackers are typically used to represent window geometries in a lightweight manner dl dt b Styles b dt dd LEFT RIGHT UP DOWN RESIZE dd dt b Events b dt dd Move Resize dd dl p Note Rectangle move behavior is assumed unless RESIZE is specified p p IMPORTANT This class is em not em intended to be subclassed p '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='tracking'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='cancelled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='stippled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='rectangles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='proportions'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='bounds'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='resizeCursor'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='clientCursor'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></initializer><name type='SimpleName' identifier='cursorOrientation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='inEvent'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='oldProc'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='oldX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='oldY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' The following values mirror step sizes on Windows '></comment><modifiers><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='STEPSIZE SMALL'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='9'></initializer><name type='SimpleName' identifier='STEPSIZE LARGE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='checkStyle'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></argument></arguments></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='parent'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='parent'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Tracker'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a widget which will be the parent of the new instance cannot be null param style the style of widget to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT LEFT see SWT RIGHT see SWT UP see SWT DOWN see SWT RESIZE see Widget checkSubclass see Widget getStyle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getCurrent'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDefault'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isValidThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR THREAD INVALID ACCESS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='ThisExpr'></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='checkStyle'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='display'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Tracker'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given the display to create it on and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p p Note Currently null can be passed in for the display argument This has the effect of creating the tracker on the currently active display if there is one If there is no current display the tracker is created on a default display b Passing in null as the display argument is not considered to be good coding style and may not be supported in a future release of SWT b p param display the display to create the tracker on param style the style of control to construct exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT LEFT see SWT RIGHT see SWT UP see SWT DOWN '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Move'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addControlListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the control is moved or resized by sending it one of the messages defined in the code ControlListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ControlListener see removeControlListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ControlListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addKeyListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when keys are pressed and released on the system keyboard by sending it one of the messages defined in the code KeyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see KeyListener see removeKeyListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='KeyListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='newX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></initializer><name type='SimpleName' identifier='newY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='newX'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='newY'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ClientToScreen'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Convert to screen coordinates iff needed '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCursorPos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='adjustMoveCursor'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='newX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='newY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newX'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newX'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newX'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newY'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newY'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newY'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='newX'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='newY'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ClientToScreen'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Convert to screen coordinates iff needed '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCursorPos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='clientCursor'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='newCursor'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZEWE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZEWE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENWSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENWSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENESW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENESW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZEALL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DestroyCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' If the client has not provided a custom cursor then determine the appropriate resize cursor '></comment></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='adjustResizeCursor'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='style'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='style'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='checkStyle'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='close'></name><comment type='JavadocComment' content=' Stops displaying the tracker rectangles Note that this is not considered to be a cancelation by the user exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></initializer><name type='SimpleName' identifier='xMin'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></initializer><name type='SimpleName' identifier='yMin'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></right></initializer><name type='SimpleName' identifier='xMax'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></right></initializer><name type='SimpleName' identifier='yMax'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='xMin'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='xMin'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='yMin'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='yMin'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></right></initializer><name type='SimpleName' identifier='rectRight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='rectRight'></name></left><right type='NameExpr'><name type='SimpleName' identifier='xMax'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='xMax'></name></target><value type='NameExpr'><name type='SimpleName' identifier='rectRight'></name></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></right></initializer><name type='SimpleName' identifier='rectBottom'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='rectBottom'></name></left><right type='NameExpr'><name type='SimpleName' identifier='yMax'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='yMax'></name></target><value type='NameExpr'><name type='SimpleName' identifier='rectBottom'></name></value></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='xMin'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='yMin'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='xMax'></name></left><right type='NameExpr'><name type='SimpleName' identifier='xMin'></name></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='yMax'></name></left><right type='NameExpr'><name type='SimpleName' identifier='yMin'></name></right></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='computeBounds'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='result'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bounds'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='computeBounds'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='IntegerLiteralExpr' value='100'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='100'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></scope></left><right type='IntegerLiteralExpr' value='100'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='IntegerLiteralExpr' value='100'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='y'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='100'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></scope></left><right type='IntegerLiteralExpr' value='100'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type><name type='SimpleName' identifier='computeProportions'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='rects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='bandWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDesktopWindow'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hwndTrack'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwndTrack'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDCEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndTrack'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DCX CACHE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='hBitmap'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='hBrush'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='oldBrush'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='stippled'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='86'></expression></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='85'></value><value type='IntegerLiteralExpr' value='0'></value><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='86'></expression></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='85'></value><value type='IntegerLiteralExpr' value='0'></value><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='86'></expression></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='85'></value><value type='IntegerLiteralExpr' value='0'></value><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='86'></expression></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='85'></value><value type='IntegerLiteralExpr' value='0'></value></values></initializer><name type='SimpleName' identifier='bits'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hBitmap'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateBitmap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='8'></argument><argument type='IntegerLiteralExpr' value='8'></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bits'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hBrush'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreatePatternBrush'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hBitmap'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldBrush'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hBrush'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PatBlt'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='PATINVERT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PatBlt'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='PATINVERT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PatBlt'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='PATINVERT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PatBlt'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='PATINVERT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='stippled'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldBrush'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hBrush'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hBitmap'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndTrack'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='drawRectangles'></name><comment type='JavadocComment' content=' Draw the rectangles displayed by the tracker '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='rects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stippled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='length'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='result'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></initializer><name type='SimpleName' identifier='current'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type><name type='SimpleName' identifier='getRectangles'></name><comment type='JavadocComment' content=' Returns the bounds that are being drawn expressed relative to the parent widget If the parent is a code Display code then these are screen coordinates return the bounds of the Rectangles being drawn exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='stippled'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getStippled'></name><comment type='JavadocComment' content=' Returns code true code if the rectangles are drawn with a stippled line code false code otherwise return the stippled effect of the rectangles exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='xChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='xChange'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='xChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='xChange'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='yChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='yChange'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='yChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='yChange'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='xChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='yChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='xChange'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='yChange'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='xChange'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='yChange'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='moveRectangles'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='xChange'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='yChange'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></right></initializer><name type='SimpleName' identifier='vStyle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' If exactly one of UP DOWN is specified as a style then set the cursor orientation accordingly the same is done for LEFT RIGHT styles below '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='vStyle'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='vStyle'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='NameExpr'><name type='SimpleName' identifier='vStyle'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></right></initializer><name type='SimpleName' identifier='hStyle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hStyle'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hStyle'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='NameExpr'><name type='SimpleName' identifier='hStyle'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='hwndTransparent'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' If this tracker is being created without a mouse drag then we need to create a transparent window that fills the screen in order to get all mouse keyboard events that occur outside of our visible windows ie over the desktop '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='newProc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='mouseDown'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='mouseDown'></name></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SM CXSCREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SM CYSCREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwndTransparent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateWindowEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WS EX TRANSPARENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='windowClass'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WS POPUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WS VISIBLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='GetModuleHandle'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NullLiteralExpr'></argument></arguments></argument><argument type='NullLiteralExpr'></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldProc'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndTransparent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL WNDPROC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newProc'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type><arguments><argument type='ThisExpr'></argument><argument type='StringLiteralExpr' value='transparentProc'></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='newProc'></name></scope></initializer><name type='SimpleName' identifier='newProcAddress'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newProcAddress'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO MORE CALLBACKS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndTransparent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL WNDPROC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='newProcAddress'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='cursorPos'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='mouseDown'></name></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RESIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='adjustMoveCursor'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='adjustResizeCursor'></name></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></initializer><name type='SimpleName' identifier='pt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='POINT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetCursorPos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pt'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='pt'></name></scope></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldX'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldY'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></initializer><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></variable></variables></expression><comment type='BlockComment' content=' Tracker behaves like a Dialog with its own OS event loop '></comment></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='TranslateMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></expression></statement><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmMouse'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM IME CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmIMEChar'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmChar'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmKeyDown'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmKeyUp'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSCHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmSysChar'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSKEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmSysKeyDown'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSKEYUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmSysKeyUp'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYFIRST'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYLAST'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEFIRST'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSELAST'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM PAINT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DispatchMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM PAINT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='tracking'></name></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></expression></right></condition></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='mouseDown'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseCapture'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwndTransparent'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DestroyWindow'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndTransparent'></name></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Cleanup If a transparent window was created in order to capture events then destroy it and its callback object now '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newProc'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='newProc'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldProc'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DestroyCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Cleanup If this tracker was resizing then the last cursor that it created needs to be destroyed '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ReturnStmt'><expression type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></expression></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='open'></name><comment type='JavadocComment' content=' Displays the Tracker rectangles for manipulation by the user Returns when the user has either finished manipulating the rectangles or has cancelled the Tracker return code true code if the user did not cancel the Tracker code false code otherwise exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Move'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeControlListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the control is moved or resized param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ControlListener see addControlListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ControlListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyUp'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeKeyListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when keys are pressed and released on the system keyboard param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see KeyListener see addKeyListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='KeyListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='xChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' If the cursor orientation has not been set in the orientation of this change then try to set it here '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='xChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='yChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='yChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='xChange'></name></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='xChange'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='proportions'></name></name></initializer><name type='SimpleName' identifier='proportion'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='100'></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='xChange'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='xChange'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='proportions'></name></name></initializer><name type='SimpleName' identifier='proportion'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='100'></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' If the bounds will flip about the x or y axis then apply the adjustment up to the axis ie where bounds width height becomes 0 change the cursor s orientation accordingly and flip each Rectangle s origin only necessary for 1 Rectangles '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='yChange'></name></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='yChange'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='proportions'></name></name></initializer><name type='SimpleName' identifier='proportion'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='100'></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='yChange'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='yChange'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='proportions'></name></name></initializer><name type='SimpleName' identifier='proportion'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='100'></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportions'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='xChange'></name></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='xChange'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='xChange'></name></value></expression></statement></statements></thenStmt><comment type='LineComment' content=' apply the bounds adjustment'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='cursorOrientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='yChange'></name></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='yChange'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='yChange'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='newRects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='proportions'></name></name></initializer><name type='SimpleName' identifier='proportion'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='newRects'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></left><right type='IntegerLiteralExpr' value='100'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></argument><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></left><right type='IntegerLiteralExpr' value='100'></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></argument><argument type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></left><right type='IntegerLiteralExpr' value='100'></right></argument><argument type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='proportion'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='bounds'></name></scope></right></left><right type='IntegerLiteralExpr' value='100'></right></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newRects'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='resizeRectangles'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='xChange'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='yChange'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='clientCursor'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='clientCursor'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='newCursor'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='clientCursor'></name></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setCursor'></name><comment type='JavadocComment' content=' Sets the code Cursor code of the Tracker If this cursor is code null code then the cursor reverts to the default param newCursor the new code Cursor code to display exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='newCursor'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Cursor'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='rectangles'></name><scope type='ThisExpr'></scope></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></initializer><name type='SimpleName' identifier='current'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='current'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='rectangles'></name><scope type='ThisExpr'></scope></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='proportions'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='computeProportions'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument></arguments></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setRectangles'></name><comment type='JavadocComment' content=' Specifies the rectangles that should be drawn expressed relative to the parent widget If the parent is a Display then these are screen coordinates param rectangles the bounds of the rectangles to be drawn exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the set of rectangles is null or contains a null rectangle li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='rectangles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stippled'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='stippled'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setStippled'></name><comment type='JavadocComment' content=' Changes the appearance of the line used to draw the rectangles param stippled code true code if rectangle should appear stippled exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stippled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='msg'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='BlockComment' content=' We typically do not want to answer that the transparent window is transparent to hits since doing so negates the effect of having it to grab events However clients of the tracker should not be aware of this transparent window Therefore if there is a hit query performed as a result of client code then answer that the transparent window is transparent to hits so that its existence will not impact the client '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM NCHITTEST'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='HTTRANSPARENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SETCURSOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='clientCursor'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='clientCursor'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='1'></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='resizeCursor'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='1'></expression></statement></statements></thenStmt></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='transparentProc'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></initializer><name type='SimpleName' identifier='shell'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Shell'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name><scope type='NameExpr'><name type='SimpleName' identifier='shell'></name></scope><arguments><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='update'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='wmKeyDown'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIRRORED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></initializer><name type='SimpleName' identifier='isMirrored'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='STEPSIZE LARGE'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='STEPSIZE SMALL'></name></thenExpr></initializer><name type='SimpleName' identifier='stepSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='xChange'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='yChange'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK ESCAPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK RETURN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='xChange'></name></target><value type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='isMirrored'></name></condition><elseExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='stepSize'></name></expression></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='stepSize'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='xChange'></name></target><value type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='isMirrored'></name></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='stepSize'></name></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='stepSize'></name></expression></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='yChange'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='stepSize'></name></expression></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='yChange'></name></target><value type='NameExpr'><name type='SimpleName' identifier='stepSize'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='xChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='yChange'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></initializer><name type='SimpleName' identifier='oldRectangles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='stippled'></name></initializer><name type='SimpleName' identifier='oldStippled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='rectsToErase'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></initializer><name type='SimpleName' identifier='current'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='oldX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='xChange'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='oldY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='yChange'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='cursorPos'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RESIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='moveRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='xChange'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='yChange'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Move'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible but unlikely that application code could have disposed the widget in the move event If this happens return false to indicate that the tracking has failed '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='draw'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldRectangles'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible that application code could have changed the rectangles in the move event If this happens then only redraw the tracker if the rectangle values have changed '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='draw'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldStippled'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='adjustMoveCursor'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resizeRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='xChange'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='yChange'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible but unlikely that application code could have disposed the widget in the resize event If this happens return false to indicate that the tracking has failed '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='draw'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldRectangles'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible that application code could have changed the rectangles in the resize event If this happens then only redraw the tracker if the rectangle values have changed '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='draw'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldStippled'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='adjustResizeCursor'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldX'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldY'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmKeyDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='wmSysKeyDown'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmSysKeyDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIRRORED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></initializer><name type='SimpleName' identifier='isMirrored'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetMessagePos'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='newPos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='newPos'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></initializer><name type='SimpleName' identifier='newX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='newPos'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></initializer><name type='SimpleName' identifier='newY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldX'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldY'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></initializer><name type='SimpleName' identifier='oldRectangles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='stippled'></name></initializer><name type='SimpleName' identifier='oldStippled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='rectsToErase'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></initializer><name type='SimpleName' identifier='current'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='current'></name></scope></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='newX'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='newY'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RESIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isMirrored'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='moveRectangles'></name><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldX'></name></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldY'></name></right></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='moveRectangles'></name><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='oldX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newX'></name></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldY'></name></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Move'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible but unlikely that application code could have disposed the widget in the move event If this happens return false to indicate that the tracking has failed '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='draw'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldRectangles'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible that application code could have changed the rectangles in the move event If this happens then only redraw the tracker if the rectangle values have changed '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='draw'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldStippled'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isMirrored'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resizeRectangles'></name><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldX'></name></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldY'></name></right></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resizeRectangles'></name><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='oldX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newX'></name></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldY'></name></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inEvent'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cancelled'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible but unlikely that application code could have disposed the widget in the resize event If this happens return false to indicate that the tracking has failed '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='draw'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldRectangles'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='draw'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' It is possible that application code could have changed the rectangles in the resize event If this happens then only redraw the tracker if the rectangle values have changed '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='draw'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectsToErase'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldStippled'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='update'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rectangles'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stippled'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='adjustResizeCursor'></name></initializer><name type='SimpleName' identifier='cursorPos'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newX'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newY'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursorPos'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldX'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newX'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldY'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newY'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='message'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmMouse'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='message'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
