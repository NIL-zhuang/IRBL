<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' A Variant is a generic OLE mechanism for passing data of different types via a common interface p It is used within the OleAutomation object for getting a property setting a property or invoking a method on an OLE Control or OLE Document '></comment><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' A variant always takes up 16 bytes no matter what you store in it Objects strings and arrays are not physically stored in the Variant in these cases four bytes of the Variant are used to hold either an object reference or a pointer to the string or array The actual data are stored elsewhere '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='16'></initializer><name type='SimpleName' identifier='sizeof'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' OLE VT type'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='SHORT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='booleanData'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='floatData'></name><type type='PrimitiveType' specificType='FLOAT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='intData'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='shortData'></name><type type='PrimitiveType' specificType='SHORT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='stringData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='byRefPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='dispatchData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='unknownData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IUnknown'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create an empty Variant object with type VT EMPTY since 2 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='floatData'></name></target><value type='NameExpr'><name type='SimpleName' identifier='val'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents a ava float as a VT R4 param val the ava float value that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='intData'></name></target><value type='NameExpr'><name type='SimpleName' identifier='val'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents a ava int as a VT I4 param val the ava int value that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='NameExpr'><name type='SimpleName' identifier='byRefType'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which contains a reference to the data being transferred p When creating a VT BYREF Variant you must give the full Variant type including VT BYREF such as pre code short byRefType OLE VT BSTR OLE VT BYREF code pre param ptr a pointer to the data being transferred param byRefType the type of the data being transferred such as OLE VT BSTR OLE VT BYREF '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='byRefType'></name><type type='PrimitiveType' specificType='SHORT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='automation'></name></scope></argument></arguments></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents an IDispatch interface as a VT Dispatch param automation the OleAutomation object that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='automation'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleAutomation'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></target><value type='NameExpr'><name type='SimpleName' identifier='idispatch'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents an IDispatch interface as a VT Dispatch p The caller is expected to have appropriately invoked unknown AddRef before creating this Variant since 2 0 param idispatch the IDispatch object that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='idispatch'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></target><value type='NameExpr'><name type='SimpleName' identifier='unknown'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents an IUnknown interface as a VT UNKNOWN p The caller is expected to have appropriately invoked unknown AddRef before creating this Variant param unknown the IUnknown object that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='unknown'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IUnknown'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stringData'></name></target><value type='NameExpr'><name type='SimpleName' identifier='string'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents a ava String as a VT BSTR param string the ava String value that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='shortData'></name></target><value type='NameExpr'><name type='SimpleName' identifier='val'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents a ava short as a VT I2 param val the ava short value that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='SHORT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='booleanData'></name></target><value type='NameExpr'><name type='SimpleName' identifier='val'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Variant'></name><comment type='JavadocComment' content=' Create a Variant object which represents a ava boolean as a VT BOOL param val the ava boolean value that this Variant represents '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='type'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></scope></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></scope></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Calling dispose will release resources associated with this Variant If the resource is an IDispatch or IUnknown interface Release will be called If the resource is a ByRef pointer nothing is released since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleAutomation'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression><comment type='LineComment' content=' Note This must absolutely be done AFTER the '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression><comment type='LineComment' content=' Dispatch object'></comment></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='autoVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='autoVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getAutomation'></name><scope type='NameExpr'><name type='SimpleName' identifier='autoVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleAutomation'></name></type><name type='SimpleName' identifier='getAutomation'></name><comment type='JavadocComment' content=' Returns the OleAutomation object represented by this Variant p If this Variant does not contain an OleAutomation object an attempt is made to coerce the Variant type into an OleAutomation object If this fails an error is thrown Note that OleAutomation objects must be disposed when no longer needed return the OleAutomation object represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into an OleAutomation object li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression><comment type='LineComment' content=' Note This must absolutely be done AFTER the '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression><comment type='LineComment' content=' Dispatch object'></comment></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='autoVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='autoVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getDispatch'></name><scope type='NameExpr'><name type='SimpleName' identifier='autoVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type><name type='SimpleName' identifier='getDispatch'></name><comment type='JavadocComment' content=' Returns the IDispatch object represented by this Variant p If this Variant does not contain an IDispatch object an attempt is made to coerce the Variant type into an IDIspatch object If this fails an error is thrown since 2 0 return the IDispatch object represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into an IDispatch object li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='booleanData'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='boolVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='boolVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getBoolean'></name><scope type='NameExpr'><name type='SimpleName' identifier='boolVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getBoolean'></name><comment type='JavadocComment' content=' Returns the ava boolean represented by this Variant p If this Variant does not contain a ava boolean an attempt is made to coerce the Variant type into a ava boolean If this fails an error is thrown return the ava boolean represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into a boolean li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getByRef'></name><comment type='JavadocComment' content=' Returns a pointer to the referenced data represented by this Variant p If this Variant does not contain a reference to data zero is returned return a pointer to the referenced data represented by this Variant or 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR OUT OF MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantInit'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='type'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='booleanData'></name></inner></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT TRUE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></thenExpr></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='FLOAT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='floatData'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='intData'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='shortData'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='stringData'></name></left><right type='StringLiteralExpr' value=' 0'></right></inner></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysAllocString'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></entrie></entries></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getData'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pData'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='floatData'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='floatVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='floatVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getFloat'></name><scope type='NameExpr'><name type='SimpleName' identifier='floatVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='PrimitiveType' specificType='FLOAT'></type><name type='SimpleName' identifier='getFloat'></name><comment type='JavadocComment' content=' Returns the ava float represented by this Variant p If this Variant does not contain a ava float an attempt is made to coerce the Variant type into a ava float If this fails an error is thrown return the ava float represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into a float li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='intData'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='intVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='intVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='intVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getInt'></name><comment type='JavadocComment' content=' Returns the ava int represented by this Variant p If this Variant does not contain a ava int an attempt is made to coerce the Variant type into a ava int If this fails an error is thrown return the ava int represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into a int li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='shortData'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='shortVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='shortVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='shortVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='PrimitiveType' specificType='SHORT'></type><name type='SimpleName' identifier='getShort'></name><comment type='JavadocComment' content=' Returns the ava short represented by this Variant p If this Variant does not contain a ava short an attempt is made to coerce the Variant type into a ava short If this fails an error is thrown return the ava short represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into a short li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='stringData'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='stringVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='stringVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='stringVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getString'></name><comment type='JavadocComment' content=' Returns the ava String represented by this Variant p If this Variant does not contain a ava String an attempt is made to coerce the Variant type into a ava String If this fails an error is thrown return the ava String represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into a String li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='type'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='SHORT'></type><name type='SimpleName' identifier='getType'></name><comment type='JavadocComment' content=' Returns the type of the variant type This will be an OLE VT value or a bitwise combination of OLE VT values as in the case of OLE VT BSTR OLE VT BYREF return the type of the variant data since 2 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try to coerce the value to the desired type'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='sizeof'></name></argument></arguments></initializer><name type='SimpleName' identifier='newPtr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression><comment type='LineComment' content=' Note This must absolutely be done AFTER the '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression><comment type='LineComment' content=' Dispatch object'></comment></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPtr'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></initializer><name type='SimpleName' identifier='unknownVar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Variant'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='unknownVar'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPtr'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getUnknown'></name><scope type='NameExpr'><name type='SimpleName' identifier='unknownVar'></name></scope></expression></statement></statements></tryBlock></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IUnknown'></name></type><name type='SimpleName' identifier='getUnknown'></name><comment type='JavadocComment' content=' Returns the IUnknown object represented by this Variant p If this Variant does not contain an IUnknown object an attempt is made to coerce the Variant type into an IUnknown object If this fails an error is thrown return the IUnknown object represented by this Variant exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant can not be coerced into an IUnknown object li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='val'></name></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT TRUE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></thenExpr></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setByRef'></name><comment type='JavadocComment' content=' Update the by reference value of this variant with a new boolean value param val the new boolean value exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant is not a VT BYREF VT BOOL object li ul since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='FLOAT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='val'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setByRef'></name><comment type='JavadocComment' content=' Update the by reference value of this variant with a new float value param val the new float value exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant is not a VT BYREF VT R4 object li ul since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='val'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setByRef'></name><comment type='JavadocComment' content=' Update the by reference value of this variant with a new integer value param val the new integer value exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant is not a VT BYREF VT I4 object li ul since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CHANGE VARIANT TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='val'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setByRef'></name><comment type='JavadocComment' content=' Update the by reference value of this variant with a new short value param val the new short value exception SWTException ul li ERROR CANNOT CHANGE VARIANT TYPE when type of Variant is not a VT BYREF VT I2 object ul since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='SHORT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='dataType'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='dataType'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='dataType'></name></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newByRefPtr'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newByRefPtr'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='newByRefPtr'></name></name></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='type'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newBooleanData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newBooleanData'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='booleanData'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='newBooleanData'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VARIANT FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='FLOAT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newFloatData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='FLOAT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newFloatData'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='floatData'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='newFloatData'></name></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newIntData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newIntData'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='intData'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='newIntData'></name></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDispatch'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></scope></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IUnknown'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></scope></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newShortData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newShortData'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='shortData'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='newShortData'></name></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='hMem'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='LineComment' content=' get the address of the memory in which the string resides'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMem'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pData'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='hMem'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='type'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysStringByteLen'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='hMem'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' of bytes each unicode character is 2 bytes '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stringData'></name></target><value type='StringLiteralExpr' value=''></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression><comment type='LineComment' content=' add one to avoid rounding errors'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='hMem'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stringData'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='Variant'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='newPData'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' try coercing it into one of the known forms'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='VariantChangeType'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pData'></name></argument><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='SHORT'></type></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument></arguments></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument></arguments></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VariantClear'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPData'></name></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setData'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pData'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='type'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BOOL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT BOOL '></left><right type='NameExpr'><name type='SimpleName' identifier='booleanData'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I2'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT I2 '></left><right type='NameExpr'><name type='SimpleName' identifier='shortData'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT I4 '></left><right type='NameExpr'><name type='SimpleName' identifier='intData'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT R4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT R4 '></left><right type='NameExpr'><name type='SimpleName' identifier='floatData'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT BSTR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT BSTR '></left><right type='NameExpr'><name type='SimpleName' identifier='stringData'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT DISPATCH '></left><right type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='dispatchData'></name></scope></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></inner></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT UNKNOWN '></left><right type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='unknownData'></name></scope></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></inner></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='VT EMPTY'></expression></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='VT BYREF '></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='VT BYREF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></right></inner></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='NameExpr'><name type='SimpleName' identifier='byRefPtr'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Unsupported Type '></left><right type='NameExpr'><name type='SimpleName' identifier='type'></name></right></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the event '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
