<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Compatibility'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='FontDialog'></name><comment type='JavadocComment' content=' Instances of this class allow the user to select a font from all available fonts in the system dl dt b Styles b dt dd none dd dt b Events b dt dd none dd dl p IMPORTANT This class is intended to be subclassed em only em within the SWT implementation p '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Dialog'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='fontData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='rgb'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='PRIMARY MODAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></statement></statements></body><name type='SimpleName' identifier='FontDialog'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given only its parent param parent a shell which will be the parent of the new instance exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Shell'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkSubclass'></name></expression></statement></statements></body><name type='SimpleName' identifier='FontDialog'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a shell which will be the parent of the new instance param style the style of dialog to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Shell'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='fontData'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></type><name type='SimpleName' identifier='getFontData'></name><comment type='JavadocComment' content=' Returns a FontData object describing the font that was selected in the dialog or null if none is available return the FontData for the selected font or null deprecated use getFontList '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fontData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='result'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='fontData'></name></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type><name type='SimpleName' identifier='getFontList'></name><comment type='JavadocComment' content=' Returns a FontData set describing the font that was selected in the dialog or null if none is available return the FontData for the selected font or null since 2 1 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='rgb'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><name type='SimpleName' identifier='getRGB'></name><comment type='JavadocComment' content=' Returns the currently selected color in the receiver return the RGB value for the selected color may be null see PaletteData getRGBs since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='hwndOwner'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Get the owner HWND for the dialog '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwndOwner'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Open the dialog '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='CHOOSEFONT'></name></type></initializer><name type='SimpleName' identifier='lpcf'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='CHOOSEFONT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lStructSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='CHOOSEFONT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwndOwner'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hwndOwner'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='Flags'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='CF SCREENFONTS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CF EFFECTS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='LOGFONT'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='lpLogFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fontData'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='fontData'></name></scope></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='fontData'></name></scope></initializer><name type='SimpleName' identifier='logFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></initializer><name type='SimpleName' identifier='lfHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='MethodCallExpr'><name type='SimpleName' identifier='round'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='fontData'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOGPIXELSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></right></argument><argument type='IntegerLiteralExpr' value='72'></argument></arguments></expression></initializer><name type='SimpleName' identifier='pixels'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='pixels'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='Flags'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CF INITTOLOGFONTSTRUCT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpLogFont'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='LOGFONT'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='lfHeight'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lpLogFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='lpLogFont'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rgb'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='IntegerLiteralExpr' value='0xFF'></right></initializer><name type='SimpleName' identifier='red'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF00'></right></initializer><name type='SimpleName' identifier='green'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF0000'></right></initializer><name type='SimpleName' identifier='blue'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='rgbColors'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='red'></name></left><right type='NameExpr'><name type='SimpleName' identifier='green'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='blue'></name></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='oldModal'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Shell'></name></type></variable></variables></expression><comment type='BlockComment' content=' Make the parent shell be temporary modal '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='APPLICATION MODAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SYSTEM MODAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldModal'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getModalDialogShell'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setModalDialogShell'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='ChooseFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></argument></arguments></initializer><name type='SimpleName' identifier='success'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression><comment type='BlockComment' content=' Open the dialog '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='APPLICATION MODAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SYSTEM MODAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setModalDialogShell'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldModal'></name></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Clear the temporary dialog modal parent '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='success'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></thenExpr></initializer><name type='SimpleName' identifier='logFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpLogFont'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='LOGFONT'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' This will not work on multiple screens or for printing Should use DC for the proper device '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOGPIXELSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='logPixelsY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='pixels'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixels'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='CreateFontIndirect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument></arguments></initializer><name type='SimpleName' identifier='hFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Feature in Windows If the lfHeight of the LOGFONT structure is positive the lfHeight measures the height of the entire cell including internal leading in logical units Since the height of a font in points does not include the internal leading we must subtract the internal leading which requires a TEXTMETRIC which in turn requires font creation '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hFont'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></thenExpr></initializer><name type='SimpleName' identifier='lptm'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetTextMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lptm'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldFont'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hFont'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixels'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='round'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='pixels'></name></left><right type='IntegerLiteralExpr' value='72'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='logPixelsY'></name></argument></arguments></initializer><name type='SimpleName' identifier='points'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fontData'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='FontData'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='points'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='rgbColors'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></left><right type='IntegerLiteralExpr' value='0xFF'></right></initializer><name type='SimpleName' identifier='red'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='rgbColors'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></initializer><name type='SimpleName' identifier='green'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='rgbColors'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpcf'></name></scope></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></initializer><name type='SimpleName' identifier='blue'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgb'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='red'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='green'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='blue'></name></argument></arguments></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Compute the result '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lpLogFont'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpLogFont'></name></argument></arguments></expression></thenStmt><comment type='BlockComment' content=' Free the OS memory '></comment></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='success'></name></expression></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='fontData'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></type><name type='SimpleName' identifier='open'></name><comment type='JavadocComment' content=' Makes the dialog visible and brings it to the front of the display return a FontData object describing the font that was selected or null if the dialog was cancelled or an error occurred exception SWTException ul li ERROR WIDGET DISPOSED if the dialog has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the dialog li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fontData'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='fontData'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setFontData'></name><comment type='JavadocComment' content=' Sets a FontData object describing the font to be selected by default in the dialog or null to let the platform choose one param fontData the FontData to use initially or null deprecated use setFontList FontData '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fontData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fontData'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='fontData'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fontData'></name><scope type='ThisExpr'></scope></target><value type='NullLiteralExpr'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fontData'></name><scope type='ThisExpr'></scope></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='fontData'></name></name></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setFontList'></name><comment type='JavadocComment' content=' Sets a set of FontData objects describing the font to be selected by default in the dialog or null to let the platform choose one param fontData the set of FontData objects to use initially or null since 2 1 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fontData'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='rgb'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='rgb'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setRGB'></name><comment type='JavadocComment' content=' Sets the receiver s selected color to be the argument param rgb the new RGB value for the selected color may be null to let the platform to select a default when open is called see PaletteData getRGBs since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='rgb'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
