<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Vector'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='OleFrame'></name><comment type='JavadocComment' content=' OleFrame is an OLE Container s top level frame p This object implements the OLE Interfaces IUnknown and IOleInPlaceFrame p OleFrame allows the container to do the following ul li position and size the ActiveX Control or OLE Document within the application li insert menu items from the application into the OLE Document s menu li activate and deactivate the OLE Document s menus li position the OLE Document s menu in the application li translate accelerator keystrokes intended for the container s frame ul dl dt b Styles b dd BORDER dt b Events b dd Dispose Move Resize dl '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='LineComment' content=' Interfaces for this Ole Client Container'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='iUnknown'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='iOleInPlaceFrame'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' Access to the embedded linked Ole Object '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOleInPlaceActiveObject'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='currentdoc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='refCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='fileMenuItems'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='containerMenuItems'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='windowMenuItems'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='OLE CHECK FOCUS'></initializer><name type='SimpleName' identifier='CHECK FOCUS'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='OLE HHOOK'></initializer><name type='SimpleName' identifier='HHOOK'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='OLE HHOOK MSG'></initializer><name type='SimpleName' identifier='HHOOKMSG'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><comment type='LineComment' content=' set up widget attributes'></comment><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument><argument type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CLIP CHILDREN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CLIP SIBLINGS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></argument></arguments></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='createCOMInterfaces'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='listener'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='onDispose'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Move'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='onResize'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></entrie></entries></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='handleEvent'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></value></expression><comment type='LineComment' content=' setup cleanup proc'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression><comment type='LineComment' content=' inform inplaceactiveobject whenever frame resizes'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Move'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression><comment type='LineComment' content=' inform inplaceactiveobject whenever frame moves'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='ThisExpr'></scope></expression><comment type='LineComment' content=' with them '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression><comment type='LineComment' content=' Check for focus change'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='initCheckFocus'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='display'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='initMsgHook'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='display'></name></argument></arguments></expression></statement></statements></body><name type='SimpleName' identifier='OleFrame'></name><comment type='JavadocComment' content=' Create an OleFrame child widget using style bits to select a particular look or set of properties param parent a composite widget cannot be null param style the bitwise OR ing of widget styles exception IllegalArgumentException ul li ERROR NULL ARGUMENT when the parent is null ul exception SWTException ul li ERROR THREAD INVALID ACCESS when called from the wrong thread ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='CHECK FOCUS'></name></argument></arguments></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='CHECK FOCUS'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='CHECK FOCUS'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='50'></initializer><name type='SimpleName' identifier='time'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='timer'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='lastFocus'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='timer'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='InstanceOfExpr'><expression type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetFocus'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' ignore popup menus and dialogs'></comment></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindow'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GW OWNER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='ownerHwnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='ownerHwnd'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='timerExec'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='time'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='timer'></name></name></argument></arguments></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></value></expression></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></scope></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isFocusControl'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getFocusControl'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></initializer><name type='SimpleName' identifier='currentFocus'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleFrame'></name></type></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleFrame'></name></type></initializer><name type='SimpleName' identifier='frame'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleFrame'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getCurrentDocument'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='InstanceOfExpr'><expression type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FocusOut'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><scope type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FocusIn'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lastFocus'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='currentFocus'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='timerExec'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='time'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='timer'></name></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='timerExec'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='time'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='timer'></name></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='initCheckFocus'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='HHOOK'></name></argument></arguments></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type><arguments><argument type='ClassExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleFrame'></name></type></argument><argument type='StringLiteralExpr' value='getMsgProc'></argument><argument type='IntegerLiteralExpr' value='3'></argument></arguments></initializer><name type='SimpleName' identifier='callback'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='callback'></name></scope></initializer><name type='SimpleName' identifier='address'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='address'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO MORE CALLBACKS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetCurrentThreadId'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='threadId'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowsHookEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WH GETMESSAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='address'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='threadId'></name></argument></arguments></initializer><name type='SimpleName' identifier='hHook'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHook'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='callback'></name></scope></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='HHOOK'></name></argument><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHook'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setData'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='HHOOKMSG'></name></argument><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeExec'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHook'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='UnhookWindowsHookEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHook'></name></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='callback'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='callback'></name></scope></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='initMsgHook'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getCurrent'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='HHOOK'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type></initializer><name type='SimpleName' identifier='hHook'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHook'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallNextHookEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='intValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='hHook'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getData'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='HHOOKMSG'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></initializer><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='MSG'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></initializer><name type='SimpleName' identifier='message'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYFIRST'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='message'></name></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='message'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYLAST'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='widget'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></initializer><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='widget'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='findWidget'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='widget'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument></arguments></value></expression></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='widget'></name></left><right type='NullLiteralExpr'></right></left><right type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='widget'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='widget'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></initializer><name type='SimpleName' identifier='site'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='consumed'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowThreadProcessId'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></argument><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='thread'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Allow activeX control to translate accelerators except when a menu is active '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUITHREADINFO'></name></type></initializer><name type='SimpleName' identifier='lpgui'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUITHREADINFO'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cbSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpgui'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='GUITHREADINFO'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetGUIThreadInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='thread'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpgui'></name></argument></arguments></initializer><name type='SimpleName' identifier='rc'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GUI INMENUMODE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GUI INMOVESIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GUI POPUPMENUMODE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GUI SYSTEMMENUMODE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='rc'></name></expression></left><right type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='flags'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpgui'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='frame'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope></initializer><name type='SimpleName' identifier='frame'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleFrame'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='consumed'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOleAccelerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='consumed'></name></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></initializer><name type='SimpleName' identifier='hwndOld'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='site'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='consumed'></name></target><value type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='DispatchMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hwndOld'></name></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Allow OleClientSite to process key events before activeX control '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='consumed'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='message'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='WM NULL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression><comment type='LineComment' content=' by the application zero out message wParam and lParam'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='wParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lParam'></name><scope type='NameExpr'><name type='SimpleName' identifier='msg'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='MSG'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallNextHookEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='intValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='hHook'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getMsgProc'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='AddRef'></name><comment type='JavadocComment' content=' Increment the count of references to this instance return the current reference count '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='ContextSensitiveHelp'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fEnterMode'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iUnknown'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method0'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method1'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method2'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod></anonymousClassBody><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' Create each of the interfaces that this object implements'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method0'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method1'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method2'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetWindow'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method3'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ContextSensitiveHelp'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method4'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetBorder'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method5'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='RequestBorderSpace'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method6'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetBorderSpace'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method7'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetActiveObject'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method8'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='InsertMenus'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method9'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetMenu'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method10'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='RemoveMenus'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method11'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='TranslateAccelerator'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method14'></name><comment type='LineComment' content=' method13 EnableModeless not implemented'></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod></anonymousClassBody><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='2'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='createCOMInterfaces'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iUnknown'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='iUnknown'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iUnknown'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='disposeCOMInterfaces'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lprectBorder'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt><comment type='BlockComment' content=' The IOleInPlaceUIWindow GetBorder function when called on a document or frame window object returns the outer rectangle relative to the window where the object can put toolbars or similar controls '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rectBorder'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClientRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rectBorder'></name></argument></arguments></expression><comment type='LineComment' content=' Coordinates must be relative to the window'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lprectBorder'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rectBorder'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='RECT'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='GetBorder'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lprectBorder'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='containerMenuItems'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type><name type='SimpleName' identifier='getContainerMenus'></name><comment type='JavadocComment' content=' Returns the application menu items that will appear in the Container location when an OLE Document is in place activated p When an OLE Document is in place active the Document provides its own menus but the application is given the opportunity to merge some of its menus into the menubar The application is allowed to insert its menus in three locations File far left Container middle and Window far right just before Help The OLE Document retains control of the Edit Object and Help menu locations Note that an application can insert more than one menu into a single location return the application menu items that will appear in the Container location when an OLE Document is in place activated '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='fileMenuItems'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type><name type='SimpleName' identifier='getFileMenus'></name><comment type='JavadocComment' content=' Returns the application menu items that will appear in the File location when an OLE Document is in place activated p When an OLE Document is in place active the Document provides its own menus but the application is given the opportunity to merge some of its menus into the menubar The application is allowed to insert its menus in three locations File far left Container middle and Window far right just before Help The OLE Document retains control of the Edit Object and Help menu locations Note that an application can insert more than one menu into a single location return the application menu items that will appear in the File location when an OLE Document is in place activated '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getIOleInPlaceFrame'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MENUITEMINFO'></name></type></initializer><name type='SimpleName' identifier='lpmii'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MENUITEMINFO'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cbSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='MENUITEMINFO'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM STATE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM SUBMENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM ID'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetMenuItemInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fState'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MF POPUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MF POPUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='id'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='wID'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='id'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='hSubMenu'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='id'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getMenuItemID'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hMenu'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='phwnd'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='phwnd'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='handle'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='GetWindow'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='phwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='windowMenuItems'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type><name type='SimpleName' identifier='getWindowMenus'></name><comment type='JavadocComment' content=' Returns the application menu items that will appear in the Window location when an OLE Document is in place activated p When an OLE Document is in place active the Document provides its own menus but the application is given the opportunity to merge some of its menus into the menubar The application is allowed to insert its menus in three locations File far left Container middle and Window far right just before Help The OLE Document retains control of the Edit Object and Help menu locations Note that an application can insert more than one menu into a single location return the application menu items that will appear in the Window location when an OLE Document is in place activated '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuBar'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name></scope></initializer><name type='SimpleName' identifier='menubar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Menu'></name></type></variable></variables></expression><comment type='LineComment' content=' locate menu bar'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='menubar'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpMenuWidths'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></initializer><name type='SimpleName' identifier='hMenu'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MENUITEMINFO'></name></type></initializer><name type='SimpleName' identifier='lpmii'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MENUITEMINFO'></name></type></variable></variables></expression><comment type='LineComment' content=' the OS and the OS will fill in the requested information for each menu '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='128'></initializer><name type='SimpleName' identifier='cch'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='cch'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='TCHAR'></name></scope></right></initializer><name type='SimpleName' identifier='byteCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='byteCount'></name></argument></arguments></initializer><name type='SimpleName' identifier='pszText'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cbSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='MENUITEMINFO'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM STATE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM ID'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM TYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM SUBMENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIIM DATA'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dwTypeData'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='pszText'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cch'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='cch'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='fileMenuCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' item from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='newindex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fileMenuItems'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='fileMenuItems'></name><scope type='ThisExpr'></scope></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cch'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='cch'></name></value></expression><comment type='LineComment' content=' lpmii cch gets updated by GetMenuItemInfo to indicate the '></comment></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='GetMenuItemInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='InsertMenuItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newindex'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='fileMenuCount'></name></expression></expression><comment type='LineComment' content=' keep track of the number of items'></comment></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='newindex'></name></expression></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='LineComment' content=' before each call '></comment></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='fileMenuItems'></name><scope type='ThisExpr'></scope></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpMenuWidths'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='fileMenuCount'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression><comment type='LineComment' content=' copy the menu item count information to the pointer'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='containerMenuCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' item from the OS '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='containerMenuItems'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='containerMenuItems'></name><scope type='ThisExpr'></scope></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cch'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='cch'></name></value></expression><comment type='LineComment' content=' lpmii cch gets updated by GetMenuItemInfo to indicate the '></comment></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='GetMenuItemInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='InsertMenuItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newindex'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='containerMenuCount'></name></expression></expression><comment type='LineComment' content=' keep track of the number of items'></comment></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='newindex'></name></expression></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='LineComment' content=' before each call '></comment></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='containerMenuItems'></name><scope type='ThisExpr'></scope></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lpMenuWidths'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='containerMenuCount'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression><comment type='LineComment' content=' copy the menu item count information to the pointer'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='windowMenuCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' item from the OS '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='windowMenuItems'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='windowMenuItems'></name><scope type='ThisExpr'></scope></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cch'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='cch'></name></value></expression><comment type='LineComment' content=' lpmii cch gets updated by GetMenuItemInfo to indicate the '></comment></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='GetMenuItemInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='InsertMenuItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newindex'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmii'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='windowMenuCount'></name></expression></expression><comment type='LineComment' content=' keep track of the number of items'></comment></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='newindex'></name></expression></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='LineComment' content=' before each call '></comment></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='windowMenuItems'></name><scope type='ThisExpr'></scope></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lpMenuWidths'></name></left><right type='IntegerLiteralExpr' value='16'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='windowMenuCount'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression><comment type='LineComment' content=' copy the menu item count information to the pointer'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pszText'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszText'></name></argument></arguments></expression></thenStmt><comment type='LineComment' content=' free resources used in querying the OS'></comment></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='InsertMenus'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hmenuShared'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lpMenuWidths'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseObjectInterfaces'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentdoc'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='ThisExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Resize'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Move'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='onDispose'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='lpRect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClientRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ResizeBorder'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></scope></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='onResize'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='riid'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt><comment type='LineComment' content=' implements IUnknown IOleInPlaceFrame IOleContainer IOleInPlaceUIWindow'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></initializer><name type='SimpleName' identifier='guid'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='riid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='GUID'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIUnknown'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIOleInPlaceFrame'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E NOINTERFACE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='QueryInterface'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='riid'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ppvObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='refCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeCOMInterfaces'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CoFreeUnusedLibraries'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Release'></name><comment type='JavadocComment' content=' Decrement the count of references to this instance return the current reference count '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseObjectInterfaces'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuBar'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name></scope></initializer><name type='SimpleName' identifier='menubar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Menu'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='menubar'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></initializer><name type='SimpleName' identifier='hMenu'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></initializer><name type='SimpleName' identifier='ids'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fileMenuItems'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='fileMenuItems'></name><scope type='ThisExpr'></scope></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuItemID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></initializer><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' get Id from original menubar'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='ids'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='id'></name></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='fileMenuItems'></name><scope type='ThisExpr'></scope></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='containerMenuItems'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='containerMenuItems'></name><scope type='ThisExpr'></scope></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuItemID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></initializer><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='ids'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='id'></name></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='containerMenuItems'></name><scope type='ThisExpr'></scope></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='windowMenuItems'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='windowMenuItems'></name><scope type='ThisExpr'></scope></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuItemID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></initializer><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='ids'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='id'></name></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='windowMenuItems'></name><scope type='ThisExpr'></scope></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetMenuItemCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuItemID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></initializer><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='contains'></name><scope type='NameExpr'><name type='SimpleName' identifier='ids'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='id'></name></argument></arguments></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='RemoveMenu'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MF BYPOSITION'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='index'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='RemoveMenus'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hmenuShared'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='RequestBorderSpace'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pborderwidths'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pActiveObject'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOleInPlaceActiveObject'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pActiveObject'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='SetActiveObject'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pActiveObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszObjName'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt><comment type='LineComment' content=' passing NULL as the pborderwidths parameter '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='borderwidth'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pborderwidths'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='currentdoc'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='borderwidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pborderwidths'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='RECT'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBorderSpace'></name><scope type='NameExpr'><name type='SimpleName' identifier='currentdoc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='borderwidth'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='SetBorderSpace'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pborderwidths'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='containerMenuItems'></name></target><value type='NameExpr'><name type='SimpleName' identifier='containerMenus'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setContainerMenus'></name><comment type='JavadocComment' content=' Specify the menu items that should appear in the Container location when an OLE Document is in place activated p When an OLE Document is in place active the Document provides its own menus but the application is given the opportunity to merge some of its menus into the menubar The application is allowed to insert its menus in three locations File far left Container middle and Window far right just before Help The OLE Document retains control of the Edit Object and Help menu locations Note that an application can insert more than one menu into a single location p This method must be called before in place activation of the OLE Document After the Document is activated the menu bar will not be modified until a subsequent activation param containerMenus an array of top level MenuItems to be inserted into the Container location of the menubar '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='containerMenus'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='currentdoc'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type><name type='SimpleName' identifier='getCurrentDocument'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentdoc'></name></target><value type='NameExpr'><name type='SimpleName' identifier='doc'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='currentdoc'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='lpRect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClientRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ResizeBorder'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpRect'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></scope></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setCurrentDocument'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='doc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleClientSite'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fileMenuItems'></name></target><value type='NameExpr'><name type='SimpleName' identifier='fileMenus'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setFileMenus'></name><comment type='JavadocComment' content=' Specify the menu items that should appear in the File location when an OLE Document is in place activated p When an OLE Document is in place active the Document provides its own menus but the application is given the opportunity to merge some of its menus into the menubar The application is allowed to insert its menus in three locations File far left Container middle and Window far right just before Help The OLE Document retains control of the Edit Object and Help menu locations Note that an application can insert more than one menu into a single location p This method must be called before in place activation of the OLE Document After the Document is activated the menu bar will not be modified until a subsequent activation param fileMenus an array of top level MenuItems to be inserted into the Flie location of the menubar '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fileMenus'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='inPlaceActiveObject'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='inPlaceActiveObject'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuBar'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name></scope></initializer><name type='SimpleName' identifier='menubar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Menu'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='menubar'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='OleSetMenuDescriptor'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndActiveObject'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='inPlaceActiveObject'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></scope></initializer><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='holemenu'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></value></expression><comment type='LineComment' content=' re instate the original menu this occurs on deactivation'></comment></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E FAIL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetMenu'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hmenuShared'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DrawMenuBar'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='OleSetMenuDescriptor'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='holemenu'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndActiveObject'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iOleInPlaceFrame'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='inPlaceActiveObject'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='SetMenu'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hmenuShared'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='holemenu'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwndActiveObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='windowMenuItems'></name></target><value type='NameExpr'><name type='SimpleName' identifier='windowMenus'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setWindowMenus'></name><comment type='JavadocComment' content=' Set the menu items that should appear in the Window location when an OLE Document is in place activated p When an OLE Document is in place active the Document provides its own menus but the application is given the opportunity to merge some of its menus into the menubar The application is allowed to insert its menus in three locations File far left Container middle and Window far right just before Help The OLE Document retains control of the Edit Object and Help menu locations Note that an application can insert more than one menu into a single location p This method must be called before in place activation of the OLE Document After the Document is activated the menu bar will not be modified until a subsequent activation param windowMenus an array of top level MenuItems to be inserted into the Window location of the menubar '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='windowMenus'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='MenuItem'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='TranslateAccelerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIOleInPlaceActiveObject'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E NOTIMPL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></right></inner></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='translateOleAccelerator'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMenuBar'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name></scope></initializer><name type='SimpleName' identifier='menubar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Menu'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='menubar'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isEnabled'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></expression></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='wID'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getShell'></name><scope type='NameExpr'><name type='SimpleName' identifier='menubar'></name></scope></initializer><name type='SimpleName' identifier='shell'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Shell'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='shell'></name></scope></initializer><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WM APP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='hAccel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hAccel'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></initializer><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpmsg'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='MSG'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='TranslateAccelerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hAccel'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></thenExpr></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='TranslateAccelerator'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lpmsg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wID'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
