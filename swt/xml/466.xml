<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='events'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Spinner'></name><comment type='JavadocComment' content=' Instances of this class are selectable user interface objects that allow the user to enter and modify numeric values p dl dt b Styles b dt dd READ ONLY WRAP dd dt b Events b dt dd Selection Modify dd dl p IMPORTANT This class is em not em intended to be subclassed p since 3 1 '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='hwndText'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='hwndUpDown'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='ignoreModify'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='pageIncrement'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='digits'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='EditProc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='StringLiteralExpr' value='EDIT'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='EditClass'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='UpDownProc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UPDOWN CLASS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='UpDownClass'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WNDCLASS'></name></type></initializer><name type='SimpleName' identifier='lpWndClass'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WNDCLASS'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClassInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='EditClass'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpWndClass'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='EditProc'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='lpfnWndProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpWndClass'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClassInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='UpDownClass'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpWndClass'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='UpDownProc'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='lpfnWndProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpWndClass'></name></scope></value></expression></statement></statements></body></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='checkStyle'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></argument></arguments></statement></statements></body><name type='SimpleName' identifier='Spinner'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT READ ONLY see SWT WRAP see Widget checkSubclass see Widget getStyle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='EditProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='UpDownProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DefWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='callWindowProc'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='H SCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='V SCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></expression></right></expression><comment type='BlockComment' content=' Even though it is legal to create this widget with scroll bars they serve no useful purpose because they do not automatically scroll the widget s client area The fix is to clear the SWT style '></comment></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='checkStyle'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='handle'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='checkHandle'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isValidSubclass'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID SUBCLASS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkSubclass'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='createHandle'></name><scope type='SuperExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='CANVAS'></name></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetModuleHandle'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hInstance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='BORDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='WS EX CLIENTEDGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></thenExpr></initializer><name type='SimpleName' identifier='textExStyle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WS CHILD'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WS VISIBLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ES AUTOHSCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='textStyle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='READ ONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='textStyle'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ES READONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WIN32 VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='4'></argument><argument type='IntegerLiteralExpr' value='10'></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='textExStyle'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='WS EX LAYOUTRTL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateWindowEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='textExStyle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='EditClass'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='textStyle'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hInstance'></name></argument><argument type='NullLiteralExpr'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL ID'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='WS CHILD'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WS VISIBLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='upDownStyle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WRAP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='upDownStyle'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='UDS WRAP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateWindowEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='UpDownClass'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='upDownStyle'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hInstance'></name></argument><argument type='NullLiteralExpr'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL ID'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsDBLocale'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='ImmGetContext'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></initializer><name type='SimpleName' identifier='hIMC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ImmAssociateContext'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hIMC'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ImmAssociateContext'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hIMC'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ImmReleaseContext'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hIMC'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='100'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></thenExpr></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pageIncrement'></name></target><value type='IntegerLiteralExpr' value='10'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='digits'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='StringLiteralExpr' value='0'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowText'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='createHandle'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Modify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addModifyListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the receiver s text is modified by sending it one of the messages defined in the code ModifyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ModifyListener see removeModifyListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ModifyListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DefaultSelection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addSelectionListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the control is selected by sending it one of the messages defined in the code SelectionListener code interface p code widgetSelected code is not called for texts code widgetDefaultSelected code is typically called when ENTER is pressed in a single line text p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see removeSelectionListener see SelectionEvent '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SelectionListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Verify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addVerifyListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the receiver s text is verified by sending it one of the messages defined in the code VerifyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see VerifyListener see removeVerifyListener '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='VerifyListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='borderHandle'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='newFont'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='oldFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newFont'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM GETFONT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newFont'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldFont'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newFont'></name></argument></arguments></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></thenExpr></initializer><name type='SimpleName' identifier='tm'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetTextMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='tm'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tmHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='tm'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='max'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='max'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='valueOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='String'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='digits'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getDecimalSeparator'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='digits'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></right></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='DT CALCRECT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DT EDITCONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DT NOPREFIX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='flags'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DrawText'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flags'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newFont'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldFont'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='NameExpr'><name type='SimpleName' identifier='DEFAULT WIDTH'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='NameExpr'><name type='SimpleName' identifier='DEFAULT HEIGHT'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='NameExpr'><name type='SimpleName' identifier='wHint'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='NameExpr'><name type='SimpleName' identifier='hHint'></name></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='computeTrim'></name><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></initializer><name type='SimpleName' identifier='trim'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='trim'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='trim'></name></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SM CYVSCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='trim'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='trim'></name></scope></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='computeSize'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='changed'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression><comment type='BlockComment' content=' Get the trim of the text control '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL STYLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='bits0'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL EXSTYLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='bits1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AdjustWindowRectEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bits0'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bits1'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM GETMARGINS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='margins'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' The preferred height of a single line text widget has been hand crafted to be the same height as the single line text widget in an editable combo box '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='margins'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='margins'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='margins'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='BORDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='y'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SM CXVSCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='computeTrim'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM COPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='copy'></name><comment type='JavadocComment' content=' Copies the selected text p The current selection is copied to the clipboard p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='READ ONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM CUT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='cut'></name><comment type='JavadocComment' content=' Cuts the selected text p The current selection is first copied to the clipboard and then deleted from the widget p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetSysColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR WINDOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='defaultBackground'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='enableWidget'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='enabled'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='EnableWindow'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='enabled'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='EnableWindow'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='enabled'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='enableWidget'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='enabled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='deregister'></name><scope type='SuperExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeControl'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeControl'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='deregister'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetFocus'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hwndFocus'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwndFocus'></name></left><right type='NameExpr'><name type='SimpleName' identifier='handle'></name></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwndFocus'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwndFocus'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='hasFocus'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='digits'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getDigits'></name><comment type='JavadocComment' content=' Returns the number of decimal places used by the receiver return the digits exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></initializer><name type='SimpleName' identifier='tchar'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetLocaleInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOCALE USER DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOCALE SDECIMAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='tchar'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='StringLiteralExpr' value=' '></elseExpr><thenExpr type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='tchar'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></thenExpr></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getDecimalSeparator'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='UDACCEL'></name></type></initializer><name type='SimpleName' identifier='udaccel'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='UDACCEL'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETACCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='nInc'></name><scope type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getIncrement'></name><comment type='JavadocComment' content=' Returns the amount that the receiver s value will be modified by when the up down arrows are pressed return the increment exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='max'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='max'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getMaximum'></name><comment type='JavadocComment' content=' Returns the maximum value which the receiver will allow return the maximum exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='min'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='min'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getMinimum'></name><comment type='JavadocComment' content=' Returns the minimum value which the receiver will allow return the minimum exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='pageIncrement'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getPageIncrement'></name><comment type='JavadocComment' content=' Returns the amount that the receiver s position will be modified by when the page up down keys are pressed return the page increment exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></expression></statement></statements></thenStmt></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getSelection'></name><comment type='JavadocComment' content=' Returns the em selection em which is the receiver s position return the selection exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowTextLength'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowText'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='digits'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='parseInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDecimalSeparator'></name></initializer><name type='SimpleName' identifier='decimalSeparator'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='decimalSeparator'></name></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='parseInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></initializer><name type='SimpleName' identifier='wholePart'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></initializer><name type='SimpleName' identifier='decimalPart'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='decimalPart'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='digits'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='digits'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='decimalPart'></name></scope></right></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='decimalPart'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='decimalPart'></name></left><right type='StringLiteralExpr' value='0'></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='decimalPart'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='decimalPart'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='digits'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='parseInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wholePart'></name></argument></arguments></initializer><name type='SimpleName' identifier='wholeValue'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='parseInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='decimalPart'></name></argument></arguments></initializer><name type='SimpleName' identifier='decimalValue'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='MULTIPLY'><target type='NameExpr'><name type='SimpleName' identifier='wholeValue'></name></target><value type='IntegerLiteralExpr' value='10'></value></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='digits'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='wholeValue'></name></left><right type='NameExpr'><name type='SimpleName' identifier='decimalValue'></name></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='max'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='min'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='min'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='max'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></right></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='value'></name></expression></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NumberFormatException'></name></type></parameter></catchClause></catchClauses></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></expression></statement></statements></thenStmt></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getSelectionText'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mbcsPos'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='mbcsPos'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowTextLengthA'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></initializer><name type='SimpleName' identifier='mbcsSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mbcsSize'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mbcsPos'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mbcsSize'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='mbcsSize'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='mbcsSize'></name></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowTextA'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='mbcsSize'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MultiByteToWideChar'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MB PRECOMPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='mbcsPos'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='mbcsToWcsPos'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mbcsPos'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='READ ONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM PASTE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='paste'></name><comment type='JavadocComment' content=' Pastes text from clipboard p The selected text is deleted from the widget and new text inserted from the clipboard p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='register'></name><scope type='SuperExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addControl'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='ThisExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addControl'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='ThisExpr'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='register'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseHandle'></name><scope type='SuperExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></target><value type='IntegerLiteralExpr' value='0'></value></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseHandle'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Modify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeModifyListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the receiver s text is modified param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ModifyListener see addModifyListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ModifyListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DefaultSelection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeSelectionListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the control is selected param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see addSelectionListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SelectionListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Verify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeVerifyListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the control is verified param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see VerifyListener see addVerifyListener '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='VerifyListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendKeyEvent'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='READ ONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='KeyDown'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msg'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msg'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msg'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM IME CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='key'></name><type type='PrimitiveType' specificType='CHAR'></type></variable></variables></expression><comment type='LineComment' content=' if hooks SWT Verify filters SWT Verify return true '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='stateMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='msg'></name></selector><comment type='BlockComment' content=' Disable all magic keys that could modify the text and don t send events when Alt Shift or Ctrl is pressed '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='IntegerLiteralExpr' value='0x08'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='IntegerLiteralExpr' value='0x7F'></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='CharLiteralExpr' value=' r'></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='CharLiteralExpr' value=' t'></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='CharLiteralExpr' value=' n'></right></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' FALL THROUGH'></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='stateMask'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='ALT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CONTROL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></thenStmt><comment type='BlockComment' content=' If the left button is down the text widget refuses the character '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=''></initializer><name type='SimpleName' identifier='oldText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Verify the character '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='start'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='end'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM GETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='key'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='0x08'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></target><value type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='IsDBLocale'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newStart'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newEnd'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM SETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM GETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='newStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newEnd'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='newStart'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></target><value type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Bs '></comment></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='0x7F'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowTextLength'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='IsDBLocale'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newStart'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='newEnd'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM SETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM GETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='newStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newEnd'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='newEnd'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Del '></comment></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value=' r'></label></labels><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression><comment type='BlockComment' content=' Return '></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='CharLiteralExpr' value=' t'></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='IntegerLiteralExpr' value='0x20'></right></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt><comment type='BlockComment' content=' Tab and other characters '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldText'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='key'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='verifyText'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldText'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></initializer><name type='SimpleName' identifier='newText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newText'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newText'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldText'></name></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newText'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM SETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM REPLACESEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='sendKeyEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='background'></name></left><right type='NameExpr'><name type='SimpleName' identifier='pixel'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBackgroundPixel'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pixel'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='InvalidateRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NullLiteralExpr'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setBackgroundPixel'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='digits'></name><scope type='ThisExpr'></scope></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='digits'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='pos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pos'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setDigits'></name><comment type='JavadocComment' content=' Sets the number of decimal places used by the receiver p The digit setting is used to allow for floating point values in the receiver For example to set the selection to a floating point value of 1 37 call setDigits with a value of 2 and setSelection with a value of 137 Similarly if getDigits has a value of 2 and getSelection returns 137 this should be interpreted as 1 37 This applies to all numeric APIs param value the new digits must be greater than or equal to zero exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the value is less than zero li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='foreground'></name></left><right type='NameExpr'><name type='SimpleName' identifier='pixel'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setForegroundPixel'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pixel'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='InvalidateRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NullLiteralExpr'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setForegroundPixel'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETACCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='CastExpr'><expression type='NullLiteralExpr'></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='UDACCEL'></name></type></argument></arguments></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='UDACCEL'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='udaccels'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETACCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='count'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='udaccels'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='first'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='UDACCEL'></name></type></initializer><name type='SimpleName' identifier='udaccel'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='UDACCEL'></name></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='udaccels'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='UDACCEL'></name></scope></right></inner></right></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='UDACCEL'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='first'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='first'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='nInc'></name><scope type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='nInc'></name><scope type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='nInc'></name><scope type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='first'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='UDACCEL'></name></scope></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETACCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='count'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='udaccels'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='udaccels'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setIncrement'></name><comment type='JavadocComment' content=' Sets the amount that the receiver s value will be modified by when the up down arrows are pressed to the argument which must be at least one param value the new increment must be greater than zero exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='min'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='min'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='pos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setMaximum'></name><comment type='JavadocComment' content=' Sets the maximum value that the receiver will allow This new value will be ignored if it is not greater than the receiver s current minimum value If the new maximum is applied then the receiver s selection value will be adjusted if necessary to fall within its new range param value the new maximum which must be greater than the current minimum exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='max'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='max'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='pos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setMinimum'></name><comment type='JavadocComment' content=' Sets the minimum value that the receiver will allow This new value will be ignored if it is negative or is not less than the receiver s current maximum value If the new minimum is applied then the receiver s selection value will be adjusted if necessary to fall within its new range param value the new minimum which must be nonnegative and less than the current maximum exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pageIncrement'></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setPageIncrement'></name><comment type='JavadocComment' content=' Sets the amount that the receiver s position will be modified by when the page up down keys are pressed to the argument which must be at least one param value the page increment must be greater than zero exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='max'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='min'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='min'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='max'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setSelection'></name><comment type='JavadocComment' content=' Sets the em selection em which is the receiver s position to the argument If the argument is not within the range specified by minimum and maximum it will be adjusted to fall within this range param value the new selection must be zero or greater exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></thenExpr></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='valueOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='String'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='digits'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDecimalSeparator'></name></initializer><name type='SimpleName' identifier='decimalSeparator'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='digits'></name></right></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='decimalSeparator'></name></argument></arguments></expression></statement><statement type='WhileStmt'><body type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value='0'></argument></arguments></expression></body><condition type='BinaryExpr' operator='LESS'><left type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='decimalSeparator'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Verify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Verify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowTextLength'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='verifyText'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument><argument type='NullLiteralExpr'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='string'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowText'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='notify'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='postEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setSelection'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='notify'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='subclass'></name><scope type='SuperExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='windowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></initializer><name type='SimpleName' identifier='newProc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL WNDPROC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='newProc'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL WNDPROC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='newProc'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='subclass'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unsubclass'></name><scope type='SuperExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL WNDPROC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='EditProc'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL WNDPROC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='UpDownProc'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='unsubclass'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='string'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='start'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='end'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='end'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='keyEvent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='NameExpr'><name type='SimpleName' identifier='keyEvent'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='keyEvent'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='keyEvent'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='digits'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDecimalSeparator'></name></initializer><name type='SimpleName' identifier='decimalSeparator'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='decimalSeparator'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isDigit'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></argument></arguments></expression></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='IsDBLocale'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='mbcsToWcsPos'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='end'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='mbcsToWcsPos'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Verify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></expression></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='verifyText'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='keyEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='widgetExtStyle'></name><scope type='SuperExpr'></scope></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='WS EX CLIENTEDGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='widgetExtStyle'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='msg'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='BlockComment' content=' Keyboard messages '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmChar'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM IME CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmIMEChar'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmKeyDown'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmKeyUp'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSCHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmSysChar'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSKEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmSysKeyDown'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SYSKEYUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmSysKeyUp'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='BlockComment' content=' Mouse Messages '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CAPTURECHANGED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmCaptureChanged'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmLButtonDblClk'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmLButtonDown'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM LBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmLButtonUp'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmMButtonDblClk'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmMButtonDown'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM MBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmMButtonUp'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEHOVER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmMouseHover'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSELEAVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmMouseLeave'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM MOUSEMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmMouseMove'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' case OS WM MOUSEWHEEL result wmMouseWheel hwnd wParam lParam break '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmRButtonDblClk'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmRButtonDown'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM RBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmRButtonUp'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONDBLCLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmXButtonDblClk'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmXButtonDown'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM XBUTTONUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmXButtonUp'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='BlockComment' content=' Focus Messages '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM SETFOCUS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmSetFocus'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM KILLFOCUS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmKillFocus'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='BlockComment' content=' Paint messages '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM PAINT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmPaint'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='BlockComment' content=' Menu messages '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CONTEXTMENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmContextMenu'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='BlockComment' content=' Clipboard messages '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CLEAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CUT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM PASTE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM UNDO'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='EM UNDO'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wmClipboard'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='value'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='windowProc'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='windowProc'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM ERASEBKGND'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawBackground'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM ERASEBKGND'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM KILLFOCUS'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetFocus'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM SETFOCUS'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM SETFONT'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM SETFONT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM SETFONT'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM SIZE'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SM CXVSCROLL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='upDownWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='upDownWidth'></name></right></initializer><name type='SimpleName' identifier='textWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='SWP NOZORDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SWP DRAWFRAME'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='SWP NOACTIVATE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='flags'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowPos'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='textWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flags'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowPos'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='textWidth'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='upDownWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flags'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM SIZE'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='wmChar'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><comment type='BlockComment' content=' Feature in Windows For some reason when the widget is a single line text widget when the user presses tab return or escape Windows beeps The fix is to look for these keys and not call the window proc '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSelectionText'></name></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='postEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DefaultSelection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' FALL THROUGH '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ESC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmChar'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='READ ONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='call'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression><comment type='LineComment' content=' if hooks SWT Verify filters SWT Verify return null '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='start'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='end'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='oldText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='newText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='msg'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CLEAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM CUT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM GETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newText'></name></target><value type='StringLiteralExpr' value=''></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='call'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM PASTE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM GETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newText'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getClipboardText'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='EM UNDO'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='WM UNDO'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM CANUNDO'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ignoreModify'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM GETSEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='EditProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowTextLength'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument></arguments></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newText'></name></target><value type='StringLiteralExpr' value=''></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowText'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newText'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></right></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='EditProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ignoreModify'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newText'></name></left><right type='NullLiteralExpr'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='newText'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldText'></name></argument></arguments></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldText'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newText'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newText'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='verifyText'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newText'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='start'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='end'></name></name></argument><argument type='NullLiteralExpr'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newText'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='newText'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldText'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='call'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='EditProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newText'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msg'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WM SETTEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EM REPLACESEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='TCHAR'></name></scope></right></initializer><name type='SimpleName' identifier='byteCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='byteCount'></name></argument></arguments></initializer><name type='SimpleName' identifier='pszText'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='byteCount'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='EditProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwndText'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszText'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszText'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmClipboard'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwndText'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='code'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='EN CHANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ignoreModify'></name></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Modify'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmCommandChild'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmCommandChild'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='wmKeyDown'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='UDACCEL'></name></type></initializer><name type='SimpleName' identifier='udaccel'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='UDACCEL'></name></type></variable></variables></expression><comment type='BlockComment' content=' Increment the value '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETACCEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='delta'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='delta'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='nInc'></name><scope type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='delta'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='nInc'></name><scope type='NameExpr'><name type='SimpleName' identifier='udaccel'></name></scope></expression></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK PRIOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='delta'></name></target><value type='NameExpr'><name type='SimpleName' identifier='pageIncrement'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK NEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='delta'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='pageIncrement'></name></expression></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='delta'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSelectionText'></name></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='delta'></name></right></initializer><name type='SimpleName' identifier='newValue'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='max'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='min'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='min'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='max'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WRAP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='newValue'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newValue'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='newValue'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newValue'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newValue'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newValue'></name></argument></arguments></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newValue'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newValue'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><comment type='BlockComment' content=' Stop the edit control from moving the caret '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK UP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK DOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmKeyDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSelectionText'></name></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmKillFocus'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmKillFocus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSelectionText'></name></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETPOS32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='UDM SETPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></thenExpr></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmLButtonDown'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmLButtonDown'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMHDR'></name></type></initializer><name type='SimpleName' identifier='hdr'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMHDR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='NMHDR'></name></scope></argument></arguments></expression></statement><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='code'></name><scope type='NameExpr'><name type='SimpleName' identifier='hdr'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='UDN DELTAPOS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMUPDOWN'></name></type></initializer><name type='SimpleName' identifier='lpnmud'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMUPDOWN'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpnmud'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='NMUPDOWN'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='iPos'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpnmud'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='iDelta'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpnmud'></name></scope></right></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='max'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='min'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwndUpDown'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='UDM GETRANGE32'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='min'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='max'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WRAP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='min'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='max'></name></name></argument></arguments></value></expression><comment type='BlockComment' content=' The SWT Modify event is sent after the widget has been updated with the new state Rather than allowing the default updown window proc to set the value when the user clicks on the updown control set the value explicity and stop the window proc from running '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmNotifyChild'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmNotifyChild'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='wParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='code'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='SB THUMBPOSITION'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='postEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmScrollChild'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmScrollChild'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
