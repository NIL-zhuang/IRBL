<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Compatibility'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Synchronizer'></name><comment type='JavadocComment' content=' Instances of this class provide synchronization support for displays A default instance is created automatically for each display and this instance is sufficient for almost all applications p b IMPORTANT b Typical application code em never em needs to deal with this class It is provided only to allow applications which require non standard synchronization behavior to plug in the support they require em Subclasses which override the methods in this class must ensure that the superclass methods are invoked in their implementations em p see Display setSynchronizer '></comment><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='messageCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='messages'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></initializer><name type='SimpleName' identifier='messageLock'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='syncThread'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Thread'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='display'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='Synchronizer'></name><comment type='JavadocComment' content=' Constructs a new instance of this class param display the display to create the synchronizer on '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='wake'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='SynchronizedStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='messages'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='messages'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4'></dimension></level></levels></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='messages'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></left><right type='IntegerLiteralExpr' value='4'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newMessages'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='messages'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newMessages'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='messages'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newMessages'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='messages'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lock'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='wake'></name></target><value type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement></statements></body><expression type='NameExpr'><name type='SimpleName' identifier='messageLock'></name></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='wake'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wakeThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addLast'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lock'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='runnable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wake'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addLast'></name><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='runnable'></name></argument></arguments></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='asyncExec'></name><comment type='JavadocComment' content=' Causes the code run code method of the runnable to be invoked by the user interface thread at the next reasonable opportunity The caller of this method continues to run in parallel and is not notified when the runnable has completed param runnable code to run on the user interface thread see syncExec '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='runnable'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SynchronizedStmt'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></expression></statement></statements></body><expression type='NameExpr'><name type='SimpleName' identifier='messageLock'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getMessageCount'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='messages'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='messageLock'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='syncThread'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseSynchronizer'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SynchronizedStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='messages'></name></name></initializer><name type='SimpleName' identifier='lock'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='messages'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='messages'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></expression></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></index><name type='NameExpr'><name type='SimpleName' identifier='messages'></name></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='messageCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='messages'></name></scope></left><right type='IntegerLiteralExpr' value='64'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='messages'></name></target><value type='NullLiteralExpr'></value></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='lock'></name></expression></statement></statements></body><expression type='NameExpr'><name type='SimpleName' identifier='messageLock'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></type><name type='SimpleName' identifier='removeFirst'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='runAsyncMessages'></name><arguments><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='runAsyncMessages'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='run'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='DoStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='removeFirst'></name></initializer><name type='SimpleName' identifier='lock'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lock'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='run'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='run'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='SynchronizedStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='syncThread'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='thread'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></value></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='syncThread'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyAll'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='run'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='throwable'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='t'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR FAILED EXEC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='t'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='t'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement></statements></body><expression type='NameExpr'><name type='SimpleName' identifier='lock'></name></expression></statement></statements></body><condition type='NameExpr'><name type='SimpleName' identifier='all'></name></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='run'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='runAsyncMessages'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='all'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isValidThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='runnable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='run'></name><scope type='NameExpr'><name type='SimpleName' identifier='runnable'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='runnable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wake'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='runnable'></name></argument></arguments></initializer><name type='SimpleName' identifier='lock'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RunnableLock'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='thread'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='currentThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope></value></expression><comment type='BlockComment' content=' Only remember the syncThread for syncExec '></comment></statement><statement type='SynchronizedStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addLast'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lock'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='interrupted'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wait'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='interrupted'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InterruptedException'></name></type></parameter></catchClause></catchClauses></statement></statements></body><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='done'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></expression></condition></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='interrupted'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='interrupt'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='throwable'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR FAILED EXEC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='throwable'></name><scope type='NameExpr'><name type='SimpleName' identifier='lock'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><expression type='NameExpr'><name type='SimpleName' identifier='lock'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='syncExec'></name><comment type='JavadocComment' content=' Causes the code run code method of the runnable to be invoked by the user interface thread at the next reasonable opportunity The thread which calls this method is suspended until the runnable completes param runnable code to run on the user interface thread exception SWTException ul li ERROR FAILED EXEC if an exception occured when executing the runnable li ul see asyncExec '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='runnable'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
