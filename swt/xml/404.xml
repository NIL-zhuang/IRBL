<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='layout'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='FormAttachment'></name><comment type='JavadocComment' content=' Instances of this class are used to define the edges of a control within a code FormLayout code p code FormAttachments code are set into the top bottom left and right fields of the code FormData code for a control For example pre FormData data new FormData data top new FormAttachment 0 5 data bottom new FormAttachment 100 5 data left new FormAttachment 0 5 data right new FormAttachment 100 5 button setLayoutData data pre p p A code FormAttachment code defines where to attach the side of a control by using the equation y ax b The a term represents a fraction of the parent composite s width from the left or height from the top It can be defined using a numerator and denominator or just a percentage value If a percentage is used the denominator is set to 100 The b term in the equation represents an offset in pixels from the attachment position For example pre FormAttachment attach new FormAttachment 20 5 pre specifies that the side to which the code FormAttachment code object belongs will lie at 20 of the parent composite minus 5 pixels p p Control sides can also be attached to another control For example pre FormAttachment attach new FormAttachment button 10 pre specifies that the side to which the code FormAttachment code object belongs will lie in the same position as the adjacent side of the code button code control plus 10 pixels The control side can also be attached to the opposite side of the specified control For example pre FormData data new FormData data left new FormAttachment button 0 SWT LEFT pre specifies that the left side of the control will lie in the same position as the left side of the code button code control The control can also be attached in a position that will center the control on the specified control For example pre data left new FormAttachment button 0 SWT CENTER pre specifies that the left side of the control will be positioned so that it is centered between the left and right sides of the code button code control If the alignment is not specified the default is to attach to the adjacent side p see FormLayout see FormData since 2 0 '></comment><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' numerator specifies the numerator of the a term in the equation y ax b which defines the attachment '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='numerator'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' denominator specifies the denominator of the a term in the equation y ax b which defines the attachment The default value is 100 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='100'></initializer><name type='SimpleName' identifier='denominator'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' offset specifies the offset in pixels of the control side from the attachment position If the offset is positive then the control side is offset to the right of or below the attachment position If it is negative then the control side is offset to the left of or above the attachment position This is equivalent to the b term in the equation y ax b The default value is 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' control specifies the control to which the control side is attached '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' alignment specifies the alignment of the control side that is attached to a control p For top and bottom attachments TOP BOTTOM and CENTER are used For left and right attachments LEFT RIGHT and CENTER are used If any other case occurs the default will be used instead p br Possible values are ul li TOP Attach the side to the top side of the specified control li li BOTTOM Attach the side to the bottom side of the specified control li li LEFT Attach the side to the left side of the specified control li li RIGHT Attach the side to the right side of the specified control li li CENTER Attach the side at a position which will center the control on the specified control li li DEFAULT Attach the side to the adjacent side of the specified control li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='alignment'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='FormAttachment'></name></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='numerator'></name></argument><argument type='IntegerLiteralExpr' value='100'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='FormAttachment'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given a numerator Since no denominator or offset is specified the default is to treat the numerator as a percentage of the form with a denominator of 100 The offset is zero param numerator the percentage of the position since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='numerator'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='numerator'></name></argument><argument type='IntegerLiteralExpr' value='100'></argument><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></statement></statements></body><name type='SimpleName' identifier='FormAttachment'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given a numerator and an offset Since no denominator is specified the default is to treat the numerator as a percentage of the form with a denominator of 100 param numerator the percentage of the position param offset the offset of the side from the position '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='numerator'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='denominator'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT BE ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='numerator'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='denominator'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='offset'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='FormAttachment'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given a numerator and denominator and an offset The position of the side is given by the fraction of the form defined by the numerator and denominator param numerator the numerator of the position param denominator the denominator of the position param offset the offset of the side from the position '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='numerator'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='denominator'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></statement></statements></body><name type='SimpleName' identifier='FormAttachment'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given a control Since no alignment is specified the default alignment is to attach the side to the adjacent side of the specified control Since no offset is specified an offset of 0 is used param control the control the side is attached to '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></statement></statements></body><name type='SimpleName' identifier='FormAttachment'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given a control and an offset Since no alignment is specified the default alignment is to attach the side to the adjacent side of the specified control param control the control the side is attached to param offset the offset of the side from the control '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='control'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='control'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='offset'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='alignment'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='alignment'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='FormAttachment'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given a control an offset and an alignment param control the control the side is attached to param offset the offset of the side from the control param alignment the alignment of the side to the control it is attached to '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alignment'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='numerator'></name></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='denominator'></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></argument><argument type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><name type='SimpleName' identifier='divide'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='temp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='m'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='abs'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='m'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='n'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='abs'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='n'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='m'></name></left><right type='NameExpr'><name type='SimpleName' identifier='n'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='temp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='m'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='m'></name></target><value type='NameExpr'><name type='SimpleName' identifier='n'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='n'></name></target><value type='NameExpr'><name type='SimpleName' identifier='temp'></name></value></expression></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='temp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='m'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='m'></name></target><value type='NameExpr'><name type='SimpleName' identifier='n'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='n'></name></target><value type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='temp'></name></left><right type='NameExpr'><name type='SimpleName' identifier='n'></name></right></value></expression></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='m'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='gcd'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></initializer><name type='SimpleName' identifier='solution'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='numerator'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='denominator'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='denominator'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='gcd'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='gcd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='gcd'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='gcd'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='solution'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><name type='SimpleName' identifier='minus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='attachment'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='numerator'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='denominator'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><name type='SimpleName' identifier='minus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></initializer><name type='SimpleName' identifier='solution'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='numerator'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='denominator'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='denominator'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='gcd'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='gcd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='gcd'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='gcd'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='solution'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='attachment'></name></scope></right></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='solution'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><name type='SimpleName' identifier='plus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='attachment'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='numerator'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='denominator'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type><name type='SimpleName' identifier='plus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='denominator'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT BE ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='numerator'></name></left><right type='NameExpr'><name type='SimpleName' identifier='value'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='denominator'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='solveX'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='numerator'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT BE ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='denominator'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='numerator'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='solveY'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='control'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='numerator'></name></left><right type='StringLiteralExpr' value=' '></right></left><right type='NameExpr'><name type='SimpleName' identifier='denominator'></name></right></elseExpr><thenExpr type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></thenExpr></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' y '></left><right type='NameExpr'><name type='SimpleName' identifier='string'></name></right></left><right type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' x '></left><right type='EnclosedExpr'><inner type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></inner></right></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' x '></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></thenExpr></inner></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the event '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
