<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='events'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='accessibility'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Link'></name><comment type='JavadocComment' content=' Instances of this class represent a selectable user interface object that displays a text with links p dl dt b Styles b dt dd none dd dt b Events b dt dd Selection dd dl p IMPORTANT This class is em not em intended to be subclassed p since 3 1 '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='text'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='layout'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='linkColor'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='linkDisabledColor'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='offsets'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='selection'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='ids'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='mnemonics'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='focusIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='font'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='51'></argument><argument type='IntegerLiteralExpr' value='153'></argument></arguments></initializer><name type='SimpleName' identifier='LINK FOREGROUND'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='LinkProc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WC LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='LinkClass'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='LinkProc'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WNDCLASS'></name></type></initializer><name type='SimpleName' identifier='lpWndClass'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WNDCLASS'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClassInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='LinkClass'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpWndClass'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='LinkProc'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='lpfnWndProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpWndClass'></name></scope></value></expression></statement></statements></thenStmt></statement></statements></body></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></statement></statements></body><name type='SimpleName' identifier='Link'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see Widget checkSubclass see Widget getStyle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></initializer><name type='SimpleName' identifier='typedListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DefaultSelection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='typedListener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addSelectionListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when the control is selected by sending it one of the messages defined in the code SelectionListener code interface p code widgetSelected code is called when the control is selected code widgetDefaultSelected code is not called p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see removeSelectionListener see SelectionEvent '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SelectionListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='LinkProc'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CallWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='LinkProc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DefWindowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='callWindowProc'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='msg'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='wHint'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hHint'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></initializer><name type='SimpleName' identifier='layoutWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wHint'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement></statements></thenStmt><comment type='LineComment' content='TEMPORARY CODE'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='layoutWidth'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM GETFONT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='newFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newFont'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='parse'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='text'></name></argument></arguments></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='DT CALCRECT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='flags'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='flags'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DT WORDBREAK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wHint'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DrawText'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flags'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newFont'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldFont'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ReleaseDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='NameExpr'><name type='SimpleName' identifier='wHint'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='NameExpr'><name type='SimpleName' identifier='hHint'></name></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBorderWidth'></name></initializer><name type='SimpleName' identifier='border'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='border'></name></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='border'></name></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='computeSize'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='changed'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='createHandle'></name><scope type='SuperExpr'></scope></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='layout'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='display'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='linkColor'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='display'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='LINK FOREGROUND'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='linkDisabledColor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='Color'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='display'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='GetSysColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR GRAYTEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offsets'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ids'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selection'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='createHandle'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='createWidget'></name><scope type='SuperExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='text'></name></target><value type='StringLiteralExpr' value=''></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MIRRORED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setOrientation'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='initAccessible'></name></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='createWidget'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawBackground'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='selStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='selEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='selStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='selEnd'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selStart'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selEnd'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selStart'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selEnd'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></value></expression><comment type='LineComment' content=' temporary code to disable text selection'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='draw'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='selStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='selEnd'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='hasFocus'></name></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></argument></arguments></initializer><name type='SimpleName' identifier='rects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></initializer><name type='SimpleName' identifier='rectangle'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawFocus'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangle'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangle'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangle'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rectangle'></name></scope></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='hooks'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Paint'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='filters'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Paint'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='gc'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='gc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Paint'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='gc'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NullLiteralExpr'></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='drawWidget'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type><arguments><argument type='NullLiteralExpr'></argument><argument type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='enabled'></name></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='linkDisabledColor'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='linkColor'></name></thenExpr></argument><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='linkStyle'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='NameExpr'><name type='SimpleName' identifier='linkStyle'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></initializer><name type='SimpleName' identifier='point'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='linkStyle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LITEM'></name></type></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LITEM'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='mask'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LIF ITEMINDEX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LIF STATE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LIS ENABLED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='state'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='enabled'></name></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='LIS ENABLED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></thenExpr></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='iLink'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LM SETITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='enableWidget'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='enabled'></name></argument></arguments></expression><comment type='BlockComment' content=' Feature in Windows For some reason setting LIS ENABLED state using LM SETITEM causes the SysLink to become enabled To be specific calling IsWindowEnabled returns true The fix is disable the SysLink after LM SETITEM '></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='enableWidget'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='enabled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getAccessible'></name></initializer><name type='SimpleName' identifier='accessible'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Accessible'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addAccessibleListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessible'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleAdapter'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='parse'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='text'></name></argument></arguments></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getName'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addAccessibleControlListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessible'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlAdapter'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getChildAtPoint'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='map'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getParent'></name></argument><argument type='NullLiteralExpr'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name></argument></arguments></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getLocation'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getChildCount'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getRole'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE FOCUSABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='hasFocus'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE FOCUSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getState'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='StringLiteralExpr' value='SWT Press'></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getDefaultAction'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='hasFocus'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getSelection'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='hasFocus'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getFocus'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='initAccessible'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getText'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getNameText'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></initializer><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='rects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineOffsets'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></initializer><name type='SimpleName' identifier='lineOffsets'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></initializer><name type='SimpleName' identifier='point'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='lineStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></expression></expression></body><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffsets'></name></name></right></condition></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='lineEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></expression></expression></body><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffsets'></name></name></right></condition></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument><argument type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffsets'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffsets'></name></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLineBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='index'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='tmp'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rects'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='tmp'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rects'></name></target><value type='NameExpr'><name type='SimpleName' identifier='tmp'></name></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='rects'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type><name type='SimpleName' identifier='getRectangles'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='linkIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='text'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getText'></name><comment type='JavadocComment' content=' Returns the receiver s text which will be an empty string if it has never been set or if the receiver is a code SEPARATOR code label return the receiver s text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offsets'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='4'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ids'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='4'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='4'></right></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChars'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='state'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='linkIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='tagStart'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='linkStart'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='endtagStart'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='refStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toLowerCase'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='c'></name><type type='PrimitiveType' specificType='CHAR'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='state'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='0'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tagStart'></name></target><value type='NameExpr'><name type='SimpleName' identifier='index'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='state'></name></expression></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='1'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value='a'></right></condition><thenStmt type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='state'></name></expression></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='2'></label></labels><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='c'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value='h'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='7'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value=' '></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='linkStart'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='state'></name></expression></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isWhitespace'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='c'></name></argument></arguments></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='13'></value></expression></elseStmt><thenStmt type='BreakStmt'></thenStmt></statement></statements></entrie></entries></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='3'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='endtagStart'></name></target><value type='NameExpr'><name type='SimpleName' identifier='index'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='state'></name></expression></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='4'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><elseExpr type='IntegerLiteralExpr' value='3'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='5'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value='a'></right></condition><elseExpr type='IntegerLiteralExpr' value='3'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='6'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='parseMnemonics'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='tagStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='parseMnemonics'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='linkStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='endtagStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ids'></name></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ids'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='linkStart'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='endtagStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='linkStart'></name></right></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tagStart'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='linkStart'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='endtagStart'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='refStart'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></value></value></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='7'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value='r'></right></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value='e'></right></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='9'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value='f'></right></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='10'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='11'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='state'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='refStart'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='12'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ids'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='refStart'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='refStart'></name></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='13'></label></labels><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isWhitespace'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='c'></name></argument></arguments></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='state'></name></expression></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='14'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='15'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='parseMnemonics'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='tagStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></initializer><name type='SimpleName' identifier='tmp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='parseMnemonics'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='linkStart'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></initializer><name type='SimpleName' identifier='mnemonic'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></target><value type='NameExpr'><name type='SimpleName' identifier='tmp'></name></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='newOffsets'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offsets'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newOffsets'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offsets'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newOffsets'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='newIDs'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ids'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newIDs'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ids'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newIDs'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newMnemonics'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newMnemonics'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='linkIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newMnemonics'></name></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='parse'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='mnemonic'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='start'></name></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></left><right type='CharLiteralExpr' value=' '></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></left><right type='CharLiteralExpr' value=' '></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='parseMnemonics'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='releaseWidget'></name><scope type='SuperExpr'></scope></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='layout'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='layout'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='linkColor'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='linkColor'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='linkColor'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='linkDisabledColor'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offsets'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ids'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='text'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='releaseWidget'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unhook'></name><scope type='NameExpr'><name type='SimpleName' identifier='eventTable'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DefaultSelection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeSelectionListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when the control is selected param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see addSelectionListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SelectionListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='string'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='text'></name></argument></arguments></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='text'></name></target><value type='NameExpr'><name type='SimpleName' identifier='string'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setText'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='parse'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL STYLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='bits'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='bits'></name></target><value type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='WS TABSTOP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='bits'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='WS TABSTOP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowLong'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='GWL STYLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='bits'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='IsWindowEnabled'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></initializer><name type='SimpleName' identifier='enabled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type><arguments><argument type='NullLiteralExpr'></argument><argument type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='enabled'></name></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='linkDisabledColor'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='linkColor'></name></thenExpr></argument><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='linkStyle'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='NameExpr'><name type='SimpleName' identifier='linkStyle'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></initializer><name type='SimpleName' identifier='point'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='linkStyle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type><arguments><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='mnemonicStyle'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='NameExpr'><name type='SimpleName' identifier='mnemonicStyle'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></name></initializer><name type='SimpleName' identifier='mnemonic'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='mnemonicStyle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='mnemonic'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='mnemonics'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCodePage'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetWindowText'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='parse'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setText'></name><comment type='JavadocComment' content=' Sets the receiver s text p The string can contain both regular text and hyperlinks A hyperlink is delimited by an anchor tag lt A gt and lt A gt Within an anchor a single HREF attribute is supported When a hyperlink is selected the text field of the selection event contains either the text of the hyperlink or the value of its HREF if one was specified In the rare case of identical hyperlinks within the same string the HREF tag can be used to distinguish between them The string may include the mnemonic character and line delimiters p param string the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the text is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='widgetStyle'></name><scope type='SuperExpr'></scope></initializer><name type='SimpleName' identifier='bits'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='bits'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='WS TABSTOP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='widgetStyle'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='windowClass'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='LinkClass'></name></thenExpr></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><name type='SimpleName' identifier='windowClass'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='LinkProc'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='windowProc'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='LinkProc'></name></thenExpr></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='windowProc'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM CHAR'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value=' '></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM KEYDOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' NOTE Call the window proc with WM KEYDOWN rather than WM CHAR so that the key that was ignored during WM KEYDOWN is processed This allows the application to cancel an operation that is normally performed in WM KEYDOWN from WM CHAR '></comment></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument></arguments></expression></statement></statements></entrie></entries></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value=' '></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ids'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='GREATER EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='next'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='next'></name></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM CHAR'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM GETDLGCODE'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='count'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LITEM'></name></type></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LITEM'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='mask'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LIF ITEMINDEX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LIF STATE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LIS FOCUSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='state'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LIS FOCUSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='iLink'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='iLink'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LM GETITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='count'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='iLink'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM GETDLGCODE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DLGC STATIC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='GREATER EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK SHIFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='next'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='next'></name></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DLGC WANTTAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='next'></name></expression></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DLGC WANTTAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM GETDLGCODE'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM GETFONT'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='callWindowProc'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WM GETFONT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='code'></name></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='font'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='font'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='defaultFont'></name></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='font'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM GETFONT'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM KEYDOWN'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='wParam'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK SPACE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK RETURN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='VK TAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression><comment type='BlockComment' content=' Ensure that the window proc does not process VK SPACE VK RETURN or VK TAB so that it can be handled in WM CHAR This allows the application to cancel an operation that is normally performed in WM KEYDOWN from WM CHAR '></comment></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM KEYDOWN'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM KILLFOCUS'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM KILLFOCUS'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM LBUTTONDOWN'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFocus'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='oldSelectionX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='oldSelectionY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='offset'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='oldSelectionX'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='oldSelectionY'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='oldSelectionX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldSelectionY'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='oldSelectionX'></name></initializer><name type='SimpleName' identifier='temp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldSelectionX'></name></target><value type='NameExpr'><name type='SimpleName' identifier='oldSelectionY'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldSelectionY'></name></target><value type='NameExpr'><name type='SimpleName' identifier='temp'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldSelectionX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldSelectionY'></name></argument></arguments></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='j'></name></argument></arguments></initializer><name type='SimpleName' identifier='rects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='contains'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='j'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM LBUTTONDOWN'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM LBUTTONUP'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></argument></arguments></initializer><name type='SimpleName' identifier='rects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='contains'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='focusIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ids'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM LBUTTONUP'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM MOUSEMOVE'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetKeyState'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VK LBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getRectangles'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='j'></name></argument></arguments></initializer><name type='SimpleName' identifier='rects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rects'></name></name></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='contains'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setCursor'></name><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getSystemCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR HAND'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setCursor'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='oldSelection'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NullLiteralExpr'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='oldSelection'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='newSelection'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='oldSelection'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newSelection'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='oldSelection'></name></initializer><name type='SimpleName' identifier='temp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oldSelection'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newSelection'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newSelection'></name></target><value type='NameExpr'><name type='SimpleName' identifier='temp'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldSelection'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newSelection'></name></argument></arguments></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM MOUSEMOVE'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='WM PAINT'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PAINTSTRUCT'></name></type></initializer><name type='SimpleName' identifier='ps'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PAINTSTRUCT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='ps'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='ps'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hwnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='handle'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='new GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gc'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></right></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='ps'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawWidget'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='LRESULT'></name></scope></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM PAINT'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM PRINTCLIENT'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClientRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='display'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='GC'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawWidget'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM PRINTCLIENT'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM SETFOCUS'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM SETFOCUS'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='Font'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='display'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='WM SETFONT'></name><scope type='SuperExpr'></scope><arguments><argument type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='font'></name></target><value type='NameExpr'><name type='SimpleName' identifier='wParam'></name></value></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM SETFONT'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='WM SIZE'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClientRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></thenExpr></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='redraw'></name></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='WM SIZE'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='wmColorChild'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='IsAppThemed'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='findThemeControl'></name></initializer><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='control'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetBkMode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetClientRect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MapWindowPoints'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawThemeBackground'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='GetStockObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='NULL BRUSH'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmColorChild'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMHDR'></name></type></initializer><name type='SimpleName' identifier='hdr'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMHDR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdr'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='NMHDR'></name></scope></argument></arguments></expression></statement><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='code'></name><scope type='NameExpr'><name type='SimpleName' identifier='hdr'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='NM RETURN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='NM CLICK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMLINK'></name></type></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NMLINK'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='NMLINK'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='iLink'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></index><name type='NameExpr'><name type='SimpleName' identifier='ids'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sendEvent'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Selection'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wmNotifyChild'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lParam'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LRESULT'></name></type><name type='SimpleName' identifier='wmNotifyChild'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
