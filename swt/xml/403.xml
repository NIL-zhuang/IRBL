<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='layout'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='FillLayout'></name><comment type='JavadocComment' content=' code FillLayout code is the simplest layout class It lays out controls in a single row or column forcing them to be the same size p Initially the controls will all be as tall as the tallest control and as wide as the widest code FillLayout code does not wrap but you can specify margins and spacing You might use it to lay out buttons in a task bar or tool bar or to stack checkboxes in a code Group code code FillLayout code can also be used when a code Composite code only has one child For example if a code Shell code has a single code Group code child code FillLayout code will cause the code Group code to completely fill the code Shell code if margins are 0 p p Example code first a code FillLayout code is created and its type field is set and then the layout is set into the code Composite code Note that in a code FillLayout code children are always the same size and they fill all available space pre FillLayout fillLayout new FillLayout fillLayout type SWT VERTICAL shell setLayout fillLayout pre p '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Layout'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' type specifies how controls will be positioned within the layout The default value is HORIZONTAL Possible values are ul li HORIZONTAL Position the controls horizontally from left to right li li VERTICAL Position the controls vertically from top to bottom li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='HORIZONTAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></initializer><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout The default value is 0 since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout The default value is 0 since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' spacing specifies the number of pixels between the edge of one cell and the edge of its neighbouring cell The default value is 0 since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='spacing'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='FillLayout'></name><comment type='JavadocComment' content=' Constructs a new instance of this class '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='FillLayout'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given the type param type the type of fill layout since 2 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChildren'></name><scope type='NameExpr'><name type='SimpleName' identifier='composite'></name></scope></initializer><name type='SimpleName' identifier='children'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='maxWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='maxHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='wHint'></name></initializer><name type='SimpleName' identifier='w'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='hHint'></name></initializer><name type='SimpleName' identifier='h'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='HORIZONTAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='w'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VERTICAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='h'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='computeChildSize'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='w'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='h'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='maxWidth'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='maxWidth'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='size'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='maxHeight'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='maxHeight'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='size'></name></scope></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='HORIZONTAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='NameExpr'><name type='SimpleName' identifier='maxWidth'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='NameExpr'><name type='SimpleName' identifier='maxHeight'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></value></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='NameExpr'><name type='SimpleName' identifier='maxWidth'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='NameExpr'><name type='SimpleName' identifier='maxHeight'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='NameExpr'><name type='SimpleName' identifier='wHint'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='NameExpr'><name type='SimpleName' identifier='hHint'></name></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='computeSize'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='composite'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FillData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FillData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FillData'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='size'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='trimX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='trimY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' TEMPORARY CODE'></comment></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Scrollable'></name></type></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='trimX'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='trimY'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='MethodCallExpr'><name type='SimpleName' identifier='getBorderWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></value></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='computeTrim'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Scrollable'></name></type></inner></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='trimX'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='trimY'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='NameExpr'><name type='SimpleName' identifier='trimX'></name></right></argument></arguments></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='wHint'></name></thenExpr></initializer><name type='SimpleName' identifier='w'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='NameExpr'><name type='SimpleName' identifier='trimY'></name></right></argument></arguments></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='hHint'></name></thenExpr></initializer><name type='SimpleName' identifier='h'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='computeSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='w'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='h'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='computeSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='wHint'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hHint'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='size'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='computeChildSize'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='flushCache'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FillData'></name></type></inner></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='flushCache'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClass'></name></scope></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='lastIndexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='CharLiteralExpr' value=' '></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='string'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getName'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='composite'></name></scope></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChildren'></name><scope type='NameExpr'><name type='SimpleName' identifier='composite'></name></scope></initializer><name type='SimpleName' identifier='children'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='HORIZONTAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></right></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></initializer><name type='SimpleName' identifier='cellHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></right></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></initializer><name type='SimpleName' identifier='extra'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='cellHeight'></name></initializer><name type='SimpleName' identifier='childHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='childHeight'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='extra'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='childHeight'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='extra'></name></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='childHeight'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='y'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='childHeight'></name></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></right></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></initializer><name type='SimpleName' identifier='extra'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></right></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></initializer><name type='SimpleName' identifier='cellWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='cellWidth'></name></initializer><name type='SimpleName' identifier='childWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='childWidth'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='extra'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='childWidth'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='extra'></name></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='childWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='childWidth'></name></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='layout'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='composite'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name></left><right type='StringLiteralExpr' value=' '></right></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='type '></left><right type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='type'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VERTICAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></condition><elseExpr type='StringLiteralExpr' value='SWT HORIZONTAL'></elseExpr><thenExpr type='StringLiteralExpr' value='SWT VERTICAL'></thenExpr></inner></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginWidth '></left><right type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginHeight '></left><right type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='spacing'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='spacing '></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='trim'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='StringLiteralExpr' value=' '></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='string'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the event '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
