<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='TextStyle'></name><comment type='JavadocComment' content=' code TextStyle code defines a set of styles that can be applied to a range of text p The hashCode method in this class uses the values of the public fields to compute the hash value When storing instances of the class in hashed collections do not modify these fields after the object has been inserted p p Application code does em not em need to explicitly release the resources managed by each instance when those instances are no longer required and thus no code dispose code method is provided p see TextLayout see Font see Color since 3 0 '></comment><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' the font of the style '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='font'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the foreground of the style '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='foreground'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the background of the style '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='background'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the underline flag of the style '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='underline'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the strikeout flag of the style '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='strikeout'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='font'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='foreground'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='foreground'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='background'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='background'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='font'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='foreground'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='background'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='TextStyle'></name><comment type='JavadocComment' content=' Create a new text style with the specified font foreground and background param font the font of the style code null code if none param foreground the foreground color of the style code null code if none param background the background color of the style code null code if none '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='font'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='foreground'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='background'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='object'></name></left><right type='ThisExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='object'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></inner></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></initializer><name type='SimpleName' identifier='style'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='ThisExpr'></scope></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></argument></arguments></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='ThisExpr'></scope></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></argument></arguments></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></argument></arguments></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='ThisExpr'></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='ThisExpr'></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='equals'></name><comment type='JavadocComment' content=' Compares the argument to the receiver and returns true if they represent the em same em object using a class specific comparison param object the object to compare with this object return code true code if the object is the same as this object and code false code otherwise see hashCode '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='hash'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='foreground'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='XOR'><target type='NameExpr'><name type='SimpleName' identifier='hash'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='hashCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='foreground'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='background'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='XOR'><target type='NameExpr'><name type='SimpleName' identifier='hash'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='hashCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='background'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='font'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='XOR'><target type='NameExpr'><name type='SimpleName' identifier='hash'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='hashCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='underline'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='XOR'><target type='NameExpr'><name type='SimpleName' identifier='hash'></name></target><value type='NameExpr'><name type='SimpleName' identifier='hash'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='strikeout'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='XOR'><target type='NameExpr'><name type='SimpleName' identifier='hash'></name></target><value type='NameExpr'><name type='SimpleName' identifier='hash'></name></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='hash'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='hashCode'></name><comment type='JavadocComment' content=' Returns an integer hash code for the receiver Any two objects that return code true code when passed to code equals code must return the same value for this method return the receiver s hash see equals Object '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='TextStyle font '></left><right type='NameExpr'><name type='SimpleName' identifier='font'></name></right></left><right type='StringLiteralExpr' value=' foreground '></right></left><right type='NameExpr'><name type='SimpleName' identifier='foreground'></name></right></left><right type='StringLiteralExpr' value=' background '></right></left><right type='NameExpr'><name type='SimpleName' identifier='background'></name></right></left><right type='StringLiteralExpr' value=' underline '></right></left><right type='NameExpr'><name type='SimpleName' identifier='underline'></name></right></left><right type='StringLiteralExpr' value=' strikeout '></right></left><right type='NameExpr'><name type='SimpleName' identifier='strikeout'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 NON NLS 3 NON NLS 4 NON NLS 5 NON NLS 6 '></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the code RGB code '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
