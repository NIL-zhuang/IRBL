<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='custom'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='events'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='BidiSegmentEvent'></name><comment type='JavadocComment' content=' This event is sent to BidiSegmentListeners when a line is to be measured or rendered in a bidi locale The segments field is used to specify text ranges in the line that should be treated as separate segments for bidi reordering Each segment will be reordered and rendered separately p The elements in the segments field specify the start offset of a segment relative to the start of the line They must follow the following rules ul li first element must be 0 li elements must be in ascending order and must not have duplicates li elements must not exceed the line length ul In addition the last element may be set to the end of the line but this is not required The segments field may be left null if the entire line should be reordered as is p A BidiSegmentListener may be used when adjacent segments of right to left text should not be reordered relative to each other For example within a ava editor you may wish multiple right to left string literals to be reordered differently than the bidi algorithm specifies Example pre stored line R1R2R3 R4R5R6 R1 to R6 are right to left characters The quotation marks are part of the line text The line is 13 characters long segments null entire line will be reordered and thus the two R2L segments swapped as per the bidi algorithm visual line rendered on screen R6R5R4 R3R2R1 segments 0 5 8 R1R2R3 will be reordered followed by blank blank and R4R5R6 visual line R3R2R1 R6R5R4 pre '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedEvent'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' line start offset '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' line text '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' bidi segments see above '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='segments'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='LongLiteralExpr' value='3257846571587547957L'></initializer><name type='SimpleName' identifier='serialVersionUID'></name><type type='PrimitiveType' specificType='LONG'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineText'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></value></expression></statement></statements></body><name type='SimpleName' identifier='BidiSegmentEvent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
