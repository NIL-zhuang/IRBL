<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='custom'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Hashtable'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='SWT'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='PrintRenderer'></name><comment type='JavadocComment' content=' A PrintRenderer renders the content of a StyledText widget on a printer device Print rendering may occur in a non UI thread Therefore all requests for styles content and any other information normally stored in the StyledText widget are served from cached data Caching also guarantees immutable data for threaded printing '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextRenderer'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='LineComment' content=' logical unwrapped content'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='logicalContent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' wrapped content'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='content'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WrappedContent'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' printer client area'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='clientArea'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' printer GC there can be only one GC for each printer device'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' line background colors used during rendering'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineBackgrounds'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Hashtable'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' line styles colors used during rendering'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineStyles'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Hashtable'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' bidi segments used during rendering on bidi platforms'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='bidiSegments'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Hashtable'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='regularFont'></name></argument></arguments></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='logicalContent'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lineBackgrounds'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='lineBackgrounds'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lineStyles'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='lineStyles'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='bidiSegments'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='bidiSegments'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='clientArea'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='clientArea'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='gc'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='gc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='calculateLineHeight'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setTabLength'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='tabLength'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='content'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WrappedContent'></name></type><arguments><argument type='ThisExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wrapLines'></name><scope type='NameExpr'><name type='SimpleName' identifier='content'></name></scope></expression><comment type='LineComment' content=' wrapLines requires tab width to be known '></comment></statement></statements></body><name type='SimpleName' identifier='PrintRenderer'></name><comment type='JavadocComment' content=' Creates an instance of class PrintRenderer class p param device Device to render on param regularFont Font to use for regular text param gc printer GC to use for rendering There can be only one GC for each printer device at any given time param logicalContent StyledTextContent to print param lineBackgrounds line background colors to use during rendering param lineStyles line styles colors to use during rendering param bidiSegments bidi segments to use during rendering on bidi platforms param leftMargin margin to the left of the text param tabLength length in characters of a tab character param clientArea the printer client area '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='regularFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='logicalContent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineBackgrounds'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Hashtable'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineStyles'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Hashtable'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bidiSegments'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Hashtable'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='tabLength'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='clientArea'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='content'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='SuperExpr'></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes the resource created by the receiver '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='disposeGC'></name><comment type='JavadocComment' content=' Do nothing PrintRenderer does not create GCs see StyledTextRenderer disposeGC '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='drawLineBreakSelection'></name><comment type='JavadocComment' content=' Do not print the selection see StyledTextRenderer drawLineSelectionBackground '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='paintX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='paintY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineText'></name></scope></initializer><name type='SimpleName' identifier='lineLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLogicalLineOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalLineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get'></name><scope type='NameExpr'><name type='SimpleName' identifier='bidiSegments'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalLineOffset'></name></argument></arguments></argument></arguments></expression><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></initializer><name type='SimpleName' identifier='segments'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='segments'></name></left><right type='NullLiteralExpr'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalLineIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' line bidi segments'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalLineIndex'></name></argument></arguments></scope></initializer><name type='SimpleName' identifier='logicalLineLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='logicalLineOffset'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></left><right type='NameExpr'><name type='SimpleName' identifier='logicalLineLength'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='logicalLineOffset'></name></right></initializer><name type='SimpleName' identifier='lineOffsetDelta'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='newSegmentCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='newSegments'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='newSegments'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffsetDelta'></name></right></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='newSegments'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='newSegments'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='newSegmentCount'></name></expression></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='newSegments'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='newSegmentCount'></name></expression></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='segments'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='newSegmentCount'></name></dimension></level></levels></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='newSegments'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='newIndex'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='newSegments'></name></name></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='newSegments'></name></scope></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='newIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newSegmentCount'></name></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='newIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='segments'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value><value type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='segments'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type><name type='SimpleName' identifier='getBidiSegments'></name><comment type='JavadocComment' content=' Returns from cache the text segments that should be treated as if they had a different direction than the surrounding text p Use cached data p param lineOffset offset of the first character in the line 0 based from the beginning of the document param line text of the line to specify bidi segments for return text segments that should be treated as if they had a different direction than the surrounding text Only the start index of a segment is specified relative to the start of the line Always starts with 0 and ends with the line length exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the segment indices returned by the listener do not start with 0 are not in ascending order exceed the line length or have duplicates li ul '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='clientArea'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='getClientArea'></name><comment type='JavadocComment' content=' Returns the printer client area p return the visible client area that can be used for rendering see StyledTextRenderer getClientArea '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='content'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></type><name type='SimpleName' identifier='getContent'></name><comment type='JavadocComment' content=' Returns the class StyledTextContent class to use for line offset calculations This is the wrapped content calculated in the constructor from the logical printing content p return the class StyledTextContent class to use for line offset calculations '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='gc'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type><name type='SimpleName' identifier='getGC'></name><comment type='JavadocComment' content=' Returns the printer GC to use for rendering and measuring There can be only one GC for each printer device at any given time p return the printer GC to use for rendering and measuring '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getHorizontalPixel'></name><comment type='JavadocComment' content=' Returns 0 Scrolling does not affect printing Text is wrapped for printing p return 0 see StyledTextRenderer getHorizontalPixel '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualLineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalLineIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getOffsetAtLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalLineIndex'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLogicalLineOffset'></name><comment type='JavadocComment' content=' Returns the start offset of the line at the given offset p param visualLineOffset an offset that may be anywhere within a line return the start offset of the line at the given offset relative to the start of the document '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='visualLineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getOrientation'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type><name type='SimpleName' identifier='getSelectionBackground'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type><name type='SimpleName' identifier='getSelectionForeground'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLogicalLineOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalLineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineBackgrounds'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalLineOffset'></name></argument></arguments></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type><name type='SimpleName' identifier='getLineBackgroundData'></name><comment type='JavadocComment' content=' Return cached line background data see StyledTextRenderer getLineBackgroundData '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLogicalLineOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalLineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineStyles'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalLineOffset'></name></argument></arguments></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></initializer><name type='SimpleName' identifier='logicalLineEvent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='logicalLineEvent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type><arguments><argument type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalLineEvent'></name></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></type></argument></arguments></initializer><name type='SimpleName' identifier='clone'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='clone'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalLineEvent'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='clone'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalLineEvent'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='clone'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalLineEvent'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logicalLineEvent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLineStyleData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='clone'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='logicalLineEvent'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type><name type='SimpleName' identifier='getLineStyleData'></name><comment type='JavadocComment' content=' Return cached line style background data see StyledTextRenderer getLineStyleData '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='getSelection'></name><comment type='JavadocComment' content=' Selection is not printed p return Point 0 0 see StyledTextRenderer getSelection '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getWordWrap'></name><comment type='JavadocComment' content=' Printed content is always wrapped p return true see StyledTextRenderer getWordWrap '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isFullLineSelection'></name><comment type='JavadocComment' content=' Selection is not printed Returns false p return false see StyledTextRenderer isFullLineSelection '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member></members></type></types></root>
