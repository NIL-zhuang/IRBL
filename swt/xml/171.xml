<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='PaletteData'></name><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' true if the receiver is a direct palette and false otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='isDirect'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the RGB values for an indexed palette where the indices of the array correspond to pixel values '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='colors'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the red mask for a direct palette '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='redMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the green mask for a direct palette '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='greenMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the blue mask for a direct palette '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='blueMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the red shift for a direct palette '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='redShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the green shift for a direct palette '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='greenShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the blue shift for a direct palette '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='blueShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colors'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='colors'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='isDirect'></name><scope type='ThisExpr'></scope></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement></statements></body><name type='SimpleName' identifier='PaletteData'></name><comment type='JavadocComment' content=' Constructs a new indexed palette given an array of RGB values param colors the array of code RGB code s for the palette exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the argument is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='colors'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='redMask'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='redMask'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='greenMask'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='greenMask'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='blueMask'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='blueMask'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='isDirect'></name><scope type='ThisExpr'></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='redShift'></name><scope type='ThisExpr'></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='shiftForMask'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='redMask'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='greenShift'></name><scope type='ThisExpr'></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='shiftForMask'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='greenMask'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='blueShift'></name><scope type='ThisExpr'></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='shiftForMask'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='blueMask'></name></argument></arguments></value></expression></statement></statements></body><name type='SimpleName' identifier='PaletteData'></name><comment type='JavadocComment' content=' Constructs a new direct palette given the red green and blue masks param redMask the red mask param greenMask the green mask param blueMask the blue mask '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='redMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='greenMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='blueMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rgb'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isDirect'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='colors'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rgb'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='colors'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression><comment type='BlockComment' content=' The RGB did not exist in the palette '></comment></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='redShift'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='redShift'></name></right></elseExpr><thenExpr type='BinaryExpr' operator='LEFT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='redShift'></name></expression></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='redMask'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='greenShift'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='greenShift'></name></right></elseExpr><thenExpr type='BinaryExpr' operator='LEFT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='greenShift'></name></expression></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='greenMask'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='blueShift'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='blueShift'></name></right></elseExpr><thenExpr type='BinaryExpr' operator='LEFT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgb'></name></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='blueShift'></name></expression></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='blueMask'></name></right></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='pixel'></name></expression></statement></statements></thenStmt></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getPixel'></name><comment type='JavadocComment' content=' Returns the pixel value corresponding to the given code RGB code param rgb the RGB to get the pixel value for return the pixel value for the given RGB exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the argument is null li li ERROR INVALID ARGUMENT if the RGB is not found in the palette li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='rgb'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isDirect'></name></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='colors'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='pixel'></name></index><name type='NameExpr'><name type='SimpleName' identifier='colors'></name></name></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='NameExpr'><name type='SimpleName' identifier='redMask'></name></right></initializer><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='redShift'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='redShift'></name></right></elseExpr><thenExpr type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='redShift'></name></expression></right></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='NameExpr'><name type='SimpleName' identifier='greenMask'></name></right></initializer><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='greenShift'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='greenShift'></name></right></elseExpr><thenExpr type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='greenShift'></name></expression></right></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='NameExpr'><name type='SimpleName' identifier='blueMask'></name></right></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='blueShift'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='blueShift'></name></right></elseExpr><thenExpr type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='blueShift'></name></expression></right></thenExpr></value></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='r'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='g'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><name type='SimpleName' identifier='getRGB'></name><comment type='JavadocComment' content=' Returns an code RGB code corresponding to the given pixel value param pixel the pixel to get the RGB value for return the RGB value for the given pixel exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the argument is null li li ERROR INVALID ARGUMENT if the pixel does not exist in the palette li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='colors'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type><name type='SimpleName' identifier='getRGBs'></name><comment type='JavadocComment' content=' Returns all the RGB values in the receiver if it is an indexed palette or null if it is a direct palette return the code RGB code s for the receiver or null '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></inner></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='31'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='32'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='shiftForMask'></name><comment type='JavadocComment' content=' Computes the shift value for a given mask param mask the mask to compute the shift for return the shift amount see PaletteData '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
