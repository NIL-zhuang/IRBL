<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='FontMetrics'></name><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' On Windows handle is a Win32 TEXTMETRIC struct On Photon handle is a Photon FontQueryInfo struct Warning This field is platform dependent p b IMPORTANT b This field is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be accessed from application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='handle'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='FontMetrics'></name><comment type='JavadocComment' content=' Prevents instances from being created outside the package '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='object'></name></left><right type='ThisExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontMetrics'></name></type></inner></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontMetrics'></name></type></inner></scope></initializer><name type='SimpleName' identifier='metric'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmExternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmExternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmAveCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmAveCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmMaxCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmMaxCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmWeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmWeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmOverhang'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmOverhang'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmDigitizedAspectX'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmDigitizedAspectX'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmDigitizedAspectY'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmDigitizedAspectY'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmItalic'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmItalic'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right><comment type='LineComment' content=' handle tmBreakChar metric tmBreakChar '></comment></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmUnderlined'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmUnderlined'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmStruckOut'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmStruckOut'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmPitchAndFamily'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmPitchAndFamily'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmCharSet'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmCharSet'></name><scope type='NameExpr'><name type='SimpleName' identifier='metric'></name></scope></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='equals'></name><comment type='JavadocComment' content=' Compares the argument to the receiver and returns true if they represent the em same em object using a class specific comparison param object the object to compare with this object return code true code if the object is the same as this object and code false code otherwise see hashCode '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getAscent'></name><comment type='JavadocComment' content=' Returns the ascent of the font described by the receiver A font s em ascent em is the distance from the baseline to the top of actual characters not including any of the leading area measured in pixels return the ascent of the font '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tmAveCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getAverageCharWidth'></name><comment type='JavadocComment' content=' Returns the average character width measured in pixels of the font described by the receiver return the average character width of the font '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getDescent'></name><comment type='JavadocComment' content=' Returns the descent of the font described by the receiver A font s em descent em is the distance from the baseline to the bottom of actual characters not including any of the leading area measured in pixels return the descent of the font '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tmHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getHeight'></name><comment type='JavadocComment' content=' Returns the height of the font described by the receiver measured in pixels A font s em height em is the sum of its ascent descent and leading area return the height of the font see getAscent see getDescent see getLeading '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLeading'></name><comment type='JavadocComment' content=' Returns the leading area of the font described by the receiver A font s em leading area em is the space above its ascent which may include accents or other marks return the leading space of the font '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tmHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmExternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmAveCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmMaxCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmWeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmOverhang'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmDigitizedAspectX'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmDigitizedAspectY'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmItalic'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope><comment type='LineComment' content=' handle tmFirstChar handle tmLastChar handle tmDefaultChar handle tmBreakChar '></comment></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmUnderlined'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmStruckOut'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmPitchAndFamily'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmCharSet'></name><scope type='NameExpr'><name type='SimpleName' identifier='handle'></name></scope></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='hashCode'></name><comment type='JavadocComment' content=' Returns an integer hash code for the receiver Any two objects that return code true code when passed to code equals code must return the same value for this method return the receiver s hash see equals '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontMetrics'></name></type></initializer><name type='SimpleName' identifier='fontMetrics'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontMetrics'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='fontMetrics'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='handle'></name></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='fontMetrics'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontMetrics'></name></type><name type='SimpleName' identifier='win32 new'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to allocate a new font metrics p b IMPORTANT b This method is em not em part of the public API for code FontMetrics code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param handle the code TEXTMETRIC code containing information about a font return a new font metrics object containing the specified code TEXTMETRIC code '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='handle'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
