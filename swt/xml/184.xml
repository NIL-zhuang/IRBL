<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Callback'></name><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='method'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='signature'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='argCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='address'></name><type type='PrimitiveType' specificType='INT'></type><comment type='BlockComment' content='long'></comment></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='errorResult'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='isStatic'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='isArrayBased'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='loadLibrary'></name><scope type='NameExpr'><name type='SimpleName' identifier='Library'></name></scope><arguments><argument type='StringLiteralExpr' value='swt'></argument></arguments></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></body><comment type='BlockComment' content=' Load the SWT library '></comment></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='PTR sizeof'></name></initializer><name type='SimpleName' identifier='PTR SIZEOF'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='PTR SIZEOF'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><elseExpr type='StringLiteralExpr' value='J'></elseExpr><thenExpr type='StringLiteralExpr' value='I'></thenExpr></initializer><name type='SimpleName' identifier='PTR SIGNATURE'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSignature'></name><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='SIGNATURE 0'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSignature'></name><arguments><argument type='IntegerLiteralExpr' value='1'></argument></arguments></initializer><name type='SimpleName' identifier='SIGNATURE 1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSignature'></name><arguments><argument type='IntegerLiteralExpr' value='2'></argument></arguments></initializer><name type='SimpleName' identifier='SIGNATURE 2'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSignature'></name><arguments><argument type='IntegerLiteralExpr' value='3'></argument></arguments></initializer><name type='SimpleName' identifier='SIGNATURE 3'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSignature'></name><arguments><argument type='IntegerLiteralExpr' value='4'></argument></arguments></initializer><name type='SimpleName' identifier='SIGNATURE 4'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' '></left><right type='NameExpr'><name type='SimpleName' identifier='PTR SIGNATURE'></name></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='NameExpr'><name type='SimpleName' identifier='PTR SIGNATURE'></name></right></initializer><name type='SimpleName' identifier='SIGNATURE N'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='object'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='method'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='argCount'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='Callback'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given an object to send the message to a string naming the method to invoke and an argument count Note that if the object is an instance of code Class code it is assumed that the method is a static method on that class param object the object to send the message to param method the name of the method to invoke param argCount the number of arguments that the method takes '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='method'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='argCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='object'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='method'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='argCount'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='isArrayBased'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='Callback'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given an object to send the message to a string naming the method to invoke an argument count and a flag indicating whether or not the arguments will be passed in an array Note that if the object is an instance of code Class code it is assumed that the method is a static method on that class param object the object to send the message to param method the name of the method to invoke param argCount the number of arguments that the method takes param isArrayBased code true code if the arguments should be passed in an array and false otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='method'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='argCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='isArrayBased'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='object'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='object'></name></value></expression><comment type='BlockComment' content=' Set the callback fields '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='method'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='method'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='argCount'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='argCount'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='isStatic'></name><scope type='ThisExpr'></scope></target><value type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='isArrayBased'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='isArrayBased'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='errorResult'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='errorResult'></name></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isArrayBased'></name></condition><elseStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='argCount'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='IntegerLiteralExpr' value='0'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NameExpr'><name type='SimpleName' identifier='SIGNATURE 0'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='IntegerLiteralExpr' value='1'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NameExpr'><name type='SimpleName' identifier='SIGNATURE 1'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='IntegerLiteralExpr' value='2'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NameExpr'><name type='SimpleName' identifier='SIGNATURE 2'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='IntegerLiteralExpr' value='3'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NameExpr'><name type='SimpleName' identifier='SIGNATURE 3'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='IntegerLiteralExpr' value='4'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NameExpr'><name type='SimpleName' identifier='SIGNATURE 4'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getSignature'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='argCount'></name></argument></arguments></value></expression></statement></statements></entrie></entries></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NameExpr'><name type='SimpleName' identifier='SIGNATURE N'></name></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Inline the common cases '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='address'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='bind'></name><arguments><argument type='ThisExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='object'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='method'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='signature'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='argCount'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='isStatic'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='isArrayBased'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='errorResult'></name></argument></arguments></value></expression><comment type='BlockComment' content=' Bind the address '></comment></statement></statements></body><name type='SimpleName' identifier='Callback'></name><comment type='JavadocComment' content=' Constructs a new instance of this class given an object to send the message to a string naming the method to invoke an argument count a flag indicating whether or not the arguments will be passed in an array and a value to return when an exception happens Note that if the object is an instance of code Class code it is assumed that the method is a static method on that class param object the object to send the message to param method the name of the method to invoke param argCount the number of arguments that the method takes param isArrayBased code true code if the arguments should be passed in an array and false otherwise param errorResult the return value if the java code throws an exception '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='method'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='argCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='isArrayBased'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='errorResult'><comment type='BlockComment' content='long'></comment></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='PTR sizeof'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier></modifiers></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='bind'><comment type='BlockComment' content='long'></comment></name><comment type='JavadocComment' content=' Allocates the native level resources associated with the callback This method is only invoked from within the constructor for the argument param callback the callback to bind param object the callback s object param method the callback s method param signature the callback s method signature param argCount the callback s method argument count param isStatic whether the callback s method is static param isArrayBased whether the callback s method is array based param errorResult the callback s error result '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='callback'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='method'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='signature'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='argCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='isStatic'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='isArrayBased'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='errorResult'><comment type='BlockComment' content='long'></comment></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='object'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unbind'></name><arguments><argument type='ThisExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='object'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='method'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NullLiteralExpr'></value></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='address'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Releases the native level resources associated with the callback and removes all references between the callback and other objects This helps to prevent bad application code from accidentally holding onto extraneous garbage '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='address'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getAddress'><comment type='BlockComment' content='long'></comment></name><comment type='JavadocComment' content=' Returns the address of a block of machine code which will invoke the callback represented by the receiver return the callback address '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getPlatform'></name><comment type='JavadocComment' content=' Returns the SWT platform name return the platform name of the currently running SWT '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier></modifiers></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getEntryCount'></name><comment type='JavadocComment' content=' Returns the number of times the system has been recursively entered through a callback p Note This should not be called by application code p return the entry count since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=' '></initializer><name type='SimpleName' identifier='signature'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='NameExpr'><name type='SimpleName' identifier='PTR SIGNATURE'></name></value></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='argCount'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' '></left><right type='NameExpr'><name type='SimpleName' identifier='PTR SIGNATURE'></name></right></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='signature'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getSignature'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='argCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><type type='VoidType'></type><name type='SimpleName' identifier='setEnabled'></name><comment type='JavadocComment' content=' Indicates whether or not callbacks which are triggered at the native level should cause the messages described by the matching code Callback code objects to be invoked This method is used to safely shut down SWT when it is run within environments which can generate spurious events p Note This should not be called by application code p param enable true if callbacks should be invoked '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='enable'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getEnabled'></name><comment type='JavadocComment' content=' Returns whether or not callbacks which are triggered at the native level should cause the messages described by the matching code Callback code objects to be invoked This method is used to safely shut down SWT when it is run within environments which can generate spurious events p Note This should not be called by application code p return true if callbacks should not be invoked '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setEnabled'></name><arguments><argument type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='ignore'></name></expression></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='ignoreCallbacks'></name><comment type='JavadocComment' content=' This might be called directly from native code in environments which can generate spurious events Check before removing it deprecated param ignore true if callbacks should not be invoked '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ignore'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><type type='VoidType'></type><name type='SimpleName' identifier='reset'></name><comment type='JavadocComment' content=' Immediately wipes out all native level state associated with em all em callbacks p b WARNING b This operation is em extremely em dangerous and should never be performed by application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers></member><member type='MethodDeclaration'><type type='VoidType'></type><name type='SimpleName' identifier='unbind'></name><comment type='JavadocComment' content=' Releases the native level resources associated with the callback see dispose '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='callback'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
