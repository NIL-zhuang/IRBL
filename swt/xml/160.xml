<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Font'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Resource'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' the handle to the OS font resource Warning This field is platform dependent p b IMPORTANT b This field is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be accessed from application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='Font'></name><comment type='JavadocComment' content=' Prevents uninitialized instances from being created outside the package '></comment></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='init'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='fd'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='Font'></name><comment type='JavadocComment' content=' Constructs a new font given a device and font data which describes the desired font s appearance p You must dispose the font when it is no longer required p param device the device to create the font on param fd the FontData that describes the desired font must not be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li li ERROR NULL ARGUMENT if the fd argument is null li ul exception SWTError ul li ERROR NO HANDLES if a font could not be created from the given font data li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fd'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fds'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='fds'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='fds'></name></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='fds'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='init'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='fds'></name></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='Font'></name><comment type='JavadocComment' content=' Constructs a new font given a device and an array of font data which describes the desired font s appearance p You must dispose the font when it is no longer required p param device the device to create the font on param fds the array of FontData that describes the desired font must not be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li li ERROR NULL ARGUMENT if the fds argument is null li li ERROR INVALID ARGUMENT if the length of fds is zero li li ERROR NULL ARGUMENT if any fd in the array is null li ul exception SWTError ul li ERROR NO HANDLES if a font could not be created from the given font data li ul since 2 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fds'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='name'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='init'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='name'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></argument></arguments></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='Font'></name><comment type='JavadocComment' content=' Constructs a new font given a device a font name the height of the desired font in points and a font style p You must dispose the font when it is no longer required p param device the device to create the font on param name the name of the font must not be null param height the font height in points param style a bit or combination of NORMAL BOLD ITALIC exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li li ERROR NULL ARGUMENT if the name argument is null li li ERROR INVALID ARGUMENT if the height is negative li ul exception SWTError ul li ERROR NO HANDLES if a font could not be created from the given arguments li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='name'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes of the operating system resources associated with the font Applications must dispose of all fonts which they allocate '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='object'></name></left><right type='ThisExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></inner></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></initializer><name type='SimpleName' identifier='font'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='equals'></name><comment type='JavadocComment' content=' Compares the argument to the receiver and returns true if they represent the em same em object using a class specific comparison param object the object to compare with this object return code true code if the object is the same as this object and code false code otherwise see hashCode '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></thenExpr></initializer><name type='SimpleName' identifier='logFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='LOGFONT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='FontData'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='computePoints'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type><name type='SimpleName' identifier='getFontData'></name><comment type='JavadocComment' content=' Returns an array of code FontData code s representing the receiver On Windows only one FontData will be returned per font On X however a code Font code object em may em be composed of multiple X fonts To support this case we return an array of font data objects return an array of font data objects describing the receiver exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='handle'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='hashCode'></name><comment type='JavadocComment' content=' Returns an integer hash code for the receiver Any two objects that return code true code when passed to code equals code must return the same value for this method return the receiver s hash see equals '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fd'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='fd'></name></scope></initializer><name type='SimpleName' identifier='logFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></initializer><name type='SimpleName' identifier='lfHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='computePixels'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='fd'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateFontIndirect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='lfHeight'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='init'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fd'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isDisposed'></name><comment type='JavadocComment' content=' Returns code true code if the font has been disposed and code false code otherwise p This method gets the dispose state for the font When a font has been disposed it is an error to invoke any other method using the font return code true code when the font is disposed and code false code otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='StringLiteralExpr' value='Font DISPOSED '></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Font '></left><right type='NameExpr'><name type='SimpleName' identifier='handle'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the receiver '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></initializer><name type='SimpleName' identifier='font'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='handle'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='font'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type><name type='SimpleName' identifier='win32 new'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to allocate a new font p b IMPORTANT b This method is em not em part of the public API for code Font code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param device the device on which to allocate the color param handle the handle for the font return a new font object containing the specified device and handle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
