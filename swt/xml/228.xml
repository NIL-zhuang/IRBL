<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='PngLzBlockReader'></name><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='isLastBlock'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='compressionType'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='uncompressedBytesRemaining'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngDecodingDataStream'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='huffmanTables'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngHuffmanTables'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='window'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='windowIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='copyIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='copyBytesRemaining'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='UNCOMPRESSED'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='COMPRESSED FIXED'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='COMPRESSED DYNAMIC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='256'></initializer><name type='SimpleName' identifier='END OF COMPRESSED BLOCK'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='257'></initializer><name type='SimpleName' identifier='FIRST LENGTH CODE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='285'></initializer><name type='SimpleName' identifier='LAST LENGTH CODE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='FIRST DISTANCE CODE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='29'></initializer><name type='SimpleName' identifier='LAST DISTANCE CODE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='FIRST CODE LENGTH CODE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='19'></initializer><name type='SimpleName' identifier='LAST CODE LENGTH CODE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='6'></value><value type='IntegerLiteralExpr' value='7'></value><value type='IntegerLiteralExpr' value='8'></value><value type='IntegerLiteralExpr' value='9'></value><value type='IntegerLiteralExpr' value='10'></value><value type='IntegerLiteralExpr' value='11'></value><value type='IntegerLiteralExpr' value='13'></value><value type='IntegerLiteralExpr' value='15'></value><value type='IntegerLiteralExpr' value='17'></value><value type='IntegerLiteralExpr' value='19'></value><value type='IntegerLiteralExpr' value='23'></value><value type='IntegerLiteralExpr' value='27'></value><value type='IntegerLiteralExpr' value='31'></value><value type='IntegerLiteralExpr' value='35'></value><value type='IntegerLiteralExpr' value='43'></value><value type='IntegerLiteralExpr' value='51'></value><value type='IntegerLiteralExpr' value='59'></value><value type='IntegerLiteralExpr' value='67'></value><value type='IntegerLiteralExpr' value='83'></value><value type='IntegerLiteralExpr' value='99'></value><value type='IntegerLiteralExpr' value='115'></value><value type='IntegerLiteralExpr' value='131'></value><value type='IntegerLiteralExpr' value='163'></value><value type='IntegerLiteralExpr' value='195'></value><value type='IntegerLiteralExpr' value='227'></value><value type='IntegerLiteralExpr' value='258'></value></values></initializer><name type='SimpleName' identifier='lengthBases'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='0'></value></values></initializer><name type='SimpleName' identifier='extraLengthBits'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='7'></value><value type='IntegerLiteralExpr' value='9'></value><value type='IntegerLiteralExpr' value='13'></value><value type='IntegerLiteralExpr' value='17'></value><value type='IntegerLiteralExpr' value='25'></value><value type='IntegerLiteralExpr' value='33'></value><value type='IntegerLiteralExpr' value='49'></value><value type='IntegerLiteralExpr' value='65'></value><value type='IntegerLiteralExpr' value='97'></value><value type='IntegerLiteralExpr' value='129'></value><value type='IntegerLiteralExpr' value='193'></value><value type='IntegerLiteralExpr' value='257'></value><value type='IntegerLiteralExpr' value='385'></value><value type='IntegerLiteralExpr' value='513'></value><value type='IntegerLiteralExpr' value='769'></value><value type='IntegerLiteralExpr' value='1025'></value><value type='IntegerLiteralExpr' value='1537'></value><value type='IntegerLiteralExpr' value='2049'></value><value type='IntegerLiteralExpr' value='3073'></value><value type='IntegerLiteralExpr' value='4097'></value><value type='IntegerLiteralExpr' value='6145'></value><value type='IntegerLiteralExpr' value='8193'></value><value type='IntegerLiteralExpr' value='12289'></value><value type='IntegerLiteralExpr' value='16385'></value><value type='IntegerLiteralExpr' value='24577'></value></values></initializer><name type='SimpleName' identifier='distanceBases'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='6'></value><value type='IntegerLiteralExpr' value='6'></value><value type='IntegerLiteralExpr' value='7'></value><value type='IntegerLiteralExpr' value='7'></value><value type='IntegerLiteralExpr' value='8'></value><value type='IntegerLiteralExpr' value='8'></value><value type='IntegerLiteralExpr' value='9'></value><value type='IntegerLiteralExpr' value='9'></value><value type='IntegerLiteralExpr' value='10'></value><value type='IntegerLiteralExpr' value='10'></value><value type='IntegerLiteralExpr' value='11'></value><value type='IntegerLiteralExpr' value='11'></value><value type='IntegerLiteralExpr' value='12'></value><value type='IntegerLiteralExpr' value='12'></value><value type='IntegerLiteralExpr' value='13'></value><value type='IntegerLiteralExpr' value='13'></value></values></initializer><name type='SimpleName' identifier='extraDistanceBits'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stream'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='stream'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='isLastBlock'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement></statements></body><name type='SimpleName' identifier='PngLzBlockReader'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngDecodingDataStream'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='window'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='windowSize'></name></dimension></level></levels></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setWindowSize'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='windowSize'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='isLastBlock'></name></target><value type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatBit'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='compressionType'></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatBits'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='IntegerLiteralExpr' value='2'></argument></arguments></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='compressionType'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='compressionType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='UNCOMPRESSED'></name></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='compressionType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COMPRESSED DYNAMIC'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='huffmanTables'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getFixedTables'></name><scope type='NameExpr'><name type='SimpleName' identifier='PngHuffmanTables'></name></scope></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='huffmanTables'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDynamicTables'></name><scope type='NameExpr'><name type='SimpleName' identifier='PngHuffmanTables'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument></arguments></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></initializer><name type='SimpleName' identifier='b1'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></initializer><name type='SimpleName' identifier='b2'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></initializer><name type='SimpleName' identifier='b3'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></initializer><name type='SimpleName' identifier='b4'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b1'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='b3'></name></expression></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b2'></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='b4'></name></expression></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='uncompressedBytesRemaining'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='b1'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='b2'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='readNextBlockHeader'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='compressionType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='UNCOMPRESSED'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextCompressedByte'></name></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='END OF COMPRESSED BLOCK'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='value'></name></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isLastBlock'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readNextBlockHeader'></name></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getNextByte'></name></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='uncompressedBytesRemaining'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readNextBlockHeader'></name></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getNextByte'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='uncompressedBytesRemaining'></name></expression></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></statement></statements></thenStmt></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getNextByte'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='compressionType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='UNCOMPRESSED'></name></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='copyBytesRemaining'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextLiteralValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='huffmanTables'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument></arguments></left><right type='NameExpr'><name type='SimpleName' identifier='END OF COMPRESSED BLOCK'></name></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='uncompressedBytesRemaining'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></thenStmt></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='assertBlockAtEnd'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='assertBlockAtEnd'></name></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readNextBlockHeader'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='assertBlockAtEnd'></name></expression></statement></statements></body><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='isLastBlock'></name></expression></condition></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='assertCompressedDataAtEnd'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='copyBytesRemaining'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='copyIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='window'></name></name></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='window'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='copyBytesRemaining'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='copyIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='copyIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='window'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='copyIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='window'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='value'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextLiteralValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='huffmanTables'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument></arguments></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='END OF COMPRESSED BLOCK'></name></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='END OF COMPRESSED BLOCK'></name></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='LAST LENGTH CODE'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='FIRST LENGTH CODE'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='extraLengthBits'></name></name></initializer><name type='SimpleName' identifier='extraBits'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='FIRST LENGTH CODE'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='lengthBases'></name></name></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='extraBits'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='length'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatBits'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='extraBits'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getNextDistanceValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='huffmanTables'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='NameExpr'><name type='SimpleName' identifier='LAST DISTANCE CODE'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='extraBits'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='value'></name></index><name type='NameExpr'><name type='SimpleName' identifier='extraDistanceBits'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='value'></name></index><name type='NameExpr'><name type='SimpleName' identifier='distanceBases'></name></name></initializer><name type='SimpleName' identifier='distance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='extraBits'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='distance'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatBits'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='extraBits'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='copyIndex'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='distance'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='copyIndex'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='copyIndex'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='window'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='copyBytesRemaining'></name></target><value type='NameExpr'><name type='SimpleName' identifier='length'></name></value></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getNextCompressedByte'></name></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readNextBlockHeader'></name></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getNextByte'></name></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='window'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='window'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='windowIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></expression></statement></statements></thenStmt></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getNextCompressedByte'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
