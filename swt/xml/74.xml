<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='custom'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='SWT'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='StyledTextRenderer'></name><comment type='JavadocComment' content=' A StyledTextRenderer renders the content of a StyledText widget Subclasses can provide a different device e g Display Printer to render on and implement abstract methods to return resources created on that device '></comment><members><member type='FieldDeclaration'><comment type='LineComment' content=' device to render on'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='regularFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='boldFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='italicFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='boldItalicFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' width in pixels of a tab character'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='tabWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='ascent'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='descent'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' width in pixels of the space used to represent line delimiters'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineEndSpaceWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='regularFont'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='regularFont'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='StyledTextRenderer'></name><comment type='JavadocComment' content=' Creates an instance of class StyledTextRenderer class p param device Device to render on param regularFont Font to use for regular text param leftMargin margin to the left of the text '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='regularFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getGC'></name></initializer><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineEndSpaceWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='stringExtent'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='StringLiteralExpr' value=' '></argument></arguments></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></initializer><name type='SimpleName' identifier='originalFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable></variables></expression><comment type='LineComment' content=' fixes bug 41773'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getFontMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></initializer><name type='SimpleName' identifier='metrics'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontMetrics'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFont'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='BOLD'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='metrics'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getFontMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFont'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ITALIC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='metrics'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getFontMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFont'></name><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='BOLD'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ITALIC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='metrics'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getFontMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='originalFont'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeGC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></scope></expression></thenStmt><comment type='LineComment' content=' clear the font cache'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></target><value type='NullLiteralExpr'></value></value></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='calculateLineHeight'></name><comment type='JavadocComment' content=' Calculates the line height and space width '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></target><value type='NullLiteralExpr'></value></value></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes the resource created by the receiver '></comment></member><member type='MethodDeclaration'><type type='VoidType'></type><name type='SimpleName' identifier='disposeGC'></name><comment type='JavadocComment' content=' Dispose the specified GC Allows subclasses to reuse GCs p param gc GC to dispose '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getOffsetAtLine'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></argument></arguments></initializer><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='line'></name></scope></initializer><name type='SimpleName' identifier='lineLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSelection'></name></initializer><name type='SimpleName' identifier='selection'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='selectionStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='selection'></name></scope></initializer><name type='SimpleName' identifier='selectionEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLeftMargin'></name></initializer><name type='SimpleName' identifier='leftMargin'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='lineBackground'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getTextLayout'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='layout'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name></initializer><name type='SimpleName' identifier='client'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineBackgroundData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='event'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineBackground'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='lineBackground'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineBackground'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineBackground'></name></target><value type='NameExpr'><name type='SimpleName' identifier='widgetBackground'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='clearBackground'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='isFullLineSelection'></name></left><right type='BooleanLiteralExpr' value='false'></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></left><right type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></right></right></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBackground'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineBackground'></name></argument></arguments></expression><comment type='LineComment' content=' completely selected'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setForeground'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineBackground'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='fillRectangle'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='client'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='leftMargin'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='paintY'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='client'></name></scope></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='ascent'></name></left><right type='NameExpr'><name type='SimpleName' identifier='descent'></name></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='client'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='leftMargin'></name></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getHorizontalPixel'></name></right></initializer><name type='SimpleName' identifier='paintX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawLineBreakSelection'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='paintX'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='paintY'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setForeground'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='widgetForeground'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBackground'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineBackground'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></right></right></inner></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='draw'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='paintX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='paintY'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='end'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getSelectionForeground'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getSelectionBackground'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='draw'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='paintX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='paintY'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeTextLayout'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='layout'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='drawLine'></name><comment type='JavadocComment' content=' Draws a line of text at the specified location p param line the line to draw param lineIndex index of the line to draw param paintY y location to draw at param gc GC to draw on param widgetBackground the widget background color Used as the default rendering color param widgetForeground the widget foreground color Used as the default rendering color param clearBackground true if the line background should be drawn explicitly '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='paintY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='widgetBackground'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='widgetForeground'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='clearBackground'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><type type='VoidType'></type><name type='SimpleName' identifier='drawLineBreakSelection'></name><comment type='JavadocComment' content=' Draws the background of the line selection Implemented by subclasses for optional selection rendering p param line the line to draw param lineOffset offset of the first character in the line Relative to the start of the document param styles line styles param paintY y location to draw at param gc GC to draw on param bidi the bidi object to use for measuring and rendering text in bidi locales null when not in bidi mode '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='paintX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='paintY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter></parameters></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='getClientArea'></name><comment type='JavadocComment' content=' Returns the visible client area that can be used for rendering p return the visible client area that can be used for rendering '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></type><name type='SimpleName' identifier='getContent'></name><comment type='JavadocComment' content=' Returns the class StyledTextContent class to use for line offset calculations p return the class StyledTextContent class to use for line offset calculations '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='device'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type><name type='SimpleName' identifier='getDevice'></name><comment type='JavadocComment' content=' Returns the Device that is being rendered on p return the Device that is being rendered on '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='ascent'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getBaseline'></name></member><member type='MethodDeclaration'><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type><name type='SimpleName' identifier='getBidiSegments'></name><comment type='JavadocComment' content=' Returns the text segments that should be treated as if they had a different direction than the surrounding text p param lineOffset offset of the first character in the line 0 based from the beginning of the document param line text of the line to specify bidi segments for return text segments that should be treated as if they had a different direction than the surrounding text Only the start index of a segment is specified relative to the start of the line Always starts with 0 and ends with the line length exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the segment indices returned by the listener do not start with 0 are not in ascending order exceed the line length or have duplicates li ul '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='style'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='BOLD'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='boldFont'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFontData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></argument></arguments></value></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ITALIC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='italicFont'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFontData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></argument></arguments></value></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='BOLD'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ITALIC'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='boldItalicFont'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFontData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></argument></arguments></value></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='regularFont'></name></expression></statement></statements></entrie></entries></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type><name type='SimpleName' identifier='getFont'></name><comment type='JavadocComment' content=' Returns the Font according with the given style '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getFontData'></name><scope type='NameExpr'><name type='SimpleName' identifier='regularFont'></name></scope></initializer><name type='SimpleName' identifier='fontDatas'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setStyle'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='fontDatas'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='style'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='fontDatas'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='fontDatas'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type><name type='SimpleName' identifier='getFontData'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type><name type='SimpleName' identifier='getGC'></name><comment type='JavadocComment' content=' Returns the GC to use for rendering and measuring Allows subclasses to reuse GCs p return the GC to use for rendering and measuring '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getHorizontalPixel'></name><comment type='JavadocComment' content=' Returns the horizontal scroll position p return the horizontal scroll position '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLeftMargin'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='lineEndSpaceWidth'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLineEndSpaceWidth'></name><comment type='JavadocComment' content=' Returns the width in pixels of the space used to represent line delimiters return the width in pixels of the space used to represent line delimiters '></comment></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type><name type='SimpleName' identifier='getLineBackgroundData'></name><comment type='JavadocComment' content=' Returns the line background data for the given line or null if there is none p param lineOffset offset of the line start relative to the start of the content param line line to get line background data for return line background data for the given line may return null '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='ascent'></name></left><right type='NameExpr'><name type='SimpleName' identifier='descent'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLineHeight'></name><comment type='JavadocComment' content=' Returns the height in pixels of a line p return the height in pixels of a line '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='line'></name></scope></initializer><name type='SimpleName' identifier='lineLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getWordWrap'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getVisualLineStyleData'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='event'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type><name type='SimpleName' identifier='getLineStyleData'></name><comment type='JavadocComment' content=' Returns the line style data for the specified line The lineOffset and line may specify a segment of a logical line stored in the class StyledTextContent class of the widget The returned styles are guaranteed to be at least partially on the segment p param event the styles for the logical line param lineOffset offset of the line start relative to the start of the content param line line to get line styles for return line style data for the given line segment Styles may start before line start and end after line end but are guaranteed to be at least partially on the line '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type><name type='SimpleName' identifier='getLineStyleData'></name><comment type='JavadocComment' content=' Returns the line style data for the given line or null if there is none If there is a LineStyleListener but it does not set any styles the StyledTextEvent styles field will be initialized to an empty array p param lineOffset offset of the line start relative to the start of the content param line line to get line styles for return line style data for the given line Styles may start before line start and end after line end '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getOrientation'></name><comment type='JavadocComment' content=' '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getRightMargin'></name><comment type='JavadocComment' content=' '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type><name type='SimpleName' identifier='getSelectionForeground'></name><comment type='JavadocComment' content=' '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type><name type='SimpleName' identifier='getSelectionBackground'></name><comment type='JavadocComment' content=' '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='getSelection'></name><comment type='JavadocComment' content=' Returns the widget selection Implemented by subclasses for optional selection rendering p return the widget selection '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></right></initializer><name type='SimpleName' identifier='lineEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalStyles'></name></scope></initializer><name type='SimpleName' identifier='oldStyleCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='newStyleCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logicalStyles'></name></name></initializer><name type='SimpleName' identifier='style'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></right></left><right type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='newStyleCount'></name></expression></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldStyleCount'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='newStyleCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldStyleCount'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='newStyleCount'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='newStyles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logicalStyles'></name></name></initializer><name type='SimpleName' identifier='style'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></right></left><right type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logicalStyles'></name></name></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='oldStyleCount'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logicalStyles'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='logicalStyles'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></componentType></type><name type='SimpleName' identifier='getVisualLineStyleData'></name><comment type='JavadocComment' content=' Returns styles for the specified visual wrapped line p param logicalStyles the styles for a logical unwrapped line param lineOffset offset of the visual line param lineLength length of the visual line return styles in the logicalStyles array that are at least partially on the specified visual line '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='logicalStyles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineLength'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getWordWrap'></name><comment type='JavadocComment' content=' Returns the word wrap state p return true word wrap is on false no word wrap lines may extend beyond the right side of the client area '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isFullLineSelection'></name><comment type='JavadocComment' content=' Returns whether the widget was created with the SWT FULL SELECTION style Implemented by subclasses for optional selection rendering p return true the widget is running in full line selection mode false otherwise '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getGC'></name></initializer><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='tabLength'></name></argument></arguments></initializer><name type='SimpleName' identifier='tabBuffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='tabBuffer'></name></scope><arguments><argument type='CharLiteralExpr' value=' '></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='tabLength'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tabWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='stringExtent'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='tabBuffer'></name></scope></argument></arguments></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeGC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setTabLength'></name><comment type='JavadocComment' content=' Calculates the width in pixel of a tab character p param tabLength number of space characters represented by a tab character '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='tabLength'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='createTextLayout'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='layout'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='regularFont'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setText'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setOrientation'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getOrientation'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSegments'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getBidiSegments'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setTabs'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='tabWidth'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='line'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineStyleData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='event'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='NullLiteralExpr'></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='styles'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></thenExpr></initializer><name type='SimpleName' identifier='styles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lastOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='styles'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='styleIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></initializer><name type='SimpleName' identifier='style'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleRange'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isUnstyled'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='end'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></right></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='end'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></right></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='lastOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lastOffset'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFont'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='fontStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></argument></arguments></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='textStyle'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='NameExpr'><name type='SimpleName' identifier='textStyle'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='NameExpr'><name type='SimpleName' identifier='textStyle'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='textStyle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='end'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastOffset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lastOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='styleIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='styleIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='styleIndex'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='lastOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lastOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='layout'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type><name type='SimpleName' identifier='getTextLayout'></name><comment type='JavadocComment' content=' Returns TextLayout given a line index and an array of styles '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type><name type='SimpleName' identifier='createTextLayout'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='disposeTextLayout'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='layout'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></type></types></root>
