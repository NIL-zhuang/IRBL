<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2003 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='LEDataInputStream'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='position'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='in'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The byte array containing the bytes to read '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The current position within the byte array code buf code A value equal to buf length indicates no bytes available A value of 0 indicates the buffer is full '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='pos'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='input'></name></argument><argument type='IntegerLiteralExpr' value='512'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='LEDataInputStream'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='input'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='in'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='input'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bufferSize'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ThrowStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IllegalArgumentException'></name></type></expression></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='buf'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='bufferSize'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bufferSize'></name></value></expression></statement></statements></thenStmt></statement></statements></body><name type='SimpleName' identifier='LEDataInputStream'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='input'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bufferSize'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='buf'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='in'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='close'></name><scope type='NameExpr'><name type='SimpleName' identifier='in'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='in'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='close'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='position'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getPosition'></name><comment type='JavadocComment' content=' Answer how many bytes were read '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='buf'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ThrowStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buf'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='pos'></name></right></inner></left><right type='MethodCallExpr'><name type='SimpleName' identifier='available'></name><scope type='NameExpr'><name type='SimpleName' identifier='in'></name></scope></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='available'></name><comment type='JavadocComment' content=' Answers how many bytes are available for reading without blocking '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='buf'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ThrowStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='position'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='pos'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buf'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='pos'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='in'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='read'></name><comment type='JavadocComment' content=' Answer the next byte of the input stream '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='len'></name></initializer><name type='SimpleName' identifier='left'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='off'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='len'></name></argument></arguments></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='position'></name></target><value type='NameExpr'><name type='SimpleName' identifier='result'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NameExpr'><name type='SimpleName' identifier='left'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='len'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='left'></name></target><value type='NameExpr'><name type='SimpleName' identifier='result'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='off'></name></target><value type='NameExpr'><name type='SimpleName' identifier='result'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='off'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='left'></name></argument></arguments></value></expression></statement></statements></body><condition type='BooleanLiteralExpr' value='true'></condition></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='read'></name><comment type='JavadocComment' content=' Don t imitate the DK behaviour of reading a random number of bytes when you can actually read them all '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='b'></name><type type='ArrayType' origin='NAME'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='off'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='len'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='buf'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ThrowStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ThrowStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ArrayIndexOutOfBoundsException'></name></type></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='cacheCopied'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='offset'></name></initializer><name type='SimpleName' identifier='newOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buf'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='pos'></name></right></initializer><name type='SimpleName' identifier='available'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Are there pushback bytes available '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='available'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='available'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='available'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='length'></name></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pos'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='newOffset'></name></target><value type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='length'></name></expression></thenStmt><comment type='LineComment' content=' Have we copied enough '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='in'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newOffset'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='inCopied'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='inCopied'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='inCopied'></name></left><right type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></right></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='inCopied'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='cacheCopied'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='readData'></name><comment type='JavadocComment' content=' Reads at most code length code bytes from this LEDataInputStream and stores them in byte array code buffer code starting at code offset code p Answer the number of bytes actually read or 1 if no bytes were read and end of stream was encountered This implementation reads bytes from the pushback buffer first then the target stream if more bytes are required to satisfy code count code p param buffer the byte array in which to store the read bytes param offset the offset in code buffer code to store the read bytes param length the maximum number of bytes to store in code buffer code return int the number of bytes actually read or 1 if end of stream exception java io IOException if an IOException occurs '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4'></dimension></level></levels></initializer><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='readInt'></name><comment type='JavadocComment' content=' Answer an integer comprised of the next four bytes of the input stream '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='2'></dimension></level></levels></initializer><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='SHORT'></type></expression></statement></statements></body><type type='PrimitiveType' specificType='SHORT'></type><name type='SimpleName' identifier='readShort'></name><comment type='JavadocComment' content=' Answer a short comprised of the next two bytes of the input stream '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='b'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='NameExpr'><name type='SimpleName' identifier='pos'></name></right></condition><thenStmt type='ThrowStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='position'></name></target><value type='NameExpr'><name type='SimpleName' identifier='length'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='pos'></name></target><value type='NameExpr'><name type='SimpleName' identifier='length'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pos'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='unread'></name><comment type='JavadocComment' content=' Push back the entire content of the given buffer code b code p The bytes are pushed so that they would be read back b 0 b 1 etc If the push back buffer cannot handle the bytes copied from code b code an IOException will be thrown and no byte will be pushed back p param b the byte array containing bytes to push back into the stream exception java io IOException if the pushback buffer is too small '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='b'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member></members><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
