<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='TextLayout'></name><comment type='JavadocComment' content=' code TextLayout code is a graphic object that represents styled text p Instances of this class provide support for drawing cursor navigation hit testing text wrapping alignment tab expansion line breaking etc These are aspects required for rendering internationalized text p p Application code must explicitly invoke the code TextLayout dispose code method to release the operating system resources managed by each instance when those instances are no longer required p since 3 0 '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Resource'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='font'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='text'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='segmentsText'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineSpacing'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='ascent'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='descent'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='alignment'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='wrapWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='orientation'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='tabs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='segments'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='styles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='allRuns'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='runs'></name><type type='ArrayType' origin='TYPE'><componentType type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineOffset'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineY'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineWidth'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='mLangFontLink2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='CharLiteralExpr' value=' u200E'></initializer><name type='SimpleName' identifier='LTR MARK'></name><type type='PrimitiveType' specificType='CHAR'></type></variable><variable type='VariableDeclarator'><initializer type='CharLiteralExpr' value=' u200F'></initializer><name type='SimpleName' identifier='RTL MARK'></name><type type='PrimitiveType' specificType='CHAR'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='SCRIPT VISATTR SIZEOF'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='8'></initializer><name type='SimpleName' identifier='GOFFSET SIZEOF'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='16'></dimension></level></levels></initializer><name type='SimpleName' identifier='CLSID CMultiLanguage'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='16'></dimension></level></levels></initializer><name type='SimpleName' identifier='IID IMLangFontLink2'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='IIDFromString'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='StringLiteralExpr' value=' 275c23e2 3747 11d0 9fea 00aa003f8646 0'></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='CLSID CMultiLanguage'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='IIDFromString'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='StringLiteralExpr' value=' DCCFC162 2B38 11d2 B7EC 00C04F8F5D9A 0'></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='IID IMLangFontLink2'></name></argument></arguments></expression></statement></statements></body></member><member type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='StyleItem'></name><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='style'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineBreak'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='softBreak'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='tab'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content='Script cache and analysis '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='analysis'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT ANALYSIS'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='psc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content='Shape info malloc when the run is shaped '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='glyphs'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='glyphCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='clusters'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='visAttrs'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content='Place info malloc when the run is placed '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='advances'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='goffsets'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='ascent'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='descent'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='leading'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' ScriptBreak '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='psla'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='fallbackFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='psc'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptFreeCache'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='psc'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='psc'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='psc'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='glyphCount'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='clusters'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='clusters'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='clusters'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visAttrs'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='visAttrs'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visAttrs'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='advances'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='advances'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='advances'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='goffsets'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='goffsets'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='goffsets'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='psla'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='psla'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='psla'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fallbackFont'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VtblCall'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='8'></argument><argument type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='fallbackFont'></name></argument></arguments></expression><comment type='BlockComment' content=' ReleaseFont '></comment></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fallbackFont'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='IntegerLiteralExpr' value='0'></value></value></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineBreak'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='softBreak'></name></target><value type='BooleanLiteralExpr' value='false'></value></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='free'></name></member></members></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineSpacing'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='orientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='styles'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='2'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='text'></name></target><value type='StringLiteralExpr' value=''></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppv'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='OleInitialize'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='CoCreateInstance'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='CLSID CMultiLanguage'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CLSCTX INPROC SERVER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='IID IMLangFontLink2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppv'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppv'></name></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='TextLayout'></name><comment type='JavadocComment' content=' Constructs a new instance of this class on the given device p You must dispose the text layout when it is no longer required p param device the device on which to allocate the text layout exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li ul see dispose '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='psla'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='chars'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChars'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='psla'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='chars'></name></scope></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='chars'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psla'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='breakRun'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fallbackFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></thenExpr></initializer><name type='SimpleName' identifier='logFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></variable></variables></expression><comment type='BlockComment' content=' Feature in Windows The fallback font returned by the MLang service can be disposed by some other client running in the same thread For example disposing a Browser widget internally releases all fonts in the MLang cache The fix is to use GetObject to detect if the font was disposed and reshape the run '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GetObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='fallbackFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='LOGFONT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='free'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getItemFont'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='shape'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkItem'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkLayout'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='runs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gc'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='NullLiteralExpr'></argument></arguments></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></thenExpr></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='CreateCompatibleDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcHdc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='itemize'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getItemFont'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='shape'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></type></initializer><name type='SimpleName' identifier='logAttr'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT PROPERTIES'></name></type></initializer><name type='SimpleName' identifier='properties'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT PROPERTIES'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lineWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lineStart'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='ch'></name><type type='PrimitiveType' specificType='CHAR'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='ch'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value=' t'></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='tabs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='tabs'></name></scope></initializer><name type='SimpleName' identifier='tabsLength'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='tabs'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='tabs'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='tabsLength'></name></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='j'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='tabsLength'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='tabsLength'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='tabs'></name></name></initializer><name type='SimpleName' identifier='tabX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='tabsLength'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='tabs'></name></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='tabsLength'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='tabs'></name></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='tabsLength'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='tabs'></name></name></right></thenExpr></initializer><name type='SimpleName' identifier='lastTabWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='lastTabWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='WhileStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='tabX'></name></target><value type='NameExpr'><name type='SimpleName' identifier='lastTabWidth'></name></value></expression></body><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='tabX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='tabX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value=' n'></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='CharLiteralExpr' value=' r'></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='next'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='next'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='next'></name></scope></argument></arguments></left><right type='CharLiteralExpr' value=' n'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='free'></name><scope type='NameExpr'><name type='SimpleName' identifier='next'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></left><right type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></right></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='piDx'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptGetLogicalWidths'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piDx'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></right></initializer><name type='SimpleName' identifier='maxWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='start'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='piDx'></name></name></value></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='start'></name></index><name type='NameExpr'><name type='SimpleName' identifier='piDx'></name></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='maxWidth'></name></right></condition></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='start'></name></initializer><name type='SimpleName' identifier='firstStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='i'></name></initializer><name type='SimpleName' identifier='firstIndice'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='breakRun'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='psla'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></right></inner></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fSoftBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='fWhiteSpace'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='start'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></right></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fSoftBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='fWhiteSpace'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='properties'></name></argument><argument type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='eScript'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='scripts'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT PROPERTIES'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='langid'></name><scope type='NameExpr'><name type='SimpleName' identifier='properties'></name></scope></initializer><name type='SimpleName' identifier='langID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='pRun'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='properties'></name></argument><argument type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='eScript'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='pRun'></name></scope></scope></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='scripts'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT PROPERTIES'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='langid'></name><scope type='NameExpr'><name type='SimpleName' identifier='properties'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='langID'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='langID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LANG NEUTRAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='langid'></name><scope type='NameExpr'><name type='SimpleName' identifier='properties'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LANG NEUTRAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='breakRun'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pRun'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='psla'></name><scope type='NameExpr'><name type='SimpleName' identifier='pRun'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='pRun'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></right></inner></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='fWhiteSpace'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></expression></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Bug in Windows For some reason Uniscribe sets the fSoftBreak flag for the first letter after a letter with an accent This cause a break line to be set in the middle of a word The fix is to detect the case and ignore fSoftBreak forcing the algorithm keep searching '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></right></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='run'></name></target><value type='ArrayAccessExpr'><index type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement></statements></body><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></right></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='NameExpr'><name type='SimpleName' identifier='firstIndice'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='run'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='firstStart'></name></argument></arguments></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='run'></name></target><value type='ArrayAccessExpr'><index type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='breakRun'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='psla'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></right></inner></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='fWhiteSpace'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></expression></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='start'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></initializer><name type='SimpleName' identifier='newRun'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='newRun'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='newRun'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='newRun'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='newRun'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='free'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='start'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getItemFont'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='shape'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getItemFont'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newRun'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='shape'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newRun'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newAllRuns'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newAllRuns'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='newAllRuns'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newAllRuns'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='newRun'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='softBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></expression></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runs'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></dimension></level><level type='ArrayCreationLevel'></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineY'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lineWidth'></name><scope type='ThisExpr'></scope></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lineRunCount'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='line'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ThisExpr'></scope></argument></arguments></initializer><name type='SimpleName' identifier='ascent'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='ThisExpr'></scope></argument></arguments></initializer><name type='SimpleName' identifier='descent'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='lineRuns'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='lineRunCount'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='run'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineRunCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></thenExpr></initializer><name type='SimpleName' identifier='lptm'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getItemFont'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetTextMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lptm'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Update the run metrics if the last run is a hard break '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='lineRunCount'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineRunCount'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='lineRunCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></name></initializer><name type='SimpleName' identifier='lastRun'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='reorder'></name><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='lineWidth'></name><scope type='ThisExpr'></scope></name></target><value type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alignment'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CENTER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='lineWidth'></name><scope type='ThisExpr'></scope></name></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='lineWidth'></name><scope type='ThisExpr'></scope></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></name></scope></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='ascent'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='descent'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lineSpacing'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='lastRun'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lastRun'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineRunCount'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='IntegerLiteralExpr' value='0'></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ThisExpr'></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='ThisExpr'></scope></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gc'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='computeRuns'></name><comment type='BlockComment' content=' Compute the runs itemize shape place and reorder the runs Break paragraphs into lines wraps the text and initialize caches '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='font'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='text'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tabs'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='styles'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runs'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineY'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VtblCall'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></argument></arguments></expression><comment type='BlockComment' content=' Release '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='OleUninitialize'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes of the operating system resources associated with the text layout Applications must dispose of all allocated text layouts '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='draw'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='draw'></name><comment type='JavadocComment' content=' Draws the receiver s text using the specified GC at the specified point param gc the GC to draw param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the gc is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gc'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gc'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionBackground'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionBackground'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></initializer><name type='SimpleName' identifier='hdc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></right></initializer><name type='SimpleName' identifier='hasSelection'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></argument></arguments></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></argument></arguments></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getSystemColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR LIST SELECTION TEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionBackground'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectionBackground'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getSystemColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR LIST SELECTION'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetTextColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument></arguments></initializer><name type='SimpleName' identifier='foreground'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SaveDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument></arguments></initializer><name type='SimpleName' identifier='state'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RECT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='selBrush'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='selPen'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selBrush'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateSolidBrush'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionBackground'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='selPen'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreatePen'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='BS SOLID'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></scope></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='rop2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rop2'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GetROP2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rop2'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SetROP2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='R2 COPYPEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetROP2'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rop2'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rop2'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='R2 XORPEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='PATCOPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='PATINVERT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></thenExpr></initializer><name type='SimpleName' identifier='dwRop'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetBkMode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClipping'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope></initializer><name type='SimpleName' identifier='clip'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='x'></name></initializer><name type='SimpleName' identifier='drawX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></right></initializer><name type='SimpleName' identifier='drawY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alignment'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CENTER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='drawX'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='drawX'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></right></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></initializer><name type='SimpleName' identifier='lineRuns'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ThisExpr'></scope></argument></arguments></initializer><name type='SimpleName' identifier='baseline'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='baseline'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='baseline'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></name></scope></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></right></initializer><name type='SimpleName' identifier='lineHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='drawX'></name></initializer><name type='SimpleName' identifier='alignmentX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></right></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='softBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></right></initializer><name type='SimpleName' identifier='fullSelection'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='fullSelection'></name></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='background'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></scope></initializer><name type='SimpleName' identifier='bg'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawY'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='baseline'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></inner></right></initializer><name type='SimpleName' identifier='drawRunY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='CreateSolidBrush'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bg'></name></argument></arguments></initializer><name type='SimpleName' identifier='hBrush'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hBrush'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldBrush'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PatBlt'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawRunY'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='dwRop'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldBrush'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hBrush'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></left><right type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></right></right></inner></expression></right></initializer><name type='SimpleName' identifier='partialSelection'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='partialSelection'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='selBrush'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='selStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='selEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='cChars'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='gGlyphs'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piX'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptCPtoX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selStart'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument><argument type='NameExpr'><name type='SimpleName' identifier='cChars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piX'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></thenExpr></initializer><name type='SimpleName' identifier='runX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='runX'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='drawY'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptCPtoX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selEnd'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='cChars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piX'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runX'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='runX'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineHeight'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PatBlt'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='dwRop'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='selBrush'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PatBlt'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawY'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dwRop'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='drawX'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='drawX'></name></target><value type='NameExpr'><name type='SimpleName' identifier='alignmentX'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></right></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='clip'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='softBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='foreground'></name></initializer><name type='SimpleName' identifier='fg'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></right></initializer><name type='SimpleName' identifier='fullSelection'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='fullSelection'></name></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fg'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='foreground'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></scope></value></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fg'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetTextColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='fg'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkItem'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getItemFont'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawY'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='baseline'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></inner></right></initializer><name type='SimpleName' identifier='drawRunY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptTextOut'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawRunY'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='goffsets'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NullLiteralExpr'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fg'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></scope></right></right></condition><elseExpr type='MethodCallExpr'><name type='SimpleName' identifier='CreatePen'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='BS SOLID'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='fg'></name></argument></arguments></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='selPen'></name></thenExpr></initializer><name type='SimpleName' identifier='newPen'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newPen'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPen'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='baseline'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='underlineY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveToEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='underlineY'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='LineTo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='underlineY'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawRunY'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='leading'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='strikeoutY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveToEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='strikeoutY'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='LineTo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='strikeoutY'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPen'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></expression></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fg'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></scope></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newPen'></name></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='hasSelection'></name></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></left><right type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></right></right></inner></expression></right></initializer><name type='SimpleName' identifier='partialSelection'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='fullSelection'></name></expression></left><right type='NameExpr'><name type='SimpleName' identifier='partialSelection'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fg'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetTextColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='selectionForeground'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectionStart'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='selStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selectionEnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='selEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='cChars'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='gGlyphs'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piX'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptCPtoX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selStart'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument><argument type='NameExpr'><name type='SimpleName' identifier='cChars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piX'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></thenExpr></initializer><name type='SimpleName' identifier='runX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='runX'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='top'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='drawY'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptCPtoX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selEnd'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='cChars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piX'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runX'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='runX'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='bottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineHeight'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptTextOut'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='drawRunY'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ETO CLIPPED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='rect'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='goffsets'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NullLiteralExpr'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='selPen'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldPen'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='underline'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='baseline'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='underlineY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveToEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='underlineY'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='LineTo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='underlineY'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='strikeout'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='drawRunY'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='leading'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='strikeoutY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveToEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='strikeoutY'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='LineTo'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='strikeoutY'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldPen'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='drawX'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='line'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='RestoreDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='state'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selBrush'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selBrush'></name></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='selPen'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='selPen'></name></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='draw'></name><comment type='JavadocComment' content=' Draws the receiver s text using the specified GC at the specified point param gc the GC to draw param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn param selectionStart the offset where the selections starts or 1 indicating no selection param selectionEnd the offset where the selections ends or 1 indicating no selection param selectionForeground selection foreground or NULL to use the system default color param selectionBackground selection background or NULL to use the system default color exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the gc is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='selectionStart'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='selectionEnd'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='selectionForeground'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='selectionBackground'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='free'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runs'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='freeRuns'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='alignment'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getAlignment'></name><comment type='JavadocComment' content=' Returns the receiver s horizontal text alignment which will be one of code SWT LEFT code code SWT CENTER code or code SWT RIGHT code return the alignment used to positioned text horizontally exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='ascent'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getAscent'></name><comment type='JavadocComment' content=' Returns the ascent of the receiver return the ascent exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getDescent see setDescent int see setAscent int see getLineMetrics int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='line'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineY'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='getBounds'></name><comment type='JavadocComment' content=' Returns the bounds of the receiver return the bounds of the receiver exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition><thenStmt type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument></arguments></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='end'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='end'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x7fffffff'></initializer><name type='SimpleName' identifier='left'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='right'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x7fffffff'></initializer><name type='SimpleName' identifier='top'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bottom'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lineIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='isRTL'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='runEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></expression></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='runEnd'></name></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='runLead'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='runTrail'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='NameExpr'><name type='SimpleName' identifier='runEnd'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='cx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piX'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptCPtoX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></argument><argument type='BooleanLiteralExpr' value='false'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piX'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cx'></name></target><value type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='isRTL'></name></condition><elseExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></thenExpr></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='XOR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fRTL'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></left><right type='NameExpr'><name type='SimpleName' identifier='isRTL'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runLead'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='cx'></name></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runTrail'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='cx'></name></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='end'></name></left><right type='NameExpr'><name type='SimpleName' identifier='runEnd'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='cx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piX'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptCPtoX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='end'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piX'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cx'></name></target><value type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='isRTL'></name></condition><elseExpr type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></thenExpr></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='XOR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fRTL'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></left><right type='NameExpr'><name type='SimpleName' identifier='isRTL'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runTrail'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='cx'></name></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='runLead'></name></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='cx'></name></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='left'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='left'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='runLead'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='right'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='right'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='runTrail'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='top'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='top'></name></argument><argument type='ArrayAccessExpr'><index type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bottom'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bottom'></name></argument><argument type='ArrayAccessExpr'><index type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></condition><elseExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></thenExpr></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='left'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='top'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='right'></name></left><right type='NameExpr'><name type='SimpleName' identifier='left'></name></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bottom'></name></left><right type='NameExpr'><name type='SimpleName' identifier='top'></name></right></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='getBounds'></name><comment type='JavadocComment' content=' Returns the bounds for the specified range of characters The bounds is the smallest rectangle that encompasses all characters in the range The start and end offsets are inclusive and will be clamped if out of range param start the start offset param end the end offset return the bounds of the character range exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='descent'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getDescent'></name><comment type='JavadocComment' content=' Returns the descent of the receiver return the descent exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getAscent see setAscent int see setDescent int see getLineMetrics int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='font'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type><name type='SimpleName' identifier='getFont'></name><comment type='JavadocComment' content=' Returns the default font currently being used by the receiver to draw and measure text return the receiver s font exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fallbackFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='fallbackFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></scope></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='systemFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getItemFont'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='uBidiLevel'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='s'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></scope></scope></scope></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='1'></thenExpr></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLevel'></name><comment type='JavadocComment' content=' Returns the embedding level for the specified character offset The embedding level is usually used to determine the directionality of a character in bidirectional text param offset the charecter offset return the embedding level exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the character offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></right></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='y'></name></right></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alignment'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CENTER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='getLineBounds'></name><comment type='JavadocComment' content=' Returns the bounds of the line for the specified line index param lineIndex the line index return the line bounds exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the line index is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLineCount'></name><comment type='JavadocComment' content=' Returns the receiver s line count This includes lines caused by wrapping return the line count exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='line'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLineIndex'></name><comment type='JavadocComment' content=' Returns the index of the line that contains the specified character offset param offset the character offset return the line index exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the character offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></right></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='CreateCompatibleDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcHdc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></thenExpr></initializer><name type='SimpleName' identifier='lptm'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='ascent'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='descent'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='leading'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='aveCharWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></initializer><name type='SimpleName' identifier='lineRuns'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkItem'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getItemFont'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetTextMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lptm'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ascent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ascent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='descent'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='descent'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='tmHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='leading'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='leading'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='aveCharWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tmAveCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='ascent'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='descent'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tmHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='height'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='leading'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tmAveCharWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='aveCharWidth'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></scope></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='font'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='FieldAccessExpr'><name type='SimpleName' identifier='systemFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></thenExpr></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetTextMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lptm'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ThisExpr'></scope></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='ThisExpr'></scope></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteDC'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcHdc'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='FontMetrics'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lptm'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontMetrics'></name></type><name type='SimpleName' identifier='getLineMetrics'></name><comment type='JavadocComment' content=' Returns the font metrics for the specified line index param lineIndex the line index return the font metrics exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the line index is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='offsets'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></name></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offsets'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type><name type='SimpleName' identifier='getLineOffsets'></name><comment type='JavadocComment' content=' Returns the line offsets Each value in the array is the offset for the first character in a line except for the last value which contains the length of the text return the line offsets exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='length'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='line'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></initializer><name type='SimpleName' identifier='lineRuns'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></initializer><name type='SimpleName' identifier='runOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='cChars'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='gGlyphs'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piX'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptCPtoX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='runOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='trailing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cChars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piX'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></argument><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piX'></name></name></right></inner></right></argument><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='NameExpr'><name type='SimpleName' identifier='trailing'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></argument><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alignment'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CENTER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='result'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='getLocation'></name><comment type='JavadocComment' content=' Returns the location for the specified character offset The code trailing code argument indicates whether the offset corresponds to the leading or trailing edge of the cluster param offset the character offset param trailing the trailing flag return the location of the character offset exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getOffset Point int see getOffset int int int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='trailing'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier=' getOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='movement'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getNextOffset'></name><comment type='JavadocComment' content=' Returns the next offset for the specified offset and movement type The movement is one of code SWT MOVEMENT CHAR code code SWT MOVEMENT CLUSTER code or code SWT MOVEMENT WORD code param offset the start offset param movement the movement type return the next offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getPreviousOffset int int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='movement'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='forward'></name></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='length'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='forward'></name></expression></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='forward'></name></condition><elseExpr type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></elseExpr><thenExpr type='IntegerLiteralExpr' value='1'></thenExpr></initializer><name type='SimpleName' identifier='step'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='movement'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='MOVEMENT CHAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='step'></name></right></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='length'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></type></initializer><name type='SimpleName' identifier='logAttr'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT PROPERTIES'></name></type></initializer><name type='SimpleName' identifier='properties'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT PROPERTIES'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='forward'></name></condition><elseExpr type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='validadeOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='step'></name></argument></arguments></value></expression></statement><statement type='DoStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='softBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='properties'></name></argument><argument type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='eScript'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></scope></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='scripts'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT PROPERTIES'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='fNeedsCaretInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='properties'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='fNeedsWordBreaking'></name><scope type='NameExpr'><name type='SimpleName' identifier='properties'></name></scope></right></initializer><name type='SimpleName' identifier='isComplex'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isComplex'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='breakRun'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument></arguments></expression></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isComplex'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='psla'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></right></inner></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT LOGATTR'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='movement'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='MOVEMENT CLUSTER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='fNeedsCaretInfo'></name><scope type='NameExpr'><name type='SimpleName' identifier='properties'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='fInvalid'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='fCharStop'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='MOVEMENT WORD'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='fNeedsWordBreaking'></name><scope type='NameExpr'><name type='SimpleName' identifier='properties'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='isLetterOrDigit'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='letterOrDigit'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='isLetterOrDigit'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='previousLetterOrDigit'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='letterOrDigit'></name></left><right type='NameExpr'><name type='SimpleName' identifier='previousLetterOrDigit'></name></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='letterOrDigit'></name></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isWhitespace'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='fInvalid'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='fWordStop'></name><scope type='NameExpr'><name type='SimpleName' identifier='logAttr'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='validadeOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='step'></name></argument></arguments></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></right></right></condition></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='NameExpr'><name type='SimpleName' identifier='step'></name></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allRuns'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></condition></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='forward'></name></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></thenExpr></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier=' getOffset'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='movement'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='forward'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='point'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getOffset'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='point'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='trailing'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getOffset'></name><comment type='JavadocComment' content=' Returns the character offset for the specified point For a typical character the trailing argument will be filled in to indicate whether the point is closer to the leading edge 0 or the trailing edge 1 When the point is over a cluster composed of multiple characters the trailing argument will be filled with the position of the character in the cluster that is closest to the point param point the point param trailing the trailing buffer return the character offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the trailing length is less than code 1 code li li ERROR NULL ARGUMENT if the point is null li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getLocation int boolean '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='point'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='trailing'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeRuns'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='trailing'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='trailing'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='line'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></initializer><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineY'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='y'></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alignment'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CENTER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></initializer><name type='SimpleName' identifier='lineRuns'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='line'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='x'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></name></initializer><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='softBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></expression></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tab'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='trailing'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='trailing'></name></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></inner></right></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='cChars'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></initializer><name type='SimpleName' identifier='cGlyphs'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></initializer><name type='SimpleName' identifier='xRun'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piCP'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piTrailing'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='xRun'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='xRun'></name></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptXtoCP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='xRun'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cChars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='piCP'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='piTrailing'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='trailing'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='trailing'></name></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piTrailing'></name></name></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piCP'></name></name></right></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lineRuns'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='trailing'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='trailing'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='untranslateOffset'></name><arguments><argument type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getOffset'></name><comment type='JavadocComment' content=' Returns the character offset for the specified point For a typical character the trailing argument will be filled in to indicate whether the point is closer to the leading edge 0 or the trailing edge 1 When the point is over a cluster composed of multiple characters the trailing argument will be filled with the position of the character in the cluster that is closest to the point param x the x coordinate of the point param y the y coordinate of the point param trailing the trailing buffer return the character offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the trailing length is less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getLocation int boolean '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='trailing'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='orientation'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getOrientation'></name><comment type='JavadocComment' content=' Returns the orientation of the receiver return the orientation style exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier=' getOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='movement'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getPreviousOffset'></name><comment type='JavadocComment' content=' Returns the previous offset for the specified offset and movement type The movement is one of code SWT MOVEMENT CHAR code code SWT MOVEMENT CLUSTER code or code SWT MOVEMENT WORD code param offset the start offset param movement the movement type return the previous offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getNextOffset int int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='movement'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='segments'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type><name type='SimpleName' identifier='getSegments'></name><comment type='JavadocComment' content=' Returns the text segments offsets of the receiver return the text segments offsets exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='segments'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='text'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></initializer><name type='SimpleName' identifier='nSegments'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='text'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='text'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='text'></name></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='oldChars'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChars'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldChars'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newChars'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='charCount'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='segmentCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='LTR MARK'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='RTL MARK'></name></thenExpr></initializer><name type='SimpleName' identifier='separator'></name><type type='PrimitiveType' specificType='CHAR'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='charCount'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='charCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='newChars'></name></name></target><value type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='charCount'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='oldChars'></name></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='charCount'></name></left><right type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></expression></right></index><name type='NameExpr'><name type='SimpleName' identifier='newChars'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='separator'></name></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='charCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='charCount'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='charCount'></name></left><right type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></expression></right></index><name type='NameExpr'><name type='SimpleName' identifier='newChars'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='separator'></name></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newChars'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='charCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='segmentCount'></name></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='newChars'></name></scope></argument></arguments></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getSegmentsText'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='lineSpacing'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getSpacing'></name><comment type='JavadocComment' content=' Returns the line spacing of the receiver return the line spacing exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type><name type='SimpleName' identifier='getStyle'></name><comment type='JavadocComment' content=' Gets the style of the receiver at the specified character offset param offset the text offset return the style or code null code if not set exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the character offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='tabs'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type><name type='SimpleName' identifier='getTabs'></name><comment type='JavadocComment' content=' Returns the tab list of the receiver return the tab list exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='text'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getText'></name><comment type='JavadocComment' content=' Gets the receiver s text which will be an empty string if it has never been set return the receiver s text exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='wrapWidth'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getWidth'></name><comment type='JavadocComment' content=' Returns the width of the receiver return the width exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isDisposed'></name><comment type='JavadocComment' content=' Returns code true code if the text layout has been disposed and code false code otherwise p This method gets the dispose state for the text layout When a text layout has been disposed it is an error to invoke any other method using the text layout return code true code when the text layout is disposed and code false code otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getSegmentsText'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT CONTROL'></name></type></initializer><name type='SimpleName' identifier='scriptControl'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT CONTROL'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT STATE'></name></type></initializer><name type='SimpleName' identifier='scriptState'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT STATE'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='MAX ITEM'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='uBidiLevel'></name><scope type='NameExpr'><name type='SimpleName' identifier='scriptState'></name></scope></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fArabicNumContext'></name><scope type='NameExpr'><name type='SimpleName' identifier='scriptState'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='MAX ITEM'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT ITEM'></name></scope></right></argument></arguments></initializer><name type='SimpleName' identifier='pItems'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pcItems'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='chars'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChars'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptItemize'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='MAX ITEM'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scriptControl'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scriptState'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pItems'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pcItems'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='merge'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pItems'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pcItems'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='runs'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='pItems'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='runs'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type><name type='SimpleName' identifier='itemize'></name><comment type='BlockComment' content=' Itemize the receiver text '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope></initializer><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='itemIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='styleIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='itemCount'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></right></dimension></level></levels></initializer><name type='SimpleName' identifier='runs'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT ITEM'></name></type></initializer><name type='SimpleName' identifier='scriptItem'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT ITEM'></name></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='start'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='styleIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='item'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='scriptItem'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='items'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='itemIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT ITEM'></name></scope></right></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT ITEM'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='a'></name><scope type='NameExpr'><name type='SimpleName' identifier='scriptItem'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='a'></name><scope type='NameExpr'><name type='SimpleName' identifier='scriptItem'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT ANALYSIS'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='scriptItem'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='items'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='itemIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT ITEM'></name></scope></right></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT ITEM'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='iCharPos'></name><scope type='NameExpr'><name type='SimpleName' identifier='scriptItem'></name></scope></initializer><name type='SimpleName' identifier='itemLimit'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='styleIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='styleLimit'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='styleLimit'></name></left><right type='NameExpr'><name type='SimpleName' identifier='itemLimit'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='styleIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='NameExpr'><name type='SimpleName' identifier='styleLimit'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='itemLimit'></name></left><right type='NameExpr'><name type='SimpleName' identifier='styleLimit'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='itemIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='NameExpr'><name type='SimpleName' identifier='itemLimit'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></right></value></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='end'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='scriptItem'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='items'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='itemCount'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT ITEM'></name></scope></right></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT ITEM'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='a'></name><scope type='NameExpr'><name type='SimpleName' identifier='scriptItem'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='item'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='count'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='result'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='runs'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='count'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='runs'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type><name type='SimpleName' identifier='merge'></name><comment type='BlockComment' content=' Merge styles ranges and script items '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='items'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='itemCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='runs'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='runs'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='bidiLevels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bidiLevels'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='uBidiLevel'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='s'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></scope></scope></scope></left><right type='IntegerLiteralExpr' value='0x1F'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></initializer><name type='SimpleName' identifier='lastRun'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression><comment type='BlockComment' content=' Feature in Windows If the orientation is RTL Uniscribe will resolve the level of line breaks to 1 this can cause the line break to be reorder to the middle of the line The fix is to set the level to zero to prevent it to be reordered '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lineBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='lastRun'></name></scope></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='softBreak'></name><scope type='NameExpr'><name type='SimpleName' identifier='lastRun'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bidiLevels'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='log2vis'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptLayout'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bidiLevels'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='log2vis'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='length'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='result'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='log2vis'></name></name></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='runs'></name></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></initializer><name type='SimpleName' identifier='tmp'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='tmp'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type><name type='SimpleName' identifier='reorder'></name><comment type='BlockComment' content=' Reorder the run '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='runs'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CENTER'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='alignment'></name></target><value type='NameExpr'><name type='SimpleName' identifier='mask'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alignment'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='alignment'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alignment'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='alignment'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alignment'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='alignment'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='alignment'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setAlignment'></name><comment type='JavadocComment' content=' Sets the text alignment for the receiver The alignment controls how a line of text is positioned horizontally The argument should be one of code SWT LEFT code code SWT RIGHT code or code SWT CENTER code p The default alignment is code SWT LEFT code Note that the receiver s width must be set in order to use code SWT RIGHT code or code SWT CENTER code alignment p param alignment the new alignment exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setWidth int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alignment'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='ascent'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ThisExpr'></scope></left><right type='NameExpr'><name type='SimpleName' identifier='ascent'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='ascent'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setAscent'></name><comment type='JavadocComment' content=' Sets the ascent of the receiver The ascent is distance in pixels from the baseline to the top of the line and it is applied to all lines The default value is code 1 code which means that the ascent is calculated from the line fonts param ascent the new ascent exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the ascent is less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setDescent int see getLineMetrics int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ascent'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='descent'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='ThisExpr'></scope></left><right type='NameExpr'><name type='SimpleName' identifier='descent'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='descent'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setDescent'></name><comment type='JavadocComment' content=' Sets the descent of the receiver The descent is distance in pixels from the baseline to the bottom of the line and it is applied to all lines The default value is code 1 code which means that the descent is calculated from the line fonts param descent the new descent exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the descent is less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setAscent int see getLineMetrics int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='descent'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='font'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></left><right type='NameExpr'><name type='SimpleName' identifier='font'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='font'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='font'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></argument></arguments></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='font'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='font'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setFont'></name><comment type='JavadocComment' content=' Sets the default font which will be used by the receiver to draw and measure text If the argument is null then a default font appropriate for the platform will be used instead Note that a text style can override the default font param font the new font for the receiver or null to indicate a default font exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the font has been disposed li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='font'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT TO LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY AND'><target type='NameExpr'><name type='SimpleName' identifier='orientation'></name></target><value type='NameExpr'><name type='SimpleName' identifier='mask'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='orientation'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='orientation'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT TO RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='orientation'></name><scope type='ThisExpr'></scope></left><right type='NameExpr'><name type='SimpleName' identifier='orientation'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='orientation'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='orientation'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setOrientation'></name><comment type='JavadocComment' content=' Sets the orientation of the receiver which must be one of code SWT LEFT TO RIGHT code or code SWT RIGHT TO LEFT code p param orientation new orientation style exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='orientation'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='segments'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='segments'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='segments'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='segments'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='segments'></name><scope type='ThisExpr'></scope></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='segments'></name><scope type='ThisExpr'></scope></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='segments'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='segments'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setSegments'></name><comment type='JavadocComment' content=' Sets the offsets of the receiver s text segments Text segments are used to override the default behaviour of the bidirectional algorithm Bidirectional reordering can happen within a text segment but not between two adjacent segments Each text segment is determined by two consecutive offsets in the code segments code arrays The first element of the array should always be zero and the last one should always be equals to length of the text p param segments the text segments offset exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='segments'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='spacing'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lineSpacing'></name><scope type='ThisExpr'></scope></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lineSpacing'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='spacing'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setSpacing'></name><comment type='JavadocComment' content=' Sets the line spacing of the receiver The line spacing is the space left between lines param spacing the new line spacing exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the spacing is negative li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='spacing'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='start'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument></arguments></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='end'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='end'></name></argument></arguments></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='low'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></initializer><name type='SimpleName' identifier='high'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='high'></name></left><right type='NameExpr'><name type='SimpleName' identifier='low'></name></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='low'></name></target><value type='NameExpr'><name type='SimpleName' identifier='index'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='high'></name></target><value type='NameExpr'><name type='SimpleName' identifier='index'></name></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='high'></name></left><right type='NameExpr'><name type='SimpleName' identifier='low'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS EQUALS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='high'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='high'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='high'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='high'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='NullLiteralExpr'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='style'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></argument></arguments></condition><thenStmt type='ReturnStmt'></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newStyles'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='start'></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='item'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></initializer><name type='SimpleName' identifier='newItem'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='newItem'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='start'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='newItem'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='style'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='newItem'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></right></compare><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='end'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='end'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newItem'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='newItem'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='end'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='NameExpr'><name type='SimpleName' identifier='newItem'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='style'></name><scope type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='newItem'></name></value></expression></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='end'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='item'></name></value></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='styles'></name></scope></right></compare><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='styles'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='styles'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='count'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='newStyles'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='styles'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='count'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setStyle'></name><comment type='JavadocComment' content=' Sets the style of the receiver for the specified range Styles previously set for that range will be overwritten The start and end offsets are inclusive and will be clamped if out of range param style the style param start the start offset param end the end offset exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextStyle'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='end'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tabs'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='tabs'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='tabs'></name><scope type='ThisExpr'></scope></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='tabs'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='tabs'></name><scope type='ThisExpr'></scope></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='tabs'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='tabs'></name><scope type='ThisExpr'></scope></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='tabs'></name></name></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='tabs'></name></scope></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='tabs'></name></scope></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tabs'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='tabs'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setTabs'></name><comment type='JavadocComment' content=' Sets the receiver s tab list Each value in the tab list specifies the space in pixels from the origin of the text layout to the respective tab stop The last tab stop width is repeated continuously param tabs the new tab list exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='tabs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='text'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='ThisExpr'></scope></argument></arguments></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='text'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='text'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='styles'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='2'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='styles'></name></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setText'></name><comment type='JavadocComment' content=' Sets the receiver s text param text the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the text is null li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='text'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkLayout'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='wrapWidth'></name><scope type='ThisExpr'></scope></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='freeRuns'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='wrapWidth'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='width'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setWidth'></name><comment type='JavadocComment' content=' Sets the line width of the receiver which determines how text should be wrapped and aligned The default value is code 1 code which means wrapping is disabled param width the new width exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the width is code 0 code or less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setAlignment int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='ScriptShape'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='chars'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='maxGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='glyphCount'></name></argument></arguments></initializer><name type='SimpleName' identifier='hr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='glyphCount'></name></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hr'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='USP E SCRIPT NOT IN FONT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT FONTPROPERTIES'></name></type></initializer><name type='SimpleName' identifier='fp'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SCRIPT FONTPROPERTIES'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cBytes'></name><scope type='NameExpr'><name type='SimpleName' identifier='fp'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SCRIPT FONTPROPERTIES'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptGetFontProperties'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='fp'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='glyphCount'></name></name></dimension></level></levels></initializer><name type='SimpleName' identifier='glyphs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='wgDefault'></name><scope type='NameExpr'><name type='SimpleName' identifier='fp'></name></scope></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></scope></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='glyphs'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptFreeCache'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='glyphCount'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='glyphCount'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='shape'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hdc'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='chars'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='glyphCount'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='maxGlyphs'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='chars'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChars'></name><scope type='NameExpr'><name type='SimpleName' identifier='segmentsText'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='start'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='chars'></name></scope></left><right type='IntegerLiteralExpr' value='3'></right></left><right type='IntegerLiteralExpr' value='2'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='maxGlyphs'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='glyphs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='maxGlyphs'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='maxGlyphs'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='maxGlyphs'></name></left><right type='NameExpr'><name type='SimpleName' identifier='SCRIPT VISATTR SIZEOF'></name></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='shape'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maxGlyphs'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='dwCodePages'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='cchCodePages'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VtblCall'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='4'></argument><argument type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='chars'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='dwCodePages'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cchCodePages'></name></argument></arguments></expression><comment type='BlockComment' content=' GetStrCodePages '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='hNewFont'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='VtblCall'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='10'></argument><argument type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='dwCodePages'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='chars'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hNewFont'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='hNewFont'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='hFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='shape'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='run'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maxGlyphs'></name></argument></arguments></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='VtblCall'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='8'></argument><argument type='NameExpr'><name type='SimpleName' identifier='mLangFontLink2'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='hNewFont'></name></name></argument></arguments></expression><comment type='BlockComment' content=' ReleaseFont '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hFont'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptShape'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='chars'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='chars'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='maxGlyphs'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='clusters'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fallbackFont'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='hNewFont'></name></name></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' MapFont '></comment></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='3'></dimension></level></levels></initializer><name type='SimpleName' identifier='abc'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='IntegerLiteralExpr' value='4'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='goffsets'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='GOFFSET SIZEOF'></name></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptPlace'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='psc'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='glyphCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='visAttrs'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='analysis'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='advances'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='goffsets'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='abc'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='abc'></name></name></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='abc'></name></name></right></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='abc'></name></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></thenExpr></initializer><name type='SimpleName' identifier='lptm'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetTextMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hdc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lptm'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='ascent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tmAscent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='descent'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tmDescent'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='leading'></name><scope type='NameExpr'><name type='SimpleName' identifier='run'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='shape'></name><comment type='BlockComment' content=' Generate glyphs for one Run '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hdc'></name><type type='PrimitiveType' specificType='INT'></type><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='run'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyleItem'></name></type><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='NameExpr'><name type='SimpleName' identifier='step'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='segments'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='translateOffset'></name><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></argument></arguments></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='NameExpr'><name type='SimpleName' identifier='step'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='validadeOffset'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='step'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='StringLiteralExpr' value='TextLayout DISPOSED '></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='TextLayout '></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the receiver '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='segments'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></initializer><name type='SimpleName' identifier='nSegments'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></expression></statement></statements></body><compare type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='translateOffset'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='segments'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='segments'></name></scope></initializer><name type='SimpleName' identifier='nSegments'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='text'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></expression></statement></statements></body><compare type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='nSegments'></name></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='segments'></name></name></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='untranslateOffset'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
