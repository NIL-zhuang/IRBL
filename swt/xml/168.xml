<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Vector'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Compatibility'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='ImageLoader'></name><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' the array of ImageData objects in this ImageLoader This array is read in when the load method is called and it is written out when the save method is called '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the width of the logical screen on which the images reside in pixels this corresponds to the GIF89a Logical Screen Width value '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='logicalScreenWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the height of the logical screen on which the images reside in pixels this corresponds to the GIF89a Logical Screen Height value '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='logicalScreenHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the background pixel for the logical screen this corresponds to the GIF89a Background Color Index value The default is 1 which means unspecified background '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='backgroundPixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the number of times to repeat the display of a sequence of animated images this corresponds to the commonly used GIF application extension for NETSCAPE 2 0 01 The default is 1 A value of 0 means display repeatedly '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='repeatCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' the set of ImageLoader event listeners created on demand '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='imageLoaderListeners'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='reset'></name></expression></statement></statements></body><name type='SimpleName' identifier='ImageLoader'></name><comment type='JavadocComment' content=' Construct a new empty ImageLoader '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logicalScreenWidth'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logicalScreenHeight'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='backgroundPixel'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='repeatCount'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='reset'></name><comment type='JavadocComment' content=' Resets the fields of the ImageLoader except for the code imageLoaderListeners code field '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='stream'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='reset'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='load'></name><scope type='NameExpr'><name type='SimpleName' identifier='FileFormat'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument><argument type='ThisExpr'></argument></arguments></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type><name type='SimpleName' identifier='load'></name><comment type='JavadocComment' content=' Loads an array of code ImageData code objects from the specified input stream Throws an error if either an error occurs while loading the images or if the images are not of a supported type Returns the loaded image data array param stream the input stream to load the images from return an array of code ImageData code objects loaded from the specified input stream exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the stream is null li ul exception SWTException ul li ERROR INVALID IMAGE if the image file contains invalid data li li ERROR IO if an input output error occurs while reading data li li ERROR UNSUPPORTED FORMAT if the image file contains an unrecognized format li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='filename'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='stream'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='close'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope></expression></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stream'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='newFileInputStream'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='filename'></name></argument></arguments></value></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='load'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type><name type='SimpleName' identifier='load'></name><comment type='JavadocComment' content=' Loads an array of code ImageData code objects from the file with the specified name Throws an error if either an error occurs while loading the images or if the images are not of a supported type Returns the loaded image data array param filename the name of the file to load the images from return an array of code ImageData code objects loaded from the specified file exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the file name is null li ul exception SWTException ul li ERROR INVALID IMAGE if the image file contains invalid data li li ERROR IO if an IO error occurs while reading data li li ERROR UNSUPPORTED FORMAT if the image file contains an unrecognized format li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='filename'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='stream'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='save'></name><scope type='NameExpr'><name type='SimpleName' identifier='FileFormat'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='format'></name></argument><argument type='ThisExpr'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='save'></name><comment type='JavadocComment' content=' Saves the image data in this ImageLoader to the specified stream The format parameter can have one of the following values dl dt code IMAGE BMP code dt dd Windows BMP file format no compression dd dt code IMAGE BMP RLE code dt dd Windows BMP file format RLE compression if appropriate dd dt code IMAGE GIF code dt dd GIF file format dd dt code IMAGE ICO code dt dd Windows ICO file format dd dt code IMAGE PEG code dt dd PEG file format dd dt code IMAGE PNG code dt dd PNG file format dd dl param stream the output stream to write the images to param format the format to write the images in exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the stream is null li ul exception SWTException ul li ERROR INVALID IMAGE if the image data contains invalid data li li ERROR IO if an IO error occurs while writing to the stream li li ERROR UNSUPPORTED FORMAT if the image data cannot be saved to the requested format li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OutputStream'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='format'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='filename'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OutputStream'></name></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stream'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='newFileOutputStream'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='filename'></name></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='save'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='format'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='save'></name><comment type='JavadocComment' content=' Saves the image data in this ImageLoader to a file with the specified name The format parameter can have one of the following values dl dt code IMAGE BMP code dt dd Windows BMP file format no compression dd dt code IMAGE BMP RLE code dt dd Windows BMP file format RLE compression if appropriate dd dt code IMAGE GIF code dt dd GIF file format dd dt code IMAGE ICO code dt dd Windows ICO file format dd dt code IMAGE PEG code dt dd PEG file format dd dt code IMAGE PNG code dt dd PNG file format dd dl param filename the name of the file to write the images to param format the format to write the images in exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the file name is null li ul exception SWTException ul li ERROR INVALID IMAGE if the image data contains invalid data li li ERROR IO if an IO error occurs while writing to the file li li ERROR UNSUPPORTED FORMAT if the image data cannot be saved to the requested format li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='filename'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='format'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addImageLoaderListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when image data is either partially or completely loaded p An ImageLoaderListener should be added before invoking one of the receiver s load methods The listener s code imageDataLoaded code method is called when image data has been partially loaded as is supported by interlaced GIF PNG or progressive PEG images param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul see ImageLoaderListener see ImageLoaderEvent '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoaderListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeImageLoaderListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when image data is either partially or completely loaded param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul see addImageLoaderListener ImageLoaderListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoaderListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='GREATER'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='hasListeners'></name><comment type='JavadocComment' content=' Returns code true code if the receiver has image loader listeners and code false code otherwise return code true code if there are code ImageLoaderListener code s and code false code otherwise see addImageLoaderListener ImageLoaderListener see removeImageLoaderListener ImageLoaderListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='hasListeners'></name></expression></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></scope></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='imageLoaderListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoaderListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoaderListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='imageDataLoaded'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='size'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='notifyListeners'></name><comment type='JavadocComment' content=' Notifies all image loader listeners that an image loader event has occurred Pass the specified event object to each listener param event the code ImageLoaderEvent code to send to each code ImageLoaderListener code '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoaderEvent'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
