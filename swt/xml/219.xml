<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Compatibility'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='PngChunk'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='reference'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='LENGTH OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='TYPE OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='8'></initializer><name type='SimpleName' identifier='DATA OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='TYPE FIELD LENGTH'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='LENGTH FIELD LENGTH'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='12'></initializer><name type='SimpleName' identifier='MIN LENGTH'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='CHUNK UNKNOWN'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' Critical chunks '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='CHUNK IHDR'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='CHUNK PLTE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='CHUNK IDAT'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='3'></initializer><name type='SimpleName' identifier='CHUNK IEND'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' Non critical chunks '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='5'></initializer><name type='SimpleName' identifier='CHUNK tRNS'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='CharLiteralExpr' value='I'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='H'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='D'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='R'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='TYPE IHDR'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='CharLiteralExpr' value='P'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='L'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='T'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='E'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='TYPE PLTE'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='CharLiteralExpr' value='I'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='D'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='A'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='T'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='TYPE IDAT'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='CharLiteralExpr' value='I'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='E'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='N'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='D'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='TYPE IEND'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='CharLiteralExpr' value='t'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='R'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='N'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='S'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='TYPE tRNS'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='CRC TABLE'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='256'></dimension></level></levels></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></name></target><value type='BinaryExpr' operator='XOR'><left type='IntegerLiteralExpr' value='0xEDB88320'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0x7FFFFFFF'></right></inner></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0x7FFFFFFF'></right></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='IntegerLiteralExpr' value='8'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='256'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setReference'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='reference'></name></argument></arguments></expression></statement></statements></body><name type='SimpleName' identifier='PngChunk'></name><comment type='JavadocComment' content=' Construct a PngChunk using the reference bytes given '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='reference'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='reference'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='getReference'></name><comment type='JavadocComment' content=' Get the PngChunk s reference byteArray '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='reference'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='reference'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setReference'></name><comment type='JavadocComment' content=' Set the PngChunk s reference byteArray '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='reference'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='answer'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='offset'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='24'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='answer'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getInt32'></name><comment type='JavadocComment' content=' Get the 32 bit integer from the reference byte array at the given offset '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='offset'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setInt32'></name><comment type='JavadocComment' content=' Set the 32 bit integer in the reference byte array at the given offset '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='LENGTH OFFSET'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLength'></name><comment type='JavadocComment' content=' Get the length of the data component of this chunk This is not the length of the entire chunk '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='LENGTH OFFSET'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setLength'></name><comment type='JavadocComment' content=' Set the length of the data component of this chunk This is not the length of the entire chunk '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4'></dimension></level></levels></initializer><name type='SimpleName' identifier='type'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='reference'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='TYPE OFFSET'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='TYPE FIELD LENGTH'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='type'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='getTypeBytes'></name><comment type='JavadocComment' content=' Get the chunk type This is a four byte value Each byte should be an ASCII character The first byte is upper case if the chunk is critical The second byte is upper case if the chunk is publicly defined The third byte must be upper case The fourth byte is upper case if the chunk is unsafe to copy Public chunk types are defined by the PNG Development Group '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='value'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='TYPE FIELD LENGTH'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='reference'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='TYPE OFFSET'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='TYPE FIELD LENGTH'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setType'></name><comment type='JavadocComment' content=' Set the chunk type This is a four byte value Each byte should be an ASCII character The first byte is upper case if the chunk is critical The second byte is upper case if the chunk is publicly defined The third byte must be upper case The fourth byte is upper case if the chunk is unsafe to copy Public chunk types are defined by the PNG Development Group '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name></initializer><name type='SimpleName' identifier='dataLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='reference'></name></scope></left><right type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='MIN LENGTH'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dataLength'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='dataLength'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='reference'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='dataLength'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='getData'></name><comment type='JavadocComment' content=' Get the chunk s data '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setLength'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='reference'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setCRC'></name><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='computeCRC'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setData'></name><comment type='JavadocComment' content=' Set the chunk s data This method has two side effects 1 It will set the length field to be the length of the data array given 2 It will set the CRC field to the computed CRC value of the data array given '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name></right></initializer><name type='SimpleName' identifier='crcOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='crcOffset'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getCRC'></name><comment type='JavadocComment' content=' Get the CRC value for the chunk s data Ensure that the length field has a good value before making this call '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name></right></initializer><name type='SimpleName' identifier='crcOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='crcOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setCRC'></name><comment type='JavadocComment' content=' Set the CRC value for the chunk s data Ensure that the length field has a good value before making this call '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='MIN LENGTH'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getSize'></name><comment type='JavadocComment' content=' Get the chunk s total size including the length type and crc fields '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='computeCRC'></name></initializer><name type='SimpleName' identifier='crc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getCRC'></name></initializer><name type='SimpleName' identifier='storedCRC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='crc'></name></left><right type='NameExpr'><name type='SimpleName' identifier='storedCRC'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='checkCRC'></name><comment type='JavadocComment' content=' Compute the CRC value for the chunk s data Answer whether this value matches the value stored in the chunk '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xFFFFFFFF'></initializer><name type='SimpleName' identifier='crc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='TYPE OFFSET'></name></initializer><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name></right></initializer><name type='SimpleName' identifier='stop'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='XOR'><left type='NameExpr'><name type='SimpleName' identifier='crc'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='crc'></name></target><value type='BinaryExpr' operator='XOR'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='CRC TABLE'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='crc'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0x00FFFFFF'></right></inner></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='stop'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='start'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='crc'></name></expression></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='computeCRC'></name><comment type='JavadocComment' content=' Answer the CRC value of chunk s data '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='TYPE OFFSET'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='array'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='TYPE FIELD LENGTH'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='typeMatchesArray'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='array'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isUpperCase'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='CastExpr'><expression type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='MethodCallExpr'><name type='SimpleName' identifier='getTypeBytes'></name></name></expression><type type='PrimitiveType' specificType='CHAR'></type></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isCritical'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='typeMatchesArray'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='TYPE IHDR'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='CHUNK IHDR'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='typeMatchesArray'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='TYPE PLTE'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='CHUNK PLTE'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='typeMatchesArray'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='TYPE IDAT'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='CHUNK IDAT'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='typeMatchesArray'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='TYPE IEND'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='CHUNK IEND'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='typeMatchesArray'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='TYPE tRNS'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='CHUNK tRNS'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='CHUNK UNKNOWN'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getChunkType'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='LENGTH FIELD LENGTH'></name></left><right type='NameExpr'><name type='SimpleName' identifier='TYPE FIELD LENGTH'></name></right></initializer><name type='SimpleName' identifier='headerLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='headerLength'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='headerBytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='headerBytes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='headerLength'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unread'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='headerBytes'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NameExpr'><name type='SimpleName' identifier='headerLength'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunk'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='headerBytes'></name></argument></arguments></initializer><name type='SimpleName' identifier='tempChunk'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunk'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='tempChunk'></name></scope></initializer><name type='SimpleName' identifier='chunkLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='chunkLength'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='chunk'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chunk'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='chunkLength'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='NameExpr'><name type='SimpleName' identifier='chunkLength'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getChunkType'></name><scope type='NameExpr'><name type='SimpleName' identifier='tempChunk'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CHUNK IHDR'></name></label></labels><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIhdrChunk'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chunk'></name></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CHUNK PLTE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngPlteChunk'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chunk'></name></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CHUNK IDAT'></name></label></labels><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIdatChunk'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chunk'></name></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CHUNK IEND'></name></label></labels><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIendChunk'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chunk'></name></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='CHUNK tRNS'></name></label></labels><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngTrnsChunk'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chunk'></name></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunk'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chunk'></name></argument></arguments></expression></statement></statements></entrie></entries></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunk'></name></type><name type='SimpleName' identifier='readNextFromStream'></name><comment type='JavadocComment' content=' Read the next PNG chunk from the input stream given If unable to read a chunk return null '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LEDataInputStream'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='reference'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='MIN LENGTH'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getTypeBytes'></name></initializer><name type='SimpleName' identifier='type'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isUpperCase'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='CastExpr'><expression type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='type'></name></name></expression><type type='PrimitiveType' specificType='CHAR'></type></argument></arguments></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt><comment type='LineComment' content=' The third character MUST be upper case '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isLetter'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='CastExpr'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='type'></name></name></expression><type type='PrimitiveType' specificType='CHAR'></type></argument></arguments></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='TYPE FIELD LENGTH'></name></right></compare><comment type='LineComment' content=' All characters must be letters '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkCRC'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt><comment type='LineComment' content=' The stored CRC must match the data s computed CRC '></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='validate'></name><comment type='JavadocComment' content=' Answer whether the chunk is a valid PNG chunk '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='readState'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngFileReadState'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='headerChunk'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIhdrChunk'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='contributeToString'></name><comment type='JavadocComment' content=' Provided so that subclasses can override and add data to the toString call '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tLength '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tType '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getTypeBytes'></name></initializer><name type='SimpleName' identifier='type'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='CastExpr'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='type'></name></name></expression><type type='PrimitiveType' specificType='CHAR'></type></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='type'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='contributeToString'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tCRC '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='toHexString'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCRC'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n '></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the event '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members></type></types></root>
