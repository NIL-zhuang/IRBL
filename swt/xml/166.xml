<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='CloneableCompatibility'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='ImageData'></name><implementedTypes><implementedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='CloneableCompatibility'></name></implementedType></implementedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' The width of the image in pixels '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The height of the image in pixels '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The color depth of the image in bits per pixel p Note that a depth of 8 or less does not necessarily mean that the image is palette indexed or conversely that a depth greater than 8 means that the image is direct color Check the associated PaletteData s isDirect field for such determinations '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The scanline padding p If one scanline of the image is not a multiple of this number it will be padded with zeros until it is p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='scanlinePad'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The number of bytes per scanline p This is a multiple of the scanline padding p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The pixel data of the image p Note that for 16 bit depth images the pixel data is stored in least significant byte order however for 24bit and 32bit depth images the pixel data is stored in most significant byte order p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The color table for the image '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The transparent pixel p Pixels with this value are transparent p p The default is 1 which means no transparent pixel p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='transparentPixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' An icon specific field containing the data from the icon mask p This is a 1 bit bitmap stored with the most significant bit first The number of bytes per scanline is width 7 8 maskPad 1 maskPad maskPad p p The default is null which means no transparency mask p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='maskData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' An icon specific field containing the scanline pad of the mask p If one scanline of the transparency mask is not a multiple of this number it will be padded with zeros until it is p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='maskPad'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The alpha data of the image p Every pixel can have an em alpha blending em value that varies from 0 meaning fully transparent to 255 meaning fully opaque The number of bytes per scanline is width p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The global alpha value to be used for every pixel p If this value is set the code alphaData code field is ignored and when the image is rendered each pixel will be blended with the background an amount proportional to this value p p The default is 1 which means no global alpha value p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The type of file from which the image was read It is expressed as one of the following values dl dt code IMAGE BMP code dt dd Windows BMP file format no compression dd dt code IMAGE BMP RLE code dt dd Windows BMP file format RLE compression if appropriate dd dt code IMAGE GIF code dt dd GIF file format dd dt code IMAGE ICO code dt dd Windows ICO file format dd dt code IMAGE PEG code dt dd PEG file format dd dt code IMAGE PNG code dt dd PNG file format dd dl '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The x coordinate of the top left corner of the image within the logical screen this field corresponds to the GIF89a Image Left Position value '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The y coordinate of the top left corner of the image within the logical screen this field corresponds to the GIF89a Image Top Position value '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' A description of how to dispose of the current image before displaying the next It is expressed as one of the following values dl dt code DM UNSPECIFIED code dt dd disposal method not specified dd dt code DM FILL NONE code dt dd do nothing leave the image in place dd dt code DM FILL BACKGROUND code dt dd fill with the background color dd dt code DM FILL PREVIOUS code dt dd restore the previous picture dd dl this field corresponds to the GIF89a Disposal Method value '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='disposalMethod'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' The time to delay before displaying the next image in an animation this field corresponds to the GIF89a Delay Time value '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='delayTime'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' Arbitrary channel width data to 8 bit conversion table '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='9'></dimension></level><level type='ArrayCreationLevel'></level></levels></initializer><name type='SimpleName' identifier='ANY TO EIGHT'></name><type type='ArrayType' origin='TYPE'><componentType type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></componentType></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='b'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='b'></name></right></dimension></level></levels></value></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='inc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='inc'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bit'></name></value></expression></body><compare type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='SIGNED RIGHT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='bit'></name></target><value type='NameExpr'><name type='SimpleName' identifier='b'></name></value></inner></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x10000'></initializer><name type='SimpleName' identifier='bit'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='p'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='v'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='v'></name></left><right type='IntegerLiteralExpr' value='0x10000'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='v'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='p'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='v'></name></target><value type='NameExpr'><name type='SimpleName' identifier='inc'></name></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='IntegerLiteralExpr' value='9'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='b'></name></expression></updat></update></statement></statements></body></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='8'></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='ONE TO ONE MAPPING'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' Scaled 8x8 Bayer dither matrix '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0xfc0000'></value><value type='IntegerLiteralExpr' value='0x7c0000'></value><value type='IntegerLiteralExpr' value='0xdc0000'></value><value type='IntegerLiteralExpr' value='0x5c0000'></value><value type='IntegerLiteralExpr' value='0xf40000'></value><value type='IntegerLiteralExpr' value='0x740000'></value><value type='IntegerLiteralExpr' value='0xd40000'></value><value type='IntegerLiteralExpr' value='0x540000'></value></values></value><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0x3c0000'></value><value type='IntegerLiteralExpr' value='0xbc0000'></value><value type='IntegerLiteralExpr' value='0x1c0000'></value><value type='IntegerLiteralExpr' value='0x9c0000'></value><value type='IntegerLiteralExpr' value='0x340000'></value><value type='IntegerLiteralExpr' value='0xb40000'></value><value type='IntegerLiteralExpr' value='0x140000'></value><value type='IntegerLiteralExpr' value='0x940000'></value></values></value><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0xcc0000'></value><value type='IntegerLiteralExpr' value='0x4c0000'></value><value type='IntegerLiteralExpr' value='0xec0000'></value><value type='IntegerLiteralExpr' value='0x6c0000'></value><value type='IntegerLiteralExpr' value='0xc40000'></value><value type='IntegerLiteralExpr' value='0x440000'></value><value type='IntegerLiteralExpr' value='0xe40000'></value><value type='IntegerLiteralExpr' value='0x640000'></value></values></value><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0x0c0000'></value><value type='IntegerLiteralExpr' value='0x8c0000'></value><value type='IntegerLiteralExpr' value='0x2c0000'></value><value type='IntegerLiteralExpr' value='0xac0000'></value><value type='IntegerLiteralExpr' value='0x040000'></value><value type='IntegerLiteralExpr' value='0x840000'></value><value type='IntegerLiteralExpr' value='0x240000'></value><value type='IntegerLiteralExpr' value='0xa40000'></value></values></value><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0xf00000'></value><value type='IntegerLiteralExpr' value='0x700000'></value><value type='IntegerLiteralExpr' value='0xd00000'></value><value type='IntegerLiteralExpr' value='0x500000'></value><value type='IntegerLiteralExpr' value='0xf80000'></value><value type='IntegerLiteralExpr' value='0x780000'></value><value type='IntegerLiteralExpr' value='0xd80000'></value><value type='IntegerLiteralExpr' value='0x580000'></value></values></value><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0x300000'></value><value type='IntegerLiteralExpr' value='0xb00000'></value><value type='IntegerLiteralExpr' value='0x100000'></value><value type='IntegerLiteralExpr' value='0x900000'></value><value type='IntegerLiteralExpr' value='0x380000'></value><value type='IntegerLiteralExpr' value='0xb80000'></value><value type='IntegerLiteralExpr' value='0x180000'></value><value type='IntegerLiteralExpr' value='0x980000'></value></values></value><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0xc00000'></value><value type='IntegerLiteralExpr' value='0x400000'></value><value type='IntegerLiteralExpr' value='0xe00000'></value><value type='IntegerLiteralExpr' value='0x600000'></value><value type='IntegerLiteralExpr' value='0xc80000'></value><value type='IntegerLiteralExpr' value='0x480000'></value><value type='IntegerLiteralExpr' value='0xe80000'></value><value type='IntegerLiteralExpr' value='0x680000'></value></values></value><value type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0x000000'></value><value type='IntegerLiteralExpr' value='0x800000'></value><value type='IntegerLiteralExpr' value='0x200000'></value><value type='IntegerLiteralExpr' value='0xa00000'></value><value type='IntegerLiteralExpr' value='0x080000'></value><value type='IntegerLiteralExpr' value='0x880000'></value><value type='IntegerLiteralExpr' value='0x280000'></value><value type='IntegerLiteralExpr' value='0xa80000'></value></values></value></values></initializer><name type='SimpleName' identifier='DITHER MATRIX'></name><type type='ArrayType' origin='TYPE'><componentType type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></componentType></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='depth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IMAGE UNDEFINED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='ImageData'></name><comment type='JavadocComment' content=' Constructs a new empty ImageData with the given width height depth and palette The data will be initialized to an all zero array of the appropriate size param width the width of the image param height the height of the image param depth the depth of the image param palette the palette of the image must not be null exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the width or height is negative or if the depth is not one of 1 2 4 8 16 24 or 32 li li ERROR NULL ARGUMENT if the palette is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='depth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='checkData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IMAGE UNDEFINED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='ImageData'></name><comment type='JavadocComment' content=' Constructs a new empty ImageData with the given width height depth palette scanlinePad and data param width the width of the image param height the height of the image param depth the depth of the image param palette the palette of the image param scanlinePad the padding of each line in bytes param data the data of the image exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the width or height is negative or if the depth is not one of 1 2 4 8 16 24 or 32 li li ERROR NULL ARGUMENT if the palette or data is null li li ERROR CANNOT BE ZERO if the scanlinePad is zero li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='scanlinePad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='load'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageDataLoader'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='stream'></name></argument></arguments></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></initializer><name type='SimpleName' identifier='i'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setAllFields'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='scanlinePad'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='palette'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='transparentPixel'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='maskData'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='alphaData'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='alpha'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='disposalMethod'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='delayTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument></arguments></expression></statement></statements></body><name type='SimpleName' identifier='ImageData'></name><comment type='JavadocComment' content=' Constructs an code ImageData code loaded from the specified input stream Throws an error if an error occurs while loading the image or if the image has an unsupported type Application code is still responsible for closing the input stream p This constructor is provided for convenience when loading a single image only If the stream contains multiple images only the first one will be loaded To load multiple images use code ImageLoader load code p p This constructor may be used to load a resource as follows p pre static ImageData loadImageData Class clazz String string InputStream stream clazz getResourceAsStream string if stream null return null ImageData imageData null try imageData new ImageData stream catch SWTException ex finally try stream close catch IOException ex return imageData pre param stream the input stream to load the image from must not be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the stream is null li ul exception SWTException ul li ERROR INVALID IMAGE if the image file contains invalid data li li ERROR IO if an IO error occurs while reading data li ul see ImageLoader load InputStream '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='load'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageDataLoader'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='filename'></name></argument></arguments></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></initializer><name type='SimpleName' identifier='i'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setAllFields'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='scanlinePad'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='palette'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='transparentPixel'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='maskData'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='alphaData'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='alpha'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='disposalMethod'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='delayTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='i'></name></scope></argument></arguments></expression></statement></statements></body><name type='SimpleName' identifier='ImageData'></name><comment type='JavadocComment' content=' Constructs an code ImageData code loaded from a file with the specified name Throws an error if an error occurs loading the image or if the image has an unsupported type p This constructor is provided for convenience when loading a single image only If the file contains multiple images only the first one will be loaded To load multiple images use code ImageLoader load code p param filename the name of the file to load the image from must not be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the file name is null li ul exception SWTException ul li ERROR INVALID IMAGE if the image file contains invalid data li li ERROR IO if an IO error occurs while reading data li li ERROR UNSUPPORTED FORMAT if the image file contains an unrecognized format li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='filename'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='ImageData'></name><comment type='JavadocComment' content=' Prevents uninitialized instances from being created outside the package '></comment></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='palette'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='2'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='16'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='24'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='32'></right></right></inner></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT BE ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='depth'></name></right></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></right></initializer><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setAllFields'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='depth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></argument><argument type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></dimension></level></levels></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='data'></name></thenExpr></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskPad'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='alpha'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='disposalMethod'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='delayTime'></name></argument></arguments></expression></statement></statements></body><name type='SimpleName' identifier='ImageData'></name><comment type='JavadocComment' content=' Constructs an image data by giving values for all non computable fields p This method is for internal use and is not described further p '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='scanlinePad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='maskPad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='maskData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='transparentPixel'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='disposalMethod'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='delayTime'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='width'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='height'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='depth'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='scanlinePad'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='data'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='palette'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='palette'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='transparentPixel'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='maskData'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='maskData'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='maskPad'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='alphaData'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='alpha'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='alpha'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='type'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='x'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='y'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='disposalMethod'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='disposalMethod'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='delayTime'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='delayTime'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setAllFields'></name><comment type='JavadocComment' content=' Initializes all fields in the receiver This method must be called by all public constructors to ensure that all fields are initialized for a new ImageData object If a new field is added to the class then it must be added to this method p This method is for internal use and is not described further p '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='scanlinePad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='transparentPixel'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='maskData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='maskPad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='disposalMethod'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='delayTime'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='depth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskPad'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='alpha'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='disposalMethod'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='delayTime'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='internal new'></name><comment type='JavadocComment' content=' Invokes internal SWT functionality to create a new instance of this class p b IMPORTANT b This method is em not em part of the public API for code ImageData code It is marked public only so that it can be shared within the packages provided by SWT It is subject to change without notice and should never be called from application code p p This method is for internal use and is not described further p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='scanlinePad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='maskPad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='maskData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='transparentPixel'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='disposalMethod'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='delayTime'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='bwPalette'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IMAGE UNDEFINED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='mask'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='width'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='row'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getPixels'></name><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='row'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='row'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='pixel'></name></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='row'></name></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='row'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setPixels'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='row'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='y'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='colorMaskImage'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='checkData'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='cloneData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='cloneData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='cloneMaskData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='maskData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cloneMaskData'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='maskData'></name></scope></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='maskData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='cloneMaskData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='maskData'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='cloneAlphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cloneAlphaData'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='cloneAlphaData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='depth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cloneData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskPad'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cloneMaskData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='cloneAlphaData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='alpha'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='disposalMethod'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='delayTime'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type><name type='SimpleName' identifier='clone'></name><comment type='JavadocComment' content=' Returns a new instance of the same class as the receiver whose slots have been filled in with em copies em of the values in the slots of the receiver That is the returned object is a em deep copy em of the receiver return a copy of the receiver '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='255'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getAlpha'></name><comment type='JavadocComment' content=' Returns the alpha value at offset code x code in scanline code y code in the receiver s alpha data param x the x coodinate of the pixel to get the alpha value of param y the y coordinate of the pixel to get the alpha value of return the alpha value at the given coordinates exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if either argument is out of range li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphas'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></right></initializer><name type='SimpleName' identifier='endIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphas'></name></name></target><value type='CastExpr'><expression type='IntegerLiteralExpr' value='255'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='endIndex'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='alphas'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></argument></arguments></expression><comment type='LineComment' content=' may throw an IndexOutOfBoundsException'></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getAlphas'></name><comment type='JavadocComment' content=' Returns code getWidth code alpha values starting at offset code x code in scanline code y code in the receiver s alpha data starting at code startIndex code param x the x position of the pixel to begin getting alpha values param y the y position of the pixel to begin getting alpha values param getWidth the width of the data to get param alphas the buffer in which to put the alpha values param startIndex the offset into the image to begin getting alpha values exception IndexOutOfBoundsException if getWidth is too large exception IllegalArgumentException ul li ERROR NULL ARGUMENT if pixels is null li li ERROR INVALID ARGUMENT if x or y is out of bounds li li ERROR INVALID ARGUMENT if getWidth is negative li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='getWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphas'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='theByte'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='1'></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='4'></right></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></value></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='16'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='24'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='32'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></value></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getPixel'></name><comment type='JavadocComment' content=' Returns the pixel value at offset code x code in scanline code y code in the receiver s data param x the x position of the pixel to get param y the y position of the pixel to get return the pixel at the given coordinates exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if either argument is out of bounds li ul exception SWTException ul li ERROR UNSUPPORTED DEPTH if the depth is not one of 1 2 4 8 16 24 or 32 li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pixels'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='theByte'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></initializer><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='x'></name></initializer><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='y'></name></initializer><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getPixels'></name><comment type='JavadocComment' content=' Returns code getWidth code pixel values starting at offset code x code in scanline code y code in the receiver s data starting at code startIndex code param x the x position of the first pixel to get param y the y position of the first pixel to get param getWidth the width of the data to get param pixels the buffer in which to put the pixels param startIndex the offset into the byte array to begin storing pixels exception IndexOutOfBoundsException if getWidth is too large exception IllegalArgumentException ul li ERROR NULL ARGUMENT if pixels is null li li ERROR INVALID ARGUMENT if x or y is out of bounds li li ERROR INVALID ARGUMENT if getWidth is negative li ul exception SWTException ul li ERROR UNSUPPORTED DEPTH if the depth is not one of 1 2 4 or 8 For higher depths use the int version of this method li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='getWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pixels'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='theByte'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></initializer><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='x'></name></initializer><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='y'></name></initializer><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='16'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='24'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='32'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='getWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getPixels'></name><comment type='JavadocComment' content=' Returns code getWidth code pixel values starting at offset code x code in scanline code y code in the receiver s data starting at code startIndex code param x the x position of the first pixel to get param y the y position of the first pixel to get param getWidth the width of the data to get param pixels the buffer in which to put the pixels param startIndex the offset into the buffer to begin storing pixels exception IndexOutOfBoundsException if getWidth is too large exception IllegalArgumentException ul li ERROR NULL ARGUMENT if pixels is null li li ERROR INVALID ARGUMENT if x or y is out of bounds li li ERROR INVALID ARGUMENT if getWidth is negative li ul exception SWTException ul li ERROR UNSUPPORTED DEPTH if the depth is not one of 1 2 4 8 16 24 or 32 li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='getWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getRGBs'></name><scope type='NameExpr'><name type='SimpleName' identifier='palette'></name></scope></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type><name type='SimpleName' identifier='getRGBs'></name><comment type='JavadocComment' content=' Returns an array of code RGB code s which comprise the indexed color table of the receiver or null if the receiver has a direct color model return the RGB values for the image or null if direct color see PaletteData getRGBs '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getTransparencyType'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENCY MASK'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='colorMaskImage'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='bwPalette'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskPad'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskData'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='getTransparencyMask'></name><comment type='JavadocComment' content=' Returns an code ImageData code which specifies the transparency mask information for the receiver If the receiver has no transparency or is not an icon returns an opaque mask return the transparency mask '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='maskData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENCY MASK'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENCY PIXEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENCY ALPHA'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENCY NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getTransparencyType'></name><comment type='JavadocComment' content=' Returns the image transparency type which will be one of code SWT TRANSPARENCY NONE code code SWT TRANSPARENCY MASK code code SWT TRANSPARENCY PIXEL code or code SWT TRANSPARENCY ALPHA code return the receiver s transparency type '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='16'></right></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='LSB FIRST'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></thenExpr></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getByteOrder'></name><comment type='JavadocComment' content=' Returns the byte order of the receiver return MSB FIRST or LSB FIRST '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></initializer><name type='SimpleName' identifier='flipX'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression><comment type='BlockComment' content=' Create a destination image with no data '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='flipX'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='width'></name></expression></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></initializer><name type='SimpleName' identifier='flipY'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='flipY'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='height'></name></expression></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='depth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scanlinePad'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='disposalMethod'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='delayTime'></name></argument></arguments></initializer><name type='SimpleName' identifier='dest'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='isDirect'></name><scope type='NameExpr'><name type='SimpleName' identifier='palette'></name></scope></condition><elseStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='blit'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='BLIT SRC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='ThisExpr'></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getByteOrder'></name><scope type='ThisExpr'></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ThisExpr'></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='ALPHA OPAQUE'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getByteOrder'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipY'></name></argument></arguments></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='blit'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='BLIT SRC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='ThisExpr'></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getByteOrder'></name><scope type='ThisExpr'></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ThisExpr'></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='ALPHA OPAQUE'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getByteOrder'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipY'></name></argument></arguments></expression></thenStmt><comment type='BlockComment' content=' Scale the image contents '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='maskData'></name></left><right type='NullLiteralExpr'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='alphaData'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='blit'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='BLIT SRC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='alphaData'></name><scope type='ThisExpr'></scope></argument><argument type='IntegerLiteralExpr' value='8'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ThisExpr'></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ThisExpr'></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='ALPHA OPAQUE'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='alphaData'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='IntegerLiteralExpr' value='8'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipY'></name></argument></arguments></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='alpha'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='alpha'></name><scope type='ThisExpr'></scope></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='ThisExpr'></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='destBpl'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='destBpl'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destBpl'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='maskData'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='destBpl'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ThisExpr'></scope></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='srcBpl'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcBpl'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='srcBpl'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='ThisExpr'></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='ThisExpr'></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='maskPad'></name><scope type='ThisExpr'></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='blit'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='BLIT SRC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='maskData'></name><scope type='ThisExpr'></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcBpl'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ThisExpr'></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ThisExpr'></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='ALPHA OPAQUE'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='maskData'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='destBpl'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='dest'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flipY'></name></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Scale the image mask or alpha '></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='dest'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='scaledTo'></name><comment type='JavadocComment' content=' Returns a copy of the receiver which has been stretched or shrunk to the specified size If either the width or height is negative the resulting image will be inverted in the associated axis param width the width of the new ImageData param height the height of the new ImageData return a scaled copy of the image '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='255'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></dimension></level></levels></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='alpha'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setAlpha'></name><comment type='JavadocComment' content=' Sets the alpha value at offset code x code in scanline code y code in the receiver s alpha data param x the x coordinate of the alpha value to set param y the y coordinate of the alpha value to set param alpha the value to set the alpha to exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if x or y is out of bounds li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphas'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></dimension></level></levels></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='alphas'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></argument></arguments></expression><comment type='LineComment' content=' may throw an IndexOutOfBoundsException'></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setAlphas'></name><comment type='JavadocComment' content=' Sets the alpha values starting at offset code x code in scanline code y code in the receiver s alpha data to the values from the array code alphas code starting at code startIndex code param x the x coordinate of the pixel to being setting the alpha values param y the y coordinate of the pixel to being setting the alpha values param putWidth the width of the alpha values to set param alphas the alpha values to set param startIndex the index at which to begin setting exception IndexOutOfBoundsException if putWidth is too large exception IllegalArgumentException ul li ERROR NULL ARGUMENT if pixels is null li li ERROR INVALID ARGUMENT if x or y is out of bounds li li ERROR INVALID ARGUMENT if putWidth is negative li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='putWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphas'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='theByte'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='XOR'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='XOR'><left type='IntegerLiteralExpr' value='0xFF'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xF0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='16'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='24'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='32'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixelValue'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setPixel'></name><comment type='JavadocComment' content=' Sets the pixel value at offset code x code in scanline code y code in the receiver s data param x the x coordinate of the pixel to set param y the y coordinate of the pixel to set param pixelValue the value to set the pixel to exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if x or y is out of bounds li ul exception SWTException ul li ERROR UNSUPPORTED DEPTH if the depth is not one of 1 2 4 8 16 24 or 32 li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixelValue'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pixels'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='theByte'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></initializer><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='x'></name></initializer><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='y'></name></initializer><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='XOR'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xFC'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xF3'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xCF'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x3F'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='masks'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0x3'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='offset'></name></index><name type='NameExpr'><name type='SimpleName' identifier='masks'></name></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='high'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='high'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xF0'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='theByte'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='high'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='high'></name></target><value type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='high'></name></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='high'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setPixels'></name><comment type='JavadocComment' content=' Sets the pixel values starting at offset code x code in scanline code y code in the receiver s data to the values from the array code pixels code starting at code startIndex code param x the x position of the pixel to set param y the y position of the pixel to set param putWidth the width of the pixels to set param pixels the pixels to set param startIndex the index at which to begin setting exception IndexOutOfBoundsException if putWidth is too large exception IllegalArgumentException ul li ERROR NULL ARGUMENT if pixels is null li li ERROR INVALID ARGUMENT if x or y is out of bounds li li ERROR INVALID ARGUMENT if putWidth is negative li ul exception SWTException ul li ERROR UNSUPPORTED DEPTH if the depth is not one of 1 2 4 8 For higher depths use the int version of this method li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='putWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pixels'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='theByte'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></initializer><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='startIndex'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='x'></name></initializer><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='y'></name></initializer><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></right></inner></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='XOR'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xFC'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xF3'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xCF'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x3F'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='masks'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='3'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0x3'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='offset'></name></index><name type='NameExpr'><name type='SimpleName' identifier='masks'></name></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='high'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='theByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='high'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xF0'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='theByte'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='theByte'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='n'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='high'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='high'></name></target><value type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='high'></name></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='high'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='16'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='24'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='32'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='srcY'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcX'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='putWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setPixels'></name><comment type='JavadocComment' content=' Sets the pixel values starting at offset code x code in scanline code y code in the receiver s data to the values from the array code pixels code starting at code startIndex code param x the x position of the pixel to set param y the y position of the pixel to set param putWidth the width of the pixels to set param pixels the pixels to set param startIndex the index at which to begin setting exception IndexOutOfBoundsException if putWidth is too large exception IllegalArgumentException ul li ERROR NULL ARGUMENT if pixels is null li li ERROR INVALID ARGUMENT if x or y is out of bounds li li ERROR INVALID ARGUMENT if putWidth is negative li ul exception SWTException ul li ERROR UNSUPPORTED DEPTH if the depth is not one of 1 2 4 8 16 24 or 32 li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='putWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pixels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='IntegerLiteralExpr' value='255'></argument><argument type='IntegerLiteralExpr' value='255'></argument><argument type='IntegerLiteralExpr' value='255'></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><name type='SimpleName' identifier='bwPalette'></name><comment type='JavadocComment' content=' Returns a palette with 2 colors black white '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></inner></left><right type='IntegerLiteralExpr' value='0x1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='31'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getMSBOffset'></name><comment type='JavadocComment' content=' Gets the offset of the most significant bit for the given mask '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='32'></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getMSBOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='redMask'></name></argument></arguments></right></initializer><name type='SimpleName' identifier='rshift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='32'></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getMSBOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='greenMask'></name></argument></arguments></right></initializer><name type='SimpleName' identifier='gshift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='32'></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getMSBOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='blueMask'></name></argument></arguments></right></initializer><name type='SimpleName' identifier='bshift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='red'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='rshift'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='redMask'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='green'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='gshift'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='greenMask'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='blue'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='bshift'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='blueMask'></name></right></inner></right></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x7fffffff'></initializer><name type='SimpleName' identifier='minDistance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='nearestPixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='reds'></name></scope></initializer><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reds'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='red'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='greens'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='green'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='blues'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='blue'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='r'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='g'></name></right></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='b'></name></right></right></initializer><name type='SimpleName' identifier='distance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nearestPixel'></name></target><value type='NameExpr'><name type='SimpleName' identifier='j'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></target><value type='NameExpr'><name type='SimpleName' identifier='distance'></name></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='n'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='nearestPixel'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='closestMatch'></name><comment type='JavadocComment' content=' Finds the closest match '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='red'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='green'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='blue'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='redMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='greenMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='blueMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='reds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='greens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='blues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='mask'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='IntegerLiteralExpr' value='255'></argument><argument type='IntegerLiteralExpr' value='255'></argument><argument type='IntegerLiteralExpr' value='255'></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></initializer><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument></arguments></initializer><name type='SimpleName' identifier='newMask'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='blackIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Find index of black in mask palette '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getRGBs'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></initializer><name type='SimpleName' identifier='rgbs'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='blackIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='palette'></name></scope></name></argument></arguments></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='blackIndex'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='blackIndex'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></scope></right></condition></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='pixels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getPixels'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='pixels'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='blackIndex'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='pixels'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setPixels'></name><scope type='NameExpr'><name type='SimpleName' identifier='newMask'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='pixels'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='y'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='newMask'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='convertMask'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mask'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pad'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newPad'></name></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='depth'></name></right></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='stride'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='stride'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='pad'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='pad'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='pad'></name></right></initializer><name type='SimpleName' identifier='bpl'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='stride'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newPad'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='newPad'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='newPad'></name></right></initializer><name type='SimpleName' identifier='newBpl'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newBpl'></name></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='srcIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='destIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='newData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stride'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='srcIndex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bpl'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='destIndex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newBpl'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='y'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='newData'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='convertPad'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pad'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='newPad'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' Blit operation bits to be OR ed together to specify the desired operation '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='BLIT SRC'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' copy source directly else applies logic operations'></comment></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='BLIT ALPHA'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' enable alpha blending'></comment></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='BLIT DITHER'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' enable dithering in low color modes'></comment></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' Alpha mode values 0 255 specify global alpha level '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='255'></initializer><name type='SimpleName' identifier='ALPHA OPAQUE'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Fully opaque ignores any alpha data '></comment></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='ALPHA TRANSPARENT'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Fully transparent ignores any alpha data '></comment></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Use alpha channel from separate alphaData'></comment></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='2'></expression></initializer><name type='SimpleName' identifier='ALPHA CHANNEL SOURCE'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Use alpha channel embedded in sourceData'></comment></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='3'></expression></initializer><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Use transparency mask formed by bytes in alphaData non zero is opaque '></comment></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='4'></expression></initializer><name type='SimpleName' identifier='ALPHA MASK PACKED'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Use transparency mask formed by packed bits in alphaData'></comment></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='5'></expression></initializer><name type='SimpleName' identifier='ALPHA MASK INDEX'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Consider source palette indices transparent if in alphaData array'></comment></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='6'></expression></initializer><name type='SimpleName' identifier='ALPHA MASK RGB'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' Consider source RGBs transparent if in RGB888 format alphaData array'></comment></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' Byte and bit order constants '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='LSB FIRST'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='MSB FIRST'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' Data types internal '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='TYPE GENERIC 8'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' direct true color formats with arbitrary masks shifts'></comment></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='3'></initializer><name type='SimpleName' identifier='TYPE GENERIC 24'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='5'></initializer><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='6'></initializer><name type='SimpleName' identifier='TYPE INDEX 8'></name><type type='PrimitiveType' specificType='INT'></type><comment type='LineComment' content=' palette indexed color formats'></comment></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='7'></initializer><name type='SimpleName' identifier='TYPE INDEX 4'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='8'></initializer><name type='SimpleName' identifier='TYPE INDEX 2'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='9'></initializer><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='10'></initializer><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='NameExpr'><name type='SimpleName' identifier='ALPHA TRANSPARENT'></name></right></inner></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='srcAlphaMask'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='destAlphaMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' these should be supplied as params later'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dwm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare scaling data '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcWidth'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dhm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcHeight'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfyi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='sbpp'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='stype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare source related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='srcDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='16'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='24'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='32'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid source type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></right></right></initializer><name type='SimpleName' identifier='spr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='dbpp'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dtype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare destination related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='16'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='24'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='32'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid destination type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destY'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destStride'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destX'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></right></right></initializer><name type='SimpleName' identifier='dpr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></expression></thenExpr></initializer><name type='SimpleName' identifier='dprxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destStride'></name></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='destStride'></name></expression></thenExpr></initializer><name type='SimpleName' identifier='dpryi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='apr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare special processing data '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='op'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BLIT ALPHA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid alpha type '></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression><comment type='LineComment' content=' prescale'></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SOURCE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='dpr'></name></initializer><name type='SimpleName' identifier='dp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Blit '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='spr'></name></initializer><name type='SimpleName' identifier='sp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='IntegerLiteralExpr' value='0x10000'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='stype'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dtype'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></selector><comment type='JavadocComment' content=' Fast blit straight copy '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='1'></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='2'></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='3'></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='3'></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='4'></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcRedShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Comprehensive blit apply transformations '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcGreenShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcBlueShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcAlphaShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcAlphas'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destRedShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destRedWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destRedWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destRedWidth'></name></right></initializer><name type='SimpleName' identifier='destRedPreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destGreenShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destGreenWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destGreenWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenWidth'></name></right></initializer><name type='SimpleName' identifier='destGreenPreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destBlueShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destBlueWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destBlueWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueWidth'></name></right></initializer><name type='SimpleName' identifier='destBluePreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destAlphaShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destAlphaWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destAlphaWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destAlphas'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaWidth'></name></right></initializer><name type='SimpleName' identifier='destAlphaPreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='apr'></name></initializer><name type='SimpleName' identifier='ap'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></initializer><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='a'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='rq'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='gq'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bq'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='aq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='stype'></name></selector><comment type='JavadocComment' content=' READ NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='3'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><comment type='JavadocComment' content=' DO SPECIAL PROCESSING IF REQUIRED '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SOURCE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='a'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='0x10000'></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='9'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x10000'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='IntegerLiteralExpr' value='0x0000'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='3'></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x10000'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x0000'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='aq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='a'></name></left><right type='NameExpr'><name type='SimpleName' identifier='aq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression><comment type='LineComment' content=' Perform alpha blending'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='rq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='gq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='gq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedPreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenPreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBluePreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='a'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaPreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' WRITE NEXT PIXEL '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='blit'></name><comment type='JavadocComment' content=' Blits a direct palette image into a direct palette image p Note When the source and destination depth order and masks are pairwise equal and the blitter operation is BLIT SRC the masks are ignored Hence when not changing the image data format 0 may be specified for the masks p param op the blitter operation a combination of BLIT xxx flags see BLIT xxx constants param srcData the source byte array containing image data param srcDepth the source depth one of 8 16 24 32 param srcStride the source number of bytes per line param srcOrder the source byte ordering one of MSB FIRST or LSB FIRST ignored if srcDepth is not 16 or 32 param srcX the top left x coord of the source blit region param srcY the top left y coord of the source blit region param srcWidth the width of the source blit region param srcHeight the height of the source blit region param srcRedMask the source red channel mask param srcGreenMask the source green channel mask param srcBlueMask the source blue channel mask param alphaMode the alpha blending or mask mode may be an integer 0 255 for global alpha ignored if BLIT ALPHA not specified in the blitter operations see ALPHA MODE xxx constants param alphaData the alpha blending or mask data varies depending on the value of alphaMode and sometimes ignored param alphaStride the alpha data number of bytes per line param alphaX the top left x coord of the alpha blit region param alphaY the top left y coord of the alpha blit region param destData the destination byte array containing image data param destDepth the destination depth one of 8 16 24 32 param destStride the destination number of bytes per line param destOrder the destination byte ordering one of MSB FIRST or LSB FIRST ignored if destDepth is not 16 or 32 param destX the top left x coord of the destination blit region param destY the top left y coord of the destination blit region param destWidth the width of the destination blit region param destHeight the height of the destination blit region param destRedMask the destination red channel mask param destGreenMask the destination green channel mask param destBlueMask the destination blue channel mask param flipX if true the resulting image is flipped along the vertical axis param flipY if true the resulting image is flipped along the horizontal axis '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='op'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcRedMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcGreenMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcBlueMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaMode'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destRedMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destGreenMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destBlueMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipX'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipY'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='NameExpr'><name type='SimpleName' identifier='ALPHA TRANSPARENT'></name></right></inner></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dwm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare scaling data '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcWidth'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dhm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcHeight'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfyi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='stype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare source related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='srcDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='4'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='2'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='1'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid source type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='srcX'></name></right></initializer><name type='SimpleName' identifier='spr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='dtype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare destination related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='4'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='destStride'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='2'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='destStride'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='1'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='destStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid source type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destY'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destStride'></name></right></left><right type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destX'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></thenExpr></inner></right></initializer><name type='SimpleName' identifier='dpr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></thenExpr></initializer><name type='SimpleName' identifier='dprxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destStride'></name></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='destStride'></name></expression></thenExpr></initializer><name type='SimpleName' identifier='dpryi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='apr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare special processing data '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='op'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BLIT ALPHA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression><comment type='LineComment' content=' prescale'></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SOURCE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='op'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BLIT DITHER'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='ditherEnabled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='dpr'></name></initializer><name type='SimpleName' identifier='dp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Blit '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='spr'></name></initializer><name type='SimpleName' identifier='sp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='apr'></name></initializer><name type='SimpleName' identifier='ap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></right></initializer><name type='SimpleName' identifier='destPaletteSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destReds'></name></left><right type='NullLiteralExpr'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='destReds'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='destPaletteSize'></name></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='destPaletteSize'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='destReds'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='paletteMapping'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='true'></initializer><name type='SimpleName' identifier='isExactPaletteMapping'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='0x10000'></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='stype'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dtype'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destReds'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></right></inner></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></left><right type='NullLiteralExpr'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destReds'></name></left><right type='NullLiteralExpr'></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcDepth'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='srcDepth'></name></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0xff'></left><right type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></target><value type='NameExpr'><name type='SimpleName' identifier='ONE TO ONE MAPPING'></name></value></expression></statement></statements></thenStmt></statement><statement type='BreakStmt'></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></target><value type='NameExpr'><name type='SimpleName' identifier='ONE TO ONE MAPPING'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt><comment type='JavadocComment' content=' If the palettes and formats are equivalent use a one to one mapping '></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='srcDepth'></name></right></initializer><name type='SimpleName' identifier='srcPaletteSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Generate a palette mapping '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='srcPaletteSize'></name></dimension></level></levels></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></left><right type='NullLiteralExpr'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='srcPaletteSize'></name></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='srcPaletteSize'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></scope></value></expression></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x7fffffff'></initializer><name type='SimpleName' identifier='minDistance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='r'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dg'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='g'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='db'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='b'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='distance'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='dr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dr'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='dg'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dg'></name></right></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='db'></name></left><right type='NameExpr'><name type='SimpleName' identifier='db'></name></right></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='NameExpr'><name type='SimpleName' identifier='j'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></target><value type='NameExpr'><name type='SimpleName' identifier='distance'></name></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destPaletteSize'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dg'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='db'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='distance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='isExactPaletteMapping'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcPaletteSize'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></left><right type='NullLiteralExpr'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='NameExpr'><name type='SimpleName' identifier='isExactPaletteMapping'></name></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='ditherEnabled'></name></expression></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='stype'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dtype'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='IntegerLiteralExpr' value='0x10000'></right></inner></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='stype'></name></selector><comment type='JavadocComment' content=' READ NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x03'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'></statement></statements></entrie></entries></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><comment type='JavadocComment' content=' APPLY MASK '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></initializer><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='BYTE'></type></variable><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></initializer><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='BYTE'></type></variable><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><comment type='JavadocComment' content=' WRITE NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xf0'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='index'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x03'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><comment type='JavadocComment' content=' Convert between indexed modes using mapping and mask '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='stype'></name></selector><comment type='JavadocComment' content=' Fast blit copy w mapping '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='v'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='v'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='v'></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='v'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xf0'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='v'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x03'></right></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x03'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></index><name type='NameExpr'><name type='SimpleName' identifier='paletteMapping'></name></name></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></initializer><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Comprehensive blit apply transformations '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='indexq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lastindex'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='lastr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='lastg'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='lastb'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='rerr'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='gerr'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='berr'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ditherEnabled'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rerr'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gerr'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='berr'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rerr'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gerr'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='berr'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></value></expression></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lrerr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lgerr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lberr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='stype'></name></selector><comment type='JavadocComment' content=' READ NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x03'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' DO SPECIAL PROCESSING IF REQUIRED '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='0x10000'></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='9'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x10000'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' could speed up using binary search if we sorted the indices'></comment></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x10000'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x0000'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x03'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='indexq'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='rq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Perform alpha blending'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='indexq'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='gq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='indexq'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='bq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='rq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='gq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='gq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ditherEnabled'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression><comment type='LineComment' content=' Floyd Steinberg error diffusion'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='IntegerLiteralExpr' value='255'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='IntegerLiteralExpr' value='255'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='IntegerLiteralExpr' value='255'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='IntegerLiteralExpr' value='255'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='IntegerLiteralExpr' value='255'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='IntegerLiteralExpr' value='255'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lberr'></name></value></expression></statement></statements></thenStmt><comment type='JavadocComment' content=' MAP COLOR TO THE PALETTE '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastr'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastg'></name></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastb'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='r'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dg'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='g'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='db'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='b'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='distance'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='dr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dr'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='dg'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dg'></name></right></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='db'></name></left><right type='NameExpr'><name type='SimpleName' identifier='db'></name></right></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='j'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></target><value type='NameExpr'><name type='SimpleName' identifier='distance'></name></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destPaletteSize'></name></right></compare><comment type='LineComment' content=' moving the variable declarations out seems to make the DK IT happier '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dg'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='db'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='distance'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x7fffffff'></initializer><name type='SimpleName' identifier='minDistance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='r'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastg'></name></target><value type='NameExpr'><name type='SimpleName' identifier='g'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastb'></name></target><value type='NameExpr'><name type='SimpleName' identifier='b'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ditherEnabled'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dxm1'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dxp1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Floyd Steinberg error diffusion cont d '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='acc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxp1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxm1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='acc'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxp1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxm1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='acc'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxp1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lberr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lberr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxm1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='acc'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></value></expression></statement></statements></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><comment type='JavadocComment' content=' WRITE NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xf0'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x03'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='blit'></name><comment type='JavadocComment' content=' Blits an index palette image into an index palette image p Note The source and destination red green and blue arrays may be null if no alpha blending or dither is to be performed p param op the blitter operation a combination of BLIT xxx flags see BLIT xxx constants param srcData the source byte array containing image data param srcDepth the source depth one of 1 2 4 8 param srcStride the source number of bytes per line param srcOrder the source byte ordering one of MSB FIRST or LSB FIRST ignored if srcDepth is not 1 param srcX the top left x coord of the source blit region param srcY the top left y coord of the source blit region param srcWidth the width of the source blit region param srcHeight the height of the source blit region param srcReds the source palette red component intensities param srcGreens the source palette green component intensities param srcBlues the source palette blue component intensities param alphaMode the alpha blending or mask mode may be an integer 0 255 for global alpha ignored if BLIT ALPHA not specified in the blitter operations see ALPHA MODE xxx constants param alphaData the alpha blending or mask data varies depending on the value of alphaMode and sometimes ignored param alphaStride the alpha data number of bytes per line param alphaX the top left x coord of the alpha blit region param alphaY the top left y coord of the alpha blit region param destData the destination byte array containing image data param destDepth the destination depth one of 1 2 4 8 param destStride the destination number of bytes per line param destOrder the destination byte ordering one of MSB FIRST or LSB FIRST ignored if destDepth is not 1 param destX the top left x coord of the destination blit region param destY the top left y coord of the destination blit region param destWidth the width of the destination blit region param destHeight the height of the destination blit region param destReds the destination palette red component intensities param destGreens the destination palette green component intensities param destBlues the destination palette blue component intensities param flipX if true the resulting image is flipped along the vertical axis param flipY if true the resulting image is flipped along the horizontal axis '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='op'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaMode'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipX'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipY'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='NameExpr'><name type='SimpleName' identifier='ALPHA TRANSPARENT'></name></right></inner></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='destAlphaMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' these should be supplied as params later'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dwm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare scaling data '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcWidth'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dhm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcHeight'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfyi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='stype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare source related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='srcDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='4'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='2'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='1'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid source type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='srcX'></name></right></initializer><name type='SimpleName' identifier='spr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='dbpp'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dtype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare destination related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='16'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='24'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='32'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid destination type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destY'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destStride'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destX'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></right></right></initializer><name type='SimpleName' identifier='dpr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='dbpp'></name></expression></thenExpr></initializer><name type='SimpleName' identifier='dprxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destStride'></name></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='destStride'></name></expression></thenExpr></initializer><name type='SimpleName' identifier='dpryi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='apr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare special processing data '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='op'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BLIT ALPHA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression><comment type='LineComment' content=' prescale'></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SOURCE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destRedShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Comprehensive blit apply transformations '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destRedWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destRedWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destRedWidth'></name></right></initializer><name type='SimpleName' identifier='destRedPreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destGreenShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destGreenWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destGreenWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenWidth'></name></right></initializer><name type='SimpleName' identifier='destGreenPreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destBlueShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destBlueWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destBlueWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueWidth'></name></right></initializer><name type='SimpleName' identifier='destBluePreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='destAlphaShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></argument></arguments></initializer><name type='SimpleName' identifier='destAlphaWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='destAlphaWidth'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='destAlphas'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaWidth'></name></right></initializer><name type='SimpleName' identifier='destAlphaPreShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='dpr'></name></initializer><name type='SimpleName' identifier='dp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='spr'></name></initializer><name type='SimpleName' identifier='sp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='apr'></name></initializer><name type='SimpleName' identifier='ap'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></initializer><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='a'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='rq'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='gq'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bq'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='aq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='stype'></name></selector><comment type='JavadocComment' content=' READ NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x03'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression><comment type='JavadocComment' content=' DO SPECIAL PROCESSING IF REQUIRED '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='0x10000'></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='9'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x10000'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' could speed up using binary search if we sorted the indices'></comment></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></condition><thenStmt type='BreakStmt'></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x10000'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x0000'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='aq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='destAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='aq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='a'></name></left><right type='NameExpr'><name type='SimpleName' identifier='aq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression><comment type='LineComment' content=' Perform alpha blending'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='rq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='gq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='gq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destRedPreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destRedShift'></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenPreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destGreenShift'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destBluePreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destBlueShift'></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='a'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaPreShift'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='destAlphaShift'></name></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' WRITE NEXT PIXEL '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='IntegerLiteralExpr' value='24'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='blit'></name><comment type='JavadocComment' content=' Blits an index palette image into a direct palette image p Note The source and destination masks and palettes must always be fully specified p param op the blitter operation a combination of BLIT xxx flags see BLIT xxx constants param srcData the source byte array containing image data param srcDepth the source depth one of 1 2 4 8 param srcStride the source number of bytes per line param srcOrder the source byte ordering one of MSB FIRST or LSB FIRST ignored if srcDepth is not 1 param srcX the top left x coord of the source blit region param srcY the top left y coord of the source blit region param srcWidth the width of the source blit region param srcHeight the height of the source blit region param srcReds the source palette red component intensities param srcGreens the source palette green component intensities param srcBlues the source palette blue component intensities param alphaMode the alpha blending or mask mode may be an integer 0 255 for global alpha ignored if BLIT ALPHA not specified in the blitter operations see ALPHA MODE xxx constants param alphaData the alpha blending or mask data varies depending on the value of alphaMode and sometimes ignored param alphaStride the alpha data number of bytes per line param alphaX the top left x coord of the alpha blit region param alphaY the top left y coord of the alpha blit region param destData the destination byte array containing image data param destDepth the destination depth one of 8 16 24 32 param destStride the destination number of bytes per line param destOrder the destination byte ordering one of MSB FIRST or LSB FIRST ignored if destDepth is not 16 or 32 param destX the top left x coord of the destination blit region param destY the top left y coord of the destination blit region param destWidth the width of the destination blit region param destHeight the height of the destination blit region param destRedMask the destination red channel mask param destGreenMask the destination green channel mask param destBlueMask the destination blue channel mask param flipX if true the resulting image is flipped along the vertical axis param flipY if true the resulting image is flipped along the horizontal axis '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='op'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaMode'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destRedMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destGreenMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destBlueMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipX'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipY'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='NameExpr'><name type='SimpleName' identifier='ALPHA TRANSPARENT'></name></right></inner></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='srcAlphaMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' these should be supplied as params later'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dwm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare scaling data '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcWidth'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dhm1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='srcHeight'></name></expression><type type='PrimitiveType' specificType='LONG'></type></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></thenExpr></initializer><name type='SimpleName' identifier='sfyi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='sbpp'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='stype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare source related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='srcDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='16'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='24'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='32'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='srcOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid source type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='srcX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='sbpp'></name></right></right></initializer><name type='SimpleName' identifier='spr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='dtype'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare destination related data '></comment></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='8'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='4'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='destStride'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='2'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='destStride'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='IntegerLiteralExpr' value='1'></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='destStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dtype'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destOrder'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MSB FIRST'></name></right></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></thenExpr></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid source type '></comment></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destY'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dhm1'></name></right></thenExpr></inner></left><right type='NameExpr'><name type='SimpleName' identifier='destStride'></name></right></left><right type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destX'></name></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dwm1'></name></right></thenExpr></inner></right></initializer><name type='SimpleName' identifier='dpr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipX'></name></inner></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></thenExpr></initializer><name type='SimpleName' identifier='dprxi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='flipY'></name></inner></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='destStride'></name></elseExpr><thenExpr type='UnaryExpr' operator='MINUS'><expression type='NameExpr'><name type='SimpleName' identifier='destStride'></name></expression></thenExpr></initializer><name type='SimpleName' identifier='dpryi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='apr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Prepare special processing data '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='op'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BLIT ALPHA'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='LEFT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='alphaY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='alphaX'></name></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK INDEX'></name></label></labels><statements><statement type='ReturnStmt'><comment type='LineComment' content='throw new IllegalArgumentException Invalid alpha type '></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression><comment type='LineComment' content=' prescale'></comment></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SOURCE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='op'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BLIT DITHER'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='ditherEnabled'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcRedShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='JavadocComment' content=' Comprehensive blit apply transformations '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcGreenShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcBlueShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></argument></arguments></initializer><name type='SimpleName' identifier='srcAlphaShift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></initializer><name type='SimpleName' identifier='srcAlphas'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='dpr'></name></initializer><name type='SimpleName' identifier='dp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='spr'></name></initializer><name type='SimpleName' identifier='sp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='apr'></name></initializer><name type='SimpleName' identifier='ap'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></initializer><name type='SimpleName' identifier='alpha'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='r'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='g'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='a'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='indexq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lastindex'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='lastr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='lastg'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='lastb'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='rerr'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='gerr'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='berr'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='destDepth'></name></right></initializer><name type='SimpleName' identifier='destPaletteSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='destReds'></name></left><right type='NullLiteralExpr'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='destReds'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='destPaletteSize'></name></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='destPaletteSize'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='destReds'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ditherEnabled'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rerr'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gerr'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='berr'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rerr'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gerr'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='berr'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></value></expression></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lrerr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lgerr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lberr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='stype'></name></selector><comment type='JavadocComment' content=' READ NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 8'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 16 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 24'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='3'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE GENERIC 32 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='sp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='sp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='srcData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></initializer><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcRedShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcGreenShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcBlueShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='a'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaMask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcAlphaShift'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='srcAlphas'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='alphaMode'></name></selector><comment type='JavadocComment' content=' DO SPECIAL PROCESSING IF REQUIRED '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SEPARATE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA CHANNEL SOURCE'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='a'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='255'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK UNPACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='ap'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='0x10000'></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK PACKED'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='ap'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='9'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x10000'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='ALPHA MASK RGB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='IntegerLiteralExpr' value='0x10000'></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></name></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='alpha'></name></target><value type='IntegerLiteralExpr' value='0x0000'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='alphaData'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='3'></value></updat></update></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x10000'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='alpha'></name></left><right type='IntegerLiteralExpr' value='0x0000'></right></condition><thenStmt type='ContinueStmt'></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x03'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='indexq'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></inner></left><right type='IntegerLiteralExpr' value='0x01'></right></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='indexq'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='rq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Perform alpha blending'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='indexq'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='gq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='indexq'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></initializer><name type='SimpleName' identifier='bq'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='rq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='gq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='gq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bq'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bq'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alpha'></name></right></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ditherEnabled'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression><comment type='LineComment' content=' Floyd Steinberg error diffusion'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='IntegerLiteralExpr' value='255'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='IntegerLiteralExpr' value='255'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='r'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='IntegerLiteralExpr' value='255'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='IntegerLiteralExpr' value='255'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='g'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></left><right type='IntegerLiteralExpr' value='4'></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='IntegerLiteralExpr' value='255'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='IntegerLiteralExpr' value='255'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='b'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='lberr'></name></value></expression></statement></statements></thenStmt><comment type='JavadocComment' content=' MAP COLOR TO THE PALETTE '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastr'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastg'></name></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastb'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='r'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dg'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='g'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='db'></name></target><value type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='b'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='distance'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='dr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dr'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='dg'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dg'></name></right></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='db'></name></left><right type='NameExpr'><name type='SimpleName' identifier='db'></name></right></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='j'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='distance'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BreakStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='minDistance'></name></target><value type='NameExpr'><name type='SimpleName' identifier='distance'></name></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='NameExpr'><name type='SimpleName' identifier='destPaletteSize'></name></right></compare><comment type='LineComment' content=' moving the variable declarations out seems to make the DK IT happier '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dr'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='dg'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='db'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='distance'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x7fffffff'></initializer><name type='SimpleName' identifier='minDistance'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='r'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastg'></name></target><value type='NameExpr'><name type='SimpleName' identifier='g'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastb'></name></target><value type='NameExpr'><name type='SimpleName' identifier='b'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='ditherEnabled'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dxm1'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='dxp1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Floyd Steinberg error diffusion cont d '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='acc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxp1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='r'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destReds'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxm1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rerr'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='acc'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lrerr'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxp1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='g'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destGreens'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxm1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='gerr'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='acc'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lgerr'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxp1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lberr'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='b'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destBlues'></name></name></left><right type='IntegerLiteralExpr' value='0xff'></right></inner></right></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='acc'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lberr'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dxm1'></name></index><name type='NameExpr'><name type='SimpleName' identifier='berr'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='acc'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='lberr'></name></right></value></expression></statement></statements></thenStmt></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='dtype'></name></selector><comment type='JavadocComment' content=' WRITE NEXT PIXEL '></comment><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 8'></name></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 4'></name></label></labels><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0x0f'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='IntegerLiteralExpr' value='0xf0'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></thenStmt></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 2'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='6'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x03'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 MSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='7'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></inner></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='TYPE INDEX 1 LSB'></name></label></labels><statements><statement type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='7'></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='destData'></name></name></left><right type='UnaryExpr' operator='BITWISE COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='0x01'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></expression></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='lastindex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destWidth'></name></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></initializer><name type='SimpleName' identifier='sfx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dprxi'></name></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfx'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfx'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfxi'></name></right></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='0'></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='destHeight'></name></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></initializer><name type='SimpleName' identifier='sfy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='spr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='srcStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='ap'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='apr'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='alphaStride'></name></right></value></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='sfy'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='sfy'></name></left><right type='IntegerLiteralExpr' value='0xffff'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='sfyi'></name></right></value></updat><updat type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dpr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='dpryi'></name></value></value></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='blit'></name><comment type='JavadocComment' content=' Blits a direct palette image into an index palette image p Note The source and destination masks and palettes must always be fully specified p param op the blitter operation a combination of BLIT xxx flags see BLIT xxx constants param srcData the source byte array containing image data param srcDepth the source depth one of 8 16 24 32 param srcStride the source number of bytes per line param srcOrder the source byte ordering one of MSB FIRST or LSB FIRST ignored if srcDepth is not 16 or 32 param srcX the top left x coord of the source blit region param srcY the top left y coord of the source blit region param srcWidth the width of the source blit region param srcHeight the height of the source blit region param srcRedMask the source red channel mask param srcGreenMask the source green channel mask param srcBlueMask the source blue channel mask param alphaMode the alpha blending or mask mode may be an integer 0 255 for global alpha ignored if BLIT ALPHA not specified in the blitter operations see ALPHA MODE xxx constants param alphaData the alpha blending or mask data varies depending on the value of alphaMode and sometimes ignored param alphaStride the alpha data number of bytes per line param alphaX the top left x coord of the alpha blit region param alphaY the top left y coord of the alpha blit region param destData the destination byte array containing image data param destDepth the destination depth one of 1 2 4 8 param destStride the destination number of bytes per line param destOrder the destination byte ordering one of MSB FIRST or LSB FIRST ignored if destDepth is not 1 param destX the top left x coord of the destination blit region param destY the top left y coord of the destination blit region param destWidth the width of the destination blit region param destHeight the height of the destination blit region param destReds the destination palette red component intensities param destGreens the destination palette green component intensities param destBlues the destination palette blue component intensities param flipX if true the resulting image is flipped along the vertical axis param flipY if true the resulting image is flipped along the horizontal axis '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='op'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcRedMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcGreenMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='srcBlueMask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaMode'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='alphaY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destDepth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destStride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destOrder'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destY'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destReds'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destGreens'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='destBlues'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipX'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flipY'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='UNSIGNED RIGHT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></body><compare type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='32'></right></inner></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='IntegerLiteralExpr' value='0'></value></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getChannelShift'></name><comment type='JavadocComment' content=' Computes the required channel shift from a mask '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='UNSIGNED RIGHT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='NameExpr'><name type='SimpleName' identifier='shift'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='UNSIGNED RIGHT SHIFT'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></body><compare type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='32'></right></inner></right></compare><initialization><initializatio type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='NameExpr'><name type='SimpleName' identifier='shift'></name></value></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getChannelWidth'></name><comment type='JavadocComment' content=' Computes the required channel width depth from a mask '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChannelShift'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='mask'></name></argument></arguments></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></index><name type='ArrayAccessExpr'><index type='MethodCallExpr'><name type='SimpleName' identifier='getChannelWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='mask'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='shift'></name></argument></arguments></index><name type='NameExpr'><name type='SimpleName' identifier='ANY TO EIGHT'></name></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getChannelField'></name><comment type='JavadocComment' content=' Extracts a field from packed RGB data given a mask for that field '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='bandWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='bandHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='bitmapDepth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Gradients are drawn as tiled bands '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='bitmapData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='paletteData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='redBits'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='greenBits'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blueBits'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='paletteData'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></value><value type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='BlockComment' content=' Dithered two tone '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitmapDepth'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='blendi'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='vertical'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></target><value type='NameExpr'><name type='SimpleName' identifier='width'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='8'></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='height'></name></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blendi'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='DIVIDE'><left type='IntegerLiteralExpr' value='0x1040000'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='8'></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='width'></name></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></target><value type='NameExpr'><name type='SimpleName' identifier='height'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blendi'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='DIVIDE'><left type='IntegerLiteralExpr' value='0x1040000'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='4'></expression></right></initializer><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></dimension></level></levels></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='vertical'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dptr'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='blend'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='7'></right></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dy'></name></index><name type='NameExpr'><name type='SimpleName' identifier='DITHER MATRIX'></name></name></name></right></inner></left><right type='IntegerLiteralExpr' value='0x1000000'></right></condition><elseExpr type='CastExpr'><expression type='IntegerLiteralExpr' value='1'></expression><type type='PrimitiveType' specificType='BYTE'></type></elseExpr><thenExpr type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='BYTE'></type></thenExpr></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='dx'></name></initializer><name type='SimpleName' identifier='dptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dptr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></value></updat></update></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='blend'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='blend'></name></target><value type='NameExpr'><name type='SimpleName' identifier='blendi'></name></value></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dp'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dx'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='blend'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='7'></right></index><name type='NameExpr'><name type='SimpleName' identifier='DITHER MATRIX'></name></name></name></right></inner></left><right type='IntegerLiteralExpr' value='0x1000000'></right></condition><elseExpr type='CastExpr'><expression type='IntegerLiteralExpr' value='1'></expression><type type='PrimitiveType' specificType='BYTE'></type></elseExpr><thenExpr type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='BYTE'></type></thenExpr></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat></update></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='blend'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='blend'></name></target><value type='NameExpr'><name type='SimpleName' identifier='blendi'></name></value></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></value></updat></update></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='paletteData'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='IntegerLiteralExpr' value='0x0000ff00'></argument><argument type='IntegerLiteralExpr' value='0x00ff0000'></argument><argument type='IntegerLiteralExpr' value='0xff000000'></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitmapDepth'></name></target><value type='IntegerLiteralExpr' value='32'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='redBits'></name></left><right type='IntegerLiteralExpr' value='8'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='greenBits'></name></left><right type='IntegerLiteralExpr' value='8'></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blueBits'></name></left><right type='IntegerLiteralExpr' value='8'></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='steps'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Dithered color '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='vertical'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></target><value type='NameExpr'><name type='SimpleName' identifier='width'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='8'></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='height'></name></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='steps'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></condition><elseExpr type='IntegerLiteralExpr' value='8'></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='width'></name></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></target><value type='NameExpr'><name type='SimpleName' identifier='height'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='steps'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='4'></right></initializer><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='buildDitheredGradientChannel'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='steps'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='vertical'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='blueBits'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='buildDitheredGradientChannel'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='steps'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='vertical'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='greenBits'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='buildDitheredGradientChannel'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='steps'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='vertical'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='redBits'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='steps'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Precise color '></comment></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='vertical'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></target><value type='NameExpr'><name type='SimpleName' identifier='width'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='steps'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></target><value type='NameExpr'><name type='SimpleName' identifier='height'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='steps'></name></target><value type='ConditionalExpr'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseExpr type='IntegerLiteralExpr' value='1'></elseExpr><thenExpr type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='IntegerLiteralExpr' value='1'></right></thenExpr></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></left><right type='IntegerLiteralExpr' value='4'></right></initializer><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='buildPreciseGradientChannel'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='steps'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='vertical'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='buildPreciseGradientChannel'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='steps'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='vertical'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='buildPreciseGradientChannel'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='steps'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='vertical'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Select an algorithm depending on the depth of the screen '></comment></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapDepth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='paletteData'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='createGradientBand'></name><comment type='JavadocComment' content=' Creates an ImageData containing one band s worth of a gradient filled block If code vertical code is true the band must be tiled horizontally to fill a region otherwise it must be tiled vertically param width the width of the region to be filled param height the height of the region to be filled param vertical if true sweeps from top to bottom else sweeps from left to right param fromRGB the color to start with param toRGB the color to end with param redBits the number of significant red bits 0 for palette modes param greenBits the number of significant green bits 0 for palette modes param blueBits the number of significant blue bits 0 for palette modes return the new ImageData '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='vertical'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fromRGB'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='toRGB'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='redBits'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='greenBits'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='blueBits'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='from'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='to'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='val'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='steps'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='inc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='vertical'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='val'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='val'></name></target><value type='NameExpr'><name type='SimpleName' identifier='inc'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='IntegerLiteralExpr' value='4'></value></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dp'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='val'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='val'></name></target><value type='NameExpr'><name type='SimpleName' identifier='inc'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></value></updat></update></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='buildPreciseGradientChannel'></name><comment type='BlockComment' content=' Fill in gradated values for a color channel '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='from'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='to'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='steps'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bandWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bandHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='vertical'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bitmapData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dp'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='IntegerLiteralExpr' value='0xff00'></left><right type='NameExpr'><name type='SimpleName' identifier='bits'></name></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='from'></name></left><right type='IntegerLiteralExpr' value='16'></right></initializer><name type='SimpleName' identifier='val'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='to'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='val'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='steps'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='inc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='vertical'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='IntegerLiteralExpr' value='7'></right></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dy'></name></index><name type='NameExpr'><name type='SimpleName' identifier='DITHER MATRIX'></name></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='bits'></name></right></initializer><name type='SimpleName' identifier='thresh'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='val'></name></left><right type='NameExpr'><name type='SimpleName' identifier='thresh'></name></right></initializer><name type='SimpleName' identifier='temp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='temp'></name></left><right type='IntegerLiteralExpr' value='0xffffff'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dptr'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='temp'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dptr'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='dp'></name></initializer><name type='SimpleName' identifier='dptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dptr'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></value></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='val'></name></target><value type='NameExpr'><name type='SimpleName' identifier='inc'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='IntegerLiteralExpr' value='4'></value></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dx'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='IntegerLiteralExpr' value='7'></right></index><name type='NameExpr'><name type='SimpleName' identifier='DITHER MATRIX'></name></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='bits'></name></right></initializer><name type='SimpleName' identifier='thresh'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='val'></name></left><right type='NameExpr'><name type='SimpleName' identifier='thresh'></name></right></initializer><name type='SimpleName' identifier='temp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='temp'></name></left><right type='IntegerLiteralExpr' value='0xffffff'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dptr'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='UNSIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='temp'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='dptr'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bitmapData'></name></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='dp'></name></initializer><name type='SimpleName' identifier='dptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dx'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dptr'></name></target><value type='IntegerLiteralExpr' value='4'></value></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='val'></name></target><value type='NameExpr'><name type='SimpleName' identifier='inc'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bandHeight'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='PREFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dy'></name></expression></updat><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dp'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bytesPerLine'></name></value></updat></update></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='buildDitheredGradientChannel'></name><comment type='BlockComment' content=' Fill in dithered gradated values for a color channel '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='from'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='to'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='steps'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bandWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bandHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='vertical'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bitmapData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dp'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bytesPerLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bits'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='createGradientBand'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='vertical'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='fromRGB'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='toRGB'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='redBits'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='greenBits'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='blueBits'></name></argument></arguments></initializer><name type='SimpleName' identifier='band'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression><comment type='BlockComment' content=' Create the bitmap and tile it '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Image'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='band'></name></argument></arguments></initializer><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Image'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='vertical'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dy'></name></right></initializer><name type='SimpleName' identifier='blitHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='blitHeight'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blitHeight'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawImage'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='blitHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='NameExpr'><name type='SimpleName' identifier='y'></name></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='blitHeight'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dy'></name></left><right type='NameExpr'><name type='SimpleName' identifier='height'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dy'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></value></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='dx'></name></right></initializer><name type='SimpleName' identifier='blitWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='blitWidth'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blitWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawImage'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='blitWidth'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='NameExpr'><name type='SimpleName' identifier='x'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='blitWidth'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='dx'></name></left><right type='NameExpr'><name type='SimpleName' identifier='width'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='dx'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></value></updat></update></statement></statements></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='drawImage'></name><scope type='NameExpr'><name type='SimpleName' identifier='gc'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='band'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='fillGradientRectangle'></name><comment type='JavadocComment' content=' Renders a gradient onto a GC p This is a GC helper p param gc the GC to render the gradient onto param device the device the GC belongs to param x the top left x coordinate of the region to be filled param y the top left y coordinate of the region to be filled param width the width of the region to be filled param height the height of the region to be filled param vertical if true sweeps from top to bottom else sweeps from left to right param fromRGB the color to start with param toRGB the color to end with param redBits the number of significant red bits 0 for palette modes param greenBits the number of significant green bits 0 for palette modes param blueBits the number of significant blue bits 0 for palette modes '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='gc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GC'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='vertical'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fromRGB'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='toRGB'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='redBits'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='greenBits'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='blueBits'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
