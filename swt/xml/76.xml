<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='custom'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='events'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='TableEditor'></name><comment type='JavadocComment' content=' A TableEditor is a manager for a Control that appears above a cell in a Table and tracks with the moving and resizing of that cell It can be used to display a text widget above a cell in a Table so that the user can edit the contents of that cell It can also be used to display a button that can launch a dialog for modifying the contents of the associated cell p Here is an example of using a TableEditor code pre final Table table new Table shell SWT FULL SELECTION SWT HIDE SELECTION TableColumn column1 new TableColumn table SWT NONE TableColumn column2 new TableColumn table SWT NONE for int i 0 i lt 10 i TableItem item new TableItem table SWT NONE item setText new String item i edit this value column1 pack column2 pack final TableEditor editor new TableEditor table The editor must have the same size as the cell and must not be any smaller than 50 pixels editor horizontalAlignment SWT LEFT editor grabHorizontal true editor minimumWidth 50 editing the second column final int EDITABLECOLUMN 1 table addSelectionListener new SelectionAdapter public void widgetSelected SelectionEvent e Clean up any previous editor control Control oldEditor editor getEditor if oldEditor null oldEditor dispose Identify the selected row TableItem item TableItem e item if item null return The control that will be the editor must be a child of the Table Text newEditor new Text table SWT NONE newEditor setText item getText EDITABLECOLUMN newEditor addModifyListener new ModifyListener public void modifyText ModifyEvent e Text text Text editor getEditor editor getItem setText EDITABLECOLUMN text getText newEditor selectAll newEditor setFocus editor setEditor newEditor item EDITABLECOLUMN pre code '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ControlEditor'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='table'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableItem'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='column'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='columnListener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ControlListener'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='table'></name></argument></arguments></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='table'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='table'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='columnListener'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ControlListener'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resize'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='controlMoved'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ControlEvent'></name></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resize'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='controlResized'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ControlEvent'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='grabVertical'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression><comment type='LineComment' content=' To be consistent with older versions of SWT grabVertical defaults to true'></comment></statement></statements></body><name type='SimpleName' identifier='TableEditor'></name><comment type='JavadocComment' content=' Creates a TableEditor for the specified Table param table the Table Control above which this editor will be displayed '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='table'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='column'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='column'></name></argument></arguments></initializer><name type='SimpleName' identifier='cell'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getImageBounds'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='column'></name></argument></arguments></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></initializer><name type='SimpleName' identifier='area'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></right></left><right type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='area'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='minimumWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='minimumHeight'></name></argument></arguments></initializer><name type='SimpleName' identifier='editorRect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='grabHorizontal'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='minimumWidth'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='grabVertical'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='minimumHeight'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='horizontalAlignment'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RIGHT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='horizontalAlignment'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='LEFT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression><comment type='LineComment' content=' default is CENTER'></comment></statement></statements></elseStmt><thenStmt type='BlockStmt'></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='verticalAlignment'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='BOTTOM'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='verticalAlignment'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='TOP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression><comment type='LineComment' content=' default is CENTER'></comment></statement></statements></elseStmt><thenStmt type='BlockStmt'></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='cell'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='editorRect'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='computeBounds'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></left><right type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getColumnCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColumn'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></argument></arguments></initializer><name type='SimpleName' identifier='tableColumn'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableColumn'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeControlListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='tableColumn'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='columnListener'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='columnListener'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='table'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='item'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='column'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='SuperExpr'></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Removes all associations between the TableEditor and the cell in the table The Table and the editor Control are b not b disposed '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='column'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getColumn'></name><comment type='JavadocComment' content=' Returns the zero based index of the column of the cell being tracked by this editor return the zero based index of the column of the cell being tracked by this editor '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='item'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableItem'></name></type><name type='SimpleName' identifier='getItem'></name><comment type='JavadocComment' content=' Returns the TableItem for the row of the cell being tracked by this editor return the TableItem for the row of the cell being tracked by this editor '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColumnCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></initializer><name type='SimpleName' identifier='columnCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></target><value type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='column'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resize'></name></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt><comment type='LineComment' content=' In this situation there is a single default column '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></left><right type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></left><right type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColumn'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></argument></arguments></initializer><name type='SimpleName' identifier='tableColumn'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableColumn'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeControlListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='tableColumn'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='columnListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='column'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='column'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getColumnCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></right></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='column'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColumn'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='column'></name><scope type='ThisExpr'></scope></argument></arguments></initializer><name type='SimpleName' identifier='tableColumn'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableColumn'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addControlListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='tableColumn'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='columnListener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resize'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setColumn'></name><comment type='JavadocComment' content=' Sets the zero based index of the column of the cell being tracked by this editor param column the zero based index of the column of the cell being tracked by this editor '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='column'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='item'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='item'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resize'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setItem'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableItem'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setItem'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='item'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setColumn'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='column'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setEditor'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='editor'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setEditor'></name><comment type='JavadocComment' content=' Specify the Control that is to be displayed and the cell in the table that it is to be positioned above p Note The Control provided as the editor b must b be created with its parent being the Table control specified in the TableEditor constructor param editor the Control that is displayed above the cell being edited param item the TableItem for the row of the cell being tracked by this editor param column the zero based index of the column of the cell being tracked by this editor '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='editor'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableItem'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='column'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColumnCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope></initializer><name type='SimpleName' identifier='columnCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='column'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='column'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='column'></name></left><right type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></right></right></inner></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resize'></name><scope type='SuperExpr'></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='resize'></name></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
