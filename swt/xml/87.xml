<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='custom'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='WrappedContent'></name><comment type='JavadocComment' content=' An instance of class code WrappedContent code is used by StyledText to display wrapped lines Lines are wrapped at word breaks which are marked by a space character Trailing space behind words is kept on the current line If the last remaining word on a line can not be fully displayed the line is wrapped character by character WrappedContent wraps a StyledTextContent which provides the line data The start offset and length of wrapped lines is calculated and updated based on recalculation requests and text changes p All public methods in this class implement the code StyledTextContent code interface Package visible methods are internal API for use by code StyledText code p '></comment><implementedTypes><implementedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></implementedType></implementedTypes><members><member type='FieldDeclaration'><comment type='LineComment' content=' index of line offset in visualLines array'></comment><modifiers><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='LINE OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' index of line lenght in visualLines array'></comment><modifiers><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='LINE LENGTH'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='renderer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextRenderer'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='logicalContent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' start and length of each visual line'></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='visualLines'></name><type type='ArrayType' origin='TYPE'><componentType type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='visualLineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='renderer'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='renderer'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='logicalContent'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></value></expression></statement></statements></body><name type='SimpleName' identifier='WrappedContent'></name><comment type='JavadocComment' content=' Create a new instance param renderer class StyledTextRenderer class that renders the lines wrapped by the new instance param logicalContent StyledTextContent that provides the line data '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='renderer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextRenderer'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='logicalContent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StyledTextContent'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addTextChangeListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addTextChangeListener'></name><comment type='JavadocComment' content=' see StyledTextContent addTextChangeListener TextChangeListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextChangeListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></scope></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='NameExpr'><name type='SimpleName' identifier='numLines'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='numLines'></name></argument></arguments></dimension></level><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='2'></dimension></level></levels></initializer><name type='SimpleName' identifier='newLines'></name><type type='ArrayType' origin='TYPE'><componentType type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newLines'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newLines'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resetVisualLines'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='size'></name></right></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='ensureSize'></name><comment type='JavadocComment' content=' Grow the lines array to at least the specified size p param numLines number of elements that the array should have at a minimum '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='numLines'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getCharCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getCharCount'></name><comment type='JavadocComment' content=' see StyledTextContent getCharCount '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getTextRange'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></argument><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></argument></arguments></value></expression></statement></statements></thenStmt><comment type='LineComment' content=' redirect call to logical content if there are no wrapped lines'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getLine'></name><comment type='JavadocComment' content=' return the visual wrapped line at the specified index see StyledTextContent getLine int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='lastLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lastChar'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='offset'></name></argument></arguments></expression></statement></statements></thenStmt><comment type='LineComment' content=' redirect call to logical content if there are no wrapped lines'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastChar'></name></target><value type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></right></value></expression><comment type='LineComment' content=' count which is only available in the visual content '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastChar'></name></right></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lastChar'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></expression></statement></statements></thenStmt><comment type='LineComment' content=' last character for inserting'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></initializer><name type='SimpleName' identifier='high'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='low'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='index'></name></target><value type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='high'></name></left><right type='NameExpr'><name type='SimpleName' identifier='low'></name></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></initializer><name type='SimpleName' identifier='lineStart'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='high'></name></target><value type='NameExpr'><name type='SimpleName' identifier='index'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineStart'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></right></initializer><name type='SimpleName' identifier='lineEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='low'></name></target><value type='NameExpr'><name type='SimpleName' identifier='index'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineEnd'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='high'></name></left><right type='NameExpr'><name type='SimpleName' identifier='low'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='low'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='low'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='low'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='low'></name></expression></expression><comment type='LineComment' content=' they have the same offset always return the first visual line'></comment></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='low'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLineAtOffset'></name><comment type='JavadocComment' content=' Returns the visual wrapped line at given offset p The offset is ambiguous if it identifies the end of a visual line and there is another visual line below In this case the end of the visual line has the same offset as the beginning of the next visual line since the visual line break is not represented by any character in the logical line In this ambiguous case the offset is assumed to represent the end of a visual line and the index of the first visual line is returned p param offset offset of the desired line return the index of the visual wrapped line at the specified offset see StyledTextContent getLineAtOffset int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></initializer><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLineCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope></value></expression></statement></statements></thenStmt><comment type='LineComment' content=' redirect call to logical content if there are no wrapped lines'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getLineCount'></name><comment type='JavadocComment' content=' return the number of visual wrapped lines see StyledTextContent getLineCount '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLineDelimiter'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getLineDelimiter'></name><comment type='JavadocComment' content=' see StyledTextContent getLineDelimiter '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getOffsetAtLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineIndex'></name></argument></arguments></value></expression></statement></statements></thenStmt><comment type='LineComment' content=' redirect call to logical content if there are no wrapped lines'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='offset'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getOffsetAtLine'></name><comment type='JavadocComment' content=' return the start offset of the visual wrapped line at the given index see StyledTextContent getOffsetAtLine int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getTextRange'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getTextRange'></name><comment type='JavadocComment' content=' see StyledTextContent getTextRange int int '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getVisualLineCount'></name><comment type='JavadocComment' content=' Returns the number of visual wrapped lines return the number of visual wrapped lines '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeTextChangeListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeTextChangeListener'></name><comment type='JavadocComment' content=' see StyledTextContent removeTextChangeListener TextChangeListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextChangeListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='reset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='startLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='reset'></name><comment type='JavadocComment' content=' Reset the visual wrapped lines in the specified range If the range specifies partial logical lines e g startLine is the second of two visual lines it is extended to reset all visual lines of a logical line Following the reset the logical lines in the reset visual range are rewrapped p param startLine index of the first visual line param lineCount number of visual lines '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='startLine'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getOffsetAtLine'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='startLine'></name></argument></arguments></initializer><name type='SimpleName' identifier='visualFirstLineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' first logical line that has at least one visual line reset '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualFirstLineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalFirstLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getOffsetAtLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalFirstLine'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalFirstLineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalFirstLineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='visualFirstLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='startLine'></name></left><right type='NameExpr'><name type='SimpleName' identifier='visualFirstLine'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='startLine'></name></target><value type='NameExpr'><name type='SimpleName' identifier='visualFirstLine'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='startLine'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='lastLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' being reset '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></right></initializer><name type='SimpleName' identifier='lastLineEnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='logicalEndLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lastLineEnd'></name></target><value type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></right></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></left><right type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lastLineEnd'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></right></right></condition></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='wrap'></name></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></left><right type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logicalEndLine'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logicalEndLine'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLineCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='lastLine'></name></left><right type='NameExpr'><name type='SimpleName' identifier='startLine'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resetVisualLines'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='startLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></target><value type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='wrap'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wrapLineRange'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalFirstLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='logicalEndLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='startLine'></name></argument></arguments></expression><comment type='LineComment' content=' i e there must not be any reset but unwrapped lines'></comment></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='startLine'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='reset'></name><comment type='JavadocComment' content=' Reset the visual wrapped lines in the specified range If the range specifies partial logical lines e g startLine is the second of two visual lines it is extended to reset all visual lines of a logical line p param startLine index of the first visual line param lineCount number of visual lines param wrap true rewrap the logical lines in the reset visual range false don t rewrap lines Visual lines will be left in an inconsistent state since there will be a range of unwrapped and unknown lines return the first visual line that was reset '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wrap'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='startLine'></name></left><right type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></right></initializer><name type='SimpleName' identifier='endLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='endLine'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='startLine'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='resetVisualLines'></name><comment type='JavadocComment' content=' Reset the visual wrapped lines in the specified range p param startLine index of the first visual line param lineCount number of visual lines '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='replaceTextRange'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='start'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='replaceLength'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='text'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='replaceTextRange'></name><comment type='JavadocComment' content=' see StyledTextContent replaceTextRange int int String '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='replaceLength'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='text'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setText'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='text'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setText'></name><comment type='JavadocComment' content=' see StyledTextContent setText String '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='text'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ensureSize'></name><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='2'></dimension></level></levels></value></expression></statement></statements></thenStmt><comment type='LineComment' content=' there are more visual lines for a given logical line than before'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='visualLineOffset'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='visualLineLength'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></expression></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setVisualLine'></name><comment type='JavadocComment' content=' Set the line wrap data for the specified visual wrapped line p param visualLineIndex index of the visual line param visualLineOffset start offset of the visual line relative to the start of the document param visualLineLength length of the visual line '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='visualLineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='visualLineOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='visualLineLength'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'></statement></statements></thenStmt><comment type='LineComment' content=' do nothing if there are no wrapped lines'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='startOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='logicalStartLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='startOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='visualStartLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='visualReplaceLastLine'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='newCharCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='replaceCharCount'></name></right></initializer><name type='SimpleName' identifier='textChangeDelta'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='replaceLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualStartLine'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='reset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualStartLine'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getLineAtOffset'></name><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='startOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='replaceCharCount'></name></right></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE LENGTH'></name></index><name type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></right></right></right></inner></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></left><right type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></expression></expression></statement></statements></thenStmt><comment type='LineComment' content=' at the start of a visual line end of the previous visual line '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualStartLine'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='reset'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualStartLine'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></left><right type='NameExpr'><name type='SimpleName' identifier='visualStartLine'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wrapLineRange'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logicalStartLine'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='logicalStartLine'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='NameExpr'><name type='SimpleName' identifier='newLineCount'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='visualStartLine'></name></argument></arguments></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='textChangeDelta'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='visualReplaceLastLine'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='textChanged'></name><comment type='JavadocComment' content=' Recalculates the line wrap for the lines affected by the text change p param startOffset the start offset of the text change param newLineCount the number of inserted lines param replaceLineCount the number of deleted lines param newCharCount the number of new characters param replaceCharCount the number of deleted characters '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startOffset'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='newLineCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='replaceLineCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='newCharCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='replaceCharCount'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='emptyLineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLeftMargin'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getRightMargin'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='wrapLineRange'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='startLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='endLine'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument></arguments></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='LINE OFFSET'></name></index><name type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></name></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></scope></right></compare><comment type='LineComment' content=' visual lines for a given logical line than before'></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='emptyLineCount'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='emptyLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></right></initializer><name type='SimpleName' identifier='copyLineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='emptyLineCount'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='copyLineCount'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resetVisualLines'></name><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='copyLineCount'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='emptyLineCount'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='wrapLineRange'></name><comment type='JavadocComment' content=' Wrap the logical lines in the given range at the current client area width of the StyledText widget p param startLine first logical line to wrap param endLine line after last logical line param visualLineIndex visual wrapped line index that startLine corresponds to return index of the line following the last wrapped line '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='endLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='visualLineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></expression></statement></statements></thenStmt><comment type='LineComment' content=' is known '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></initializer><name type='SimpleName' identifier='line'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getOffsetAtLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></initializer><name type='SimpleName' identifier='lineOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='line'></name></scope></initializer><name type='SimpleName' identifier='lineLength'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lineLength'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setVisualLine'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></expression></expression></statement><statement type='ContinueStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getTextLayout'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></argument></arguments></initializer><name type='SimpleName' identifier='layout'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TextLayout'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineOffsets'></name><scope type='NameExpr'><name type='SimpleName' identifier='layout'></name></scope></initializer><name type='SimpleName' identifier='offsets'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setVisualLine'></name><arguments><argument type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></expression></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='lineOffset'></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></right></argument><argument type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='j'></name></index><name type='NameExpr'><name type='SimpleName' identifier='offsets'></name></name></right></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='j'></name></left><right type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='offsets'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='j'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='j'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeTextLayout'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='layout'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='endLine'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='startLine'></name></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='visualLineIndex'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='wrapLineRange'></name><comment type='JavadocComment' content=' Wrap the lines in the given range Skip lines that have already been wrapped p param startLine first logical line to wrap param endLine line after last logical line param visualLineIndex visual wrapped line index that startLine corresponds to param width line width to wrap at return index of last wrapped line '></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='endLine'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='visualLineIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getLeftMargin'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getRightMargin'></name><scope type='NameExpr'><name type='SimpleName' identifier='renderer'></name></scope></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wrapLines'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='wrapLines'></name><comment type='JavadocComment' content=' Wrap all logical lines at the current client area width of the StyledText widget '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLineCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='logicalContent'></name></scope></initializer><name type='SimpleName' identifier='lineCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualLineCount'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></dimension></level><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='2'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='resetVisualLines'></name><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='visualLines'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='wrapLineRange'></name><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineCount'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='wrapLines'></name><comment type='JavadocComment' content=' Wrap all logical lines at the given width p param width width to wrap lines at '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members></type></types></root>
