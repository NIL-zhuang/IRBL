<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='LZWCodec'></name><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='bitsPerPixel'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='blockSize'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='blockIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='currentByte'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='bitsLeft'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='codeSize'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='clearCode'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='endCode'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='newCodes'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='topSlot'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='currentSlot'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='imageWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='imageHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='imageX'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='imageY'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='pass'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='line'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='codeMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='block'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='lineArray'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='stack'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='suffix'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='prefix'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='nodeStack'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='inputStream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LEDataInputStream'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='outputStream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LEDataOutputStream'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='loader'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoader'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='interlaced'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0x1'></value><value type='IntegerLiteralExpr' value='0x3'></value><value type='IntegerLiteralExpr' value='0x7'></value><value type='IntegerLiteralExpr' value='0xF'></value><value type='IntegerLiteralExpr' value='0x1F'></value><value type='IntegerLiteralExpr' value='0x3F'></value><value type='IntegerLiteralExpr' value='0x7F'></value><value type='IntegerLiteralExpr' value='0xFF'></value><value type='IntegerLiteralExpr' value='0x1FF'></value><value type='IntegerLiteralExpr' value='0x3FF'></value><value type='IntegerLiteralExpr' value='0x7FF'></value><value type='IntegerLiteralExpr' value='0xFFF'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></initializer><name type='SimpleName' identifier='MASK TABLE'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='oc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='fc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='stackIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bufIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='c'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='NameExpr'><name type='SimpleName' identifier='c'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='NameExpr'><name type='SimpleName' identifier='oc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='stack'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='fc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></expression></expression></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='stack'></name></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='code'></name></index><name type='NameExpr'><name type='SimpleName' identifier='suffix'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='code'></name></index><name type='NameExpr'><name type='SimpleName' identifier='prefix'></name></name></value></expression></statement></statements></body><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='NameExpr'><name type='SimpleName' identifier='newCodes'></name></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='stack'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='code'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></left><right type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fc'></name></target><value type='NameExpr'><name type='SimpleName' identifier='code'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></index><name type='NameExpr'><name type='SimpleName' identifier='suffix'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='fc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></index><name type='NameExpr'><name type='SimpleName' identifier='prefix'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='oc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oc'></name></target><value type='NameExpr'><name type='SimpleName' identifier='c'></name></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></left><right type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></left><right type='IntegerLiteralExpr' value='12'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeMask'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></index><name type='NameExpr'><name type='SimpleName' identifier='MASK TABLE'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></left><right type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></target><value type='CastExpr'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='stack'></name></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutPixels'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='stackIndex'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeMask'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></index><name type='NameExpr'><name type='SimpleName' identifier='MASK TABLE'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newCodes'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></right></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'></body><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='c'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='nextCode'></name></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='NameExpr'><name type='SimpleName' identifier='endCode'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='oc'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fc'></name></target><value type='NameExpr'><name type='SimpleName' identifier='c'></name></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='c'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutPixels'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='c'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='nextCode'></name></value></inner></left><right type='NameExpr'><name type='SimpleName' identifier='endCode'></name></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bufIndex'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageHeight'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutPixels'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='decode'></name><comment type='JavadocComment' content=' Decode the input '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='inputStream'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='loader'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='loader'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='image'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='image'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='interlaced'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='interlaced'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='bitsPerPixel'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='depth'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='initializeForDecoding'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='decode'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='decode'></name><comment type='JavadocComment' content=' Decode the LZW encoded bytes in the given byte stream into the given DeviceIndependentImage '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='inputStream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LEDataInputStream'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='loader'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoader'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='interlaced'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutCode'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='encodeLoop'></name></initializer><name type='SimpleName' identifier='lastPrefix'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutCode'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lastPrefix'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutCode'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='endCode'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression><comment type='LineComment' content=' Last byte has data'></comment></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression><comment type='LineComment' content=' Nothing in last byte'></comment></statement></statements></thenStmt><comment type='LineComment' content=' Write out last partial block'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeBlock'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeBlock'></name></expression></statement></statements></thenStmt><comment type='LineComment' content=' Write out empty block to indicate the end if needed '></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='encode'></name><comment type='JavadocComment' content=' Encode the image '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='outputStream'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='byteStream'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='image'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='image'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='initializeForEncoding'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='encode'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='encode'></name><comment type='JavadocComment' content=' Encode the bytes into the given byte stream from the given DeviceIndependentImage '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='byteStream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LEDataOutputStream'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='nextPixel'></name></initializer><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='found'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='node'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='pixel'></name></initializer><name type='SimpleName' identifier='currentPrefix'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='node'></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='currentPrefix'></name></index><name type='NameExpr'><name type='SimpleName' identifier='nodeStack'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='found'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='nextPixel'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='currentPrefix'></name></expression></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='node'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='children'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='suffix'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='found'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='node'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='found'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='node'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='found'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='suffix'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='pixel'></name></right></inner></right></condition></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='found'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentPrefix'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='code'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='nextPixel'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='pixel'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='currentPrefix'></name></expression></thenStmt></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='NameExpr'><name type='SimpleName' identifier='found'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='children'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></left><right type='NullLiteralExpr'></right></inner></right></condition></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='found'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='children'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='node'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='children'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='children'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='left'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='right'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='code'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='prefix'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='currentPrefix'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='suffix'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='pixel'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutCode'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='currentPrefix'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></left><right type='IntegerLiteralExpr' value='4096'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPutCode'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></argument></arguments></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='children'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='nodeStack'></name></name></scope></target><value type='NullLiteralExpr'></value></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='nodeStack'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeMask'></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='MASK TABLE'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newCodes'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></left><right type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeMask'></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='MASK TABLE'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MULTIPLY'><target type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='LineComment' content=' Off by one '></comment></statement></statements></body><condition type='BooleanLiteralExpr' value='true'></condition></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='encodeLoop'></name><comment type='JavadocComment' content=' Encoding loop broken out to allow early return '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pass'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='endCode'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCodes'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='endCode'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='IntegerLiteralExpr' value='0'></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeMask'></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='MASK TABLE'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stack'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4096'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='suffix'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4096'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='prefix'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4096'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='block'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='256'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageHeight'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='initializeForDecoding'></name><comment type='JavadocComment' content=' Initialize the receiver for decoding the given byte array '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='interlaced'></name></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='topSlot'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='endCode'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='clearCode'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='newCodes'></name></target><value type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentSlot'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='endCode'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></target><value type='IntegerLiteralExpr' value='255'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='block'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nodeStack'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></right></dimension></level></levels></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></type></initializer><name type='SimpleName' identifier='node'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWNode'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='code'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='prefix'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='suffix'></name><scope type='NameExpr'><name type='SimpleName' identifier='node'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='nodeStack'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='node'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='nodeStack'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageHeight'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageY'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lineArray'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageX'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression><comment type='LineComment' content=' Force a read'></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='initializeForEncoding'></name><comment type='JavadocComment' content=' Initialize the receiver for encoding the given byte array '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='shift'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='shift'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='0'></left><right type='NameExpr'><name type='SimpleName' identifier='shift'></name></right></inner></right></value></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readBlock'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='endCode'></name></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></value></expression></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readBlock'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='endCode'></name></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></statement></statements></body><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></value></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='NameExpr'><name type='SimpleName' identifier='codeMask'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='nextCode'></name><comment type='JavadocComment' content=' Answer the next code from the input byte array '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='imageX'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='imageX'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='imageY'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='imageY'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageHeight'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nextPixels'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lineArray'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='imageX'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='imageX'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='lineArray'></name><scope type='ThisExpr'></scope></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='nextPixel'></name><comment type='JavadocComment' content=' Answer the next pixel to encode in the image '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getPixels'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='imageY'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='imageY'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lineWidth'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='nextPixels'></name><comment type='JavadocComment' content=' Copy a row of pixel values from the image '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lineWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='aCode'></name></initializer><name type='SimpleName' identifier='codeToDo'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></initializer><name type='SimpleName' identifier='codeBitsToDo'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='codeToDo'></name></left><right type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='MASK TABLE'></name></name></right></initializer><name type='SimpleName' identifier='c'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' high order bits of the code '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='c'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></right></inner></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='codeBitsToDo'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='codeBitsToDo'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='NameExpr'><name type='SimpleName' identifier='codeSize'></name></value></expression><comment type='LineComment' content=' The whole code fit in the first byte so we are done '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression><comment type='LineComment' content=' for the next one '></comment></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeBlock'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeToDo'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='codeToDo'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></expression></expression><comment type='LineComment' content=' Fill in any remaining whole bytes i e not the last one '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeBlock'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></thenStmt></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='codeToDo'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='codeToDo'></name></target><value type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='codeToDo'></name></left><right type='IntegerLiteralExpr' value='8'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='codeBitsToDo'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='blockSize'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeBlock'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></thenStmt></statement></statements></body><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='codeBitsToDo'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitsLeft'></name></target><value type='BinaryExpr' operator='MINUS'><left type='IntegerLiteralExpr' value='8'></left><right type='NameExpr'><name type='SimpleName' identifier='codeBitsToDo'></name></right></value></expression><comment type='LineComment' content=' Fill the low order bits of the last byte with the remainder'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='NameExpr'><name type='SimpleName' identifier='codeToDo'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='blockIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='nextPutCode'></name><comment type='JavadocComment' content=' Output aCode to the output stream '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='aCode'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setPixels'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='line'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></right></initializer><name type='SimpleName' identifier='start'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Slight optimization for depth 8 '></comment></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='start'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></value></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='interlaced'></name></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='line'></name></expression></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='3'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='5'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='copyRow'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='copyRow'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='3'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='copyRow'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='7'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageHeight'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='pass'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='2'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='3'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='5'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='2'></value></expression></thenStmt></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='5'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='hasListeners'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='clone'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></initializer><name type='SimpleName' identifier='imageCopy'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoaderEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='loader'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='imageCopy'></name></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='pass'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='NameExpr'><name type='SimpleName' identifier='imageHeight'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='line'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='nextPutPixels'></name><comment type='JavadocComment' content=' Copy a row of pixel values to the image '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='imageHeight'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setPixels'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='line'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='imageWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='copies'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='copyRow'></name><comment type='JavadocComment' content=' Copy duplicate rows of pixel values to the image This is to fill in rows if the image is interlaced '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='copies'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='size'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='size'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='readBlock'></name><comment type='JavadocComment' content=' Read a block from the byte stream Return the number of bytes read Throw an exception if the block could not be read '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='writeBlock'></name><comment type='JavadocComment' content=' Write a block to the byte stream Throw an exception if the block could not be written '></comment></member></members><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
