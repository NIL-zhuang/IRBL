<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='accessibility'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Vector'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Accessible'></name><comment type='JavadocComment' content=' Instances of this class provide a bridge between application code and assistive technology clients Many platforms provide default accessible behavior for most widgets and this class allows that default behavior to be overridden Applications can get the default Accessible object for a control by sending it code getAccessible code and then add an accessible listener to override simple items like the name and help string or they can add an accessible control listener to override complex items As a rule of thumb an application would only want to use the accessible control listener to implement accessibility for a custom control see Control getAccessible see AccessibleListener see AccessibleEvent see AccessibleControlListener see AccessibleControlEvent since 2 0 '></comment><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='refCount'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='enumIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='objIAccessible'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='objIEnumVARIANT'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='iaccessible'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IAccessible'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></initializer><name type='SimpleName' identifier='accessibleListeners'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></initializer><name type='SimpleName' identifier='accessibleControlListeners'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></initializer><name type='SimpleName' identifier='textListeners'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Vector'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='variants'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='control'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='control'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='CreateStdAccessibleObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='OBJID CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIAccessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT CREATE OBJECT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OLE'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='result'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IAccessible'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method0'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method1'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method2'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accParent'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method7'></name><comment type='LineComment' content=' method6 Invoke not implemented'></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accChildCount'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method8'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accChild'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method9'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accName'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method10'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accValue'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method11'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accDescription'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method12'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accRole'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method13'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accState'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method14'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accHelp'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method15'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accHelpTopic'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method16'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accKeyboardShortcut'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method17'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accFocus'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method18'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accSelection'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method19'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accDefaultAction'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method20'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='accSelect'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method21'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='accLocation'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='6'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='7'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method22'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='accNavigate'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method23'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='accHitTest'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method24'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='accDoDefaultAction'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method25'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='put accName'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method26'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='put accValue'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method27'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod></anonymousClassBody><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='8'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='6'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='8'></value><value type='IntegerLiteralExpr' value='6'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='5'></value><value type='IntegerLiteralExpr' value='5'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objIEnumVARIANT'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method0'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method1'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method2'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Next'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method3'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Skip'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method4'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Reset'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method5'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod></anonymousClassBody><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='1'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement></statements></body><name type='SimpleName' identifier='Accessible'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Accessible'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Accessible'></name></type><name type='SimpleName' identifier='internal new Accessible'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to allocate a new accessible object p b IMPORTANT b This method is em not em part of the public API for code Accessible code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param control the control to get the accessible object for return the platform specific accessible object '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addAccessibleListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when an accessible client asks for certain strings such as name description help or keyboard shortcut The listener is notified by sending it one of the messages defined in the code AccessibleListener code interface param listener the listener that should be notified when the receiver is asked for a name description help or keyboard shortcut string exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul see AccessibleListener see removeAccessibleListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addAccessibleControlListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when an accessible client asks for custom control specific information The listener is notified by sending it one of the messages defined in the code AccessibleControlListener code interface param listener the listener that should be notified when the receiver is asked for custom control specific information exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul see AccessibleControlListener see removeAccessibleControlListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='textListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='addAccessibleTextListener'></name><comment type='JavadocComment' content=' Adds the listener to the collection of listeners who will be notified when an accessible client asks for custom text control specific information The listener is notified by sending it one of the messages defined in the code AccessibleTextListener code interface param listener the listener that should be notified when the receiver is asked for custom text control specific information exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul see AccessibleTextListener see removeAccessibleTextListener since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleTextListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type><name type='SimpleName' identifier='getControl'></name><comment type='JavadocComment' content=' Returns the control for this Accessible object return the receiver s control since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='internal dispose Accessible'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to dispose an accessible object p b IMPORTANT b This method is em not em part of the public API for code Accessible code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='OBJID CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='LresultFromObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIAccessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='wParam'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='internal WM GETOBJECT'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to handle a window message p b IMPORTANT b This method is em not em part of the public API for code Accessible code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeAccessibleListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when an accessible client asks for certain strings such as name description help or keyboard shortcut param listener the listener that should no longer be notified when the receiver is asked for a name description help or keyboard shortcut string exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul see AccessibleListener see addAccessibleListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeAccessibleControlListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when an accessible client asks for custom control specific information param listener the listener that should no longer be notified when the receiver is asked for custom control specific information exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul see AccessibleControlListener see addAccessibleControlListener '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='listener'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='removeElement'></name><scope type='NameExpr'><name type='SimpleName' identifier='textListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='removeAccessibleTextListener'></name><comment type='JavadocComment' content=' Removes the listener from the collection of listeners who will be notified when an accessible client asks for custom text control specific information param listener the listener that should no longer be notified when the receiver is asked for custom text control specific information exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul see AccessibleTextListener see addAccessibleTextListener since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleTextListener'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='NotifyWinEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EVENT OBJECT SELECTIONWITHIN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='OBJID CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='selectionChanged'></name><comment type='JavadocComment' content=' Sends a message to accessible clients that the child selection within a custom container control has changed exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='NotifyWinEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EVENT OBJECT FOCUS'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='OBJID CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='childIDToOs'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='childID'></name></argument></arguments></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setFocus'></name><comment type='JavadocComment' content=' Sends a message to accessible clients indicating that the focus has changed within a custom control param childID an identifier specifying a child of the control exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='childID'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='NotifyWinEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EVENT OBJECT LOCATIONCHANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='OBJID CARET'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='textCaretMoved'></name><comment type='JavadocComment' content=' Sends a message to accessible clients that the text caret has moved within a custom control param index the new caret index within the control exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='NotifyWinEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='EVENT OBJECT VALUECHANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='OBJID CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='textChanged'></name><comment type='JavadocComment' content=' Sends a message to accessible clients that the text within a custom control has changed param type the type of change one of code ACC NOTIFY TEXT INSERT code or code ACC NOTIFY TEXT DELETE code param startIndex the text index within the control where the insertion or deletion begins param length the non negative length in characters of the insertion or deletion exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul see ACC TEXT INSERT see ACC TEXT DELETE since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='startIndex'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='textSelectionChanged'></name><comment type='JavadocComment' content=' Sends a message to accessible clients that the text selection has changed within a custom control exception SWTException ul li ERROR WIDGET DISPOSED if the receiver s control has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver s control li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></initializer><name type='SimpleName' identifier='guid'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='arg1'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='GUID'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIUnknown'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='arg2'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIDispatch'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='arg2'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIAccessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='arg2'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIEnumVARIANT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='arg2'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIEnumVARIANT'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='arg2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='QueryInterface'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='arg1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='arg2'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='AddRef'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='refCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='objIEnumVARIANT'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIEnumVARIANT'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objIEnumVARIANT'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Release'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='accDoDefaultAction'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Currently we don t let the application override this Forward to the proxy '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='accDoDefaultAction'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='accHitTest'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='xLeft'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='yTop'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='xLeft'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='yTop'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChildAtPoint'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='childID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='accHitTest'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='xLeft'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='yTop'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='childIDToOs'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='childID'></name></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='accHitTest'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='xLeft'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='yTop'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pvarChild'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osLeft'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osTop'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Get the default location from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='accLocation'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pxLeft'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pyTop'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pcxWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pcyHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pLeft'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pTop'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pWidth'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pHeight'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pLeft'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pxLeft'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pTop'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pyTop'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pWidth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pcxWidth'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pHeight'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pcyHeight'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osLeft'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pLeft'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osTop'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pTop'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osWidth'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pWidth'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osHeight'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pHeight'></name></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osLeft'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osTop'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osWidth'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osHeight'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLocation'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pxLeft'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pyTop'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pcxWidth'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pcyHeight'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='accLocation'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pxLeft'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pyTop'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pcxWidth'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pcyHeight'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='accNavigate'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='navDir'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varStart vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varStart reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varStart lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varStart reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarEndUpAt'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Currently we don t let the application override this Forward to the proxy '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='accNavigate'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='navDir'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varStart vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varStart reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varStart lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varStart reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pvarEndUpAt'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='accSelect'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='flagsSelect'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Currently we don t let the application override this Forward to the proxy '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='accSelect'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flagsSelect'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accChild'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppdispChild'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChild'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='accessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='accessible'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Accessible'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='accessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppdispChild'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='objIAccessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessible'></name></scope></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accChild'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ppdispChild'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osChildCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Get the default child count from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accChildCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pcountChildren'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pChildCount'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pChildCount'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pcountChildren'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osChildCount'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pChildCount'></name></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osChildCount'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChildCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pcountChildren'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accChildCount'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pcountChildren'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='osDefaultAction'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Get the default defaultAction from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accDefaultAction'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszDefaultAction'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pDefaultAction'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pDefaultAction'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszDefaultAction'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysStringByteLen'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pDefaultAction'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pDefaultAction'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osDefaultAction'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osDefaultAction'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getDefaultAction'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='StringLiteralExpr' value=' 0'></right></inner></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysAllocString'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszDefaultAction'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accDefaultAction'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszDefaultAction'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='osDescription'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Get the default description from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accDescription'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszDescription'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></inner></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt><comment type='LineComment' content=' TEMPORARY CODE process tree even if there are no apps listening'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pDescription'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pDescription'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszDescription'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysStringByteLen'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pDescription'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pDescription'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osDescription'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osDescription'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></initializer><name type='SimpleName' identifier='tree'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColumnCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='tree'></name></scope></initializer><name type='SimpleName' identifier='columnCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></initializer><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='hItem'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hItem'></name></target><value type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hItem'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='TVM MAPACCIDTOHTREEITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='findWidget'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name><scope type='NameExpr'><name type='SimpleName' identifier='tree'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hItem'></name></argument></arguments></initializer><name type='SimpleName' identifier='widget'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Widget'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='StringLiteralExpr' value=''></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='widget'></name></left><right type='NullLiteralExpr'></right></left><right type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='widget'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TreeItem'></name></type></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='widget'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TreeItem'></name></type></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TreeItem'></name></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getText'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getColumn'></name><scope type='NameExpr'><name type='SimpleName' identifier='tree'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></scope></left><right type='StringLiteralExpr' value=' '></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getText'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></right></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='StringLiteralExpr' value=' '></value></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='columnCount'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Currently our tree columns are emulated using custom draw so we need to create the description using the tree column header text and tree item text '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getDescription'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='StringLiteralExpr' value=' 0'></right></inner></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysAllocString'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszDescription'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accDescription'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszDescription'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></initializer><name type='SimpleName' identifier='osChild'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Get the default focus child from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accFocus'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pvt'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pvt'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pChild'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pChild'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osChild'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pChild'></name></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osChild'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getFocus'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='accessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='accessible'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Accessible'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='accessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='objIAccessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessible'></name></scope></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='childID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChild'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='childIDToOs'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='childID'></name></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accFocus'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pvarChild'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='osHelp'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Get the default help string from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accHelp'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszHelp'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pHelp'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pHelp'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszHelp'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysStringByteLen'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pHelp'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pHelp'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osHelp'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osHelp'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getHelp'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='StringLiteralExpr' value=' 0'></right></inner></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysAllocString'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszHelp'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accHelp'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszHelp'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accHelpTopic'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszHelpFile'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pidTopic'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Currently we don t let the application override this Forward to the proxy '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accHelpTopic'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszHelpFile'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pidTopic'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='osKeyboardShortcut'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Get the default keyboard shortcut from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accKeyboardShortcut'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszKeyboardShortcut'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pKeyboardShortcut'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pKeyboardShortcut'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszKeyboardShortcut'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysStringByteLen'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pKeyboardShortcut'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pKeyboardShortcut'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osKeyboardShortcut'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osKeyboardShortcut'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getKeyboardShortcut'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='StringLiteralExpr' value=' 0'></right></inner></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysAllocString'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszKeyboardShortcut'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accKeyboardShortcut'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszKeyboardShortcut'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='osName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Get the default name from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accName'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszName'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pName'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pName'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszName'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysStringByteLen'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pName'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pName'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osName'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osName'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='StringLiteralExpr' value=' 0'></right></inner></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysAllocString'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszName'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accName'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszName'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='get accParent'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppdispParent'></name></argument></arguments></expression><comment type='LineComment' content=' Currently we don t let the application override this Forward to the proxy '></comment></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accParent'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ppdispParent'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></initializer><name type='SimpleName' identifier='osRole'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Get the default role from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accRole'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarRole'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></left><right type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></right></inner></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt><comment type='LineComment' content=' TEMPORARY CODE process tree and table even if there are no apps listening'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pvt'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarRole'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pvt'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pRole'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pRole'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarRole'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osRole'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pRole'></name></name></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToRole'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='osRole'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></left><right type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHECK'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE CHECKBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Currently our checkbox table and tree are emulated using state mask images so we need to specify checkbox role for the items '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getRole'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='roleToOs'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='role'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarRole'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarRole'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='role'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accRole'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pvarRole'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></initializer><name type='SimpleName' identifier='osChild'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Get the default selection from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accSelection'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pvt'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pvt'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pvt'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osChild'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID MULTIPLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pChild'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pChild'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osChild'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pChild'></name></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osChild'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getSelection'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='accessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='accessible'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Accessible'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='accessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='objIAccessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessible'></name></scope></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></initializer><name type='SimpleName' identifier='childID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID NONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT EMPTY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID MULTIPLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT UNKNOWN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression><comment type='BlockComment' content=' Should return an IEnumVARIANT for this so the next line is wrong need better API here '></comment></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='objIAccessible'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarChildren'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='childIDToOs'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='childID'></name></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accSelection'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pvarChildren'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osState'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Get the default state from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accState'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarState'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></left><right type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></right></inner></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt><comment type='LineComment' content=' TEMPORARY CODE process tree and table even if there are no apps listening'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pvt'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='SHORT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pvarState'></name></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pvt'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pState'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pState'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarState'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pState'></name></name></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToState'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='osState'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHECK'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHECK'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></initializer><name type='SimpleName' identifier='table'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Table'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='table'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='item'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TableItem'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='item'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='getChecked'></name><scope type='NameExpr'><name type='SimpleName' identifier='item'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE CHECKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></initializer><name type='SimpleName' identifier='hwnd'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TVITEM'></name></type></initializer><name type='SimpleName' identifier='tvItem'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TVITEM'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='mask'></name><scope type='NameExpr'><name type='SimpleName' identifier='tvItem'></name></scope></target><value type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='TVIF HANDLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='TVIF STATE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='tvItem'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TVIS STATEIMAGEMASK'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='tvItem'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hItem'></name><scope type='NameExpr'><name type='SimpleName' identifier='tvItem'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='TVM MAPACCIDTOHTREEITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hwnd'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='TVM GETITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='tvItem'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='state'></name><scope type='NameExpr'><name type='SimpleName' identifier='tvItem'></name></scope></left><right type='IntegerLiteralExpr' value='12'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></right></initializer><name type='SimpleName' identifier='checked'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='checked'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE CHECKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' Currently our checkbox table and tree are emulated using state mask images so we need to determine if the item state is checked '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getState'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='stateToOs'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='detail'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='state'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pvarState'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='pvarState'></name></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='state'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accState'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pvarState'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></inner></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='osValue'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Get the default value string from the OS '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='get accValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszValue'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pValue'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pValue'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pszValue'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysStringByteLen'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pValue'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='CHAR'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pValue'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='osValue'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='osToChildID'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='osValue'></name></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toCharArray'></name><scope type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></left><right type='StringLiteralExpr' value=' 0'></right></inner></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='CHAR'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SysAllocString'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></initializer><name type='SimpleName' identifier='ptr'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pszValue'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='ptr'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='get accValue'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pszValue'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt><comment type='LineComment' content=' MSAA this method is no longer supported'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='put accName'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='szName'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' We don t implement this Forward to the proxy '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='put accName'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='szName'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CO E OBJNOTCONNECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt><comment type='LineComment' content=' MSAA this method is typically only used for edit controls'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='put accValue'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='varChild vt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved1'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild lVal'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='varChild reserved2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='szValue'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' We don t implement this Forward to the proxy '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt><comment type='LineComment' content=' proxy doesn t know about app childID'></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='put accValue'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild vt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved1'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild lVal'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='varChild reserved2'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='szValue'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIEnumVARIANT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumVARIANT'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='ienumvariant'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumVARIANT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='celtFetched'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='Next'></name><scope type='NameExpr'><name type='SimpleName' identifier='ienumvariant'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='celt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgvar'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='celtFetched'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='celtFetched'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></thenStmt><comment type='BlockComment' content=' If there are no listeners query the proxy for its IEnumVariant and get the Next items from it '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rgvar'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='celt'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type><arguments><argument type='ThisExpr'></argument></arguments></initializer><name type='SimpleName' identifier='event'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlEvent'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='childID'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='elementAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='AccessibleControlListener'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getChildren'></name><scope type='NameExpr'><name type='SimpleName' identifier='listener'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='event'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='variants'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='children'></name><scope type='NameExpr'><name type='SimpleName' identifier='event'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='nextItems'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='variants'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='celt'></name></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='celt'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='endIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='endIndex'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='variants'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='endIndex'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='variants'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='endIndex'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='endIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='variants'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='child'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='child'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='childIDToOs'></name><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='intValue'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='child'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type></inner></scope></argument></arguments></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></expression></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></left><right type='NullLiteralExpr'></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></thenStmt></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></name></initializer><name type='SimpleName' identifier='nextItem'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='nextItem'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='objIAccessible'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='nextItem'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Accessible'></name></type></inner></scope></scope></initializer><name type='SimpleName' identifier='address'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rgvar'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='16'></right></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT DISPATCH'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rgvar'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='16'></right></right></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='address'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='intValue'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='nextItem'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type></inner></scope></initializer><name type='SimpleName' identifier='item'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rgvar'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='16'></right></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='SHORT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='VT I4'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='rgvar'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='16'></right></right></left><right type='IntegerLiteralExpr' value='8'></right></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='item'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='nextItems'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='celt'></name></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Next'></name><comment type='BlockComment' content=' Retrieve the next celt items in the enumeration sequence If there are fewer than the requested number of elements left in the sequence retrieve the remaining elements The number of elements actually retrieved is returned in pceltFetched unless the caller passed in NULL for that parameter '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='celt'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='rgvar'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pceltFetched'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIEnumVARIANT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumVARIANT'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='ienumvariant'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumVARIANT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='Skip'></name><scope type='NameExpr'><name type='SimpleName' identifier='ienumvariant'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='celt'></name></argument></arguments></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></thenStmt><comment type='BlockComment' content=' If there are no listeners query the proxy for its IEnumVariant and tell it to Skip '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='celt'></name></left><right type='IntegerLiteralExpr' value='1'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='celt'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='variants'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='variants'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S FALSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Skip'></name><comment type='BlockComment' content=' Skip over the specified number of elements in the enumeration sequence '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='celt'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='size'></name><scope type='NameExpr'><name type='SimpleName' identifier='accessibleControlListeners'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppvObject'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><scope type='NameExpr'><name type='SimpleName' identifier='iaccessible'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIEnumVARIANT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument></arguments></initializer><name type='SimpleName' identifier='code'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='code'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumVARIANT'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='ienumvariant'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumVARIANT'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='code'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='Reset'></name><scope type='NameExpr'><name type='SimpleName' identifier='ienumvariant'></name></scope></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='code'></name></expression></statement></statements></thenStmt><comment type='BlockComment' content=' If there are no listeners query the proxy for its IEnumVariant and tell it to Reset '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='enumIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Reset'></name><comment type='BlockComment' content=' Reset the enumeration sequence to the beginning '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></inner></expression></condition><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='childID'></name></left><right type='IntegerLiteralExpr' value='1'></right></expression></thenStmt><comment type='BlockComment' content=' Feature of Windows In Windows XP tree item ids are 1 based indices Previous versions of Windows use the tree item handle for the accessible child ID For backward compatibility we still take a handle childID for tree items on XP All other childIDs are 1 based indices '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='childID'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='TVM MAPHTREEITEMTOACCID'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='childID'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='childIDToOs'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='childID'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='osChildID'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='CHILDID SELF'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='control'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Tree'></name></type></inner></expression></condition><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='osChildID'></name></left><right type='IntegerLiteralExpr' value='1'></right></expression></thenStmt><comment type='BlockComment' content=' Feature of Windows In Windows XP tree item ids are 1 based indices Previous versions of Windows use the tree item handle for the accessible child ID For backward compatibility we still take a handle childID for tree items on XP All other childIDs are 1 based indices '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='COMCTL32 MAJOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='osChildID'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SendMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='TVM MAPACCIDTOHTREEITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='osChildID'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='osToChildID'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='osChildID'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='osState'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SELECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM SELECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM SELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE MULTISELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM MULTISELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE FOCUSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM FOCUSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE FOCUSABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM FOCUSABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE PRESSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM PRESSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE CHECKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM CHECKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE EXPANDED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM EXPANDED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE COLLAPSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM COLLAPSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE HOTTRACKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM HOTTRACKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE BUSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM BUSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE READONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM READONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE INVISIBLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM INVISIBLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE OFFSCREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM OFFSCREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SIZEABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM SIZEABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='state'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE LINKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='osState'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM LINKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='osState'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='stateToOs'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='state'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='STATE NORMAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></initializer><name type='SimpleName' identifier='state'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM SELECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SELECTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM SELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM MULTISELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE MULTISELECTABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM FOCUSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE FOCUSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM FOCUSABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE FOCUSABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM PRESSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE PRESSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM CHECKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE CHECKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM EXPANDED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE EXPANDED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM COLLAPSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE COLLAPSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM HOTTRACKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE HOTTRACKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM BUSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE BUSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM READONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE READONLY'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM INVISIBLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE INVISIBLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM OFFSCREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE OFFSCREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM SIZEABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SIZEABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='osState'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='STATE SYSTEM LINKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='state'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='STATE LINKED'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='state'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='osToState'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='osState'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='role'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE CLIENT AREA'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE WINDOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM WINDOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE MENUBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM MENUBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE MENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM MENUPOPUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE MENUITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM MENUITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SEPARATOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM SEPARATOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TOOLTIP'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TOOLTIP'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SCROLLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM SCROLLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE DIALOG'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM DIALOG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LABEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM STATICTEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE PUSHBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PUSHBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE CHECKBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CHECKBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE RADIOBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM RADIOBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE COMBOBOX'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM COMBOBOX'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TOOLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TOOLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LIST'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM LIST'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LISTITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM LISTITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLECELL'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CELL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLECOLUMNHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM COLUMNHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLEROWHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM ROWHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TREE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM OUTLINE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TREEITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM OUTLINEITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABFOLDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PAGETABLIST'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PAGETAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE PROGRESSBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PROGRESSBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SLIDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM SLIDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='roleToOs'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='role'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></initializer><name type='SimpleName' identifier='role'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='osRole'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CLIENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE CLIENT AREA'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM WINDOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE WINDOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM MENUBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE MENUBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM MENUPOPUP'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE MENU'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM MENUITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE MENUITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM SEPARATOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SEPARATOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TOOLTIP'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TOOLTIP'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM SCROLLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SCROLLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM DIALOG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE DIALOG'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM STATICTEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LABEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PUSHBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE PUSHBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CHECKBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE CHECKBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM RADIOBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE RADIOBUTTON'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM COMBOBOX'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE COMBOBOX'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TOOLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TOOLBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM LIST'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LIST'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM LISTITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LISTITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM TABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM CELL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLECELL'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM COLUMNHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLECOLUMNHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM ROWHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABLEROWHEADER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM OUTLINE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TREE'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM OUTLINEITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TREEITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PAGETABLIST'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABFOLDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PAGETAB'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE TABITEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM PROGRESSBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE PROGRESSBAR'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM SLIDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SLIDER'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE SYSTEM LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='ROLE LINK'></name><scope type='NameExpr'><name type='SimpleName' identifier='ACC'></name></scope></expression></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='role'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='osToRole'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='osRole'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isValidThread'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR THREAD INVALID ACCESS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR WIDGET DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkWidget'></name><comment type='BlockComment' content=' checkWidget was copied from Widget and rewritten to work in this package '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getThread'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='currentThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isValidThread'></name><comment type='BlockComment' content=' isValidThread was copied from Widget and rewritten to work in this package '></comment></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
