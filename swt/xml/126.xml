<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='events'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Event'><qualifier type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='KeyEvent'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TypedEvent'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' the character represented by the key that was typed This is the final character that results after all modifiers have been applied For example when the user types Ctrl A the character value is 0x01 It is important that applications do not attempt to modify the character value based on a stateMask such as SWT CTRL or the resulting character will not be correct '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='character'></name><type type='PrimitiveType' specificType='CHAR'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the key code of the key that was typed as defined by the key code constants in class code SWT code When the character field of the event is ambiguous this field contains the unicode value of the original character For example typing Ctrl M or Return both result in the character r but the keyCode field will also contain r when Return was typed see org eclipse swt SWT '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='keyCode'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' the state of the keyboard modifier keys at the time the event was generated as defined by the key code constants in class code SWT code see org eclipse swt SWT '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='stateMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' A flag indicating whether the operation should be allowed Setting this field to code false code will cancel the operation '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='doit'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='LongLiteralExpr' value='3256442491011412789L'></initializer><name type='SimpleName' identifier='serialVersionUID'></name><type type='PrimitiveType' specificType='LONG'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='ThisExpr'></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='character'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='ThisExpr'></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='keyCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='ThisExpr'></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='stateMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='ThisExpr'></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='doit'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></value></expression></statement></statements></body><name type='SimpleName' identifier='KeyEvent'></name><comment type='JavadocComment' content=' Constructs a new instance of this class based on the information in the given untyped event param e the untyped event containing the information '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='SuperExpr'></scope></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><comment type='LineComment' content=' remove trailing '></comment><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></left><right type='StringLiteralExpr' value=' character '></right></left><right type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='character'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=''></left><right type='NameExpr'><name type='SimpleName' identifier='character'></name></right></elseExpr><thenExpr type='StringLiteralExpr' value=' 0'></thenExpr></inner></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='StringLiteralExpr' value=' keyCode '></right></left><right type='NameExpr'><name type='SimpleName' identifier='keyCode'></name></right></left><right type='StringLiteralExpr' value=' stateMask '></right></left><right type='NameExpr'><name type='SimpleName' identifier='stateMask'></name></right></left><right type='StringLiteralExpr' value=' doit '></right></left><right type='NameExpr'><name type='SimpleName' identifier='doit'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the event '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
