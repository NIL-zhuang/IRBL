<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Compatibility'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='PngIhdrChunk'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunk'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='13'></initializer><name type='SimpleName' identifier='EXPECTED DATA LENGTH'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='WIDTH DATA OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='IntegerLiteralExpr' value='4'></right></initializer><name type='SimpleName' identifier='HEIGHT DATA OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='BIT DEPTH OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='IntegerLiteralExpr' value='9'></right></initializer><name type='SimpleName' identifier='COLOR TYPE OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='IntegerLiteralExpr' value='10'></right></initializer><name type='SimpleName' identifier='COMPRESSION METHOD OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='IntegerLiteralExpr' value='11'></right></initializer><name type='SimpleName' identifier='FILTER METHOD OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='DATA OFFSET'></name></left><right type='IntegerLiteralExpr' value='12'></right></initializer><name type='SimpleName' identifier='INTERLACE METHOD OFFSET'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='COLOR TYPE RGB'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='3'></initializer><name type='SimpleName' identifier='COLOR TYPE PALETTE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='6'></initializer><name type='SimpleName' identifier='COLOR TYPE RGB WITH ALPHA'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='INTERLACE METHOD NONE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='INTERLACE METHOD ADAM7'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='FILTER NONE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='FILTER SUB'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='2'></initializer><name type='SimpleName' identifier='FILTER UP'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='3'></initializer><name type='SimpleName' identifier='FILTER AVERAGE'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='4'></initializer><name type='SimpleName' identifier='FILTER PAETH'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='8'></value><value type='IntegerLiteralExpr' value='16'></value></values></initializer><name type='SimpleName' identifier='ValidBitDepths'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='6'></value></values></initializer><name type='SimpleName' identifier='ValidColorTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='reference'></name></argument></arguments></statement></statements></body><name type='SimpleName' identifier='PngIhdrChunk'></name><comment type='JavadocComment' content=' Construct a PNGChunk using the reference bytes given '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='reference'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='WIDTH DATA OFFSET'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getWidth'></name><comment type='JavadocComment' content=' Get the image s width in pixels '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='WIDTH DATA OFFSET'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setWidth'></name><comment type='JavadocComment' content=' Set the image s width in pixels '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='HEIGHT DATA OFFSET'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getHeight'></name><comment type='JavadocComment' content=' Get the image s height in pixels '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setInt32'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='HEIGHT DATA OFFSET'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='value'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setHeight'></name><comment type='JavadocComment' content=' Set the image s height in pixels '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='BIT DEPTH OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getBitDepth'></name><comment type='JavadocComment' content=' Get the image s bit depth This is limited to the values 1 2 4 8 or 16 '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='BIT DEPTH OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setBitDepth'></name><comment type='JavadocComment' content=' Set the image s bit depth This is limited to the values 1 2 4 8 or 16 '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getColorType'></name><comment type='JavadocComment' content=' Get the image s color type This is limited to the values 0 Grayscale image 2 RGB triple 3 Palette 4 Grayscale with Alpha channel 6 RGB with Alpha channel '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setColorType'></name><comment type='JavadocComment' content=' Set the image s color type This is limited to the values 0 Grayscale image 2 RGB triple 3 Palette 4 Grayscale with Alpha channel 6 RGB with Alpha channel '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='COMPRESSION METHOD OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getCompressionMethod'></name><comment type='JavadocComment' content=' Get the image s compression method This value must be 0 '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='COMPRESSION METHOD OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setCompressionMethod'></name><comment type='JavadocComment' content=' Set the image s compression method This value must be 0 '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='FILTER METHOD OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getFilterMethod'></name><comment type='JavadocComment' content=' Get the image s filter method This value must be 0 '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='FILTER METHOD OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setFilterMethod'></name><comment type='JavadocComment' content=' Set the image s filter method This value must be 0 '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='INTERLACE METHOD OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getInterlaceMethod'></name><comment type='JavadocComment' content=' Get the image s interlace method This value is limited to 0 No interlacing used 1 Adam7 interlacing used '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='INTERLACE METHOD OFFSET'></name></index><name type='NameExpr'><name type='SimpleName' identifier='reference'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='value'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setInterlaceMethod'></name><comment type='JavadocComment' content=' Set the image s interlace method This value is limited to 0 No interlacing used 1 Adam7 interlacing used '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='readIHDR'></name><scope type='NameExpr'><name type='SimpleName' identifier='readState'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='readPLTE'></name><scope type='NameExpr'><name type='SimpleName' identifier='readState'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='readIDAT'></name><scope type='NameExpr'><name type='SimpleName' identifier='readState'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='readIEND'></name><scope type='NameExpr'><name type='SimpleName' identifier='readState'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='readIHDR'></name><scope type='NameExpr'><name type='SimpleName' identifier='readState'></name></scope></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt><comment type='LineComment' content=' been read '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='validate'></name><scope type='SuperExpr'></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='readState'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='headerChunk'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name></left><right type='NameExpr'><name type='SimpleName' identifier='EXPECTED DATA LENGTH'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getCompressionMethod'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getInterlaceMethod'></name></left><right type='NameExpr'><name type='SimpleName' identifier='INTERLACE METHOD NONE'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getInterlaceMethod'></name></left><right type='NameExpr'><name type='SimpleName' identifier='INTERLACE METHOD ADAM7'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='colorTypeIsValid'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></initializer><name type='SimpleName' identifier='colorType'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ValidColorTypes'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='colorType'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='colorTypeIsValid'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='ValidColorTypes'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='colorTypeIsValid'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='false'></initializer><name type='SimpleName' identifier='bitDepthIsValid'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBitDepth'></name></initializer><name type='SimpleName' identifier='bitDepth'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='ValidBitDepths'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitDepthIsValid'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='ValidBitDepths'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='NameExpr'><name type='SimpleName' identifier='bitDepthIsValid'></name></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colorType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colorType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB WITH ALPHA'></name></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colorType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name></right></right></inner></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></left><right type='IntegerLiteralExpr' value='8'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colorType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE PALETTE'></name></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></left><right type='IntegerLiteralExpr' value='8'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='validate'></name><comment type='JavadocComment' content=' Answer whether the chunk is a valid IHDR chunk '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='readState'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngFileReadState'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='headerChunk'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIhdrChunk'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Grayscale'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='RGB'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE PALETTE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Palette'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Grayscale with Alpha'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB WITH ALPHA'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='RGB with Alpha'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Unknown '></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></right></expression></statement></statements></entrie></entries></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getColorTypeString'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getFilterMethod'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='FILTER NONE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='None'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='FILTER SUB'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Sub'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='FILTER UP'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Up'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='FILTER AVERAGE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Average'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='FILTER PAETH'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Paeth'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Unknown'></expression></statement></statements></entrie></entries></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getFilterMethodString'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getInterlaceMethod'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='INTERLACE METHOD NONE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Not Interlaced'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='INTERLACE METHOD ADAM7'></name></label></labels><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Interlaced ADAM7'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><expression type='StringLiteralExpr' value='Unknown'></expression></statement></statements></entrie></entries></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getInterlaceMethodString'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tWidth '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getWidth'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tHeight '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getHeight'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tBit Depth '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getBitDepth'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tColor Type '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getColorTypeString'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tCompression Method '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getCompressionMethod'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tFilter Method '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getFilterMethodString'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='StringLiteralExpr' value=' n tInterlace Method '></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='append'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getInterlaceMethodString'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='contributeToString'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='StringBuffer'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE PALETTE'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getMustHavePalette'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></initializer><name type='SimpleName' identifier='colorType'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colorType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colorType'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getCanHavePalette'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBitDepth'></name></initializer><name type='SimpleName' identifier='bitDepth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB WITH ALPHA'></name></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='4'></left><right type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB'></name></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='3'></left><right type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name></label></labels><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='2'></left><right type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></right></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE PALETTE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></entrie></entries></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getBitsPerPixel'></name><comment type='JavadocComment' content=' Answer the pixel size in bits based on the color type and bit depth '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBitDepth'></name></initializer><name type='SimpleName' identifier='bitDepth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB WITH ALPHA'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name></label></labels><statements><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='24'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE PALETTE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></argument><argument type='IntegerLiteralExpr' value='8'></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='0'></expression></statement></statements></entrie></entries></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getSwtBitsPerPixel'></name><comment type='JavadocComment' content=' Answer the pixel size in bits based on the color type and bit depth '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getBitDepth'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='ReturnStmt'><expression type='IntegerLiteralExpr' value='1'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='DIVIDE'><left type='MethodCallExpr'><name type='SimpleName' identifier='getBitsPerPixel'></name></left><right type='IntegerLiteralExpr' value='8'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getFilterByteOffset'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB WITH ALPHA'></name></label></labels><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></entrie></entries></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='usesDirectColor'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getBitDepth'></name></argument><argument type='IntegerLiteralExpr' value='8'></argument></arguments></initializer><name type='SimpleName' identifier='bitDepth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='pow2'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bitDepth'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='max'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='IntegerLiteralExpr' value='255'></left><right type='NameExpr'><name type='SimpleName' identifier='max'></name></right></initializer><name type='SimpleName' identifier='delta'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='gray'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='max'></name></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='rgbs'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gray'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gray'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='gray'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='gray'></name></target><value type='NameExpr'><name type='SimpleName' identifier='delta'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='max'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><name type='SimpleName' identifier='createGrayscalePalette'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='MethodCallExpr'><name type='SimpleName' identifier='getColorType'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE'></name></label></labels><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='createGrayscalePalette'></name></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE GRAYSCALE WITH ALPHA'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB'></name></label></labels></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='NameExpr'><name type='SimpleName' identifier='COLOR TYPE RGB WITH ALPHA'></name></label></labels><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='IntegerLiteralExpr' value='0xFF0000'></argument><argument type='IntegerLiteralExpr' value='0xFF00'></argument><argument type='IntegerLiteralExpr' value='0xFF'></argument></arguments></expression></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></entrie></entries></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><name type='SimpleName' identifier='getPaletteData'></name></member></members></type></types></root>
