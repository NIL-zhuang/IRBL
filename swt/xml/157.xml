<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='gdip'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Device'></name><comment type='JavadocComment' content=' This class is the abstract superclass of all device objects such as the Display device and the Printer device Devices can have a graphics context GC created for them and they can be drawn on by sending messages to the associated GC '></comment><implementedTypes><implementedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Drawable'></name></implementedType></implementedTypes><members><member type='FieldDeclaration'><comment type='BlockComment' content=' Debugging '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='DEBUG'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='DEBUG'></name></initializer><name type='SimpleName' identifier='debug'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='DEBUG'></name></initializer><name type='SimpleName' identifier='tracking'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='errors'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Error'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='objects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' Palette Warning This field is platform dependent p b IMPORTANT b This field is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be accessed from application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='hPalette'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='colorRefCount'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' System Font '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='systemFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' Font Enumeration '></comment><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='256'></initializer><name type='SimpleName' identifier='nFonts'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='logFonts'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='metrics'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='pixels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' Scripts '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='scripts'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' Advanced Graphics '></comment><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='gdipToken'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='disposed'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></initializer><name type='SimpleName' identifier='CREATE LOCK'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='BlockComment' content=' TEMPORARY CODE When a graphics object is created and the device parameter is null the current Display is used This presents a problem because SWT graphics does not reference classes in SWT widgets The correct fix is to remove this feature Unfortunately too many application programs rely on this feature This code will be removed in the future '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='CurrentDevice'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='DeviceFinder'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type></variable></variables></member><member type='InitializerDeclaration' isStatic='true'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='forName'></name><scope type='NameExpr'><name type='SimpleName' identifier='Class'></name></scope><arguments><argument type='StringLiteralExpr' value='org eclipse swt widgets Display'></argument></arguments></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement></statements></body></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='DeviceFinder'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='run'></name><scope type='NameExpr'><name type='SimpleName' identifier='DeviceFinder'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='CurrentDevice'></name></initializer><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='CurrentDevice'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='device'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type><name type='SimpleName' identifier='getDevice'></name><comment type='BlockComment' content=' TEMPORARY CODE '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NullLiteralExpr'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='Device'></name><comment type='JavadocComment' content=' Constructs a new instance of this class p You must dispose the device when it is no longer required p see create see init since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='SynchronizedStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='debug'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='debug'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='tracking'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='create'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='init'></name></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='tracking'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='errors'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Error'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='128'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objects'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='128'></dimension></level></levels></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='systemFont'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getSystemFont'></name></scope></value></expression><comment type='BlockComment' content=' Initialize the system font slot '></comment></statement></statements></body><expression type='NameExpr'><name type='SimpleName' identifier='CREATE LOCK'></name></expression></statement></statements></body><name type='SimpleName' identifier='Device'></name><comment type='JavadocComment' content=' Constructs a new instance of this class p You must dispose the device when it is no longer required p param data the DeviceData which describes the receiver see create see init see DeviceData '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DeviceData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='disposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR DEVICE DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkDevice'></name><comment type='JavadocComment' content=' Throws an code SWTException code if the receiver can not be accessed by the caller This may include both checks on the state of the receiver and more generally on the entire execution context This method em should em be called by device implementors to enforce the standard SWT invariants p Currently it is an error to invoke any method other than code isDisposed code and code dispose code on a device that has had its code dispose code method called p p In future releases of SWT there may be more or fewer error checks and exceptions may be thrown for different reasons p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gdipToken'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SetErrorMode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SEM FAILCRITICALERRORS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='oldErrorMode'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SetErrorMode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldErrorMode'></name></argument></arguments></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='token'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GdiplusStartupInput'></name></type></initializer><name type='SimpleName' identifier='input'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GdiplusStartupInput'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='GdiplusVersion'></name><scope type='NameExpr'><name type='SimpleName' identifier='input'></name></scope></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='GdiplusStartup'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='token'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='input'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gdipToken'></name></target><value type='NameExpr'><name type='SimpleName' identifier='token'></name></value></expression></statement></statements></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO GRAPHICS LIBRARY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='t'></name></argument><argument type='StringLiteralExpr' value=' GDI is required '></argument></arguments></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='t'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkGDIP'></name></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='create'></name><comment type='JavadocComment' content=' Creates the device in the operating system If the device does not have a handle this method may do nothing depending on the device p This method is called before code init code p p Subclasses are supposed to reimplement this method and not call the code super code implementation p param data the DeviceData which describes the receiver see init '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DeviceData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='MethodCallExpr'><name type='SimpleName' identifier='round'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOGPIXELSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></right></argument><argument type='IntegerLiteralExpr' value='72'></argument></arguments></expression></initializer><name type='SimpleName' identifier='pixels'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='pixels'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='computePixels'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOGPIXELSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='logPixelsY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='pixels'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixels'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hFont'></name></argument></arguments></initializer><name type='SimpleName' identifier='oldFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Feature in Windows If the lfHeight of the LOGFONT structure is positive the lfHeight measures the height of the entire cell including internal leading in logical units Since the height of a font in points does not include the internal leading we must subtract the internal leading which requires a TEXTMETRIC '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></thenExpr></initializer><name type='SimpleName' identifier='lptm'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetTextMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lptm'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='SelectObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='oldFont'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixels'></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='lptm'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='round'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='pixels'></name></left><right type='IntegerLiteralExpr' value='72'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='logPixelsY'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='computePoints'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='logFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hFont'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'></body><type type='VoidType'></type><name type='SimpleName' identifier='destroy'></name><comment type='JavadocComment' content=' Destroys the device in the operating system and releases the device s handle If the device does not have a handle this method may do nothing depending on the device p This method is called after code release code p p Subclasses are supposed to reimplement this method and not call the code super code implementation p see dispose see release '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='release'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='destroy'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='disposed'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='tracking'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objects'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='errors'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes of the operating system resources associated with the receiver After this method has been invoked the receiver will answer code true code when sent the message code isDisposed code see release see destroy see checkDevice '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='objects'></name></name></left><right type='NameExpr'><name type='SimpleName' identifier='object'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='objects'></name></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='errors'></name></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='objects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose Object'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='FontType'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RASTER FONTTYPE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='isScalable'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lParam'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='scalable'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='isScalable'></name></left><right type='NameExpr'><name type='SimpleName' identifier='scalable'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></scope></left><right type='IntegerLiteralExpr' value='128'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newLogFonts'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newLogFonts'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newLogFonts'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='newLogFonts'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='newPixels'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pixels'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newPixels'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixels'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newPixels'></name></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Add the log font to the list of log fonts '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></name></initializer><name type='SimpleName' identifier='logFont'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='logFont'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logFont'></name></target><value type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></thenExpr></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logFont'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpelfe'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='LOGFONT'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='logFont'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='metrics'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpntme'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='TEXTMETRIC'></name></scope></argument></arguments></expression><comment type='BlockComment' content=' Feature in Windows If the lfHeight of the LOGFONT structure is positive the lfHeight measures the height of the entire cell including internal leading in logical units Since the height of a font in points does not include the internal leading we must subtract the internal leading which requires a TEXTMETRIC which in turn requires font creation '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></target><value type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='lfHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFont'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='tmInternalLeading'></name><scope type='NameExpr'><name type='SimpleName' identifier='metrics'></name></scope></right></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></expression></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='1'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='EnumFontFamProc'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lpelfe'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lpntme'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='FontType'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='lParam'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HORZRES'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='VERTRES'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='getBounds'></name><comment type='JavadocComment' content=' Returns a rectangle describing the receiver s size and location return the bounding rectangle exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DeviceData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DeviceData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='debug'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='debug'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='tracking'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='tracking'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='length'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='objects'></name></scope></value></expression></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='objects'></name></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='objects'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='count'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='errors'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Error'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='count'></name></dimension></level></levels></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='objects'></name></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='objects'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='objects'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='errors'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></name></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='errors'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='DeviceData'></name></type><name type='SimpleName' identifier='getDeviceData'></name><comment type='JavadocComment' content=' Returns a code DeviceData code based on the receiver Modifications made to this code DeviceData code will not affect the receiver return a code DeviceData code containing the device s data and attributes exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see DeviceData '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getBounds'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><name type='SimpleName' identifier='getClientArea'></name><comment type='JavadocComment' content=' Returns a rectangle which describes the area of the receiver which is capable of displaying data return the client area exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see getBounds '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='BITSPIXEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='bits'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='PLANES'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='planes'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bits'></name></left><right type='NameExpr'><name type='SimpleName' identifier='planes'></name></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getDepth'></name><comment type='JavadocComment' content=' Returns the bit depth of the screen which is the number of bits it takes to represent the number of unique colors that the screen is currently capable of displaying This number will typically be one of 1 8 15 16 24 or 32 return the depth of the screen exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOGPIXELSX'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='dpiX'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOGPIXELSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='dpiY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='dpiX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dpiY'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='getDPI'></name><comment type='JavadocComment' content=' Returns a point whose x coordinate is the horizontal dots per inch of the display and whose y coordinate is the vertical dots per inch of the display return the horizontal and vertical DPI exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type><arguments><argument type='ThisExpr'></argument><argument type='StringLiteralExpr' value='EnumFontFamProc'></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></initializer><name type='SimpleName' identifier='callback'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Callback'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='callback'></name></scope></initializer><name type='SimpleName' identifier='lpEnumFontFamProc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lpEnumFontFamProc'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO MORE CALLBACKS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='metrics'></name></target><value type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRICW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TEXTMETRIC'></name></type></thenExpr></value></expression><comment type='BlockComment' content=' Initialize the instance variables '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixels'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></dimension></level></levels></value></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></name></target><value type='ConditionalExpr'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseExpr type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTA'></name></type></elseExpr><thenExpr type='CastExpr'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTW'></name></type></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></thenExpr></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Enumerate '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='faceName'></name></left><right type='NullLiteralExpr'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='faceName'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='lpFaceName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='EnumFontFamilies'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpFaceName'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpEnumFontFamProc'></name></argument><argument type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='scalable'></name></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='1'></thenExpr></argument></arguments></expression><comment type='JavadocComment' content=' Bug in Windows 98 When EnumFontFamiliesEx is called with a specified face name it should enumerate for each available style of that font Instead it only enumerates once The fix is to call EnumFontFamilies which works as expected '></comment></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='EnumFontFamilies'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpEnumFontFamProc'></name></argument><argument type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='scalable'></name></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='1'></thenExpr></argument></arguments></expression><comment type='BlockComment' content=' The user did not specify a face name so they want all versions of all available face names '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></value></expression><comment type='JavadocComment' content=' For bitmapped fonts EnumFontFamilies only enumerates once for each font regardless of how many styles are available If the user wants bitmapped fonts enumerate on each face name now '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></name></initializer><name type='SimpleName' identifier='lf'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONT'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsUnicode'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='EnumFontFamiliesA'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lfFaceName'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='lf'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTA'></name></type></inner></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpEnumFontFamProc'></name></argument><argument type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='scalable'></name></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='1'></thenExpr></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='EnumFontFamiliesW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='lfFaceName'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='lf'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LOGFONTW'></name></type></inner></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpEnumFontFamProc'></name></argument><argument type='ConditionalExpr'><condition type='NameExpr'><name type='SimpleName' identifier='scalable'></name></condition><elseExpr type='IntegerLiteralExpr' value='0'></elseExpr><thenExpr type='IntegerLiteralExpr' value='1'></thenExpr></argument></arguments></expression></statement></statements></thenStmt><comment type='JavadocComment' content=' Bug in Windows 98 When EnumFontFamiliesEx is called with a specified face name it should enumerate for each available style of that font Instead it only enumerates once The fix is to call EnumFontFamilies which works as expected '></comment></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LOGPIXELSY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='logPixelsY'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Create the fontData from the logfonts '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='count'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='result'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='offset'></name></right></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='FontData'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='round'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='index'></name></index><name type='NameExpr'><name type='SimpleName' identifier='pixels'></name></name></left><right type='IntegerLiteralExpr' value='72'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='logPixelsY'></name></argument></arguments></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='callback'></name></scope></expression><comment type='BlockComment' content=' Clean up '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixels'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='metrics'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FontData'></name></componentType></type><name type='SimpleName' identifier='getFontList'></name><comment type='JavadocComment' content=' Returns code FontData code objects which describe the fonts that match the given arguments If the code faceName code is null all fonts will be returned param faceName the name of the font to look for or null param scalable if true only scalable fonts are returned otherwise only non scalable fonts are returned return the matching font data exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='faceName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='scalable'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetLastError'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='error'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='error'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='StringLiteralExpr' value=''></expression></thenStmt><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' GetLastError 0x'></left><right type='MethodCallExpr'><name type='SimpleName' identifier='toHexString'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='error'></name></argument></arguments></right></left><right type='StringLiteralExpr' value=' '></right></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getLastError'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetLastError'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='error'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='error'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='StringLiteralExpr' value=''></expression></thenStmt><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='buffer'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='FORMAT MESSAGE ALLOCATE BUFFER'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='FORMAT MESSAGE FROM SYSTEM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='FORMAT MESSAGE IGNORE INSERTS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></initializer><name type='SimpleName' identifier='dwFlags'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='FormatMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='dwFlags'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='error'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='LANG USER DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' GetLastError 0x'></left><right type='MethodCallExpr'><name type='SimpleName' identifier='toHexString'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='error'></name></argument></arguments></right></left><right type='StringLiteralExpr' value=' '></right></expression></thenStmt><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></initializer><name type='SimpleName' identifier='buffer1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buffer1'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='TCHAR'></name></scope></right></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='LocalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='buffer'></name></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer1'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getLastErrorText'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x02000000'></initializer><name type='SimpleName' identifier='pixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='id'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR WHITE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02FFFFFF'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR BLACK'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02000000'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR RED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x020000FF'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR DARK RED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02000080'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR GREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x0200FF00'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR DARK GREEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02008000'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR YELLOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x0200FFFF'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR DARK YELLOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02008080'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR BLUE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02FF0000'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR DARK BLUE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02800000'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR MAGENTA'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02FF00FF'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR DARK MAGENTA'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02800080'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR CYAN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02FFFF00'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR DARK CYAN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02808000'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR GRAY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02C0C0C0'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='COLOR DARK GRAY'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='pixel'></name></target><value type='IntegerLiteralExpr' value='0x02808080'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='Color'></name></scope><arguments><argument type='ThisExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='pixel'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Color'></name></type><name type='SimpleName' identifier='getSystemColor'></name><comment type='JavadocComment' content=' Returns the matching standard color for the given constant which should be one of the color constants specified in class code SWT code Any value other than one of the SWT color constants which is passed in will result in the color black This color should not be freed because it was allocated by the system not the application param id the color constant return the matching color exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see SWT '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetStockObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SYSTEM FONT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='hFont'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='Font'></name></scope><arguments><argument type='ThisExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='hFont'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Font'></name></type><name type='SimpleName' identifier='getSystemFont'></name><comment type='JavadocComment' content=' Returns a reasonable font for applications to use On some platforms this will match the default font or system font if such can be found This font should not be freed because it was allocated by the system not the application p Typically applications which want the default look should simply not set the font on the widgets they create Widgets are always created with the correct default font for the class of user interface component they represent p return a font exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='getWarnings'></name><comment type='JavadocComment' content=' Returns code true code if the underlying window system prints out warning messages on the console and code setWarnings code had previously been called with code true code return code true code if warnings are being handled and code false code otherwise exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='debug'></name></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GdiSetBatchLimit'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument></arguments></expression></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppSp'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='piNumScripts'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ScriptGetProperties'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppSp'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='piNumScripts'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='scripts'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='piNumScripts'></name></name></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='scripts'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppSp'></name></name></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='scripts'></name></scope></left><right type='IntegerLiteralExpr' value='4'></right></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Initialize scripts list '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new GC'></name><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' If we re not on a device which supports palettes don t create one '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='RASTERCAPS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='rc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='BITSPIXEL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='bits'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='PLANES'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='planes'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MULTIPLY'><target type='NameExpr'><name type='SimpleName' identifier='bits'></name></target><value type='NameExpr'><name type='SimpleName' identifier='planes'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='rc'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='RC PALETTE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bits'></name></left><right type='IntegerLiteralExpr' value='8'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='NUMRESERVED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='numReserved'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetDeviceCaps'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SIZEPALETTE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='numEntries'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='numReserved'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='numEntries'></name></left><right type='IntegerLiteralExpr' value='20'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='numReserved'></name></target><value type='IntegerLiteralExpr' value='20'></value></expression></thenStmt><comment type='BlockComment' content=' Feature on WinCE For some reason certain 8 bit WinCE devices return 0 for the number of reserved entries in the system palette Their system palette correctly contains the usual 20 system colors The workaround is to assume there are 20 reserved system colors instead of 0 '></comment></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='colorRefCount'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='numEntries'></name></dimension></level></levels></value></expression><comment type='BlockComment' content=' Create the palette and reference counter '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='IntegerLiteralExpr' value='4'></left><right type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='4'></left><right type='NameExpr'><name type='SimpleName' identifier='numEntries'></name></right></right></dimension></level></levels></initializer><name type='SimpleName' identifier='logPalette'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='BlockComment' content=' 4 bytes header 4 bytes per entry numEntries entries '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='logPalette'></name></name></target><value type='IntegerLiteralExpr' value='0x00'></value></expression><comment type='BlockComment' content=' 2 bytes special header '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='logPalette'></name></name></target><value type='IntegerLiteralExpr' value='0x03'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='logPalette'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression><comment type='BlockComment' content=' 2 bytes number of colors LSB first '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='logPalette'></name></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='4'></left><right type='NameExpr'><name type='SimpleName' identifier='numEntries'></name></right></dimension></level></levels></initializer><name type='SimpleName' identifier='lppe'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='BlockComment' content=' Create a palette which contains the system entries as they are located in the system palette The MSDN article Memory Device Contexts describes where system entries are located On an 8 bit display with 20 reserved colors the system colors will be the first 10 entries and the last 10 ones '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemPaletteEntries'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='numEntries'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lppe'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lppe'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='logPalette'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument><argument type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='4'></left><right type='NameExpr'><name type='SimpleName' identifier='numEntries'></name></right></argument></arguments></expression><comment type='BlockComment' content=' Copy all entries from the system palette '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='colorRefCount'></name></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='numEntries'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='colorRefCount'></name></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='numReserved'></name></left><right type='IntegerLiteralExpr' value='2'></right></right></compare><comment type='BlockComment' content=' Lock the indices corresponding to the system entries '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='internal dispose GC'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hDC'></name></argument><argument type='NullLiteralExpr'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hPalette'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreatePalette'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='logPalette'></name></argument></arguments></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='init'></name><comment type='JavadocComment' content=' Initializes any internal resources needed by the device p This method is called after code create code p p If subclasses reimplement this method they must call the code super code implementation p see create '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='internal new GC'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to allocate a new GC handle p b IMPORTANT b This method is em not em part of the public API for code Device code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param data the platform specific GC data return the platform specific GC handle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><type type='VoidType'></type><name type='SimpleName' identifier='internal dispose GC'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to dispose a GC handle p b IMPORTANT b This method is em not em part of the public API for code Device code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param hDC the platform specific GC handle param data the platform specific GC data '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hDC'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GCData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='disposed'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isDisposed'></name><comment type='JavadocComment' content=' Returns code true code if the device has been disposed and code false code otherwise p This method gets the dispose state for the device When a device has been disposed it is an error to invoke any other method using the device return code true code when the device is disposed and code false code otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='objects'></name></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='objects'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='object'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='errors'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Error'></name></type></value></expression></statement><statement type='ReturnStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='objects'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='objects'></name></scope></left><right type='IntegerLiteralExpr' value='128'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newObjects'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='objects'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newObjects'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='objects'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='objects'></name></scope></index><name type='NameExpr'><name type='SimpleName' identifier='newObjects'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='object'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='objects'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newObjects'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Error'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='errors'></name></scope></left><right type='IntegerLiteralExpr' value='128'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newErrors'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Error'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='errors'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newErrors'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='errors'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='errors'></name></scope></index><name type='NameExpr'><name type='SimpleName' identifier='newErrors'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Error'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='errors'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newErrors'></name></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='new Object'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='gdipToken'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GdiplusShutdown'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gdipToken'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='gdipToken'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='scripts'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hPalette'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hPalette'></name></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='hPalette'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='colorRefCount'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='logFonts'></name></target><value type='NullLiteralExpr'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nFonts'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='release'></name><comment type='JavadocComment' content=' Releases any internal resources back to the operating system and clears all fields except the device handle p When a device is destroyed resources that were acquired on behalf of the programmer need to be returned to the operating system For example if the device allocated a font to be used as the system font this font would be freed in code release code Also to assist the garbage collector and minimize the amount of memory that is not reclaimed when the programmer keeps a reference to a disposed device all fields except the handle are zero d The handle is needed by code destroy code p This method is called before code destroy code p p If subclasses reimplement this method they must call the code super code implementation p see dispose see destroy '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkDevice'></name></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setWarnings'></name><comment type='JavadocComment' content=' If the underlying window system supports printing warning messages to the console setting warnings to code false code prevents these messages from being printed If the argument is code true code then message printing is not blocked param warnings code true code if warnings should be printed and code false code otherwise exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='warnings'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='ABSTRACT'></modifier></modifiers></type></types></root>
