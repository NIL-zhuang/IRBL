<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='awt'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Constructor'><qualifier type='Name' identifier='reflect'><qualifier type='Name' identifier='lang'><qualifier type='Name' identifier='java'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Field'><qualifier type='Name' identifier='reflect'><qualifier type='Name' identifier='lang'><qualifier type='Name' identifier='java'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Method'><qualifier type='Name' identifier='reflect'><qualifier type='Name' identifier='lang'><qualifier type='Name' identifier='java'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name><comment type='BlockComment' content=' SWT Imports '></comment></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Rectangle'><qualifier type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Shell'><qualifier type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Composite'><qualifier type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Display'><qualifier type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Listener'><qualifier type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Event'><qualifier type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Library'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='EventQueue'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></name><comment type='BlockComment' content=' AWT Imports '></comment></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Canvas'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Frame'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Dimension'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Toolkit'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='ComponentAdapter'><qualifier type='Name' identifier='event'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='ComponentEvent'><qualifier type='Name' identifier='event'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='WindowEvent'><qualifier type='Name' identifier='event'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='FocusEvent'><qualifier type='Name' identifier='event'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='SWT AWT'></name><comment type='JavadocComment' content=' This class provides a bridge between SWT and AWT so that it is possible to embedded AWT components in SWT and vice versa since 3 0 '></comment><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' The name of the embedded Frame class The default class name for the platform will be used if code null code '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='embeddedFrameClass'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='loaded'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='swingInitialized'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='MethodDeclaration'><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getAWTHandle'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='NATIVE'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='canvas'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Canvas'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='loaded'></name></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='loaded'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getDefaultToolkit'></name><scope type='NameExpr'><name type='SimpleName' identifier='Toolkit'></name></scope></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='loadLibrary'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='StringLiteralExpr' value='jawt'></argument></arguments></expression></statement></statements></tryBlock><comment type='BlockComment' content=' Note that the jawt library is loaded explicitily because it cannot be found by the library loader All exceptions are caught because the library may have been loaded already '></comment><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='loadLibrary'></name><scope type='NameExpr'><name type='SimpleName' identifier='Library'></name></scope><arguments><argument type='StringLiteralExpr' value='swt awt'></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='loadLibrary'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='swingInitialized'></name></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='swingInitialized'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='emptyClass'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></componentType></type></variable></variables></expression><comment type='BlockComment' content=' Initialize the default focus traversal policy '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='emptyObject'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='forName'></name><scope type='NameExpr'><name type='SimpleName' identifier='Class'></name></scope><arguments><argument type='StringLiteralExpr' value='javax swing UIManager'></argument></arguments></initializer><name type='SimpleName' identifier='clazz'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getMethod'></name><scope type='NameExpr'><name type='SimpleName' identifier='clazz'></name></scope><arguments><argument type='StringLiteralExpr' value='getDefaults'></argument><argument type='NameExpr'><name type='SimpleName' identifier='emptyClass'></name></argument></arguments></initializer><name type='SimpleName' identifier='method'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Method'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='method'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invoke'></name><scope type='NameExpr'><name type='SimpleName' identifier='method'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='clazz'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='emptyObject'></name></argument></arguments></expression></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='initializeSwing'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='SYNCHRONIZED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getStyle'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='EMBEDDED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></initializer><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='clazz'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></type></variable></variables></expression><comment type='BlockComment' content=' Some REs have implemented the embedded frame constructor to take an integer and other REs take a long To handle this binary incompatability use reflection to create the embedded frame '></comment></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='embeddedFrameClass'></name></left><right type='NullLiteralExpr'></right></condition><elseExpr type='StringLiteralExpr' value='sun awt windows WEmbeddedFrame'></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='embeddedFrameClass'></name></thenExpr></initializer><name type='SimpleName' identifier='className'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='clazz'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='forName'></name><scope type='NameExpr'><name type='SimpleName' identifier='Class'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='className'></name></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='constructor'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Constructor'></name></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='constructor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getConstructor'></name><scope type='NameExpr'><name type='SimpleName' identifier='clazz'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='ClassExpr'><type type='PrimitiveType' specificType='INT'></type></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='constructor'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getConstructor'></name><scope type='NameExpr'><name type='SimpleName' identifier='clazz'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='ClassExpr'><type type='PrimitiveType' specificType='LONG'></type></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e2'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e2'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='initializeSwing'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='value'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='newInstance'></name><scope type='NameExpr'><name type='SimpleName' identifier='constructor'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Integer'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='value'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Frame'></name></type></initializer><name type='SimpleName' identifier='frame'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Frame'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addNotify'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope></expression><comment type='BlockComment' content=' This is necessary to make lightweight components directly added to the frame receive mouse events properly '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setVisible'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope><arguments><argument type='BooleanLiteralExpr' value='false'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invokeLater'></name><scope type='NameExpr'><name type='SimpleName' identifier='EventQueue'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Activate'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invokeLater'></name><scope type='NameExpr'><name type='SimpleName' identifier='EventQueue'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='JAVA VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='Library'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='JAVA VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='Library'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument><argument type='IntegerLiteralExpr' value='4'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WINDOW ACTIVATED'></name><scope type='NameExpr'><name type='SimpleName' identifier='WindowEvent'></name></scope></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WINDOW GAINED FOCUS'></name><scope type='NameExpr'><name type='SimpleName' identifier='WindowEvent'></name></scope></argument></arguments></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WINDOW ACTIVATED'></name><scope type='NameExpr'><name type='SimpleName' identifier='WindowEvent'></name></scope></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FocusEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FOCUS GAINED'></name><scope type='NameExpr'><name type='SimpleName' identifier='FocusEvent'></name></scope></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='Deactivate'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invokeLater'></name><scope type='NameExpr'><name type='SimpleName' identifier='EventQueue'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='JAVA VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='Library'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='JAVA VERSION'></name><scope type='NameExpr'><name type='SimpleName' identifier='Library'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument><argument type='IntegerLiteralExpr' value='4'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WINDOW LOST FOCUS'></name><scope type='NameExpr'><name type='SimpleName' identifier='WindowEvent'></name></scope></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WINDOW DEACTIVATED'></name><scope type='NameExpr'><name type='SimpleName' identifier='WindowEvent'></name></scope></argument></arguments></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='WindowEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='WINDOW DEACTIVATED'></name><scope type='NameExpr'><name type='SimpleName' identifier='WindowEvent'></name></scope></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispatchEvent'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FocusEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='frame'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='FOCUS LOST'></name><scope type='NameExpr'><name type='SimpleName' identifier='FocusEvent'></name></scope></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement><statement type='BreakStmt'></statement></statements></entrie></entries></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='handleEvent'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Event'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></initializer><name type='SimpleName' identifier='listener'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Listener'></name></type></variable></variables></expression><comment type='BlockComment' content=' Generate the appropriate events to activate and deactivate the embedded frame This is needed in order to make keyboard focus work properly for lightweights '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Activate'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Deactivate'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='Dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='listener'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='asyncExec'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getDisplay'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></initializer><name type='SimpleName' identifier='clientArea'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invokeLater'></name><scope type='NameExpr'><name type='SimpleName' identifier='EventQueue'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='clientArea'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='clientArea'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='validate'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='invokeLater'></name><scope type='NameExpr'><name type='SimpleName' identifier='EventQueue'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='forName'></name><scope type='NameExpr'><name type='SimpleName' identifier='Class'></name></scope><arguments><argument type='StringLiteralExpr' value='sun awt windows WComponentPeer'></argument></arguments></initializer><name type='SimpleName' identifier='clazz'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Class'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDeclaredField'></name><scope type='NameExpr'><name type='SimpleName' identifier='clazz'></name></scope><arguments><argument type='StringLiteralExpr' value='winGraphicsConfig'></argument></arguments></initializer><name type='SimpleName' identifier='field'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Field'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setAccessible'></name><scope type='NameExpr'><name type='SimpleName' identifier='field'></name></scope><arguments><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='set'></name><scope type='NameExpr'><name type='SimpleName' identifier='field'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getPeer'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='getGraphicsConfiguration'></name><scope type='NameExpr'><name type='SimpleName' identifier='frame'></name></scope></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression><comment type='BlockComment' content=' TEMPORARY CODE For some reason the graphics configuration of the embedded frame is not initialized properly This causes an exception when the depth of the screen is changed '></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='frame'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Frame'></name></type><name type='SimpleName' identifier='new Frame'></name><comment type='JavadocComment' content=' Creates a new code java awt Frame code This frame is the root for the AWT components that will be embedded within the composite In order for the embedding to succeed the composite must have been created with the SWT EMBEDDED style p IMPORTANT As of DK1 5 the embedded frame does not receive mouse events When a lightweight component is added as a child of the embedded frame the cursor does not change In order to work around both these problems it is strongly recommended that a heavyweight component such as code java awt Panel code be added to the frame as the root of all components p param parent the parent code Composite code of the new code java awt Frame code return a code java awt Frame code to be the parent of the embedded AWT components exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li li ERROR INVALID ARGUMENT if the parent Composite does not have the SWT EMBEDDED style li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='parent'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='loadLibrary'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getAWTHandle'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='parent'></name></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NullLiteralExpr'></argument><argument type='StringLiteralExpr' value=' peer not created '></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='Shell'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='display'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></initializer><name type='SimpleName' identifier='shell'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Shell'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='addComponentListener'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ComponentAdapter'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='syncExec'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Runnable'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='parent'></name></scope></initializer><name type='SimpleName' identifier='dim'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Dimension'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='shell'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='dim'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='dim'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='run'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='componentResized'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ComponentEvent'></name></type></parameter></parameters></anonymousClassBod></anonymousClassBody></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setVisible'></name><scope type='NameExpr'><name type='SimpleName' identifier='shell'></name></scope><arguments><argument type='BooleanLiteralExpr' value='true'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='shell'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Shell'></name></type><name type='SimpleName' identifier='new Shell'></name><comment type='JavadocComment' content=' Creates a new code Shell code This Shell is the root for the SWT widgets that will be embedded within the AWT canvas param display the display for the new Shell param parent the parent code java awt Canvas code of the new Shell return a code Shell code to be the parent of the embedded SWT widgets exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the display is null li li ERROR NULL ARGUMENT if the parent is null li li ERROR INVALID ARGUMENT if the parent s peer is not created li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='parent'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Canvas'></name></type><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
