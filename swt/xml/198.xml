<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='GIFFileFormat'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FileFormat'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='signature'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='screenWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='screenHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='backgroundPixel'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='bitsPerPixel'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='defaultDepth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='disposalMethod'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='delayTime'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='transparentPixel'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='1'></initializer><name type='SimpleName' identifier='repeatCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xFF'></initializer><name type='SimpleName' identifier='GIF APPLICATION EXTENSION BLOCK ID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xF9'></initializer><name type='SimpleName' identifier='GIF GRAPHICS CONTROL BLOCK ID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x01'></initializer><name type='SimpleName' identifier='GIF PLAIN TEXT BLOCK ID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0xFE'></initializer><name type='SimpleName' identifier='GIF COMMENT BLOCK ID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x21'></initializer><name type='SimpleName' identifier='GIF EXTENSION BLOCK ID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x2C'></initializer><name type='SimpleName' identifier='GIF IMAGE BLOCK ID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0x3B'></initializer><name type='SimpleName' identifier='GIF TRAILER ID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='numGrays'></name></left><right type='IntegerLiteralExpr' value='1'></right></initializer><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='numGrays'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='colors'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='256'></right></left><right type='NameExpr'><name type='SimpleName' identifier='n'></name></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></initializer><name type='SimpleName' identifier='intensity'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='colors'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='intensity'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='intensity'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='intensity'></name></argument></arguments></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='numGrays'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='colors'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><name type='SimpleName' identifier='grayRamp'></name><comment type='JavadocComment' content=' Answer a palette containing numGrays shades of gray ranging from black to white '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='numGrays'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='3'></dimension></level></levels></initializer><name type='SimpleName' identifier='signature'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='signature'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unread'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='signature'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='signature'></name></argument></arguments></scope><arguments><argument type='StringLiteralExpr' value='GIF'></argument></arguments></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isFileFormat'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LEDataInputStream'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='3'></dimension></level></levels></initializer><name type='SimpleName' identifier='signatureBytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='3'></dimension></level></levels></initializer><name type='SimpleName' identifier='versionBytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='7'></dimension></level></levels></initializer><name type='SimpleName' identifier='block'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='signatureBytes'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='signature'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='signatureBytes'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='signature'></name></scope><arguments><argument type='StringLiteralExpr' value='GIF'></argument></arguments></expression><comment type='LineComment' content=' NON NLS 1 '></comment></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='versionBytes'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='screenWidth'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='logicalScreenWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='screenWidth'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='screenHeight'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='logicalScreenHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='screenHeight'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></initializer><name type='SimpleName' identifier='bitField'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='backgroundPixel'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='4'></right></inner></left><right type='IntegerLiteralExpr' value='0x07'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></value></expression><comment type='LineComment' content='aspect block 6 0xFF '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='defaultDepth'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='0x80'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='backgroundPixel'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression><comment type='LineComment' content='sorted false '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='defaultDepth'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bitsPerPixel'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='palette'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readPalette'></name><arguments><argument type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='defaultDepth'></name></right></argument></arguments></value></expression><comment type='LineComment' content='sorted bitField 0x8 0 '></comment></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='backgroundPixel'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='backgroundPixel'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getExtensions'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='readID'></name></initializer><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='images'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='readImageBlock'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument></arguments></initializer><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='hasListeners'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='notifyListeners'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope><arguments><argument type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageLoaderEvent'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='loader'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument><argument type='IntegerLiteralExpr' value='3'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='images'></name></initializer><name type='SimpleName' identifier='oldImages'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='images'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldImages'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldImages'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='images'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldImages'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='images'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='images'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='image'></name></value></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='id'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression><comment type='BlockComment' content=' Read the 0 byte terminator at the end of the image '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unread'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='id'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></expression><comment type='BlockComment' content=' We read the terminator earlier '></comment></statement></statements></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getExtensions'></name></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='id'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readID'></name></value></expression></statement></statements></body><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF IMAGE BLOCK ID'></name></right></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='images'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type><name type='SimpleName' identifier='loadFromByteStream'></name><comment type='JavadocComment' content=' Load the GIF image s stored in the input stream Return an array of ImageData representing the image s '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ReturnStmt'><expression type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='readID'></name><comment type='JavadocComment' content=' Read and return the next block or extension identifier from the file '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='readID'></name></initializer><name type='SimpleName' identifier='id'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF EXTENSION BLOCK ID'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readExtension'></name></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='id'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readID'></name></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF IMAGE BLOCK ID'></name></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF TRAILER ID'></name></right></right></left><right type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF IMAGE BLOCK ID'></name></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='id'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF TRAILER ID'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unread'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='id'></name></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getExtensions'></name><comment type='JavadocComment' content=' Read extensions until an image descriptor appears In the future if we care about the extensions they should be properly grouped with the image data before which they appeared Right now the interesting parts of some extensions are kept but the rest is discarded Throw an error if an error occurs '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='readID'></name></initializer><name type='SimpleName' identifier='extensionID'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='extensionID'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF COMMENT BLOCK ID'></name></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readCommentExtension'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='extensionID'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF PLAIN TEXT BLOCK ID'></name></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readPlainTextExtension'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='extensionID'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF GRAPHICS CONTROL BLOCK ID'></name></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readGraphicsControlExtension'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='extensionID'></name></left><right type='NameExpr'><name type='SimpleName' identifier='GIF APPLICATION EXTENSION BLOCK ID'></name></right></condition><thenStmt type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readApplicationExtension'></name></expression></thenStmt></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></initializer><name type='SimpleName' identifier='extSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='extSize'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='extSize'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='ext'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ext'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='extSize'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='ext'></name></expression></statement></statements></tryBlock><comment type='LineComment' content=' the block contents '></comment><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='readExtension'></name><comment type='JavadocComment' content=' Read a control extension Return the extension block data '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='comment'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='255'></dimension></level></levels></initializer><name type='SimpleName' identifier='block'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='comment'></name></initializer><name type='SimpleName' identifier='oldComment'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='comment'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldComment'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='size'></name></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldComment'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='comment'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldComment'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='comment'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldComment'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></inner></right></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='comment'></name></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='readCommentExtension'></name><comment type='JavadocComment' content=' We have just read the Comment extension identifier from the input stream Read in the rest of the comment and return it GIF comment blocks are variable size '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></expression><comment type='LineComment' content=' Read size of block 0x0C '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='12'></dimension></level></levels></initializer><name type='SimpleName' identifier='info'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='LineComment' content=' Read the text information x y width height colors '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='info'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='text'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='LineComment' content=' Read the text '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='255'></dimension></level></levels></initializer><name type='SimpleName' identifier='block'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='text'></name></initializer><name type='SimpleName' identifier='oldText'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='text'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldText'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='size'></name></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldText'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='text'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldText'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='text'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldText'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></inner></right></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='text'></name></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='readPlainTextExtension'></name><comment type='JavadocComment' content=' We have just read the PlainText extension identifier from the input stream Read in the plain text info and text and return the text GIF plain text blocks are variable size '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></expression><comment type='LineComment' content=' Read size of block 0x04 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4'></dimension></level></levels></initializer><name type='SimpleName' identifier='controlBlock'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='LineComment' content=' Read the control block '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='controlBlock'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='controlBlock'></name></name></initializer><name type='SimpleName' identifier='bitField'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='disposalMethod'></name></target><value type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='2'></right></inner></left><right type='IntegerLiteralExpr' value='0x07'></right></value></expression><comment type='LineComment' content=' Store the disposal method '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='delayTime'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='controlBlock'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='controlBlock'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression><comment type='LineComment' content=' Store the delay time '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='0x01'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='controlBlock'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></initializer><name type='SimpleName' identifier='colorIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='colorIndex'></name></left><right type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='defaultDepth'></name></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></target><value type='NameExpr'><name type='SimpleName' identifier='colorIndex'></name></value></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Work around a customer has a GIF that specifies an invalid color index that is larger than the number of entries in the palette Detect this case and ignore the specified color index '></comment></statement></statements></thenStmt><comment type='LineComment' content=' Store the transparent color '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></expression><comment type='LineComment' content=' Read block terminator '></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='controlBlock'></name></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='readGraphicsControlExtension'></name><comment type='JavadocComment' content=' We have just read the GraphicsControl extension identifier from the input stream Read in the control information store it and return it '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></expression><comment type='LineComment' content=' Read size of block 0x0B '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='8'></dimension></level></levels></initializer><name type='SimpleName' identifier='applicationBytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='LineComment' content=' Read application identifier '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='applicationBytes'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='applicationBytes'></name></argument></arguments></initializer><name type='SimpleName' identifier='application'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='3'></dimension></level></levels></initializer><name type='SimpleName' identifier='authenticationBytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='LineComment' content=' Read authentication code '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='authenticationBytes'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='authenticationBytes'></name></argument></arguments></initializer><name type='SimpleName' identifier='authentication'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='LineComment' content=' Read application data '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='255'></dimension></level></levels></initializer><name type='SimpleName' identifier='block'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='data'></name></initializer><name type='SimpleName' identifier='oldData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldData'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='size'></name></right></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='oldData'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldData'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='oldData'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='size'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></inner></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='application'></name></scope><arguments><argument type='StringLiteralExpr' value='NETSCAPE'></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='authentication'></name></scope><arguments><argument type='StringLiteralExpr' value='2 0'></argument></arguments></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='01'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='repeatCount'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='repeatCount'></name><scope type='NameExpr'><name type='SimpleName' identifier='loader'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='repeatCount'></name></value></expression></statement></statements></thenStmt><comment type='LineComment' content=' Look for the NETSCAPE repeat count field for an animated GIF '></comment></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='readApplicationExtension'></name><comment type='JavadocComment' content=' We have just read the Application extension identifier from the input stream Read in the rest of the extension look for and store number of repeats and return the data '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='9'></dimension></level></levels></initializer><name type='SimpleName' identifier='block'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></initializer><name type='SimpleName' identifier='left'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></initializer><name type='SimpleName' identifier='top'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='6'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='7'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='8'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></initializer><name type='SimpleName' identifier='bitField'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='0x40'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></initializer><name type='SimpleName' identifier='interlaced'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='0x80'></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='depth'></name></target><value type='NameExpr'><name type='SimpleName' identifier='defaultDepth'></name></value></expression><comment type='LineComment' content=' No local palette '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='palette'></name></target><value type='NameExpr'><name type='SimpleName' identifier='defaultPalette'></name></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='depth'></name></target><value type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='bitField'></name></left><right type='IntegerLiteralExpr' value='0x7'></right></inner></left><right type='IntegerLiteralExpr' value='1'></right></value></expression><comment type='LineComment' content=' Local palette '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='palette'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readPalette'></name><arguments><argument type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='depth'></name></right></argument></arguments></value></expression></statement></statements></thenStmt><comment type='LineComment' content='boolean sorted bitField 0x20 0 '></comment></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='8'></right></right></inner></expression></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='depth'></name></left><right type='IntegerLiteralExpr' value='4'></right></condition><elseStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='depth'></name></target><value type='IntegerLiteralExpr' value='8'></value></expression></elseStmt><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='depth'></name></target><value type='IntegerLiteralExpr' value='4'></value></expression></thenStmt></statement></statements></thenStmt><comment type='LineComment' content=' Promote depth to next highest supported value '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='palette'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='palette'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='grayRamp'></name><arguments><argument type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='depth'></name></right></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='initialCodeSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='initialCodeSize'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='initialCodeSize'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='internal new'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageData'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='depth'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='NameExpr'><name type='SimpleName' identifier='transparentPixel'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IMAGE GIF'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='left'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='top'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='disposalMethod'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='delayTime'></name></argument></arguments></initializer><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWCodec'></name></type></initializer><name type='SimpleName' identifier='codec'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWCodec'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='decode'></name><scope type='NameExpr'><name type='SimpleName' identifier='codec'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='loader'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='interlaced'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='initialCodeSize'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='image'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='readImageBlock'></name><comment type='JavadocComment' content=' Return a DeviceIndependentImage representing the image block at the current position in the input stream Throw an error if an error occurs '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='defaultPalette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='numColors'></name></left><right type='IntegerLiteralExpr' value='3'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='bytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bytes'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='bytes'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='numColors'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='colors'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='colors'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='3'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></argument><argument type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='3'></right></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></argument><argument type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='3'></right></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></argument></arguments></value></expression></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='numColors'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='colors'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><name type='SimpleName' identifier='readPalette'></name><comment type='JavadocComment' content=' Read a palette from the input stream '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='numColors'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></inner></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='BinaryExpr' operator='BINARY AND'><left type='BinaryExpr' operator='BINARY AND'><left type='IntegerLiteralExpr' value='0x80'></left><right type='IntegerLiteralExpr' value='0xF8'></right></left><right type='IntegerLiteralExpr' value='0xF7'></right></left><right type='IntegerLiteralExpr' value='0x8F'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></initializer><name type='SimpleName' identifier='bitField'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='CharLiteralExpr' value='G'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='I'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='F'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='CharLiteralExpr' value='8'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='9'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='CharLiteralExpr' value='a'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></expression><type type='PrimitiveType' specificType='SHORT'></type></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></expression><type type='PrimitiveType' specificType='SHORT'></type></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bitField'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='BYTE'></type></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='BYTE'></type></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writePalette'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='palette'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='transparentPixel'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='disposalMethod'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='delayTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeGraphicsControlBlock'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeImageBlock'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument></arguments></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0x3B'></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='unloadIntoByteStream'></name><comment type='JavadocComment' content=' Write the specified device independent image to the output stream '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='GIF EXTENSION BLOCK ID'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='GIF GRAPHICS CONTROL BLOCK ID'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0x04'></argument></arguments></expression><comment type='LineComment' content=' size of block'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='4'></dimension></level></levels></initializer><name type='SimpleName' identifier='gcBlock'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xFD'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='transparentPixel'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></left><right type='IntegerLiteralExpr' value='0x01'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='transparentPixel'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></left><right type='IntegerLiteralExpr' value='0xFE'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='disposalMethod'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY OR'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='disposalMethod'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0x07'></right></inner></left><right type='IntegerLiteralExpr' value='2'></right></inner></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='delayTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='delayTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='delayTime'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='gcBlock'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression><comment type='LineComment' content=' block terminator'></comment></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='writeGraphicsControlBlock'></name><comment type='JavadocComment' content=' Write out a GraphicsControlBlock to describe the specified device independent image '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='GIF IMAGE BLOCK ID'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='9'></dimension></level></levels></initializer><name type='SimpleName' identifier='block'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='6'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='7'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='8'></index><name type='NameExpr'><name type='SimpleName' identifier='block'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression><comment type='LineComment' content=' no interlace no sort no local palette'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='block'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='encode'></name><scope type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LZWCodec'></name></type></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='writeImageBlock'></name><comment type='JavadocComment' content=' Write the specified device independent image to the current position in the output stream '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='depth'></name></right></inner></left><right type='IntegerLiteralExpr' value='3'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='bytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='palette'></name></scope></name></initializer><name type='SimpleName' identifier='color'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='offset'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></target><value type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='color'></name></scope></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></target><value type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='color'></name></scope></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></target><value type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='color'></name></scope></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='palette'></name></scope></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bytes'></name></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='writePalette'></name><comment type='JavadocComment' content=' Write the specified palette to the output stream '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='depth'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
