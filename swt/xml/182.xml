<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='gdip'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Transform'></name><comment type='JavadocComment' content=' Instances of this class represent transformation matrices for points expressed as x y pairs of floating point numbers p Application code must explicitly invoke the code Transform dispose code method to release the operating system resources managed by each instance when those instances are no longer required p since 3 1 '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Resource'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' the OS resource for the Transform Warning This field is platform dependent p b IMPORTANT b This field is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be accessed from application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='1'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></statement></statements></body><name type='SimpleName' identifier='Transform'></name><comment type='JavadocComment' content=' Constructs a new identity Transform param device the device on which to allocate the Transform exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li ul exception SWTError ul li ERROR NO HANDLES if a handle for the Transform could not be obtained li ul see dispose '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='true'><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='MethodCallExpr'><name type='SimpleName' identifier='checkTransform'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='elements'></name></argument></arguments></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></argument></arguments></statement></statements></body><name type='SimpleName' identifier='Transform'></name><comment type='JavadocComment' content=' Constructs a new Transform given an array of elements that represent the matrix that describes the transformation param device the device on which to allocate the Transform param elements an array of floats that describe the transformation matrix exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device or the elements array is null li li ERROR INVALID ARGUMENT if the elements array is too small to hold the matrix values li ul exception SWTError ul li ERROR NO HANDLES if a handle for the Transform could not be obtained li ul see dispose '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='elements'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='FLOAT'></componentType></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkGDIP'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='Matrix new'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='m11'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='m12'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='m21'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='m22'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dx'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dy'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='Transform'></name><comment type='JavadocComment' content=' Constructs a new Transform given all of the elements that represent the matrix that describes the transformation param device the device on which to allocate the Transform param m11 the first element of the first row of the matrix param m12 the second element of the first row of the matrix param m21 the first element of the second row of the matrix param m22 the second element of the second row of the matrix param dx the third element of the first row of the matrix param dy the third element of the second row of the matrix exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li ul exception SWTError ul li ERROR NO HANDLES if a handle for the Transform could not be obtained li ul see dispose '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m11'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m12'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m21'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m22'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='elements'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='elements'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='elements'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='FLOAT'></componentType></type><name type='SimpleName' identifier='checkTransform'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='elements'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='FLOAT'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix delete'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes of the operating system resources associated with the Transform Applications must dispose of all Transforms that they allocate '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='elements'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='elements'></name></scope></left><right type='IntegerLiteralExpr' value='6'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix GetElements'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='elements'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='getElements'></name><comment type='JavadocComment' content=' Fills the parameter with the values of the transformation matrix that the receiver represents in the order m11 m12 m21 m22 dx dy param elements array to hold the matrix values return in elements array the transformation matrix represented by the receiver exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parameter is null li li ERROR INVALID ARGUMENT if the parameter is too small to hold the matrix values li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='elements'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='FLOAT'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='Matrix Invert'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT INVERT MATRIX'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='invert'></name><comment type='JavadocComment' content=' Modifies the receiver such that the matrix it represents becomes the the mathematical inverse of the matrix it previously represented exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li li ERROR CANNOT INVERT MATRIX if the matrix is not invertable li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isDisposed'></name><comment type='JavadocComment' content=' Returns code true code if the Transform has been disposed and code false code otherwise p This method gets the dispose state for the Transform When a Transform has been disposed it is an error to invoke any other method using the Transform return code true code when the Transform is disposed and code false code otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix IsIdentity'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isIdentity'></name><comment type='JavadocComment' content=' Returns code true code if the Transform represents the identity matrix and false otherwise return code true code if the receiver is an identity Transform and code false code otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='matrix'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='matrix'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix Multiply'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='matrix'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MatrixOrderPrepend'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='multiply'></name><comment type='JavadocComment' content=' Modifies the receiver such that the matrix it represents becomes the the result of multiplying the matrix it previously represented by the argument param matrix the matrix to multiply the receiver by exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parameter is null li li ERROR INVALID ARGUMENT if the parameter has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='matrix'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transform'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix Rotate'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='angle'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MatrixOrderPrepend'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='rotate'></name><comment type='JavadocComment' content=' Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation rotated by the specified angle The angle is specified in degrees and for the identity transform 0 degrees is at the 3 o clock position A positive value indicates a clockwise rotation while a negative value indicates a counter clockwise rotation param angle the angle to rotate the transformation by exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='angle'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix Scale'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scaleX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='scaleY'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MatrixOrderPrepend'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='scale'></name><comment type='JavadocComment' content=' Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation scaled by scaleX scaleY param scaleX the amount to scale in the X direction param scaleY the amount to scale in the Y direction exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='scaleX'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='scaleY'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix SetElements'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='m11'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='m12'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='m21'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='m22'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dx'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dy'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setElements'></name><comment type='JavadocComment' content=' Modifies the receiver to represent a new transformation given all of the elements that represent the matrix that describes that transformation param m11 the first element of the first row of the matrix param m12 the second element of the first row of the matrix param m21 the first element of the second row of the matrix param m22 the second element of the second row of the matrix param dx the third element of the first row of the matrix param dy the third element of the second row of the matrix exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m11'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m12'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m21'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='m22'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dx'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dy'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pointArray'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix TransformPoints'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pointArray'></name></argument><argument type='BinaryExpr' operator='DIVIDE'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='pointArray'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='transform'></name><comment type='JavadocComment' content=' Given an array containing points described by alternating x and y values modify that array such that each point has been replaced with the result of applying the transformation represented by the receiver to that point param pointArray an array of alternating x and y values to be transformed exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the point array is null li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pointArray'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='FLOAT'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR GRAPHIC DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Matrix Translate'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='offsetX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='offsetY'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='MatrixOrderPrepend'></name><scope type='NameExpr'><name type='SimpleName' identifier='Gdip'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='translate'></name><comment type='JavadocComment' content=' Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation translated by offsetX offsetY param offsetX the distance to translate in the X direction param offsetY the distance to translate in the Y direction exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offsetX'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='offsetY'></name><type type='PrimitiveType' specificType='FLOAT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='StringLiteralExpr' value='Transform DISPOSED '></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='FLOAT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='6'></dimension></level></levels></initializer><name type='SimpleName' identifier='elements'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='FLOAT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getElements'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='elements'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Transform '></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></right></left><right type='StringLiteralExpr' value=' '></right></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='elements'></name></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the receiver '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
