<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='dnd'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='ole'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Clipboard'></name><comment type='JavadocComment' content=' The code Clipboard code provides a mechanism for transferring data from one application to another or within an application p IMPORTANT This class is em not em intended to be subclassed p '></comment><members><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></member><member type='FieldDeclaration'><comment type='LineComment' content=' ole interfaces'></comment><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='iDataObject'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='refCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='transferAgents'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='CFSTR PREFERREDDROPEFFECT'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkSubclass'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getCurrent'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDefault'></name><scope type='NameExpr'><name type='SimpleName' identifier='Display'></name></scope></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='currentThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR THREAD INVALID ACCESS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='display'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='StringLiteralExpr' value='Preferred DropEffect'></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='chFormatName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='CFSTR PREFERREDDROPEFFECT'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='RegisterClipboardFormat'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='chFormatName'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='createCOMInterfaces'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='ThisExpr'></scope></expression></statement></statements></body><name type='SimpleName' identifier='Clipboard'></name><comment type='JavadocComment' content=' Constructs a new instance of this class Creating an instance of a Clipboard may cause system resources to be allocated depending on the platform It is therefore mandatory that the Clipboard instance be disposed when no longer required param display the display on which to allocate the clipboard exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see Clipboard dispose see Clipboard checkSubclass '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClass'></name></scope></initializer><name type='SimpleName' identifier='name'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='ClassExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Clipboard'></name></type></scope></initializer><name type='SimpleName' identifier='validName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='validName'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='name'></name></argument></arguments></expression></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID SUBCLASS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkSubclass'></name><comment type='JavadocComment' content=' Checks that this class can be subclassed p The SWT class library is intended to be subclassed only at specific controlled points This method enforces this rule unless it is overridden p p em IMPORTANT em By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific No support is provided for user written classes which are implemented in this fashion p p The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy p exception SWTException ul li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='display'></name><scope type='ThisExpr'></scope></initializer><name type='SimpleName' identifier='display'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Display'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR WIDGET DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='currentThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR THREAD INVALID ACCESS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR WIDGET DISPOSED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkWidget'></name><comment type='JavadocComment' content=' Throws an code SWTException code if the receiver can not be accessed by the caller This may include both checks on the state of the receiver and more generally on the entire execution context This method em should em be called by widget implementors to enforce the standard SWT invariants p Currently it is an error to invoke any method other than code isDisposed code on a widget that has had its code dispose code method called It is also an error to call widget methods from any thread that is different from the thread that created the widget p p In future releases of SWT there may be more or fewer error checks and exceptions may be thrown for different reasons p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='clearContents'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='clearContents'></name><comment type='JavadocComment' content=' If this clipboard is currently the owner of the data on the system clipboard clear the contents If this clipboard is not the owner then nothing is done Note that there are clipboard assistant applications that take ownership of data or make copies of data when it is placed on the clipboard In these cases it may not be possible to clear the clipboard exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='clipboards'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='OleIsCurrentClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='iDataObject'></name><scope type='ThisExpr'></scope></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='OleSetClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='clearContents'></name><comment type='JavadocComment' content=' If this clipboard is currently the owner of the data on the specified clipboard clear the contents If this clipboard is not the owner then nothing is done p Note that there are clipboard assistant applications that take ownership of data or make copies of data when it is placed on the clipboard In these cases it may not be possible to clear the clipboard p p The clipboards value is either one of the clipboard constants defined in class code DND code or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code DND code clipboard constants p param clipboards to be cleared exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see DND CLIPBOARD see DND SELECTION CLIPBOARD since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='clipboards'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='display'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='currentThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR THREAD INVALID ACCESS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='OleIsCurrentClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='iDataObject'></name><scope type='ThisExpr'></scope></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='OleFlushClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='ThisExpr'></scope></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='display'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes of the operating system resources associated with the clipboard The data will still be available on the system clipboard after the dispose method is called p NOTE On some platforms the data will not be available once the application has exited or the display has been disposed p exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getContents'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='transfer'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type><name type='SimpleName' identifier='getContents'></name><comment type='JavadocComment' content=' Retrieve the data of the specified type currently available on the system clipboard Refer to the specific subclass of code Transfer code to determine the type of object returned p The following snippet shows text and RTF text being retrieved from the clipboard p code pre Clipboard clipboard new Clipboard display TextTransfer textTransfer TextTransfer getInstance String textData String clipboard getContents textTransfer if textData null System out println Text is textData RTFTransfer rtfTransfer RTFTransfer getInstance String rtfData String clipboard getContents rtfTransfer if rtfData null System out println RTF Text is rtfData clipboard dispose code pre param transfer the transfer agent for the type of data being requested return the data obtained from the clipboard or null if no data of this type is available exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if transfer is null li ul see Transfer '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='transfer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='transfer'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='clipboards'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppv'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression><comment type='BlockComment' content=' Bug in Windows When a new application takes control of the clipboard other applications may open the clipboard to determine if they want to record the clipoard updates When this happens the clipboard can not be accessed until the other application is finished To allow the other applications to release the clipboard use PeekMessage to enable cross thread message sends '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='retryCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='OleGetClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppv'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sleep'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope><arguments><argument type='IntegerLiteralExpr' value='50'></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='t'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></initializer><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PeekMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='PM NOREMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM NOYIELD'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='OleGetClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppv'></name></argument></arguments></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></left><right type='BinaryExpr' operator='LESS'><left type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='retryCount'></name></expression></left><right type='IntegerLiteralExpr' value='10'></right></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDataObject'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppv'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='dataObject'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDataObject'></name></type></variable></variables></expression></statement><statement type='TryStmt'><finallyBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataObject'></name></scope></expression></statement></statements></finallyBlock><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSupportedTypes'></name><scope type='NameExpr'><name type='SimpleName' identifier='transfer'></name></scope></initializer><name type='SimpleName' identifier='allowed'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='QueryGetData'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataObject'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowed'></name></name></scope></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowed'></name></name></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='pIDataObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppv'></name></name></value></expression></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='nativeToJava'></name><scope type='NameExpr'><name type='SimpleName' identifier='transfer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowed'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></tryBlock></statement><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression><comment type='LineComment' content=' No data available for this transfer'></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type><name type='SimpleName' identifier='getContents'></name><comment type='JavadocComment' content=' Retrieve the data of the specified type currently available on the specified clipboard Refer to the specific subclass of code Transfer code to determine the type of object returned p The following snippet shows text and RTF text being retrieved from the clipboard p code pre Clipboard clipboard new Clipboard display TextTransfer textTransfer TextTransfer getInstance String textData String clipboard getContents textTransfer if textData null System out println Text is textData RTFTransfer rtfTransfer RTFTransfer getInstance String rtfData String clipboard getContents rtfTransfer DND CLIPBOARD if rtfData null System out println RTF Text is rtfData clipboard dispose code pre p The clipboards value is either one of the clipboard constants defined in class code DND code or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code DND code clipboard constants p param transfer the transfer agent for the type of data being requested param clipboards on which to look for data return the data obtained from the clipboard or null if no data of this type is available exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if transfer is null li ul see Transfer see DND CLIPBOARD see DND SELECTION CLIPBOARD since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='transfer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='clipboards'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='display'></name></left><right type='NullLiteralExpr'></right></inner></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isDisposed'></name><comment type='JavadocComment' content=' Returns code true code if the clipboard has been disposed and code false code otherwise p This method gets the dispose state for the clipboard When a clipboard has been disposed it is an error to invoke any other method using the clipboard p return code true code when the widget is disposed and code false code otherwise since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setContents'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setContents'></name><comment type='JavadocComment' content=' Place data of the specified type on the system clipboard More than one type of data can be placed on the system clipboard at the same time Setting the data clears any previous data from the system clipboard regardless of type p NOTE On some platforms the data is immediately copied to the system clipboard but on other platforms it is provided upon request As a result if the application modifes the data object it has set on the clipboard that modification may or may not be available when the data is subsequently requested p p The following snippet shows text and RTF text being set on the copy paste clipboard p code pre Clipboard clipboard new Clipboard display String textData Hello World String rtfData rtf1 b i Hello World TextTransfer textTransfer TextTransfer getInstance RTFTransfer rtfTransfer RTFTransfer getInstance Transfer transfers new Transfer textTransfer rtfTransfer Object data new Object textData rtfData clipboard setContents data transfers clipboard dispose code pre param data the data to be set in the clipboard param dataTypes the transfer agents that will convert the data to its platform specific format each entry in the data array must have a corresponding dataType exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if data is null or datatypes is null or the length of data is not the same as the length of dataTypes li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul exception SWTError ul li ERROR CANNOT SET CLIPBOARD if the clipboard is locked or otherwise unavailable li ul p NOTE ERROR CANNOT SET CLIPBOARD should be an SWTException since it is a recoverable error but can not be changed due to backward compatability p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></left><right type='NullLiteralExpr'></right></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></scope></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></name></left><right type='NullLiteralExpr'></right></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='validate'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></argument></arguments></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='clipboards'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='data'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='transferAgents'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='dataTypes'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='OleSetClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='retryCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Bug in Windows When a new application takes control of the clipboard other applications may open the clipboard to determine if they want to record the clipoard updates When this happens the clipboard can not be flushed until the other application is finished To allow other applications to get the data use PeekMessage to enable cross thread message sends '></comment></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='sleep'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope><arguments><argument type='IntegerLiteralExpr' value='50'></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='t'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Throwable'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></initializer><name type='SimpleName' identifier='msg'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MSG'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='PeekMessage'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='msg'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='PM NOREMOVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='PM NOYIELD'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='OleSetClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></scope></argument></arguments></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></left><right type='BinaryExpr' operator='LESS'><left type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='retryCount'></name></expression></left><right type='IntegerLiteralExpr' value='10'></right></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR CANNOT SET CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='setContents'></name><comment type='JavadocComment' content=' Place data of the specified type on the specified clipboard More than one type of data can be placed on the specified clipboard at the same time Setting the data clears any previous data from the specified clipboard regardless of type p NOTE On some platforms the data is immediately copied to the specified clipboard but on other platforms it is provided upon request As a result if the application modifes the data object it has set on the clipboard that modification may or may not be available when the data is subsequently requested p p The clipboards value is either one of the clipboard constants defined in class code DND code or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code DND code clipboard constants p p The following snippet shows text and RTF text being set on the copy paste clipboard p code pre Clipboard clipboard new Clipboard display String textData Hello World String rtfData rtf1 b i Hello World TextTransfer textTransfer TextTransfer getInstance RTFTransfer rtfTransfer RTFTransfer getInstance Transfer transfers new Transfer textTransfer rtfTransfer Object data new Object textData rtfData clipboard setContents data transfers DND CLIPBOARD clipboard dispose code pre param data the data to be set in the clipboard param dataTypes the transfer agents that will convert the data to its platform specific format each entry in the data array must have a corresponding dataType param clipboards on which to set the data exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if data is null or datatypes is null or the length of data is not the same as the length of dataTypes li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul exception SWTError ul li ERROR CANNOT SET CLIPBOARD if the clipboard is locked or otherwise unavailable li ul p NOTE ERROR CANNOT SET CLIPBOARD should be an SWTException since it is a recoverable error but can not be changed due to backward compatability p see DND CLIPBOARD see DND SELECTION CLIPBOARD since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='clipboards'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='AddRef'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='COMObject'></name></type><anonymousClassBody><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='QueryInterface'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method0'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method1'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method2'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GetData'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method3'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='QueryGetData'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method5'></name><comment type='LineComment' content=' method4 GetDataHere not implemented '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod><anonymousClassBod type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='EnumFormatEtc'></name><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='args'></name></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='method8'></name><comment type='LineComment' content=' method7 SetData not implemented'></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></parameter></parameters></anonymousClassBod></anonymousClassBody><arguments><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='0'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='3'></value><value type='IntegerLiteralExpr' value='2'></value><value type='IntegerLiteralExpr' value='4'></value><value type='IntegerLiteralExpr' value='1'></value><value type='IntegerLiteralExpr' value='1'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument></arguments></value></expression><comment type='LineComment' content=' register each of the interfaces that this object implements'></comment></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='createCOMInterfaces'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='disposeCOMInterfaces'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dwDirection'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DATADIR SET'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E NOTIMPL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt><comment type='LineComment' content=' only allow getting of data SetData is not currently supported'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='allowedDataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression><comment type='LineComment' content=' what types have been registered '></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getSupportedTypes'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></name></scope></initializer><name type='SimpleName' identifier='formats'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='formats'></name></scope></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newAllowedDataTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newAllowedDataTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='formats'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newAllowedDataTypes'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='formats'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newAllowedDataTypes'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleEnumFORMATETC'></name></type></initializer><name type='SimpleName' identifier='enumFORMATETC'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OleEnumFORMATETC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFORMATETC'></name></scope></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='formats'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='formats'></name></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></name></scope></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='allowedDataTypes'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></type></initializer><name type='SimpleName' identifier='dropeffect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></type></variable></variables></expression><comment type='LineComment' content=' include the drop effect format to specify a copy operation'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cfFormat'></name><scope type='NameExpr'><name type='SimpleName' identifier='dropeffect'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='CFSTR PREFERREDDROPEFFECT'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='dwAspect'></name><scope type='NameExpr'><name type='SimpleName' identifier='dropeffect'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='DVASPECT CONTENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lindex'></name><scope type='NameExpr'><name type='SimpleName' identifier='dropeffect'></name></scope></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tymed'></name><scope type='NameExpr'><name type='SimpleName' identifier='dropeffect'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TYMED HGLOBAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='formats'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='formats'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='dropeffect'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setFormats'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFORMATETC'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='formats'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppenumFormatetc'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFORMATETC'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='EnumFormatEtc'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='dwDirection'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ppenumFormatetc'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pFormatetc'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='pmedium'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt><comment type='BlockComment' content=' Called by a data consumer to obtain data from a source data object The GetData method renders the data described in the specified FORMATETC structure and transfers it through the specified STGMEDIUM structure The caller then assumes responsibility for releasing the STGMEDIUM structure '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='QueryGetData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pFormatetc'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DV E FORMATETC'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></initializer><name type='SimpleName' identifier='transferData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='pFormatetc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='FORMATETC'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='cfFormat'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='stgmedium'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='STGMEDIUM'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='E FAIL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='CFSTR PREFERREDDROPEFFECT'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='STGMEDIUM'></name></type></initializer><name type='SimpleName' identifier='stgmedium'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='STGMEDIUM'></name></type></variable></variables></expression><comment type='LineComment' content=' specify that a copy operation is to be performed'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='tymed'></name><scope type='NameExpr'><name type='SimpleName' identifier='stgmedium'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='TYMED HGLOBAL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='unionField'></name><scope type='NameExpr'><name type='SimpleName' identifier='stgmedium'></name></scope></target><value type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='unionField'></name><scope type='NameExpr'><name type='SimpleName' identifier='stgmedium'></name></scope></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='FieldAccessExpr'><name type='SimpleName' identifier='DROPEFFECT COPY'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='pUnkForRelease'></name><scope type='NameExpr'><name type='SimpleName' identifier='stgmedium'></name></scope></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pmedium'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stgmedium'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='STGMEDIUM'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></initializer><name type='SimpleName' identifier='transferIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' get matching transfer agent to perform conversion'></comment></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isSupportedType'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='transferData'></name></argument></arguments></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='transferIndex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='i'></name></value></expression></statement><statement type='BreakStmt'></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='transferIndex'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DV E FORMATETC'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='javaToNative'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='transferIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='transferIndex'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='transferData'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pmedium'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='stgmedium'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='STGMEDIUM'></name></scope></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='result'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='GetData'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pFormatetc'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pmedium'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E FAIL'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></initializer><name type='SimpleName' identifier='transferData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='pFormatetc'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='FORMATETC'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='cfFormat'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferData'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='CFSTR PREFERREDDROPEFFECT'></name></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isSupportedType'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='transferData'></name></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='transferAgents'></name></scope></right></compare><comment type='LineComment' content=' is this type supported by the transfer agent '></comment><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='DV E FORMATETC'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='QueryGetData'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pFormatetc'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='riid'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E INVALIDARG'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></initializer><name type='SimpleName' identifier='guid'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='GUID'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='riid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='GUID'></name></scope></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIUnknown'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='IsEqualGUID'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='guid'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='IIDIDataObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument></arguments></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='getAddress'></name><scope type='NameExpr'><name type='SimpleName' identifier='iDataObject'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='AddRef'></name></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppvObject'></name></argument><argument type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='0'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></argument><argument type='IntegerLiteralExpr' value='4'></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='E NOINTERFACE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='QueryInterface'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='riid'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ppvObject'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX DECREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='refCount'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='ThisExpr'></scope></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='transferAgents'></name><scope type='ThisExpr'></scope></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Transfer'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='disposeCOMInterfaces'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='CoFreeUnusedLibraries'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='refCount'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='Release'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getAvailableTypes'></name><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></argument></arguments></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type><name type='SimpleName' identifier='getAvailableTypes'></name><comment type='JavadocComment' content=' Returns an array of the data types currently available on the system clipboard Use with Transfer isSupportedType return array of data types currently available on the system clipboard exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Transfer isSupportedType since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='clipboards'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CLIPBOARD'></name><scope type='NameExpr'><name type='SimpleName' identifier='DND'></name></scope></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier=' getAvailableTypes'></name></initializer><name type='SimpleName' identifier='types'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='types'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='type'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='cfFormat'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='types'></name></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='formatetc'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></scope></target><value type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='types'></name></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='types'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='TransferData'></name></componentType></type><name type='SimpleName' identifier='getAvailableTypes'></name><comment type='JavadocComment' content=' Returns an array of the data types currently available on the specified clipboard Use with Transfer isSupportedType p The clipboards value is either one of the clipboard constants defined in class code DND code or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code DND code clipboard constants p param clipboards from which to get the data types return array of data types currently available on the specified clipboard exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Transfer isSupportedType see DND CLIPBOARD see DND SELECTION CLIPBOARD since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='clipboards'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='checkWidget'></name></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier=' getAvailableTypes'></name></initializer><name type='SimpleName' identifier='types'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='types'></name></scope></dimension></level></levels></initializer><name type='SimpleName' identifier='names'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='128'></initializer><name type='SimpleName' identifier='maxSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='maxSize'></name></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetClipboardFormatName'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='cfFormat'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='types'></name></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maxSize'></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='size'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><elseStmt type='BlockStmt'><statements><statement type='SwitchStmt'><selector type='FieldAccessExpr'><name type='SimpleName' identifier='cfFormat'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='types'></name></name></scope></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF HDROP'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF HDROP'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF TEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF TEXT'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF BITMAP'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF BITMAP'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF METAFILEPICT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF METAFILEPICT'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF SYLK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF SYLK'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF DIF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF DIF'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF TIFF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF TIFF'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF OEMTEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF OEMTEXT'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF DIB'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF DIB'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF PALETTE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF PALETTE'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF PENDATA'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF PENDATA'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF RIFF'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF RIFF'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF WAVE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF WAVE'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF UNICODETEXT'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF UNICODETEXT'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF ENHMETAFILE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF ENHMETAFILE'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF LOCALE'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF LOCALE'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CF MAX'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='CF MAX'></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><comment type='LineComment' content=' NON NLS 1 '></comment><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='StringLiteralExpr' value='UNKNOWN'></value></expression></statement></statements></entrie></entries></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='names'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='size'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='types'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='names'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type><name type='SimpleName' identifier='getAvailableTypeNames'></name><comment type='JavadocComment' content=' Returns a platform specific list of the data types currently available on the system clipboard p Note code getAvailableTypeNames code is a utility for writing a Transfer sub class It should NOT be used within an application because it provides platform specific information p return a platform specific list of the data types currently available on the system clipboard exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='0'></dimension></level></levels></initializer><name type='SimpleName' identifier='types'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppv'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='OleGetClipboard'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='ppv'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='types'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDataObject'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppv'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='dataObject'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IDataObject'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='ppFormatetc'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='EnumFormatEtc'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataObject'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='DATADIR GET'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='ppFormatetc'></name></argument></arguments></initializer><name type='SimpleName' identifier='rc'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='dataObject'></name></scope></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rc'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='types'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumFORMATETC'></name></type><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='ppFormatetc'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='enumFormatetc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IEnumFORMATETC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GlobalAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='BinaryExpr' operator='BINARY OR'><left type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM FIXED'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='GMEM ZEROINIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='FORMATETC'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='rgelt'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Loop over enumerator and save any types that match what we are looking for'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='pceltFetched'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Reset'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFormatetc'></name></scope></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></type></initializer><name type='SimpleName' identifier='formatetc'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='formatetc'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgelt'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='FORMATETC'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='types'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newTypes'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='types'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newTypes'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='types'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='types'></name></scope></index><name type='NameExpr'><name type='SimpleName' identifier='newTypes'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='formatetc'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='types'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newTypes'></name></value></expression></statement></statements></body><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='Next'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFormatetc'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument><argument type='NameExpr'><name type='SimpleName' identifier='rgelt'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='S OK'></name><scope type='NameExpr'><name type='SimpleName' identifier='COM'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='pceltFetched'></name></name></left><right type='IntegerLiteralExpr' value='1'></right></right></condition></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='GlobalFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rgelt'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='Release'></name><scope type='NameExpr'><name type='SimpleName' identifier='enumFormatetc'></name></scope></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='types'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FORMATETC'></name></componentType></type><name type='SimpleName' identifier=' getAvailableTypes'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
