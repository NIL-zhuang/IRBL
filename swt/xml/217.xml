<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='OS2BMPFileFormat'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='FileFormat'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='14'></initializer><name type='SimpleName' identifier='BMPFileHeaderSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='12'></initializer><name type='SimpleName' identifier='BMPHeaderFixedSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><name type='SimpleName' identifier='bitCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='18'></dimension></level></levels></initializer><name type='SimpleName' identifier='header'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='header'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unread'></name><scope type='NameExpr'><name type='SimpleName' identifier='stream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='header'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='14'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='15'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='16'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='17'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='24'></right></inner></right></initializer><name type='SimpleName' identifier='infoHeaderSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></left><right type='IntegerLiteralExpr' value='0x42'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></left><right type='IntegerLiteralExpr' value='0x4D'></right></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='infoHeaderSize'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BMPHeaderFixedSize'></name></right></right></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isFileFormat'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stream'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='LEDataInputStream'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bitCount'></name></right></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='stride'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='stride'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='stride'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></left><right type='IntegerLiteralExpr' value='4'></right></value></expression><comment type='LineComment' content=' Round up to 4 byte multiple'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='loadData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stride'></name></argument></arguments></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='flipScanLines'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='stride'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='loadData'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='infoHeader'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='NameExpr'><name type='SimpleName' identifier='stride'></name></right></initializer><name type='SimpleName' identifier='dataSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='dataSize'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></left><right type='NameExpr'><name type='SimpleName' identifier='dataSize'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='loadData'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='infoHeader'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stride'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='5'></dimension></level></levels></initializer><name type='SimpleName' identifier='header'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='readInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='header'></name></name></left><right type='IntegerLiteralExpr' value='0x4D42'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='header'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type><name type='SimpleName' identifier='loadFileHeader'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='loadFileHeader'></name></initializer><name type='SimpleName' identifier='fileHeader'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='BMPHeaderFixedSize'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='infoHeader'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Exception'></name></type></parameter></catchClause></catchClauses></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='width'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='5'></index><name type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='height'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='6'></index><name type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='7'></index><name type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bitCount'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='10'></index><name type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='11'></index><name type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='loadPalette'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></argument></arguments></initializer><name type='SimpleName' identifier='palette'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getPosition'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></left><right type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='skip'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='BinaryExpr' operator='MINUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='getPosition'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope></right></argument></arguments></expression></statement></statements></tryBlock><comment type='LineComment' content=' Seek to the specified offset'></comment><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='loadData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='infoHeader'></name></argument></arguments></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='IMAGE OS2 BMP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></initializer><name type='SimpleName' identifier='type'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='internal new'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageData'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bitCount'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='palette'></name></argument><argument type='IntegerLiteralExpr' value='4'></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></argument><argument type='NameExpr'><name type='SimpleName' identifier='type'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></componentType></type><name type='SimpleName' identifier='loadFromByteStream'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bitCount'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='bitCount'></name></right></initializer><name type='SimpleName' identifier='numColors'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='numColors'></name></left><right type='IntegerLiteralExpr' value='3'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='read'></name><scope type='NameExpr'><name type='SimpleName' identifier='inputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buf'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='paletteFromBytes'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='numColors'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bitCount'></name></left><right type='IntegerLiteralExpr' value='16'></right></condition><thenStmt type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='IntegerLiteralExpr' value='0x7C00'></argument><argument type='IntegerLiteralExpr' value='0x3E0'></argument><argument type='IntegerLiteralExpr' value='0x1F'></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bitCount'></name></left><right type='IntegerLiteralExpr' value='24'></right></condition><thenStmt type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='IntegerLiteralExpr' value='0xFF'></argument><argument type='IntegerLiteralExpr' value='0xFF00'></argument><argument type='IntegerLiteralExpr' value='0xFF0000'></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='IntegerLiteralExpr' value='0xFF00'></argument><argument type='IntegerLiteralExpr' value='0xFF0000'></argument><argument type='IntegerLiteralExpr' value='0xFF000000'></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><name type='SimpleName' identifier='loadPalette'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='infoHeader'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bytesOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='numColors'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='colors'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='colors'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type><arguments><argument type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bytesOffset'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></argument><argument type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bytesOffset'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></argument><argument type='BinaryExpr' operator='BINARY AND'><left type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='bytesOffset'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='bytesOffset'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='numColors'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='colors'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type><name type='SimpleName' identifier='paletteFromBytes'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='numColors'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='pal'></name></scope></left><right type='NullLiteralExpr'></right></condition><elseExpr type='EnclosedExpr'><inner type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='pal'></name></scope></scope></left><right type='IntegerLiteralExpr' value='256'></right></condition><elseExpr type='IntegerLiteralExpr' value='256'></elseExpr><thenExpr type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='pal'></name></scope></scope></thenExpr></inner></elseExpr><thenExpr type='IntegerLiteralExpr' value='0'></thenExpr></initializer><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='3'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='bytes'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='offset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='pal'></name></scope></name></initializer><name type='SimpleName' identifier='col'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RGB'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='offset'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></target><value type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='blue'></name><scope type='NameExpr'><name type='SimpleName' identifier='col'></name></scope></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></target><value type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='green'></name><scope type='NameExpr'><name type='SimpleName' identifier='col'></name></scope></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='offset'></name></left><right type='IntegerLiteralExpr' value='2'></right></index><name type='NameExpr'><name type='SimpleName' identifier='bytes'></name></name></target><value type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='red'></name><scope type='NameExpr'><name type='SimpleName' identifier='col'></name></scope></expression><type type='PrimitiveType' specificType='BYTE'></type></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='offset'></name></target><value type='IntegerLiteralExpr' value='3'></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='n'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='bytes'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type><name type='SimpleName' identifier='paletteToBytes'></name><comment type='JavadocComment' content=' Answer a byte array containing the BMP representation of the given device independent palette '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='pal'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bmpBpl'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></right></left><right type='IntegerLiteralExpr' value='7'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></initializer><name type='SimpleName' identifier='bpl'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bmpBpl'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='BinaryExpr' operator='DIVIDE'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bpl'></name></left><right type='IntegerLiteralExpr' value='3'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></left><right type='IntegerLiteralExpr' value='4'></right></value></expression><comment type='LineComment' content=' BMP pads scanlines to multiples of 4 bytes'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='IntegerLiteralExpr' value='32678'></left><right type='NameExpr'><name type='SimpleName' identifier='bmpBpl'></name></right></initializer><name type='SimpleName' identifier='linesPerBuf'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BYTE'></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='linesPerBuf'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bmpBpl'></name></right></dimension></level></levels></initializer><name type='SimpleName' identifier='buf'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='bytesPerLine'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></initializer><name type='SimpleName' identifier='imageBpl'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='imageBpl'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></initializer><name type='SimpleName' identifier='dataIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Start at last line'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='16'></right></condition><elseStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='y'></name></right></initializer><name type='SimpleName' identifier='tmp'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ConditionalExpr'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='tmp'></name></left><right type='NameExpr'><name type='SimpleName' identifier='linesPerBuf'></name></right></condition><elseExpr type='NameExpr'><name type='SimpleName' identifier='linesPerBuf'></name></elseExpr><thenExpr type='NameExpr'><name type='SimpleName' identifier='tmp'></name></thenExpr></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bufOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='dataIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bufOffset'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='bpl'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='bufOffset'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bmpBpl'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='dataIndex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='imageBpl'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='out'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bufOffset'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='y'></name></target><value type='NameExpr'><name type='SimpleName' identifier='linesPerBuf'></name></value></updat></update></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='y'></name></right></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='linesPerBuf'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='count'></name></target><value type='NameExpr'><name type='SimpleName' identifier='linesPerBuf'></name></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='bufOffset'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bufOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='wIndex'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dataIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='wIndex'></name></right></left><right type='IntegerLiteralExpr' value='1'></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='bufOffset'></name></left><right type='NameExpr'><name type='SimpleName' identifier='wIndex'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='buf'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='dataIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='wIndex'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='wIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='bpl'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='wIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='wIndex'></name></target><value type='IntegerLiteralExpr' value='2'></value></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='bufOffset'></name></target><value type='NameExpr'><name type='SimpleName' identifier='bmpBpl'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='dataIndex'></name></target><value type='NameExpr'><name type='SimpleName' identifier='imageBpl'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='count'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='out'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='buf'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='bufOffset'></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='y'></name></target><value type='NameExpr'><name type='SimpleName' identifier='linesPerBuf'></name></value></updat></update></statement></statements></thenStmt></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='bmpBpl'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='unloadData'></name><comment type='JavadocComment' content=' Unload the given image s data into the given byte stream Answer the number of bytes written '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='out'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OutputStream'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='rgbs'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='numCols'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='4'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='24'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='32'></right></inner></right></inner></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR UNSUPPORTED DEPTH'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='palette'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></initializer><name type='SimpleName' identifier='pal'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PaletteData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='24'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></left><right type='IntegerLiteralExpr' value='32'></right></inner></right></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='isDirect'></name><scope type='NameExpr'><name type='SimpleName' identifier='pal'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='numCols'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='colors'></name><scope type='NameExpr'><name type='SimpleName' identifier='pal'></name></scope></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='paletteToBytes'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='pal'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='isDirect'></name><scope type='NameExpr'><name type='SimpleName' identifier='pal'></name></scope></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='numCols'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='BMPFileHeaderSize'></name></left><right type='NameExpr'><name type='SimpleName' identifier='BMPHeaderFixedSize'></name></right></initializer><name type='SimpleName' identifier='headersSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' Fill in file header except for bfsize which is done later '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='5'></dimension></level></levels></initializer><name type='SimpleName' identifier='fileHeader'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></target><value type='IntegerLiteralExpr' value='0x4D42'></value></expression><comment type='LineComment' content=' Signature'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression><comment type='LineComment' content=' File size filled in later'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression><comment type='LineComment' content=' Reserved 1'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></target><value type='IntegerLiteralExpr' value='0'></value></expression><comment type='LineComment' content=' Reserved 2'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='headersSize'></name></value></expression><comment type='LineComment' content=' Offset to data'></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ByteArrayOutputStream'></name></type></initializer><name type='SimpleName' identifier='out'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ByteArrayOutputStream'></name></type></variable></variables></expression><comment type='LineComment' content=' the stream and fill in the details later '></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='unloadData'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='image'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='out'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toByteArray'></name><scope type='NameExpr'><name type='SimpleName' identifier='out'></name></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></target><value type='BinaryExpr' operator='PLUS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></right></value></expression><comment type='LineComment' content=' Calculate file size'></comment></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='3'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='4'></index><name type='NameExpr'><name type='SimpleName' identifier='fileHeader'></name></name></argument></arguments></expression></statement></statements></tryBlock><comment type='LineComment' content=' Write the headers'></comment><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='BMPHeaderFixedSize'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='IntegerLiteralExpr' value='1'></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='writeShort'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='CastExpr'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></expression><type type='PrimitiveType' specificType='SHORT'></type></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='numCols'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='rgbs'></name></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt><comment type='LineComment' content=' Unload palette'></comment></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='write'></name><scope type='NameExpr'><name type='SimpleName' identifier='outputStream'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument></arguments></expression></statement></statements></tryBlock><comment type='LineComment' content=' Unload the data'></comment><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR IO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument></arguments></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='unloadIntoByteStream'></name><comment type='JavadocComment' content=' Unload a DeviceIndependentImage using Windows BMP format into the given byte stream '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='stride'></name></right></initializer><name type='SimpleName' identifier='i2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i1'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></initializer><name type='SimpleName' identifier='b'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i1'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i2'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i2'></name></right></index><name type='NameExpr'><name type='SimpleName' identifier='data'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='b'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='NameExpr'><name type='SimpleName' identifier='stride'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='index'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='i1'></name></target><value type='NameExpr'><name type='SimpleName' identifier='stride'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='MINUS'><target type='NameExpr'><name type='SimpleName' identifier='i2'></name></target><value type='NameExpr'><name type='SimpleName' identifier='stride'></name></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='2'></right></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='flipScanLines'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='stride'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
