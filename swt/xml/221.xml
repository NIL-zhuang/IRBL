<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='image'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2003 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='PngDecodingDataStream'></name><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='currentChunk'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIdatChunk'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='chunkReader'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunkReader'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='currentByte'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='nextByteIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='nextBitIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='lzBlockReader'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngLzBlockReader'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='adlerValue'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='65521'></initializer><name type='SimpleName' identifier='PRIME'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='7'></initializer><name type='SimpleName' identifier='MAX BIT'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExplicitConstructorInvocationStmt' isThis='false'></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='currentChunk'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='idatChunk'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='chunkReader'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='chunkReader'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nextByteIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nextBitIndex'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='MAX BIT'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='adlerValue'></name></target><value type='IntegerLiteralExpr' value='1'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lzBlockReader'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngLzBlockReader'></name></type><arguments><argument type='ThisExpr'></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readCompressedDataHeader'></name></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='readNextBlockHeader'></name><scope type='NameExpr'><name type='SimpleName' identifier='lzBlockReader'></name></scope></expression></statement></statements></body><name type='SimpleName' identifier='PngDecodingDataStream'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='idatChunk'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIdatChunk'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='chunkReader'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunkReader'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='assertCompressedDataAtEnd'></name><scope type='NameExpr'><name type='SimpleName' identifier='lzBlockReader'></name></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='assertImageDataAtEnd'></name><comment type='JavadocComment' content=' This method should be called when the image decoder thinks that all of the compressed image data has been read This method will ensure that the next data value is an end of block marker If there are more blocks after this one the method will read them and ensure that they are empty '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='BINARY OR'><target type='NameExpr'><name type='SimpleName' identifier='value'></name></target><value type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatBit'></name></left><right type='NameExpr'><name type='SimpleName' identifier='i'></name></right></inner></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='value'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='getNextIdatBits'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='nextBitIndex'></name></left><right type='NameExpr'><name type='SimpleName' identifier='MAX BIT'></name></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nextBitIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='NameExpr'><name type='SimpleName' identifier='nextBitIndex'></name></right></initializer><name type='SimpleName' identifier='mask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='nextBitIndex'></name></expression></expression></statement><statement type='ReturnStmt'><expression type='ConditionalExpr'><condition type='EnclosedExpr'><inner type='BinaryExpr' operator='GREATER'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='currentByte'></name></left><right type='NameExpr'><name type='SimpleName' identifier='mask'></name></right></inner></left><right type='IntegerLiteralExpr' value='0'></right></inner></condition><elseExpr type='CastExpr'><expression type='IntegerLiteralExpr' value='0'></expression><type type='PrimitiveType' specificType='BYTE'></type></elseExpr><thenExpr type='CastExpr'><expression type='IntegerLiteralExpr' value='1'></expression><type type='PrimitiveType' specificType='BYTE'></type></thenExpr></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getNextIdatBit'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='readNextChunk'></name><scope type='NameExpr'><name type='SimpleName' identifier='chunkReader'></name></scope></initializer><name type='SimpleName' identifier='chunk'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngChunk'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='chunk'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getChunkType'></name><scope type='NameExpr'><name type='SimpleName' identifier='chunk'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CHUNK IDAT'></name><scope type='NameExpr'><name type='SimpleName' identifier='PngChunk'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='chunk'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIdatChunk'></name></type></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='PngIdatChunk'></name></type><name type='SimpleName' identifier='getNextChunk'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='nextByteIndex'></name></left><right type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getLength'></name><scope type='NameExpr'><name type='SimpleName' identifier='currentChunk'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='currentChunk'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getNextChunk'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nextByteIndex'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getDataByteAtOffset'></name><scope type='NameExpr'><name type='SimpleName' identifier='currentChunk'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='nextByteIndex'></name></argument></arguments></initializer><name type='SimpleName' identifier='nextByte'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='nextByteIndex'></name></expression></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nextBitIndex'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='MAX BIT'></name></left><right type='IntegerLiteralExpr' value='1'></right></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='nextByte'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getNextIdatByte'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='adlerValue'></name></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></initializer><name type='SimpleName' identifier='low'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='adlerValue'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='IntegerLiteralExpr' value='0xFFFF'></right></initializer><name type='SimpleName' identifier='high'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='value'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></initializer><name type='SimpleName' identifier='valueInt'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='low'></name></target><value type='BinaryExpr' operator='REMAINDER'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='low'></name></left><right type='NameExpr'><name type='SimpleName' identifier='valueInt'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='PRIME'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='high'></name></target><value type='BinaryExpr' operator='REMAINDER'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='low'></name></left><right type='NameExpr'><name type='SimpleName' identifier='high'></name></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='PRIME'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='adlerValue'></name></target><value type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='NameExpr'><name type='SimpleName' identifier='high'></name></left><right type='IntegerLiteralExpr' value='16'></right></inner></left><right type='NameExpr'><name type='SimpleName' identifier='low'></name></right></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='updateAdler'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='value'></name><type type='PrimitiveType' specificType='BYTE'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextByte'></name><scope type='NameExpr'><name type='SimpleName' identifier='lzBlockReader'></name></scope></initializer><name type='SimpleName' identifier='nextDecodedByte'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='updateAdler'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='nextDecodedByte'></name></argument></arguments></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='nextDecodedByte'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BYTE'></type><name type='SimpleName' identifier='getNextDecodedByte'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID IMAGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='error'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name></initializer><name type='SimpleName' identifier='headerByte1'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name></initializer><name type='SimpleName' identifier='headerByte2'></name><type type='PrimitiveType' specificType='BYTE'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='headerByte1'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='headerByte2'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></initializer><name type='SimpleName' identifier='number'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='number'></name></left><right type='IntegerLiteralExpr' value='31'></right></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='headerByte1'></name></left><right type='IntegerLiteralExpr' value='0x0F'></right></initializer><name type='SimpleName' identifier='compressionMethod'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='compressionMethod'></name></left><right type='IntegerLiteralExpr' value='8'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='SIGNED RIGHT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='headerByte1'></name></left><right type='IntegerLiteralExpr' value='0xF0'></right></inner></left><right type='IntegerLiteralExpr' value='4'></right></initializer><name type='SimpleName' identifier='windowSizeHint'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='GREATER'><left type='NameExpr'><name type='SimpleName' identifier='windowSizeHint'></name></left><right type='IntegerLiteralExpr' value='7'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='windowSizeHint'></name></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></inner></initializer><name type='SimpleName' identifier='windowSize'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setWindowSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='lzBlockReader'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='windowSize'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='NameExpr'><name type='SimpleName' identifier='headerByte2'></name></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='1'></left><right type='IntegerLiteralExpr' value='5'></right></inner></right></inner></initializer><name type='SimpleName' identifier='dictionary'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='dictionary'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='readCompressedDataHeader'></name><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='BinaryExpr' operator='BINARY OR'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='24'></right></inner></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='16'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='LEFT SHIFT'><left type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></left><right type='IntegerLiteralExpr' value='8'></right></inner></right></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='BINARY AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='getNextIdatByte'></name></left><right type='IntegerLiteralExpr' value='0xFF'></right></inner></right></initializer><name type='SimpleName' identifier='storedAdler'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='storedAdler'></name></left><right type='NameExpr'><name type='SimpleName' identifier='adlerValue'></name></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name></expression></thenStmt></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='checkAdler'></name></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>
