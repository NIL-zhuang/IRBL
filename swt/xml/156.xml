<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Cursor'></name><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Resource'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' the handle to the OS cursor resource Warning This field is platform dependent p b IMPORTANT b This field is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be accessed from application code p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='isIcon'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' data used to create a HAND cursor '></comment><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf9'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x3f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x07'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x03'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x10'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x7f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x7f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x80'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x7f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xc0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x7f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xe0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x7f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x7f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xf8'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xfc'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x01'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='HAND SOURCE'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ArrayInitializerExpr'><values><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x06'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x06'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x06'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x06'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x06'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xc0'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x06'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xd8'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x06'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xd8'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x07'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xdb'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x67'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xfb'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x3f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x1f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x0f'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x07'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xff'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x03'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0xfe'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value><value type='CastExpr'><expression type='IntegerLiteralExpr' value='0x00'></expression><type type='PrimitiveType' specificType='BYTE'></type></value></values></initializer><name type='SimpleName' identifier='HAND MASK'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='Cursor'></name><comment type='JavadocComment' content=' Prevents uninitialized instances from being created outside the package '></comment></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='lpCursorName'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='SwitchStmt'><selector type='NameExpr'><name type='SimpleName' identifier='style'></name></selector><entries><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR HAND'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC HAND'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR ARROW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC ARROW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR WAIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC WAIT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR CROSS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC CROSS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR APPSTARTING'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC APPSTARTING'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR HELP'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC HELP'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZEALL'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZEALL'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZENESW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENESW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZENS'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZENWSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENWSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZEWE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZEWE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZEN'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZEE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZEWE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZEW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZEWE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZENE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENESW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZESE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENWSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZESW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENESW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR SIZENW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC SIZENWSE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR UPARROW'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC UPARROW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR IBEAM'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC IBEAM'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><labels><label type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR NO'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></label></labels><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='IDC NO'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='BreakStmt'></statement></statements></entrie><entrie type='SwitchEntry' specificType='STATEMENT GROUP'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></entrie></entries></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='LoadCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpCursorName'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='style'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='CURSOR HAND'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SM CXCURSOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetSystemMetrics'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='SM CYCURSOR'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument></arguments></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='IntegerLiteralExpr' value='32'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='IntegerLiteralExpr' value='32'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetModuleHandle'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hInst'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hInst'></name></argument><argument type='IntegerLiteralExpr' value='5'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='32'></argument><argument type='IntegerLiteralExpr' value='32'></argument><argument type='NameExpr'><name type='SimpleName' identifier='HAND SOURCE'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='HAND MASK'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt><comment type='BlockComment' content=' IDC HAND is supported only on Windows 2000 and Windows 98 Create a hand cursor if running in other Windows platforms '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='Cursor'></name><comment type='JavadocComment' content=' Constructs a new cursor given a device and a style constant describing the desired cursor appearance p You must dispose the cursor when it is no longer required p param device the device on which to allocate the cursor param style the style of cursor to allocate exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li li ERROR INVALID ARGUMENT when an unknown style is specified li ul exception SWTError ul li ERROR NO HANDLES if a handle could not be obtained for cursor creation li ul see SWT CURSOR ARROW see SWT CURSOR WAIT see SWT CURSOR CROSS see SWT CURSOR APPSTARTING see SWT CURSOR HELP see SWT CURSOR SIZEALL see SWT CURSOR SIZENESW see SWT CURSOR SIZENS see SWT CURSOR SIZENWSE see SWT CURSOR SIZEWE see SWT CURSOR SIZEN see SWT CURSOR SIZES see SWT CURSOR SIZEE see SWT CURSOR SIZEW see SWT CURSOR SIZENE see SWT CURSOR SIZESE see SWT CURSOR SIZESW see SWT CURSOR SIZENW see SWT CURSOR UPARROW see SWT CURSOR IBEAM see SWT CURSOR NO see SWT CURSOR HAND '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='style'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='source'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='mask'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getTransparencyType'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='TRANSPARENCY MASK'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getTransparencyMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></right></left><right type='BinaryExpr' operator='NOT EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Check the bounds Mask must be the same size as source '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotX'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotX'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotY'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotY'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Check the hotspots '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='mask'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='convertMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageData'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='mask'></name></argument></arguments></value></expression><comment type='BlockComment' content=' Convert depth to 1 '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='source'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='convertMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageData'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='source'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='convertPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageData'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='scanlinePad'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></initializer><name type='SimpleName' identifier='sourceData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression><comment type='BlockComment' content=' Make sure source and mask scanline pad is 2 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='convertPad'></name><scope type='NameExpr'><name type='SimpleName' identifier='ImageData'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='data'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='depth'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='scanlinePad'></name><scope type='NameExpr'><name type='SimpleName' identifier='mask'></name></scope></argument><argument type='IntegerLiteralExpr' value='2'></argument></arguments></initializer><name type='SimpleName' identifier='maskData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BYTE'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetModuleHandle'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NullLiteralExpr'></argument></arguments></initializer><name type='SimpleName' identifier='hInst'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Create the cursor '></comment></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NOT IMPLEMENTED'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hInst'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hotspotX'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hotspotY'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='sourceData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='maskData'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='Cursor'></name><comment type='JavadocComment' content=' Constructs a new cursor given a device image and mask data describing the desired cursor appearance and the x and y coordinates of the em hotspot em that is the point within the area covered by the cursor which is considered to be where the on screen pointer is pointing p The mask data is allowed to be null but in this case the source must be an ImageData representing an icon that specifies both color data and mask data p You must dispose the cursor when it is no longer required p param device the device on which to allocate the cursor param source the color data for the cursor param mask the mask data for the cursor or null param hotspotX the x coordinate of the cursor s hotspot param hotspotY the y coordinate of the cursor s hotspot exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li li ERROR NULL ARGUMENT if the source is null li li ERROR NULL ARGUMENT if the mask is null and the source does not have a mask li li ERROR INVALID ARGUMENT if the source and the mask are not the same size or if the hotspot is outside the bounds of the image li ul exception SWTError ul li ERROR NO HANDLES if a handle could not be obtained for cursor creation li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='source'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='mask'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hotspotX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hotspotY'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='ThisExpr'></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='source'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotX'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotX'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></left><right type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotY'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></right></right></left><right type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='hotspotY'></name></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt><comment type='BlockComment' content=' Check the hotspots '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getTransparencyMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='source'></name></scope></initializer><name type='SimpleName' identifier='mask'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='init'></name><scope type='NameExpr'><name type='SimpleName' identifier='Image'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='device'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='source'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='mask'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></initializer><name type='SimpleName' identifier='hBitmap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='result'></name></name></initializer><name type='SimpleName' identifier='hMask'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ICONINFO'></name></type></initializer><name type='SimpleName' identifier='info'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ICONINFO'></name></type></variable></variables></expression><comment type='BlockComment' content=' Create the icon '></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='fIcon'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hbmColor'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hBitmap'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='hbmMask'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hMask'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='xHotspot'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hotspotX'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='yHotspot'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hotspotY'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='CreateIconIndirect'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='info'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO HANDLES'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hBitmap'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DeleteObject'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hMask'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='isIcon'></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='new Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement></statements></body><name type='SimpleName' identifier='Cursor'></name><comment type='JavadocComment' content=' Constructs a new cursor given a device image data describing the desired cursor appearance and the x and y coordinates of the em hotspot em that is the point within the area covered by the cursor which is considered to be where the on screen pointer is pointing p You must dispose the cursor when it is no longer required p param device the device on which to allocate the cursor param source the image data for the cursor param hotspotX the x coordinate of the cursor s hotspot param hotspotY the y coordinate of the cursor s hotspot exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li li ERROR NULL ARGUMENT if the image is null li li ERROR INVALID ARGUMENT if the hotspot is outside the bounds of the image li ul exception SWTError ul li ERROR NO HANDLES if a handle could not be obtained for cursor creation li ul since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='source'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hotspotX'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hotspotY'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ReturnStmt'></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='isIcon'></name></condition><elseStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DestroyCursor'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></expression></thenStmt><comment type='BlockComment' content=' The MSDN states that one should not destroy a shared cursor that is one obtained from LoadCursor However it does not appear to do any harm so rather than keep track of how a cursor was created we just destroy them all If this causes problems in the future put the flag back in '></comment></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='DestroyIcon'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='handle'></name></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='handle'></name></target><value type='IntegerLiteralExpr' value='0'></value></expression></statement><statement type='IfStmt'><condition type='FieldAccessExpr'><name type='SimpleName' identifier='tracking'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose Object'></name><scope type='NameExpr'><name type='SimpleName' identifier='device'></name></scope><arguments><argument type='ThisExpr'></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='NullLiteralExpr'></value></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='dispose'></name><comment type='JavadocComment' content=' Disposes of the operating system resources associated with the cursor Applications must dispose of all cursors which they allocate '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='object'></name></left><right type='ThisExpr'></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='EnclosedExpr'><inner type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Cursor'></name></type></inner></expression></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='object'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Cursor'></name></type></initializer><name type='SimpleName' identifier='cursor'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Cursor'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursor'></name></scope></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursor'></name></scope></right></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='equals'></name><comment type='JavadocComment' content=' Compares the argument to the receiver and returns true if they represent the em same em object using a class specific comparison param object the object to compare with this object return code true code if the object is the same as this object and code false code otherwise see hashCode '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='object'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='handle'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='hashCode'></name><comment type='JavadocComment' content=' Returns an integer hash code for the receiver Any two objects that return code true code when passed to code equals code must return the same value for this method return the receiver s hash see equals '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='handle'></name></left><right type='IntegerLiteralExpr' value='0'></right></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isDisposed'></name><comment type='JavadocComment' content=' Returns code true code if the cursor has been disposed and code false code otherwise p This method gets the dispose state for the cursor When a cursor has been disposed it is an error to invoke any other method using the cursor return code true code when the cursor is disposed and code false code otherwise '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='isDisposed'></name></condition><thenStmt type='ReturnStmt'><expression type='StringLiteralExpr' value='Cursor DISPOSED '></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Cursor '></left><right type='NameExpr'><name type='SimpleName' identifier='handle'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the receiver '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='device'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='device'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getDevice'></name><scope type='NameExpr'><name type='SimpleName' identifier='Device'></name></scope></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Cursor'></name></type></initializer><name type='SimpleName' identifier='cursor'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Cursor'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='handle'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursor'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='handle'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='device'></name><scope type='NameExpr'><name type='SimpleName' identifier='cursor'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='device'></name></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='cursor'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Cursor'></name></type><name type='SimpleName' identifier='win32 new'></name><comment type='JavadocComment' content=' Invokes platform specific functionality to allocate a new cursor p b IMPORTANT b This method is em not em part of the public API for code Cursor code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param device the device on which to allocate the color param handle the handle for the cursor return a new cursor object containing the specified device and handle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='device'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Device'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='handle'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
