<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='program'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='win32'><qualifier type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='IOException'><qualifier type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Program'></name><comment type='JavadocComment' content=' Instances of this class represent programs and their assoicated file extensions in the operating system '></comment><members><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='name'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='command'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='FieldDeclaration'><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='iconName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='Program'></name><comment type='JavadocComment' content=' Prevents uninitialized instances from being created outside the package '></comment></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='extension'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='extension'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='extension'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='extension'></name></target><value type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' '></left><right type='NameExpr'><name type='SimpleName' identifier='extension'></name></right></value></expression></thenStmt><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='extension'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='phkResult'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='RegOpenKeyEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HKEY CLASSES ROOT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='key'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KEY READ'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='IntegerLiteralExpr' value='256'></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></initializer><name type='SimpleName' identifier='lpcbData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lpcbData'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='lpData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='RegQueryValueEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpcbData'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='RegCloseKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='result'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getProgram'></name><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpData'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='strlen'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpData'></name></scope></argument></arguments></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type><name type='SimpleName' identifier='findProgram'></name><comment type='JavadocComment' content=' Finds the program that is associated with an extension The extension may or may not begin with a Note that a code Display code must already exist to guarantee that this method returns an appropriate result param extension the program extension return the program or code null code exception IllegalArgumentException ul li ERROR NULL ARGUMENT when extension is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='extension'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1024'></dimension></level></levels></initializer><name type='SimpleName' identifier='extensions'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='1024'></argument></arguments></initializer><name type='SimpleName' identifier='lpName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpName'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></initializer><name type='SimpleName' identifier='lpcName'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FILETIME'></name></type></initializer><name type='SimpleName' identifier='ft'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FILETIME'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dwIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpName'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lpcName'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='extension'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lpcName'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpName'></name></scope></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='extension'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='extension'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument></arguments></left><right type='CharLiteralExpr' value=' '></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='extensions'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='extensions'></name></scope></left><right type='IntegerLiteralExpr' value='1024'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newExtensions'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='extensions'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newExtensions'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='extensions'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='extensions'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newExtensions'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='extensions'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='extension'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dwIndex'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='RegEnumKeyEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HKEY CLASSES ROOT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='dwIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpName'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpcName'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='ft'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO MORE ITEMS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='extensions'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='count'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='newExtension'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='extensions'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newExtension'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='count'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='extensions'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newExtension'></name></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='extensions'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type><name type='SimpleName' identifier='getExtensions'></name><comment type='JavadocComment' content=' Answer all program extensions in the operating system Note that a code Display code must already exist to guarantee that this method returns an appropriate result return an array of extensions '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='string'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='phkResult'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='RegOpenKeyEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HKEY CLASSES ROOT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='key'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='KEY READ'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NullLiteralExpr'></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='result'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='lpcbData'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='RegQueryValueEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></name></argument><argument type='CastExpr'><expression type='NullLiteralExpr'></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='CastExpr'><expression type='NullLiteralExpr'></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpcbData'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='StringLiteralExpr' value=''></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lpcbData'></name></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='TCHAR'></name></scope></right></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></initializer><name type='SimpleName' identifier='lpData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='RegQueryValueEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpcbData'></name></argument></arguments></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='IsWinCE'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></expression></left><right type='NameExpr'><name type='SimpleName' identifier='expand'></name></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='length'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpData'></name></scope></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpData'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='length'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='ExpandEnvironmentStrings'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpData'></name></argument><argument type='NullLiteralExpr'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></initializer><name type='SimpleName' identifier='lpDst'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ExpandEnvironmentStrings'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpData'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpDst'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='result'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpDst'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='length'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument></arguments></argument></arguments></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='RegCloseKey'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phkResult'></name></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getKeyValue'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='expand'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getKeyValue'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='key'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument></arguments></initializer><name type='SimpleName' identifier='name'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='BlockComment' content=' Name '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='name'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='name'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='name'></name></target><value type='NameExpr'><name type='SimpleName' identifier='key'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=' shell'></initializer><name type='SimpleName' identifier='DEFAULT COMMAND'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getKeyValue'></name><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='NameExpr'><name type='SimpleName' identifier='DEFAULT COMMAND'></name></right></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='defaultCommand'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='defaultCommand'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='defaultCommand'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='defaultCommand'></name></target><value type='StringLiteralExpr' value='open'></value></expression></thenStmt><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' shell '></left><right type='NameExpr'><name type='SimpleName' identifier='defaultCommand'></name></right></left><right type='StringLiteralExpr' value=' command'></right></initializer><name type='SimpleName' identifier='COMMAND'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getKeyValue'></name><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='NameExpr'><name type='SimpleName' identifier='COMMAND'></name></right></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='command'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='command'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=' DefaultIcon'></initializer><name type='SimpleName' identifier='DEFAULT ICON'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getKeyValue'></name><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='NameExpr'><name type='SimpleName' identifier='DEFAULT ICON'></name></right></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='iconName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='iconName'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='iconName'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type></initializer><name type='SimpleName' identifier='program'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='name'></name><scope type='NameExpr'><name type='SimpleName' identifier='program'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='name'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='command'></name><scope type='NameExpr'><name type='SimpleName' identifier='program'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='command'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='iconName'></name><scope type='NameExpr'><name type='SimpleName' identifier='program'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='iconName'></name></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='program'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type><name type='SimpleName' identifier='getProgram'></name><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1024'></dimension></level></levels></initializer><name type='SimpleName' identifier='programs'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='1024'></argument></arguments></initializer><name type='SimpleName' identifier='lpName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><initializer type='ArrayInitializerExpr'><values><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpName'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></initializer><name type='SimpleName' identifier='lpcName'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FILETIME'></name></type></initializer><name type='SimpleName' identifier='ft'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FILETIME'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='dwIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpName'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lpcName'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='path'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='lpcName'></name></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='lpName'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getProgram'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='path'></name></argument></arguments></initializer><name type='SimpleName' identifier='program'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='program'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='programs'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='programs'></name></scope></left><right type='IntegerLiteralExpr' value='1024'></right></dimension></level></levels></initializer><name type='SimpleName' identifier='newPrograms'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='programs'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newPrograms'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='programs'></name></scope></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='programs'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newPrograms'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></index><name type='NameExpr'><name type='SimpleName' identifier='programs'></name></name></target><value type='NameExpr'><name type='SimpleName' identifier='program'></name></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='dwIndex'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='NOT EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='RegEnumKeyEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HKEY CLASSES ROOT'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='dwIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpName'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpcName'></name></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NullLiteralExpr'></argument><argument type='NameExpr'><name type='SimpleName' identifier='ft'></name></argument></arguments></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NO MORE ITEMS'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></right></condition></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='programs'></name></scope></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='NameExpr'><name type='SimpleName' identifier='count'></name></dimension></level></levels></initializer><name type='SimpleName' identifier='newPrograms'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='arraycopy'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='programs'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='newPrograms'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='count'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='programs'></name></target><value type='NameExpr'><name type='SimpleName' identifier='newPrograms'></name></value></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='programs'></name></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></componentType></type><name type='SimpleName' identifier='getPrograms'></name><comment type='JavadocComment' content=' Answers all available programs in the operating system Note that a code Display code must already exist to guarantee that this method returns an appropriate result return an array of programs '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fileName'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='GetProcessHeap'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></initializer><name type='SimpleName' identifier='hHeap'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='fileName'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='buffer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MULTIPLY'><left type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='buffer'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='TCHAR'></name></scope></right></initializer><name type='SimpleName' identifier='byteCount'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='HeapAlloc'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='HEAP ZERO MEMORY'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='byteCount'></name></argument></arguments></initializer><name type='SimpleName' identifier='lpFile'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='MoveMemory'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpFile'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='buffer'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='byteCount'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SHELLEXECUTEINFO'></name></type></initializer><name type='SimpleName' identifier='info'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SHELLEXECUTEINFO'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cbSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='sizeof'></name><scope type='NameExpr'><name type='SimpleName' identifier='SHELLEXECUTEINFO'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='lpFile'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='lpFile'></name></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='nShow'></name><scope type='NameExpr'><name type='SimpleName' identifier='info'></name></scope></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='SW SHOW'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='ShellExecuteEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='info'></name></argument></arguments></initializer><name type='SimpleName' identifier='result'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='lpFile'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='HeapFree'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='hHeap'></name></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='lpFile'></name></argument></arguments></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='result'></name></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='launch'></name><comment type='JavadocComment' content=' Launches the executable associated with the file in the operating system If the file is an executable then the executable is launched Note that a code Display code must already exist to guarantee that this method returns an appropriate result param fileName the file or program name return code true code if the file is launched otherwise code false code exception IllegalArgumentException ul li ERROR NULL ARGUMENT when fileName is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fileName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='fileName'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BooleanLiteralExpr' value='true'></initializer><name type='SimpleName' identifier='quote'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='command'></name></initializer><name type='SimpleName' identifier='prefix'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=''></initializer><name type='SimpleName' identifier='suffix'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope><arguments><argument type='StringLiteralExpr' value=' 1'></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='count'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope></initializer><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></left><right type='CharLiteralExpr' value=' '></right></condition><thenStmt type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='count'></name></expression></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></condition></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='quote'></name></target><value type='BinaryExpr' operator='EQUALS'><left type='BinaryExpr' operator='REMAINDER'><left type='NameExpr'><name type='SimpleName' identifier='count'></name></left><right type='IntegerLiteralExpr' value='2'></right></left><right type='IntegerLiteralExpr' value='0'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='prefix'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='suffix'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='length'></name></argument></arguments></value></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='quote'></name></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fileName'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value=' '></left><right type='NameExpr'><name type='SimpleName' identifier='fileName'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='exec'></name><scope type='NameExpr'><name type='SimpleName' identifier='Compatibility'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='prefix'></name></left><right type='NameExpr'><name type='SimpleName' identifier='fileName'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='suffix'></name></right></argument></arguments></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></type></parameter></catchClause></catchClauses></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='execute'></name><comment type='JavadocComment' content=' Executes the program with the file as the single argument in the operating system It is the responsibility of the programmer to ensure that the file contains valid data for this program param fileName the file or program name return code true code if the file is launched otherwise code false code exception IllegalArgumentException ul li ERROR NULL ARGUMENT when fileName is null li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='fileName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='nIconIndex'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='iconName'></name></initializer><name type='SimpleName' identifier='fileName'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='indexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='iconName'></name></scope><arguments><argument type='CharLiteralExpr' value=' '></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='fileName'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='iconName'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='index'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='trim'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='iconName'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='iconName'></name></scope></argument></arguments></scope></initializer><name type='SimpleName' identifier='iconIndex'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='nIconIndex'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='parseInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='iconIndex'></name></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='NumberFormatException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='fileName'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument></arguments></initializer><name type='SimpleName' identifier='lpszFile'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='TCHAR'></name></type></variable></variables></expression><comment type='BlockComment' content=' Use the character encoding for the default locale '></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='INT'></elementType><levels><level type='ArrayCreationLevel'><dimension type='IntegerLiteralExpr' value='1'></dimension></level></levels></initializer><name type='SimpleName' identifier='phiconSmall'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='phiconLarge'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='INT'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ExtractIconEx'></name><scope type='NameExpr'><name type='SimpleName' identifier='OS'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='lpszFile'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='nIconIndex'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='phiconLarge'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='phiconSmall'></name></argument><argument type='IntegerLiteralExpr' value='1'></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phiconSmall'></name></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='NullLiteralExpr'></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='win32 new'></name><scope type='NameExpr'><name type='SimpleName' identifier='Image'></name></scope><arguments><argument type='NullLiteralExpr'></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ICON'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='phiconSmall'></name></name></argument></arguments></initializer><name type='SimpleName' identifier='image'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Image'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getImageData'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></initializer><name type='SimpleName' identifier='imageData'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='dispose'></name><scope type='NameExpr'><name type='SimpleName' identifier='image'></name></scope></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='imageData'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ImageData'></name></type><name type='SimpleName' identifier='getImageData'></name><comment type='JavadocComment' content=' Returns the receiver s image data This is the icon that is associated with the reciever in the operating system return the image data for the program may be null '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='name'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getName'></name><comment type='JavadocComment' content=' Returns the receiver s name This is as short and descriptive a name as possible for the program If the program has no descriptive name this string may be the executable name path or empty return the name of the program '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='ThisExpr'></left><right type='NameExpr'><name type='SimpleName' identifier='other'></name></right></condition><thenStmt type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></thenStmt></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='other'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><modifiers><modifier type='Modifier' keyword='FINAL'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='other'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type></initializer><name type='SimpleName' identifier='program'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Program'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='AND'><left type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='name'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='name'></name><scope type='NameExpr'><name type='SimpleName' identifier='program'></name></scope></argument></arguments></left><right type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='command'></name><scope type='NameExpr'><name type='SimpleName' identifier='program'></name></scope></argument></arguments></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='iconName'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='iconName'></name><scope type='NameExpr'><name type='SimpleName' identifier='program'></name></scope></argument></arguments></right></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='false'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='equals'></name><comment type='JavadocComment' content=' Compares the argument to the receiver and returns true if they represent the em same em object using a class specific comparison param other the object to compare with this object return code true code if the object is the same as this object and code false code otherwise see hashCode '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='other'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='XOR'><left type='BinaryExpr' operator='XOR'><left type='MethodCallExpr'><name type='SimpleName' identifier='hashCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='name'></name></scope></left><right type='MethodCallExpr'><name type='SimpleName' identifier='hashCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='command'></name></scope></right></left><right type='MethodCallExpr'><name type='SimpleName' identifier='hashCode'></name><scope type='NameExpr'><name type='SimpleName' identifier='iconName'></name></scope></right></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='hashCode'></name><comment type='JavadocComment' content=' Returns an integer hash code for the receiver Any two objects that return code true code when passed to code equals code must return the same value for this method return the receiver s hash see equals Object '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Program '></left><right type='NameExpr'><name type='SimpleName' identifier='name'></name></right></left><right type='StringLiteralExpr' value=' '></right></expression><comment type='LineComment' content=' NON NLS 1 NON NLS 2 '></comment></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the event '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
