<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='internal'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2004 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='MessageFormat'><qualifier type='Name' identifier='text'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='MissingResourceException'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='ResourceBundle'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='SWT'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='Compatibility'></name><comment type='JavadocComment' content=' This class is a placeholder for utility methods commonly used on 2SE platforms but not supported on some 2ME profiles p It is part of our effort to provide support for both 2SE and 2ME platforms p p IMPORTANT some of the methods have been modified from their 2SE parents Refer to the description of each method for specific changes p ul li Exceptions thrown may differ since 2ME s set of exceptions is a subset of 2SE s one li li The range of the mathematic functions is subject to change li ul '></comment><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' Returns the PI constant as a double '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='PI'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope></initializer><name type='SimpleName' identifier='PI'></name><type type='PrimitiveType' specificType='DOUBLE'></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='PI'></name></left><right type='IntegerLiteralExpr' value='180'></right></initializer><name type='SimpleName' identifier='toRadians'></name><type type='PrimitiveType' specificType='DOUBLE'></type></variable></variables></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='MethodCallExpr'><name type='SimpleName' identifier='cos'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='angle'></name></left><right type='NameExpr'><name type='SimpleName' identifier='toRadians'></name></right></argument></arguments></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='cos'></name><comment type='JavadocComment' content=' Answers the length of the side adjacent to the given angle of a right triangle In other words it returns the integer conversion of length cos angle p IMPORTANT the j2me version has an additional restriction on the argument length must be between 32767 and 32767 inclusive p param angle the angle in degrees param length the length of the triangle s hypotenuse return the integer conversion of length cos angle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='angle'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='CastExpr'><expression type='EnclosedExpr'><inner type='BinaryExpr' operator='MULTIPLY'><left type='MethodCallExpr'><name type='SimpleName' identifier='sin'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='angle'></name></left><right type='NameExpr'><name type='SimpleName' identifier='toRadians'></name></right></argument></arguments></left><right type='NameExpr'><name type='SimpleName' identifier='length'></name></right></inner></expression><type type='PrimitiveType' specificType='INT'></type></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='sin'></name><comment type='JavadocComment' content=' Answers the length of the side opposite to the given angle of a right triangle In other words it returns the integer conversion of length sin angle p IMPORTANT the j2me version has an additional restriction on the argument length must be between 32767 and 32767 inclusive p param angle the angle in degrees param length the length of the triangle s hypotenuse return the integer conversion of length sin angle '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='angle'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='length'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='ceil'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='BinaryExpr' operator='DIVIDE'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='p'></name></expression><type type='PrimitiveType' specificType='FLOAT'></type></left><right type='NameExpr'><name type='SimpleName' identifier='q'></name></right></argument></arguments></expression><type type='PrimitiveType' specificType='INT'></type></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='ceil'></name><comment type='JavadocComment' content=' Answers the most negative i e closest to negative infinity integer value which is greater than the number obtained by dividing the first argument p by the second argument q param p numerator param q denominator must be different from zero return the ceiling of the rational number p q '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='p'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='q'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='floor'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='BinaryExpr' operator='DIVIDE'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='p'></name></expression><type type='PrimitiveType' specificType='DOUBLE'></type></left><right type='NameExpr'><name type='SimpleName' identifier='q'></name></right></argument></arguments></expression><type type='PrimitiveType' specificType='INT'></type></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='floor'></name><comment type='JavadocComment' content=' Answers the most positive i e closest to positive infinity integer value which is less than the number obtained by dividing the first argument p by the second argument q param p numerator param q denominator must be different from zero return the floor of the rational number p q '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='p'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='q'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='round'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='BinaryExpr' operator='DIVIDE'><left type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='p'></name></expression><type type='PrimitiveType' specificType='FLOAT'></type></left><right type='NameExpr'><name type='SimpleName' identifier='q'></name></right></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='round'></name><comment type='JavadocComment' content=' Answers the result of rounding to the closest integer the number obtained by dividing the first argument p by the second argument q p IMPORTANT the j2me version has an additional restriction on the arguments p must be within the range 0 32767 inclusive q must be within the range 1 32767 inclusive p param p numerator param q denominator must be different from zero return the closest integer to the rational number p q '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='p'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='q'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='GREATER EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='1'></right></left><right type='BinaryExpr' operator='LESS EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='30'></right></right></condition><elseStmt type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR INVALID RANGE'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></elseStmt><thenStmt type='ReturnStmt'><expression type='BinaryExpr' operator='LEFT SHIFT'><left type='IntegerLiteralExpr' value='2'></left><right type='EnclosedExpr'><inner type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='n'></name></left><right type='IntegerLiteralExpr' value='1'></right></inner></right></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='IntegerLiteralExpr' value='1'></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='pow2'></name><comment type='JavadocComment' content=' Returns 2 raised to the power of the argument param n an int value between 0 and 30 inclusive return 2 raised to the power of the argument exception IllegalArgumentException ul li ERROR INVALID RANGE if the argument is not between 0 and 30 inclusive li ul '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='n'></name><type type='PrimitiveType' specificType='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FileInputStream'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='filename'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='InputStream'></name></type><name type='SimpleName' identifier='newFileInputStream'></name><comment type='JavadocComment' content=' Open a file if such things are supported param filename the name of the file to open return a stream on the file if it could be opened exception IOException '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='filename'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FileOutputStream'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='filename'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='OutputStream'></name></type><name type='SimpleName' identifier='newFileOutputStream'></name><comment type='JavadocComment' content=' Open a file if such things are supported param filename the name of the file to open return a stream on the file if it could be opened exception IOException '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='filename'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isLetter'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='c'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isLetter'></name><comment type='JavadocComment' content=' Answers whether the character is a letter param c the character return true when the character is a letter '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='c'></name><type type='PrimitiveType' specificType='CHAR'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isLetterOrDigit'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='c'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isLetterOrDigit'></name><comment type='JavadocComment' content=' Answers whether the character is a letter or a digit param c the character return true when the character is a letter or a digit '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='c'></name><type type='PrimitiveType' specificType='CHAR'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isSpaceChar'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='c'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isSpaceChar'></name><comment type='JavadocComment' content=' Answers whether the character is a Unicode space character param c the character return true when the character is a Unicode space character '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='c'></name><type type='PrimitiveType' specificType='CHAR'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='isWhitespace'></name><scope type='NameExpr'><name type='SimpleName' identifier='Character'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='c'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='isWhitespace'></name><comment type='JavadocComment' content=' Answers whether the character is a whitespace character param c the character to test return true if the character is whitespace '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='c'></name><type type='PrimitiveType' specificType='CHAR'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='exec'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getRuntime'></name><scope type='NameExpr'><name type='SimpleName' identifier='Runtime'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='prog'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='exec'></name><comment type='JavadocComment' content=' Execute a program in a separate platform process if the underlying platform support this p The new process inherits the environment of the caller p param prog the name of the program to execute exception IOException if the program cannot be executed exception SecurityException if the current SecurityManager disallows program execution '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='prog'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name><scope type='ClassOrInterfaceType'><name type='SimpleName' identifier='io'></name><scope type='ClassOrInterfaceType'><name type='SimpleName' identifier='java'></name></scope></scope></thrownException></thrownExceptions></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='exec'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getRuntime'></name><scope type='NameExpr'><name type='SimpleName' identifier='Runtime'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='progArray'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='exec'></name><comment type='JavadocComment' content=' Execute progArray 0 in a separate platform process if the underlying platform support this p The new process inherits the environment of the caller p param progArray array containing the program to execute and its arguments exception IOException if the program cannot be executed exception SecurityException if the current SecurityManager disallows program execution '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='progArray'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></parameter></parameters><thrownExceptions><thrownException type='ClassOrInterfaceType'><name type='SimpleName' identifier='IOException'></name><scope type='ClassOrInterfaceType'><name type='SimpleName' identifier='io'></name><scope type='ClassOrInterfaceType'><name type='SimpleName' identifier='java'></name></scope></scope></thrownException></thrownExceptions></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='msgs'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='ResourceBundle'></name></type></variable></variables></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='key'></name></initializer><name type='SimpleName' identifier='answer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msgs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='msgs'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBundle'></name><scope type='NameExpr'><name type='SimpleName' identifier='ResourceBundle'></name></scope><arguments><argument type='StringLiteralExpr' value='org eclipse swt internal SWTMessages'></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='StringLiteralExpr' value=' no resource bundle '></right></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ex'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MissingResourceException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msgs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='msgs'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='key'></name></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ex2'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MissingResourceException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='answer'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getMessage'></name><comment type='JavadocComment' content=' Returns the NLS ed message for the given argument This is only being called from SWT param key the key to look up return the message for the given key see SWT getMessage String '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NameExpr'><name type='SimpleName' identifier='key'></name></initializer><name type='SimpleName' identifier='answer'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='OR'><left type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='NullLiteralExpr'></right></left><right type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='args'></name></left><right type='NullLiteralExpr'></right></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='error'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ERROR NULL ARGUMENT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></argument></arguments></expression></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msgs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='msgs'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='getBundle'></name><scope type='NameExpr'><name type='SimpleName' identifier='ResourceBundle'></name></scope><arguments><argument type='StringLiteralExpr' value='org eclipse swt internal SWTMessages'></argument></arguments></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='key'></name></left><right type='StringLiteralExpr' value=' no resource bundle '></right></value></expression><comment type='LineComment' content=' NON NLS 1 '></comment></statement></statements></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ex'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MissingResourceException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='msgs'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='BlockStmt'><statements><statement type='TryStmt'><tryBlock type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MessageFormat'></name></type><arguments><argument type='StringLiteralExpr' value=''></argument></arguments></initializer><name type='SimpleName' identifier='formatter'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MessageFormat'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='applyPattern'></name><scope type='NameExpr'><name type='SimpleName' identifier='formatter'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getString'></name><scope type='NameExpr'><name type='SimpleName' identifier='msgs'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='key'></name></argument></arguments></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='answer'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='format'></name><scope type='NameExpr'><name type='SimpleName' identifier='formatter'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='args'></name></argument></arguments></value></expression></statement></statements></tryBlock><catchClauses><catchClause type='CatchClause'><body type='BlockStmt'></body><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='ex2'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='MissingResourceException'></name></type></parameter></catchClause></catchClauses></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='answer'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getMessage'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='interrupt'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='currentThread'></name><scope type='NameExpr'><name type='SimpleName' identifier='Thread'></name></scope></scope></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='interrupt'></name><comment type='JavadocComment' content=' Interrupt the current thread p Note that this is not available on CLDC p '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equalsIgnoreCase'></name><scope type='NameExpr'><name type='SimpleName' identifier='s1'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='s2'></name></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='equalsIgnoreCase'></name><comment type='JavadocComment' content=' Compares two instances of class String ignoring the case of the characters and answers if they are equal param s1 string param s2 string return true if the two instances of class String are equal '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='s1'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='s2'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
