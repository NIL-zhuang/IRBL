<root type='CompilationUnit'><packageDeclaration type='PackageDeclaration'><name type='Name' identifier='layout'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></packageDeclaration><comment type='JavadocComment' content=' Copyright c 2000 2005 IBM Corporation and others All rights reserved This program and the accompanying materials are made available under the terms of the Eclipse Public License v1 0 which accompanies this distribution and is available at http www eclipse org legal epl v10 html Contributors IBM Corporation initial API and implementation '></comment><imports><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='graphics'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='widgets'><qualifier type='Name' identifier='swt'><qualifier type='Name' identifier='eclipse'><qualifier type='Name' identifier='org'></qualifier></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='FormLayout'></name><comment type='JavadocComment' content=' Instances of this class control the position and size of the children of a composite control by using code FormAttachments code to optionally configure the left top right and bottom edges of each child p The following example code creates a code FormLayout code and then sets it into a code Shell code pre Display display new Display Shell shell new Shell display FormLayout layout new FormLayout layout marginWidth 3 layout marginHeight 3 shell setLayout layout pre p p To use a code FormLayout code create a code FormData code with code FormAttachment code for each child of code Composite code The following example code attaches code button1 code to the top and left edge of the composite and code button2 code to the right edge of code button1 code and the top and right edges of the composite pre FormData data1 new FormData data1 left new FormAttachment 0 0 data1 top new FormAttachment 0 0 button1 setLayoutData data1 FormData data2 new FormData data2 left new FormAttachment button1 data2 top new FormAttachment 0 0 data2 right new FormAttachment 100 0 button2 setLayoutData data2 pre p p Each side of a child control can be attached to a position in the parent composite or to other controls within the code Composite code by creating instances of code FormAttachment code and setting them into the top bottom left and right fields of the child s code FormData code p p If a side is not given an attachment it is defined as not being attached to anything causing the child to remain at its preferred size If a child is given no attachment on either the left or the right or top or bottom it is automatically attached to the left and top of the composite respectively The following code positions code button1 code and code button2 code but relies on default attachments pre FormData data2 new FormData data2 left new FormAttachment button1 data2 right new FormAttachment 100 0 button2 setLayoutData data2 pre p p IMPORTANT Do not define circular attachments For example do not attach the right edge of code button1 code to the left edge of code button2 code and then attach the left edge of code button2 code to the right edge of code button1 code This will over constrain the layout causing undefined behavior The algorithm will terminate but the results are undefined p see FormData see FormAttachment since 2 0 '></comment><extendedTypes><extendedType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Layout'></name></extendedType></extendedTypes><members><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout The default value is 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout The default value is 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginHeight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginLeft specifies the number of pixels of horizontal margin that will be placed along the left edge of the layout The default value is 0 since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginLeft'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginTop specifies the number of pixels of vertical margin that will be placed along the top edge of the layout The default value is 0 since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginTop'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginRight specifies the number of pixels of horizontal margin that will be placed along the right edge of the layout The default value is 0 since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginRight'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' marginBottom specifies the number of pixels of vertical margin that will be placed along the bottom edge of the layout The default value is 0 since 3 1 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='marginBottom'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='FieldDeclaration'><comment type='JavadocComment' content=' spacing specifies the number of pixels between the edge of one control and the edge of its neighbouring control The default value is 0 since 3 0 '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='spacing'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'></body><name type='SimpleName' identifier='FormLayout'></name><comment type='JavadocComment' content=' Constructs a new instance of this class '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getTopAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='top'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getBottomAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='bottom'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='minus'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='top'></name></argument></arguments></initializer><name type='SimpleName' identifier='height'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='height'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='top'></name></scope></expression></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='top'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='top'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></right></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></right></initializer><name type='SimpleName' identifier='divider'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='bottom'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='divider'></name></right></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='solveY'></name><scope type='NameExpr'><name type='SimpleName' identifier='height'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='computeHeight'></name><comment type='BlockComment' content=' Computes the preferred height of the form with respect to the preferred height of the control Given that the equations for top T and bottom B of the control in terms of the height of the form X are T AX B B CX D The equation for the height of the control H is bottom B minus top T or H B T or H CX D AX B Solving for X the height of the form we get X H B D C A When A C C A 0 and the equation has no solution for X This is a special case meaning that the control does not constrain the height of the form In this case we need to arbitrarily define the height of the form X Case 1 A C A 0 C 0 Let X D the distance from the top of the form to the bottom edge of the control In this case the control was attatched to the top of the form and the form needs to be large enough to show the bottom edge of the control Case 2 A C A 1 C 1 Let X B the distance from the bottom of the form to the top edge of the control In this case the control was attached to the bottom of the form and the only way that the control would be visible is if the offset is negative If the offset is positive there is no possible height for the form that will show the control as it will always be below the bottom edge of the form Case 3 A C A 0 C 0 and A 1 C 0 Let X D 1 C the distance from the top of the form to the bottom edge of the control In this case since C is not 0 or 1 it must be a fraction U V The offset D is the distance from CX to the bottom edge of the control This represents a fraction of the form 1 C X Since the height of a fraction of the form is known the height of the entire form can be found by setting 1 C X D We solve this equation for X in terms of U and V giving us X U D U V Similarily if the offset D is negative the control is positioned above CX The offset B is the distance from the top edge of the control to CX We can find the height of the entire form by setting CX B Solving in terms of U and V gives us X B V U '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='layout'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='composite'></name></argument><argument type='BooleanLiteralExpr' value='false'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='NameExpr'><name type='SimpleName' identifier='wHint'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='hHint'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='size'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='wHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='size'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='wHint'></name></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='hHint'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='size'></name></scope></target><value type='NameExpr'><name type='SimpleName' identifier='hHint'></name></value></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='size'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='computeSize'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='composite'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='wHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='hHint'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='control'></name></scope></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Object'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='flushCache'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='data'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></inner></scope></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='BooleanLiteralExpr' value='true'></expression></statement></statements></body><type type='PrimitiveType' specificType='BOOLEAN'></type><name type='SimpleName' identifier='flushCache'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getClass'></name></scope></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='lastIndexOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='CharLiteralExpr' value=' '></argument></arguments></initializer><name type='SimpleName' identifier='index'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></right></condition><thenStmt type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='string'></name></expression></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='index'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='getName'></name></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLeftAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='left'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getRightAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='right'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='minus'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='left'></name></argument></arguments></initializer><name type='SimpleName' identifier='width'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='width'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ReturnStmt'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></right></condition><thenStmt type='ReturnStmt'><expression type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='left'></name></scope></expression></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='LESS EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='UnaryExpr' operator='MINUS'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='left'></name></scope></expression></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='left'></name></scope></right></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='left'></name></scope></right></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='numerator'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></right></initializer><name type='SimpleName' identifier='divider'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='BinaryExpr' operator='DIVIDE'><left type='BinaryExpr' operator='MULTIPLY'><left type='FieldAccessExpr'><name type='SimpleName' identifier='denominator'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='offset'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope></right></left><right type='NameExpr'><name type='SimpleName' identifier='divider'></name></right></expression></statement></statements></thenStmt></statement><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='solveY'></name><scope type='NameExpr'><name type='SimpleName' identifier='width'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='getWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='control'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></argument></arguments></expression></statement></statements></body><type type='PrimitiveType' specificType='INT'></type><name type='SimpleName' identifier='computeWidth'></name><comment type='BlockComment' content=' Computes the preferred height of the form with respect to the preferred height of the control '></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='control'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getClientArea'></name><scope type='NameExpr'><name type='SimpleName' identifier='composite'></name></scope></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginLeft'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></right></initializer><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginTop'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></right></initializer><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginLeft'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='2'></left><right type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></right></right></left><right type='NameExpr'><name type='SimpleName' identifier='marginRight'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></left><right type='NameExpr'><name type='SimpleName' identifier='marginLeft'></name></right></left><right type='BinaryExpr' operator='MULTIPLY'><left type='IntegerLiteralExpr' value='2'></left><right type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></right></right></left><right type='NameExpr'><name type='SimpleName' identifier='marginBottom'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='layout'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='composite'></name></argument><argument type='BooleanLiteralExpr' value='true'></argument><argument type='NameExpr'><name type='SimpleName' identifier='x'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='y'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='layout'></name><modifiers><modifier type='Modifier' keyword='PROTECTED'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='composite'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getChildren'></name><scope type='NameExpr'><name type='SimpleName' identifier='composite'></name></scope></initializer><name type='SimpleName' identifier='children'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></componentType></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='data'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope><arguments><argument type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='data'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></value></argument></arguments></expression></thenStmt></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></condition><thenStmt type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='flushCache'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheLeft'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheRight'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheTop'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheBottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NullLiteralExpr'></value></value></value></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='flush'></name><type type='ArrayType' origin='TYPE'><componentType type='PrimitiveType' specificType='BOOLEAN'></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='NullLiteralExpr'></initializer><name type='SimpleName' identifier='bounds'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></componentType></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='w'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='h'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='width'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='w'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='computeWidth'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></argument><argument type='NameExpr'><name type='SimpleName' identifier='w'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='needed'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='BooleanLiteralExpr' value='false'></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getLeftAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='left'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getRightAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></initializer><name type='SimpleName' identifier='right'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormAttachment'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='solveX'></name><scope type='NameExpr'><name type='SimpleName' identifier='left'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument></arguments></initializer><name type='SimpleName' identifier='x1'></name><type type='PrimitiveType' specificType='INT'></type></variable><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='solveX'></name><scope type='NameExpr'><name type='SimpleName' identifier='right'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='width'></name></argument></arguments></initializer><name type='SimpleName' identifier='x2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='EQUALS'><left type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></left><right type='UnaryExpr' operator='LOGICAL COMPLEMENT'><expression type='FieldAccessExpr'><name type='SimpleName' identifier='needed'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></expression></right></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='trim'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='InstanceOfExpr'><expression type='NameExpr'><name type='SimpleName' identifier='child'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Scrollable'></name></type></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='trim'></name></target><value type='BinaryExpr' operator='MULTIPLY'><left type='MethodCallExpr'><name type='SimpleName' identifier='getBorderWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='computeTrim'></name><scope type='EnclosedExpr'><inner type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='child'></name></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Scrollable'></name></type></inner></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></initializer><name type='SimpleName' identifier='rect'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='trim'></name></target><value type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='NameExpr'><name type='SimpleName' identifier='rect'></name></scope></value></expression></statement></statements></thenStmt><comment type='LineComment' content='TEMPORARY CODE'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='BinaryExpr' operator='MINUS'><left type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='x2'></name></left><right type='NameExpr'><name type='SimpleName' identifier='x1'></name></right></left><right type='NameExpr'><name type='SimpleName' identifier='trim'></name></right></argument></arguments></initializer><name type='SimpleName' identifier='currentWidth'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='computeSize'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='currentWidth'></name></argument><argument type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='flush'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='flush'></name></target><value type='ArrayCreationExpr'><elementType type='PrimitiveType' specificType='BOOLEAN'></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></dimension></level></levels></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='flush'></name></name></target><value type='BooleanLiteralExpr' value='true'></value></expression></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='w'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='x2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='w'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='move'></name></condition><thenStmt type='BlockStmt'><statements><statement type='IfStmt'><condition type='BinaryExpr' operator='EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='bounds'></name></left><right type='NullLiteralExpr'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='bounds'></name></target><value type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></elementType><levels><level type='ArrayCreationLevel'><dimension type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></dimension></level></levels></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bounds'></name></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Rectangle'></name></type><arguments><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument><argument type='IntegerLiteralExpr' value='0'></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='x'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bounds'></name></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='x'></name></left><right type='NameExpr'><name type='SimpleName' identifier='x1'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='width'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bounds'></name></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='x2'></name></left><right type='NameExpr'><name type='SimpleName' identifier='x1'></name></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='height'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='DEFAULT'></name><scope type='NameExpr'><name type='SimpleName' identifier='SWT'></name></scope></right></condition><elseStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='h'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='computeHeight'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='data'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></argument><argument type='NameExpr'><name type='SimpleName' identifier='h'></name></argument></arguments></value></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='solveX'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getTopAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></initializer><name type='SimpleName' identifier='y1'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='solveX'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='getBottomAttachment'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='child'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='spacing'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='flushCache'></name></argument></arguments></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='height'></name></argument></arguments></initializer><name type='SimpleName' identifier='y2'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='h'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='max'></name><scope type='NameExpr'><name type='SimpleName' identifier='Math'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='y2'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='h'></name></argument></arguments></value></expression></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='move'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='y'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bounds'></name></name></scope></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='y'></name></left><right type='NameExpr'><name type='SimpleName' identifier='y1'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='height'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bounds'></name></name></scope></target><value type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='y2'></name></left><right type='NameExpr'><name type='SimpleName' identifier='y1'></name></right></value></expression></statement></statements></thenStmt></statement></statements></thenStmt></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></initializer><name type='SimpleName' identifier='child'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Control'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='getLayoutData'></name><scope type='NameExpr'><name type='SimpleName' identifier='child'></name></scope></expression><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></initializer><name type='SimpleName' identifier='data'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='FormData'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='AND'><left type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='flush'></name></left><right type='NullLiteralExpr'></right></left><right type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='flush'></name></name></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheWidth'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheHeight'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='UnaryExpr' operator='MINUS'><expression type='IntegerLiteralExpr' value='1'></expression></value></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheLeft'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheRight'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheTop'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='AssignExpr' operator='ASSIGN'><target type='FieldAccessExpr'><name type='SimpleName' identifier='cacheBottom'></name><scope type='NameExpr'><name type='SimpleName' identifier='data'></name></scope></target><value type='NullLiteralExpr'></value></value></value></value></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement><statement type='IfStmt'><condition type='NameExpr'><name type='SimpleName' identifier='move'></name></condition><thenStmt type='BlockStmt'><statements><statement type='ForStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='setBounds'></name><scope type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='children'></name></name></scope><arguments><argument type='ArrayAccessExpr'><index type='NameExpr'><name type='SimpleName' identifier='i'></name></index><name type='NameExpr'><name type='SimpleName' identifier='bounds'></name></name></argument></arguments></expression></statement></statements></body><compare type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='FieldAccessExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='children'></name></scope></right></compare><initialization><initializatio type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' specificType='INT'></type></variable></variables></initializatio></initialization><update><updat type='UnaryExpr' operator='POSTFIX INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></updat></update></statement></statements></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='w'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='marginLeft'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></left><right type='IntegerLiteralExpr' value='2'></right></right></left><right type='NameExpr'><name type='SimpleName' identifier='marginRight'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='h'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='marginTop'></name></left><right type='BinaryExpr' operator='MULTIPLY'><left type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></left><right type='IntegerLiteralExpr' value='2'></right></right></left><right type='NameExpr'><name type='SimpleName' identifier='marginBottom'></name></right></value></expression></statement><statement type='ReturnStmt'><expression type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='w'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='h'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Point'></name></type><name type='SimpleName' identifier='layout'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='composite'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Composite'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='move'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='x'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='y'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='width'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='height'></name><type type='PrimitiveType' specificType='INT'></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='flushCache'></name><type type='PrimitiveType' specificType='BOOLEAN'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='BinaryExpr' operator='PLUS'><left type='MethodCallExpr'><name type='SimpleName' identifier='getName'></name></left><right type='StringLiteralExpr' value=' '></right></initializer><name type='SimpleName' identifier='string'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginWidth '></left><right type='NameExpr'><name type='SimpleName' identifier='marginWidth'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginHeight '></left><right type='NameExpr'><name type='SimpleName' identifier='marginHeight'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginLeft'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginLeft '></left><right type='NameExpr'><name type='SimpleName' identifier='marginLeft'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginRight'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginRight '></left><right type='NameExpr'><name type='SimpleName' identifier='marginRight'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginTop'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginTop '></left><right type='NameExpr'><name type='SimpleName' identifier='marginTop'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='marginBottom'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='marginBottom '></left><right type='NameExpr'><name type='SimpleName' identifier='marginBottom'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='IfStmt'><condition type='BinaryExpr' operator='NOT EQUALS'><left type='NameExpr'><name type='SimpleName' identifier='spacing'></name></left><right type='IntegerLiteralExpr' value='0'></right></condition><thenStmt type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='spacing '></left><right type='NameExpr'><name type='SimpleName' identifier='spacing'></name></right></left><right type='StringLiteralExpr' value=' '></right></value></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='trim'></name><scope type='NameExpr'><name type='SimpleName' identifier='string'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='string'></name></target><value type='StringLiteralExpr' value=' '></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='string'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><comment type='JavadocComment' content=' Returns a string containing a concise human readable description of the receiver return a string representation of the event '></comment><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='FINAL'></modifier></modifiers></type></types></root>
