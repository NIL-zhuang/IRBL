Instances of this class represent the windows which the desktop or window manager is managing Instances that do not have a parent that is they are built using the constructor which takes a code Display code as the argument are described as em top level em shells Instances that do have a parent are described as em secondary em or em dialog em shells p Instances are always displayed in one of the maximized minimized or normal states ul li When an instance is marked as em maximized em the window manager will typically resize it to fill the entire visible area of the display and the instance is usually put in a state where it can not be resized even if it has style code RESIZE code until it is no longer maximized li li When an instance is in the em normal em state neither maximized or minimized its appearance is controlled by the style constants which were specified when it was created and the restrictions of the window manager see below li li When an instance has been marked as em minimized em its contents client area will usually not be visible and depending on the window manager it may be iconified that is replaced on the desktop by a small simplified representation of itself relocated to a distinguished area of the screen or hidden Combinations of these changes are also possible li ul p p Note The styles supported by this class must be treated as em HINT em s since the window manager for the desktop on which the instance is visible has ultimate control over the appearance and behavior of decorations and modality For example some window managers only support resizable windows and will always assume the RESIZE style even if it is not set In addition if a modality style is not supported it is upgraded to a more restrictive modality style that is supported For example if code PRIMARY MODAL code is not supported it would be upgraded to code APPLICATION MODAL code dl dt b Styles b dt dd BORDER CLOSE MIN MAX NO TRIM RESIZE TITLE ON TOP TOOL dd dd APPLICATION MODAL MODELESS PRIMARY MODAL SYSTEM MODAL dd dt b Events b dt dd Activate Close Deactivate Deiconify Iconify dd dl Class code SWT code provides two convenience constants for the most commonly required style combinations dl dt code SHELL TRIM code dt dd the result of combining the constants which are required to produce a typical application top level shell that is code CLOSE TITLE MIN MAX RESIZE code dd dt code DIALOG TRIM code dt dd the result of combining the constants which are required to produce a typical application dialog shell that is code TITLE CLOSE BORDER code dd dl p p Note Only one of the styles APPLICATION MODAL MODELESS PRIMARY MODAL and SYSTEM MODAL may be specified p p IMPORTANT This class is not intended to be subclassed p see Decorations see SWT
Constructs a new instance of this class This is equivalent to calling code Shell Display null code exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul
Constructs a new instance of this class given only the style value describing its behavior and appearance This is equivalent to calling code Shell Display null style code p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param style the style of control to construct exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT BORDER see SWT CLOSE see SWT MIN see SWT MAX see SWT RESIZE see SWT TITLE see SWT NO TRIM see SWT SHELL TRIM see SWT DIALOG TRIM see SWT MODELESS see SWT PRIMARY MODAL see SWT APPLICATION MODAL see SWT SYSTEM MODAL
Constructs a new instance of this class given only the display to create it on It is created with style code SWT SHELL TRIM code p Note Currently null can be passed in for the display argument This has the effect of creating the shell on the currently active display if there is one If there is no current display the shell is created on a default display b Passing in null as the display argument is not considered to be good coding style and may not be supported in a future release of SWT b p param display the display to create the shell on exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul
Constructs a new instance of this class given the display to create it on and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p p Note Currently null can be passed in for the display argument This has the effect of creating the shell on the currently active display if there is one If there is no current display the shell is created on a default display b Passing in null as the display argument is not considered to be good coding style and may not be supported in a future release of SWT b p param display the display to create the shell on param style the style of control to construct exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT BORDER see SWT CLOSE see SWT MIN see SWT MAX see SWT RESIZE see SWT TITLE see SWT NO TRIM see SWT SHELL TRIM see SWT DIALOG TRIM see SWT MODELESS see SWT PRIMARY MODAL see SWT APPLICATION MODAL see SWT SYSTEM MODAL
Constructs a new instance of this class given only its parent It is created with style code SWT DIALOG TRIM code p Note Currently null can be passed in for the parent This has the effect of creating the shell on the currently active display if there is one If there is no current display the shell is created on a default display b Passing in null as the parent is not considered to be good coding style and may not be supported in a future release of SWT b p param parent a shell which will be the parent of the new instance exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the parent is disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p p Note Currently null can be passed in for the parent This has the effect of creating the shell on the currently active display if there is one If there is no current display the shell is created on a default display b Passing in null as the parent is not considered to be good coding style and may not be supported in a future release of SWT b p param parent a shell which will be the parent of the new instance param style the style of control to construct exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the parent is disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT BORDER see SWT CLOSE see SWT MIN see SWT MAX see SWT RESIZE see SWT TITLE see SWT NO TRIM see SWT SHELL TRIM see SWT DIALOG TRIM see SWT ON TOP see SWT TOOL see SWT MODELESS see SWT PRIMARY MODAL see SWT APPLICATION MODAL see SWT SYSTEM MODAL
Invokes platform specific functionality to allocate a new shell p b IMPORTANT b This method is em not em part of the public API for code Shell code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param display the display for the shell param handle the handle for the shell return a new shell object containing the specified display and handle
Adds the listener to the collection of listeners who will be notified when operations are performed on the receiver by sending the listener one of the messages defined in the code ShellListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ShellListener see removeShellListener
Requests that the window manager close the receiver in the same way it would be closed when the user clicks on the close box or performs some other platform specific key or mouse combination that indicates the window should be removed exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SWT Close see dispose
if style SWT ON TOP 0 display lockActiveWindow true
Bug in Windows When the WS CAPTION bits are cleared using SetWindowLong Windows does not resize the client area of the window to get rid of the caption until the first resize The fix is to use SetWindowPos with SWP DRAWFRAME to force the frame to be redrawn and resized
Display oldDisplay display
If the receiver is visible moves it to the top of the drawing order for the display on which it was created so that all other shells on that display which are not the receiver s children will be drawn behind it and forces the window manager to make the shell active exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 0 see Control moveAbove see Control setFocus see Control setVisible see Display getActiveShell see Decorations setDefaultButton see Shell open see Shell setActive
Returns the receiver s input method editor mode This will be the result of bitwise OR ing together one or more of the following constants defined in class code SWT code code NONE code code ROMAN code code DBCS code code PHONETIC code code NATIVE code code ALPHA code return the IME mode exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SWT
Returns a point describing the minimum receiver s size The x coordinate of the result is the minimum width of the receiver The y coordinate of the result is the minimum height of the receiver return the receiver s size exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 1
Returns the region that defines the shape of the shell or null if the shell has the default shape return the region that defines the shape of the shell or null exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
Returns an array containing all shells which are descendents of the receiver p return the dialog shells exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature on WinCE PPC A new application becomes the foreground application only if it has at least one visible window before the event loop is started The workaround is to explicitely force the shell to be the foreground window
Bug in Windows XP Despite the fact that an icon has been set for a window the task bar displays the wrong icon the first time the window is made visible with ShowWindow after a call to BringToTop when a long time elapses between the ShowWindow and the time the event queue is read The icon in the window trimming is correct but the one in the task bar does not get updated The fix is to call PeekMessage with the flag PM NOREMOVE and PM QS SENDMESSAGE to respond to a cross thread WM GETICON NOTE This allows other cross thread messages to be delivered most notably WM ACTIVATE
Moves the receiver to the top of the drawing order for the display on which it was created so that all other shells on that display which are not the receiver s children will be drawn behind it marks it visible sets the focus and asks the window manager to make the shell active exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Control moveAbove see Control setFocus see Control setVisible see Display getActiveShell see Decorations setDefaultButton see Shell setActive see Shell forceActive
Removes the listener from the collection of listeners who will be notified when operations are performed on the receiver param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ShellListener see addShellListener
If the receiver is visible moves it to the top of the drawing order for the display on which it was created so that all other shells on that display which are not the receiver s children will be drawn behind it and asks the window manager to make the shell active exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 0 see Control moveAbove see Control setFocus see Control setVisible see Display getActiveShell see Decorations setDefaultButton see Shell open see Shell setActive
Compute the list of controls to be activated and deactivated by finding the first common parent control
It is possible but unlikely that application code could have destroyed some of the widgets If this happens keep processing those widgets that are not disposed
Sets the input method editor mode to the argument which should be the result of bitwise OR ing together one or more of the following constants defined in class code SWT code code NONE code code ROMAN code code DBCS code code PHONETIC code code NATIVE code code ALPHA code param mode the new IME mode exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SWT
Sets the receiver s minimum size to the size specified by the arguments If the new minimum size is larger than the current size of the receiver the receiver is resized to the new minimum size param width the new minimum width for the receiver param height the new minimum height for the receiver exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 1
Sets the receiver s minimum size to the size specified by the argument If the new minimum size is larger than the current size of the receiver the receiver is resized to the new minimum size param size the new minimum size for the receiver exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the point is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 1
Sets the shape of the shell to the region specified by the argument When the argument is null the default shape of the shell is restored The shell must be created with the style SWT NO TRIM in order to specify a region param region the region that defines the shape of the shell or null exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the region has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
Feature in Windows Despite the fact that the tool tip text contains r n the tooltip will not honour the new line unless TTM SETMAXTIPWIDTH is set The fix is to set TTM SETMAXTIPWIDTH to a large value
Ensure that the current position of the mouse is inside the client area of the shell This prevents tool tips from popping up over the shell trimmings
Ensure that the current position of the mouse is inside the client area of the shell This prevents tool tips from popping up over the shell trimmings
Feature in Windows When ShowWindow is called used to hide a window Windows attempts to give focus to the parent If the parent is disabled by EnableWindow focus is assigned to another windows on the desktop This means that if you hide a modal window before the parent is enabled the parent will not come to the front The fix is to change the modal state before hiding or showing a window so that this does not occur
Bug in Windows Calling ShowOwnedPopups to hide the child windows of a hidden window causes the application to be deactivated The fix is to call ShowOwnedPopups to hide children before hiding the parent
Feature in Windows When a window that does not have a parent is created it is automatically added to the Windows Task Bar even when it has no title The fix is to use WS EX TOOLWINDOW which does not cause the window to appear in the Task Bar
Bug in Windows 98 and NT Creating a window with the WS EX TOPMOST extended style can result in a dialog shell being moved behind its parent The exact case where this happens is a shell with two dialog shell children where each dialog child has another hidden dialog child with the WS EX TOPMOST extended style Clicking on either of the visible dialogs causes them to become active but move to the back behind the parent shell The fix is to disallow the WS EX TOPMOST extended style on Windows 98 and NT
Feature in WinCE Calling CreateWindowEx with WS OVERLAPPED and a parent window causes the new window to become a WS CHILD of the parent instead of a dialog child The fix is to use WS POPUP for a window with a parent Feature in WinCE PPC A window without a parent with WS POPUP always shows on top of the Pocket PC Today Screen The fix is to not set WS POPUP for a window without a parent on WinCE devices NOTE WS POPUP causes CreateWindowEx to ignore CW USEDEFAULT and causes the default window location and size to be zero
Use WS OVERLAPPED for all windows either dialog or top level so that CreateWindowEx will respect CW USEDEFAULT and set the default window location and size NOTE When a WS OVERLAPPED window is created Windows gives the new window WS CAPTION style bits These two constants are as follows WS OVERLAPPED 0 WS CAPTION WS BORDER WS DLGFRAME
Note this does not work when we get WM ACTIVATE prior to adding a listener
Restore SIP state when window is activated
Bug in Windows XP When a Shell is deactivated the IME composition window does not go away This causes repaint issues The fix is to close the IME to cause the composition string to be committed Note The IME needs to be reopened in order to preserve the input method status
Note in WinCE PPC Close the Shell when the Done Button has been pressed lParam is either 0 PocketPC 2002 or the handle to the Shell PocketPC
Feature in Windows On PPC the menu is not actually an HMENU By observation it is a tool bar that is configured to look like a menu Therefore when the PPC menu sends WM COMMAND messages lParam is not zero because the WM COMMAND was not sent from a menu Sub menu item events originate from the menu bar Top menu items events originate from a tool bar The fix is to detect the source of the WM COMMAND and set lParam to zero to pretend that the message came from a real Windows menu not a tool bar
When the shell is a WS CHILD window of a non SWT window the destroy code does not get called because the non SWT window does not call dispose Instead the destroy code is called here in WM DESTROY
Check for WM MOUSEACTIVATE when an MDI shell is active and stop the normal shell activation but allow the mouse down to be delivered
Get the current location of the cursor not the location of the cursor when the WM MOUSEACTIVATE was generated This is strictly incorrect but is necessary in order to support Activate and Deactivate events for embedded widgets that have their own event loop In that case the cursor location reported by GetMessagePos is the one for our event loop not the embedded widget s event loop
When a shell is created with SWT ON TOP and SWT NO FOCUS do not activate the shell when the user clicks on the the client area or on the border or a control within the shell that does not take focus
When the normal activation was interruped in WM MOUSEACTIVATE because the active shell was an MDI shell set the active window to the top level shell but lock the active window and stop focus changes This allows the user to interact the top level shell in the normal manner
Feature in Windows When the shell is disabled by a Windows standard dialog like a MessageBox or FileDialog clicking in the shell does not bring the shell or the dialog to the front The fix is to detect this case and bring the shell forward
When the shell that contains a cursor is disabled WM SETCURSOR is called with HTERROR Normally when a control is disabled the parent will get mouse and cursor events In the case of a disabled shell there is no enabled parent In order to show the cursor when a shell is disabled it is necessary to override WM SETCURSOR when called with HTERROR to set the cursor but only when the mouse is in the client area of the shell
The SIP is in a new state Cache its new value Resize the Shell if it has the style SWT RESIZE Note that SHHandleWMSettingChange resizes the Shell and also updates the cached state
Bug in Windows If the shell is hidden while the parent is iconic Windows shows the shell when the parent is deiconified This does not happen if the shell is hidden while the parent is not an icon The fix is to track visible state for the shell and refuse to show the shell when the parent is shown
Feature in Windows When the last visible window in a process minimized Windows swaps out the memory for the process The assumption is that the user can no longer interact with the window so the memory can be released to other applications However for programs that use a lot of memory swapping the memory back in can take a long time sometimes minutes The fix is to intercept WM SYSCOMMAND looking for SC MINIMIZE and use ShowWindow with SW SHOWMINIMIZED to minimize the window rather than running the default window proc NOTE The default window proc activates the next top level window in the Z order while ShowWindow with SW SHOWMINIMIZED does not There is no fix for this at this time
