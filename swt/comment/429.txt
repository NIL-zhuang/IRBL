Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT ARROW see SWT CHECK see SWT PUSH see SWT RADIO see SWT TOGGLE see SWT FLAT see SWT LEFT see SWT RIGHT see SWT CENTER see Widget checkSubclass see Widget getStyle
FALL THROUGH
Feature in Windows The button control mirrors its image when the flag WS EX LAYOUTRTL is set This behaviour is not desirable in SWT The fix is to set a mirrored version of real image in the button
Adds the listener to the collection of listeners who will be notified when the control is selected by sending it one of the messages defined in the code SelectionListener code interface p code widgetSelected code is called when the control is selected code widgetDefaultSelected code is not called p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see removeSelectionListener see SelectionEvent
Feature in Windows BM CLICK sends a fake WM LBUTTONDOWN and WM LBUTTONUP in order to click the button This causes the application to get unexpected mouse events The fix is to ignore mouse events when they are caused by BM CLICK
Bug in Windows When a Button control is right to left and is disabled the first pixel of the text is clipped The fix is to append a space to the text
Returns a value which describes the position of the text or image in the receiver The value will be one of code LEFT code code RIGHT code or code CENTER code unless the receiver is an code ARROW code button in which case the alignment will indicate the direction of the arrow one of code LEFT code code RIGHT code code UP code or code DOWN code return the alignment exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s image if it has one or null if it does not return the receiver s image exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver is selected and false otherwise p When the receiver is of type code CHECK code or code RADIO code it is selected when it is checked When it is of type code TOGGLE code it is selected when it is pushed in If the receiver is of any other type this method returns false return the selection state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s text which will be an empty string if it has never been set or if the receiver is an code ARROW code button return the receiver s text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
if style SWT PUSH 0 return true
Feature in Windows When a radio button gets focus it selects the button in WM SETFOCUS Therefore it is not necessary to click the button or send events because this has already happened in WM SETFOCUS
Removes the listener from the collection of listeners who will be notified when the control is selected param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see addSelectionListener
setSelection true
Controls how text images and arrows will be displayed in the receiver The argument should be one of code LEFT code code RIGHT code or code CENTER code unless the receiver is an code ARROW code button in which case the argument indicates the direction of the arrow one of code LEFT code code RIGHT code code UP code or code DOWN code param alignment the new alignment exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When a radio button gets focus it selects the button in WM SETFOCUS The fix is to not assign focus to an unselected radio button
Sets the receiver s image to the argument which may be code null code indicating that no image should be displayed param image the image to display on the receiver may be code null code exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the image has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When a radio button gets focus it selects the button in WM SETFOCUS If the previous saved focus widget was a radio button allowing the shell to automatically restore the focus to the previous radio button will unexpectedly check that button The fix is to not assign focus to an unselected radio button
Feature in Windows When BM SETCHECK is used to set the checked state of a radio or check button it sets the WM TABSTOP style This is undocumented and unwanted The fix is to save and restore the window style bits
Sets the selection state of the receiver if it is of type code CHECK code code RADIO code or code TOGGLE code p When the receiver is of type code CHECK code or code RADIO code it is selected when it is checked When it is of type code TOGGLE code it is selected when it is pushed in param selected the new selection state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows When a Button control is right to left and is disabled the first pixel of the text is clipped The fix is to append a space to the text
Sets the receiver s text p This method sets the button label The label may include the mnemonic character but must not contain line delimiters p p Mnemonics are indicated by an amp that causes the next character to be the mnemonic When the user presses a key sequence that matches the mnemonic a selection event occurs On most platforms the mnemonic appears underlined but may be emphasised in a platform specific manner The mnemonic indicator character amp can be escaped by doubling it in the string causing a single amp to be displayed p param string the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the text is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When Windows sets focus to a radio button it sets the WM TABSTOP style This is undocumented and unwanted The fix is to save and restore the window style bits
NOTE The normal hot pressed and disabled state is computed relying on the fact that the increment between the direction states is invariant always separated by 4
