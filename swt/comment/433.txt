the operating system limit for the number of characters that the text field in an instance of this class can hold
These values can be different on different platforms Therefore they are not initialized in the declaration to stop the compiler from inlining
These are the undocumented control id s for the children of a combo box Since there are no constants for these values they may change with different versions of Windows but have been the same since Windows 3 0
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT DROP DOWN see SWT READ ONLY see SWT SIMPLE see Widget checkSubclass see Widget getStyle
Adds the argument to the end of the receiver s list param string the new item exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see add String int
Adds the argument to the receiver s list at the given zero relative index p Note To add an item at the end of the list use the result of calling code getItemCount code as the index or use code add String code p param string the new item param index the index for the item exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see add String
Adds the listener to the collection of listeners who will be notified when the receiver s text is modified by sending it one of the messages defined in the code ModifyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ModifyListener see removeModifyListener
Adds the listener to the collection of listeners who will be notified when the receiver s selection changes by sending it one of the messages defined in the code SelectionListener code interface p code widgetSelected code is called when the combo s list selection changes code widgetDefaultSelected code is typically called when ENTER is pressed the combo s text area p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see removeSelectionListener see SelectionEvent
Adds the listener to the collection of listeners who will be notified when the receiver s text is verified by sending it one of the messages defined in the code VerifyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see VerifyListener see removeVerifyListener since 3 1
Feature in Windows It is not possible to create a combo box that has a border using Windows style bits All combo boxes draw their own border and do not use the standard Windows border styles Therefore no matter what style bits are specified clear the BORDER bits so that the SWT style will match the Windows widget The Windows behavior is currently implemented on all platforms
Even though it is legal to create this widget with scroll bars they serve no useful purpose because they do not automatically scroll the widget s client area The fix is to clear the SWT style
Sets the selection in the receiver s text field to an empty selection starting just before the first character If the text field is editable this has the effect of placing the i beam at the start of the text p Note To clear the selected items in the receiver s list use code deselectAll code p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see deselectAll
Copies the selected text p The current selection is copied to the clipboard p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1
Get the text and list window procs
Bug in Windows If the combo box has the CBS SIMPLE style the list portion of the combo box is not drawn correctly the first time causing pixel corruption The fix is to ensure that the combo box has been resized more than once
Cuts the selected text p The current selection is first copied to the clipboard and then deleted from the widget p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1
Deselects the item at the given zero relative index in the receiver s list If the item at the index was already deselected it remains deselected Indices that are out of range are ignored param index the index of the item to deselect exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Deselects all selected items in the receiver s list p Note To clear the selection in the receiver s text field use code clearSelection code p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see clearSelection
Returns the item at the given zero relative index in the receiver s list Throws an exception if the index is out of range param index the index of the item to return return the item at the given index exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of items contained in the receiver s list return the number of items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the height of the area which would be used to display em one em of the items in the receiver s list return the height of one item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns a possibly empty array of code String code s which are the items in the receiver s list p Note This is not the actual structure used by the receiver to maintain its list of items so modifying the array will not affect the receiver p return the items in the receiver s list exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the orientation of the receiver return the orientation style exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1 2
Returns a code Point code whose x coordinate is the character position representing the start of the selection in the receiver s text field and whose y coordinate is the character position representing the end of the selection An empty selection is indicated by the x and y coordinates having the same value p Indexing is zero based The range of a selection is from 0 N where N is the number of characters in the widget p return a point representing the selection start and end exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the zero relative index of the item which is currently selected in the receiver s list or 1 if no item is selected return the index of the selected item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns a string containing a copy of the contents of the receiver s text field or an empty string if there are no contents return the receiver s text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the height of the receivers s text field return the text height exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the maximum number of characters that the receiver s text field is capable of holding If this has not been changed by code setTextLimit code it will be the constant code Combo LIMIT code return the text limit exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see LIMIT
Gets the number of items that are visible in the drop down portion of the receiver s list p Note This operation is a hint and is not supported on platforms that do not have this concept p return the number of items that are visible exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
Searches the receiver s list starting at the first item index 0 until an item is found that is equal to the argument and returns the index of that item If no item is found returns 1 param string the search item return the index of the item exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows For some reason CB FINDSTRINGEXACT will not find empty strings even though it is legal to insert an empty string into a combo The fix is to search the combo an item at a time
Use CB FINDSTRINGEXACT to search for the item
Searches the receiver s list starting at the given zero relative index until an item is found that is equal to the argument and returns the index of that item If no item is found or the starting index is out of range returns 1 param string the search item param start the zero relative index at which to begin the search return the index of the item exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Pastes text from clipboard p The selected text is deleted from the widget and new text inserted from the clipboard p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1
It is possible but unlikely that application code could have disposed the widget in the modify event If this happens just return
Bug in Windows When the combo box is read only with exactly one item that is currently selected and that item is removed the combo box does not redraw to clear the text area The fix is to force a redraw
Removes the item from the receiver s list at the given zero relative index param index the index for the item exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
It is possible but unlikely that application code could have disposed the widget in the modify event If this happens just return
Bug in Windows When the combo box is read only with exactly one item that is currently selected and that item is removed the combo box does not redraw to clear the text area The fix is to force a redraw
Removes the items from the receiver s list which are between the given zero relative start and end indices inclusive param start the start of the range param end the end of the range exception IllegalArgumentException ul li ERROR INVALID RANGE if either the start or end are not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Searches the receiver s list starting at the first item until an item is found that is equal to the argument and removes that item from the list param string the item to remove exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li li ERROR INVALID ARGUMENT if the string is not found in the list li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Removes all of the items from the receiver s list and clear the contents of receiver s text field p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Removes the listener from the collection of listeners who will be notified when the receiver s text is modified param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ModifyListener see addModifyListener
Removes the listener from the collection of listeners who will be notified when the receiver s selection changes param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see addSelectionListener
Removes the listener from the collection of listeners who will be notified when the control is verified param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see VerifyListener see addVerifyListener since 3 1
Disable all magic keys that could modify the text and don t send events when Alt Shift or Ctrl is pressed
FALL THROUGH
If the left button is down the text widget refuses the character
Verify the character
Bs
Del
Return
Tab and other characters
Selects the item at the given zero relative index in the receiver s list If the item at the index was already selected it remains selected Indices that are out of range are ignored param index the index of the item to select exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When a drop down combo box is resized the combo box resizes the height of the text field and uses the height provided in SetWindowPos to determine the height of the drop down list For some reason the combo box redraws the whole area not just the text field The fix is to set the SWP NOSIZE bits when the height of text field and the drop down list is the same as the requested height NOTE Setting the width of a combo box to zero does not update the width of the drop down control rect If the width of the combo box is zero then do not set SWP NOSIZE
Feature in Windows If the combo box has the CBS DROPDOWN or CBS DROPDOWNLIST style Windows uses the height that the programmer sets in SetWindowPos to control height of the drop down list When the width is non zero Windows remembers this value and sets the height to be the height of the text field part of the combo box If the width is zero Windows allows the height to have any value Therefore when the programmer sets and then queries the height the values can be different depending on the width The problem occurs when the programmer uses computeSize to determine the preferred height always the height of the text field and then uses this value to set the height of the combo box The result is a combo box with a zero size drop down list The fix is to always set the height to show a fixed number of combo box items and ignore the height value that the programmer supplies
It is possible but unlikely that application code could have disposed the widget in the modify event that might be sent when the index is removed If this happens just exit
Sets the text of the item in the receiver s list at the given zero relative index to the string argument This is equivalent to removing the old item at the index and then adding the new item at that index param index the index for the item param string the new text for the item exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
widget could be disposed at this point
Sets the receiver s list to be the given array of items param items the array of items exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the items array is null li li ERROR INVALID ARGUMENT if an item in the items array is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows For some reason the single line text field portion of the combo box does not redraw to reflect the new style bits The fix is to force the widget to be resized by temporarily shrinking and then growing the width and height
Sets the orientation of the receiver which must be one of the constants code SWT LEFT TO RIGHT code or code SWT RIGHT TO LEFT code p param orientation new orientation style exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1 2
Sets the selection in the receiver s text field to the range specified by the argument whose x coordinate is the start of the selection and whose y coordinate is the end of the selection param selection a point representing the new selection start and end exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the point is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the contents of the receiver s text field to the given string p Note The text field in a code Combo code is typically only capable of displaying a single line of text Thus setting the text to a string containing line breaks or other special characters will probably cause it to display incorrectly p param string the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the maximum number of characters that the receiver s text field is capable of holding to be the argument p To reset this value to the default use code setTextLimit Combo LIMIT code Specifying a limit value larger than code Combo LIMIT code sets the receiver s limit to code Combo LIMIT code p param limit new text limit exception IllegalArgumentException ul li ERROR CANNOT BE ZERO if the limit is zero li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see LIMIT
Sets the number of items that are visible in the drop down portion of the receiver s list p Note This operation is a hint and is not supported on platforms that do not have this concept p param count the new number of items to be visible exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
When the combo box is dropped down allow return to select an item in the list and escape to close the combo box
It is possible but unlikely that application code could have disposed the widget in the verify event If this happens answer null to cancel the operation
Keyboard messages
Mouse Messages
case OS WM MOUSEWHEEL result wmMouseWheel hwnd wParam lParam break
Paint messages
Menu messages
Clipboard messages
Bug in Windows When a combo box that is read only is disposed in CBN KILLFOCUS Windows segment faults The fix is to send focus from WM KILLFOCUS instead of CBN KILLFOCUS NOTE In version 6 of COMCTL32 DLL the bug is fixed
Return NULL Focus notification is done in WM COMMAND by CBN KILLFOCUS
Feature in Windows When an editable combo box is dropped down and the text in the entry field partially matches an item in the list Windows selects the item but doesn t send WM COMMAND with CBN SELCHANGE The fix is to detect that the selection has changed and issue the notification
Return NULL Focus notification is done by WM COMMAND with CBN SETFOCUS
Bug in Windows If the combo box has the CBS SIMPLE style the list portion of the combo box is not redrawn when the combo box is resized The fix is to force a redraw when the size has changed
Feature in Windows When an editable drop down combo box contains text that does not correspond to an item in the list when the widget is resized it selects the closest match from the list The fix is to remember the original text and reset it after the widget is resized
It is possible but unlikely that application code could have disposed the widget in the resize event If this happens end the processing of the Windows message by returning the result of the WM SIZE message
Feature in Windows For some reason when the widget is a single line text widget when the user presses tab return or escape Windows beeps The fix is to look for these keys and not call the window proc NOTE This only happens when the drop down list is not visible
FALL THROUGH
Feature in Windows If the combo box list selection is queried using CB GETCURSEL before the WM COMMAND with CBN EDITCHANGE returns CB GETCURSEL returns the previous selection in the list It seems that the combo box sends the WM COMMAND before it makes the selection in the list box match the entry field The fix is remember that no selection in the list should exist in this case
Feature in Windows If the text in an editable combo box is queried using GetWindowText before the WM COMMAND with CBN SELCHANGE returns GetWindowText returns is the previous text in the combo box It seems that the combo box sends the WM COMMAND before it updates the text field to match the list selection The fix is to force the text field to match the list selection by re selecting the list item
It is possible but unlikely that application code could have disposed the widget in the modify event If this happens end the processing of the Windows message by returning zero as the result of the window proc
Bug in Windows When a combo box that is read only is disposed in CBN KILLFOCUS Windows segment faults The fix is to send focus from WM KILLFOCUS instead of CBN KILLFOCUS NOTE In version 6 of COMCTL32 DLL the bug is fixed
Process a DBCS character
Feature in Windows The Windows text widget uses two 2 WM CHAR s to process a DBCS key instead of using WM IME CHAR The fix is to allow the text widget to get the WM CHAR s but ignore sending them to the application
widget could be disposed at this point
