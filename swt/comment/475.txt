Instances of this class represent a selectable user interface object that represents a button in a tool bar dl dt b Styles b dt dd PUSH CHECK RADIO SEPARATOR DROP DOWN dd dt b Events b dt dd Selection dd dl p Note Only one of the styles CHECK PUSH RADIO SEPARATOR and DROP DOWN may be specified p p IMPORTANT This class is em not em intended to be subclassed p
Constructs a new instance of this class given its parent which must be a code ToolBar code and a style value describing its behavior and appearance The item is added to the end of the items maintained by its parent p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT PUSH see SWT CHECK see SWT RADIO see SWT SEPARATOR see SWT DROP DOWN see Widget checkSubclass see Widget getStyle
Constructs a new instance of this class given its parent which must be a code ToolBar code a style value describing its behavior and appearance and the index at which to place it in the items maintained by its parent p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct param index the index to store the receiver in its parent exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT PUSH see SWT CHECK see SWT RADIO see SWT SEPARATOR see SWT DROP DOWN see Widget checkSubclass see Widget getStyle
Adds the listener to the collection of listeners who will be notified when the control is selected by sending it one of the messages defined in the code SelectionListener code interface p When code widgetSelected code is called when the mouse is over the arrow portion of a drop down tool the event object detail field contains the value code SWT ARROW code code widgetDefaultSelected code is not called p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see removeSelectionListener see SelectionEvent
In order to emulate all the processing that happens when a mnemonic key is pressed fake a mouse press and release This will ensure that radio and pull down items are handled properly
In order to be consistent with the way that disabled images appear in other places in the user interface use the SWT Graphics to create a disabled image instead of calling DrawState
Returns a rectangle describing the receiver s size and location relative to its parent return the receiver s bounding rectangle exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the control that is used to fill the bounds of the item when the items is a code SEPARATOR code return the control exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s disabled image if it has one or null if it does not p The disabled image is displayed when the receiver is disabled p return the receiver s disabled image exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver is enabled and code false code otherwise A disabled control is typically not selectable from the user interface and draws with an inactive or grayed look return the receiver s enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see isEnabled
Returns the receiver s hot image if it has one or null if it does not p The hot image is displayed when the mouse enters the receiver p return the receiver s hot image exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s parent which must be a code ToolBar code return the receiver s parent exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver is selected and false otherwise p When the receiver is of type code CHECK code or code RADIO code it is selected when it is checked which some platforms draw as a pushed in button If the receiver is of any other type this method returns false p return the selection state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s tool tip text or null if it has not been set return the receiver s tool tip text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Gets the width of the receiver return the width exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver is enabled and all of the receiver s ancestors are enabled and code false code otherwise A disabled control is typically not selectable from the user interface and draws with an inactive or grayed look return the receiver s enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see getEnabled
Feature in Windows For some reason a tool item that has the style BTNS SEP does not return I IMAGENONE when queried for an image index despite the fact that no attempt has been made to assign an image to the item As a result operations on an image list that use the wrong index cause random results The fix is to ensure that the tool item is not a separator before using the image index Since separators cannot have an image and one is never assigned this is not a problem
Removes the listener from the collection of listeners who will be notified when the control is selected param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see addSelectionListener
Set the size and location of the control separately to minimize flashing in the case where the control does not resize to the size that was requested This case can occur when the control is a combo box
Bug in Windows When TB SETBUTTONINFO changes the style of a tool item from BTNS SEP to BTNS BUTTON and the tool bar is wrapped the tool bar does not redraw properly Windows uses separator items as wrap points and sometimes draws etching above or below and entire row The fix is to redraw the tool bar
Feature in Windows When a tool bar wraps tool items with the style BTNS SEP are used as wrap points This means that controls that are placed on top of separator items are not positioned properly Also vertical tool bars are implemented using TB SETROWS to set the number of rows When a control is placed on top of a separator the height of the separator does not grow The fix in both cases is to change the tool item style from BTNS SEP to BTNS BUTTON causing the item to wrap like a tool item button The new tool item button is disabled to avoid key traversal and the image is set to I IMAGENONE to avoid getting the first image from the image list
Sets the control that is used to fill the bounds of the item when the items is a code SEPARATOR code param control the new control exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the control has been disposed li li ERROR INVALID PARENT if the control is not in the same widget tree li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When TB SETSTATE is used to set the state of a tool item the item redraws even when the state has not changed The fix is to detect this case and avoid setting the state
Enables the receiver if the argument is code true code and disables it otherwise p A disabled control is typically not selectable from the user interface and draws with an inactive or grayed look p param enabled the new enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the receiver s disabled image to the argument which may be null indicating that no disabled image should be displayed p The disbled image is displayed when the receiver is disabled p param image the disabled image to display on the receiver may be null exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the image has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the receiver s hot image to the argument which may be null indicating that no hot image should be displayed p The hot image is displayed when the mouse enters the receiver p param image the hot image to display on the receiver may be null exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the image has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When TB SETSTATE is used to set the state of a tool item the item redraws even when the state has not changed The fix is to detect this case and avoid setting the state
Bug in Windows When a tool item with the style BTNS CHECK or BTNS CHECKGROUP is selected and then disabled the item does not draw using the disabled image The fix is to use the disabled image in all image lists NOTE This means that the image list must be updated when the selection changes in a disabled tool item
Sets the selection state of the receiver p When the receiver is of type code CHECK code or code RADIO code it is selected when it is checked which some platforms draw as a pushed in button p param selected the new selection state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows For some reason when the font is set before any tool item has text the tool items resize to a very small size Also a tool item will only show text when text has already been set on one item and then a new item is created The fix is to use WM SETFONT to force the tool bar to redraw and layout
Sets the receiver s text The string may include the mnemonic character p p Mnemonics are indicated by an amp that causes the next character to be the mnemonic When the user presses a key sequence that matches the mnemonic a selection event occurs On most platforms the mnemonic appears underlined but may be emphasised in a platform specific manner The mnemonic indicator character amp can be escaped by doubling it in the string causing a single amp to be displayed p param string the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the text is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the receiver s tool tip text to the argument which may be null indicating that no tool tip text should be shown param string the new tool tip text or null exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the width of the receiver for code SEPARATOR code ToolItems param width the new width exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows When a tool item with the style BTNS CHECK or BTNS CHECKGROUP is selected and then disabled the item does not draw using the disabled image The fix is to use the disabled image in all image lists
Bug in Windows When a tool item with the style BTNS CHECK or BTNS CHECKGROUP is selected and then disabled the item does not draw using the disabled image The fix is to assign the disabled image in all image lists
Bug in Windows If the width of an item has already been calculated the tool bar control will not recalculate it to include the space for the image The fix is to set the width to zero forcing the control recalculate the width for the item
if style SWT RADIO 0 return OS BTNS CHECKGROUP
