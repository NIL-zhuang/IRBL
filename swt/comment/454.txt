the handle to the OS resource Warning This field is platform dependent p b IMPORTANT b This field is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be accessed from application code p
Resource ID for SHMENUBARINFO
SmartPhone SoftKeyBar resource ids
Constructs a new instance of this class given its parent and sets the style for the instance so that the instance will be a popup menu on the given parent s shell param parent a control which will be the parent of the new instance cannot be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT POP UP see Widget checkSubclass see Widget getStyle
Constructs a new instance of this class given its parent which must be a code Decorations code and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a decorations control which will be the parent of the new instance cannot be null param style the style of menu to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT BAR see SWT DROP DOWN see SWT POP UP see Widget checkSubclass see Widget getStyle
Constructs a new instance of this class given its parent which must be a code Menu code and sets the style for the instance so that the instance will be a drop down menu on the given parent s parent param parentMenu a menu which will be the parent of the new instance cannot be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT DROP DOWN see Widget checkSubclass see Widget getStyle
Constructs a new instance of this class given its parent which must be a code MenuItem code and sets the style for the instance so that the instance will be a drop down menu on the given parent s parent menu param parentItem a menu item which will be the parent of the new instance cannot be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT DROP DOWN see Widget checkSubclass see Widget getStyle
Bug in IBM VM 1 3 1 For some reason when the checkOrientation is called from createWidget the VM issues this error VM Exception 0x2 subcode 0x0 occurred in thread main TID 0x9F19D8 In addition on Windows XP a dialog appears with following error message indicating that the problem may be in the IT AppName java exe AppVer 0 0 0 0 ModName jitc dll ModVer 0 0 0 0 Offset 000b6912 The fix is to call checkOrientation from here
Feature in Windows It is legal use TrackPopupMenu to display an empty menu as long as menu items are added inside of WM INITPOPUPMENU If no items are added then TrackPopupMenu fails and does not send an indication that the menu has been closed This is not strictly a bug but leads to unwanted behavior when application code assumes that every WM INITPOPUPMENU will eventually result in a WM MENUSELECT wParam 0xFFFF0000 lParam 0 to indicate that the menu has been closed The fix is to detect the case when TrackPopupMenu fails and the number of items in the menu is zero and issue a fake WM MENUSELECT
Adds the listener to the collection of listeners who will be notified when help events are generated for the control by sending it one of the messages defined in the code HelpListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see HelpListener see removeHelpListener
Adds the listener to the collection of listeners who will be notified when menus are hidden or shown by sending it one of the messages defined in the code MenuListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see MenuListener see removeMenuListener
Remove the item from the resource file
Determine type of menubar
Create SHMENUBAR
as defined in rc file
Feature on WinCE SmartPhone The SHCMBF HIDDEN flag causes the SHMENUBAR to not be drawn However the keyboard events still go through it The workaround is to also hide the SHMENUBAR with ShowWindow
Remove the item from the resource file
Set first item
Set second item
Override the Back key For some reason the owner of the menubar must be a Dialog or it won t receive the WM HOTKEY message As a result Shell on WinCE SP must use the class Dialog
Note in WinCE SmartPhone The SoftBar contains only 2 items An item can either be a menu or a button SWT BAR creates a SoftBar with 2 menus SWT BAR SWT BUTTON1 creates a SoftBar with 1 button for button1 and a menu for button2 SWT BAR SWT BUTTON1 SWT BUTTON2 creates a SoftBar with 2 buttons
The command bar hosts the close button when the window does not have a caption
Bug in Windows For some reason when InsertMenuItem is used to insert an item without text it is not possible to use SetMenuItemInfo to set the text at a later time The fix is to insert the item with some text Feature in Windows When an empty string is used instead of a space and InsertMenuItem is used to set a submenu before setting text to a non empty string the menu item becomes unexpectedly disabled The fix is to insert a space
checkOrientation parent
Currently not used
Currently not used
public
Returns the default menu item or null if none has been previously set return the default menu item ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver is enabled and code false code otherwise A disabled menu is typically not selectable from the user interface and draws with an inactive or grayed look return the receiver s enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see isEnabled
Returns the item at the given zero relative index in the receiver Throws an exception if the index is out of range param index the index of the item to return return the item at the given index exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of items contained in the receiver return the number of items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns a possibly empty array of code MenuItem code s which are the items in the receiver p Note This is not the actual structure used by the receiver to maintain its list of items so modifying the array will not affect the receiver p return the items in the receiver exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s parent which must be a code Decorations code return the receiver s parent exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s parent item which must be a code MenuItem code or null when the receiver is a root return the receiver s parent item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s parent item which must be a code Menu code or null when the receiver is a root return the receiver s parent item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s shell For all controls other than shells this simply returns the control s nearest ancestor shell Shells return themselves even if they are children of other shells return the receiver s shell exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see getParent
Returns code true code if the receiver is visible and code false code otherwise p If one of the receiver s ancestors is not visible or some other condition makes the receiver not visible this method may still indicate that it is considered visible even though it may not actually be showing p return the receiver s visibility state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Searches the receiver s list starting at the first item index 0 until an item is found that is equal to the argument and returns the index of that item If no item is found returns 1 param item the search item return the index of the item exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver is enabled and all of the receiver s ancestors are enabled and code false code otherwise A disabled menu is typically not selectable from the user interface and draws with an inactive or grayed look return the receiver s enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see getEnabled
Returns code true code if the receiver is visible and all of the receiver s ancestors are visible and code false code otherwise return the receiver s visibility state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see getVisible
Removes the listener from the collection of listeners who will be notified when the help events are generated for the control param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see HelpListener see addHelpListener
Removes the listener from the collection of listeners who will be notified when the menu events are generated for the control param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see MenuListener see addMenuListener
Sets the default menu item to the argument or removes the default emphasis when the argument is code null code param item the default menu item or null exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the menu item has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Enables the receiver if the argument is code true code and disables it otherwise A disabled menu is typically not selectable from the user interface and draws with an inactive or grayed look param enabled the new enabled state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the location of the receiver which must be a popup to the point specified by the arguments which are relative to the display p Note that this is different from most widgets where the location of the widget is relative to the parent p p Note that the platform window manager ultimately has control over the location of popup menus p param x the new x coordinate for the receiver param y the new y coordinate for the receiver exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the location of the receiver which must be a popup to the point specified by the argument which is relative to the display p Note that this is different from most widgets where the location of the widget is relative to the parent p p Note that the platform window manager ultimately has control over the location of popup menus p param location the new location for the receiver exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the point is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1
Marks the receiver as visible if the argument is code true code and marks it invisible otherwise p If one of the receiver s ancestors is not visible or some other condition makes the receiver not visible marking it visible may not actually cause it to be displayed p param visible the new visibility state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Each time a menu has been modified the command menu bar must be redrawn or it won t update properly For example a submenu will not drop down
Bug in Windows If a menu contains items that have images and can be checked Windows does not include the width of the image and the width of the check when computing the width of the menu When the longest item does not have an image the label and the accelerator text can overlap The fix is to use SetMenuItemInfo to indicate that all items have a bitmap and then include the width of the widest bitmap in WM MEASURECHILD NOTE This work around causes problems on Windows 98 Under certain circumstances that have yet to be isolated some menus can become huge and blank For now do not run the code on Windows 98
Update the menu to hide or show the space for bitmaps
