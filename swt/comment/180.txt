code TextLayout code is a graphic object that represents styled text p Instances of this class provide support for drawing cursor navigation hit testing text wrapping alignment tab expansion line breaking etc These are aspects required for rendering internationalized text p p Application code must explicitly invoke the code TextLayout dispose code method to release the operating system resources managed by each instance when those instances are no longer required p since 3 0
Script cache and analysis
Shape info malloc when the run is shaped
Place info malloc when the run is placed
ScriptBreak
ReleaseFont
NON NLS 1
Constructs a new instance of this class on the given device p You must dispose the text layout when it is no longer required p param device the device on which to allocate the text layout exception IllegalArgumentException ul li ERROR NULL ARGUMENT if device is null and there is no current device li ul see dispose
Feature in Windows The fallback font returned by the MLang service can be disposed by some other client running in the same thread For example disposing a Browser widget internally releases all fonts in the MLang cache The fix is to use GetObject to detect if the font was disposed and reshape the run
Bug in Windows For some reason Uniscribe sets the fSoftBreak flag for the first letter after a letter with an accent This cause a break line to be set in the middle of a word The fix is to detect the case and ignore fSoftBreak forcing the algorithm keep searching
Update the run metrics if the last run is a hard break
Compute the runs itemize shape place and reorder the runs Break paragraphs into lines wraps the text and initialize caches
Release
Disposes of the operating system resources associated with the text layout Applications must dispose of all allocated text layouts
Draws the receiver s text using the specified GC at the specified point param gc the GC to draw param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the gc is null li ul
Draws the receiver s text using the specified GC at the specified point param gc the GC to draw param x the x coordinate of the top left corner of the rectangular area where the text is to be drawn param y the y coordinate of the top left corner of the rectangular area where the text is to be drawn param selectionStart the offset where the selections starts or 1 indicating no selection param selectionEnd the offset where the selections ends or 1 indicating no selection param selectionForeground selection foreground or NULL to use the system default color param selectionBackground selection background or NULL to use the system default color exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the gc is null li ul
Returns the receiver s horizontal text alignment which will be one of code SWT LEFT code code SWT CENTER code or code SWT RIGHT code return the alignment used to positioned text horizontally exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the ascent of the receiver return the ascent exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getDescent see setDescent int see setAscent int see getLineMetrics int
Returns the bounds of the receiver return the bounds of the receiver exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the bounds for the specified range of characters The bounds is the smallest rectangle that encompasses all characters in the range The start and end offsets are inclusive and will be clamped if out of range param start the start offset param end the end offset return the bounds of the character range exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the descent of the receiver return the descent exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getAscent see setAscent int see setDescent int see getLineMetrics int
Returns the default font currently being used by the receiver to draw and measure text return the receiver s font exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the embedding level for the specified character offset The embedding level is usually used to determine the directionality of a character in bidirectional text param offset the charecter offset return the embedding level exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the character offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li
Returns the bounds of the line for the specified line index param lineIndex the line index return the line bounds exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the line index is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the receiver s line count This includes lines caused by wrapping return the line count exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the index of the line that contains the specified character offset param offset the character offset return the line index exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the character offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the font metrics for the specified line index param lineIndex the line index return the font metrics exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the line index is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the line offsets Each value in the array is the offset for the first character in a line except for the last value which contains the length of the text return the line offsets exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the location for the specified character offset The code trailing code argument indicates whether the offset corresponds to the leading or trailing edge of the cluster param offset the character offset param trailing the trailing flag return the location of the character offset exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getOffset Point int see getOffset int int int
Returns the next offset for the specified offset and movement type The movement is one of code SWT MOVEMENT CHAR code code SWT MOVEMENT CLUSTER code or code SWT MOVEMENT WORD code param offset the start offset param movement the movement type return the next offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getPreviousOffset int int
Returns the character offset for the specified point For a typical character the trailing argument will be filled in to indicate whether the point is closer to the leading edge 0 or the trailing edge 1 When the point is over a cluster composed of multiple characters the trailing argument will be filled with the position of the character in the cluster that is closest to the point param point the point param trailing the trailing buffer return the character offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the trailing length is less than code 1 code li li ERROR NULL ARGUMENT if the point is null li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getLocation int boolean
Returns the character offset for the specified point For a typical character the trailing argument will be filled in to indicate whether the point is closer to the leading edge 0 or the trailing edge 1 When the point is over a cluster composed of multiple characters the trailing argument will be filled with the position of the character in the cluster that is closest to the point param x the x coordinate of the point param y the y coordinate of the point param trailing the trailing buffer return the character offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the trailing length is less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getLocation int boolean
Returns the orientation of the receiver return the orientation style exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the previous offset for the specified offset and movement type The movement is one of code SWT MOVEMENT CHAR code code SWT MOVEMENT CLUSTER code or code SWT MOVEMENT WORD code param offset the start offset param movement the movement type return the previous offset exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see getNextOffset int int
Returns the text segments offsets of the receiver return the text segments offsets exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the line spacing of the receiver return the line spacing exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Gets the style of the receiver at the specified character offset param offset the text offset return the style or code null code if not set exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the character offset is out of range li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the tab list of the receiver return the tab list exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Gets the receiver s text which will be an empty string if it has never been set return the receiver s text exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns the width of the receiver return the width exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Returns code true code if the text layout has been disposed and code false code otherwise p This method gets the dispose state for the text layout When a text layout has been disposed it is an error to invoke any other method using the text layout return code true code when the text layout is disposed and code false code otherwise
Itemize the receiver text
Merge styles ranges and script items
Feature in Windows If the orientation is RTL Uniscribe will resolve the level of line breaks to 1 this can cause the line break to be reorder to the middle of the line The fix is to set the level to zero to prevent it to be reordered
Reorder the run
Sets the text alignment for the receiver The alignment controls how a line of text is positioned horizontally The argument should be one of code SWT LEFT code code SWT RIGHT code or code SWT CENTER code p The default alignment is code SWT LEFT code Note that the receiver s width must be set in order to use code SWT RIGHT code or code SWT CENTER code alignment p param alignment the new alignment exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setWidth int
Sets the ascent of the receiver The ascent is distance in pixels from the baseline to the top of the line and it is applied to all lines The default value is code 1 code which means that the ascent is calculated from the line fonts param ascent the new ascent exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the ascent is less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setDescent int see getLineMetrics int
Sets the descent of the receiver The descent is distance in pixels from the baseline to the bottom of the line and it is applied to all lines The default value is code 1 code which means that the descent is calculated from the line fonts param descent the new descent exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the descent is less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setAscent int see getLineMetrics int
Sets the default font which will be used by the receiver to draw and measure text If the argument is null then a default font appropriate for the platform will be used instead Note that a text style can override the default font param font the new font for the receiver or null to indicate a default font exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the font has been disposed li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Sets the orientation of the receiver which must be one of code SWT LEFT TO RIGHT code or code SWT RIGHT TO LEFT code p param orientation new orientation style exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Sets the offsets of the receiver s text segments Text segments are used to override the default behaviour of the bidirectional algorithm Bidirectional reordering can happen within a text segment but not between two adjacent segments Each text segment is determined by two consecutive offsets in the code segments code arrays The first element of the array should always be zero and the last one should always be equals to length of the text p param segments the text segments offset exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Sets the line spacing of the receiver The line spacing is the space left between lines param spacing the new line spacing exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the spacing is negative li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Sets the style of the receiver for the specified range Styles previously set for that range will be overwritten The start and end offsets are inclusive and will be clamped if out of range param style the style param start the start offset param end the end offset exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Sets the receiver s tab list Each value in the tab list specifies the space in pixels from the origin of the text layout to the respective tab stop The last tab stop width is repeated continuously param tabs the new tab list exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Sets the receiver s text param text the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the text is null li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul
Sets the line width of the receiver which determines how text should be wrapped and aligned The default value is code 1 code which means wrapping is disabled param width the new width exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the width is code 0 code or less than code 1 code li ul exception SWTException ul li ERROR GRAPHIC DISPOSED if the receiver has been disposed li ul see setAlignment int
GetStrCodePages
ReleaseFont
MapFont
Generate glyphs for one Run
Returns a string containing a concise human readable description of the receiver return a string representation of the receiver
