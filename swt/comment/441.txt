the handle to the OS message queue Warning This field is platform dependent p b IMPORTANT b This field is em not em part of the SWT public API It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be accessed from application code p
Windows and Events
NON NLS 1
NON NLS 1
Widget Table
NON NLS 1
Focus
Menus
The start value for WM COMMAND id s Windows reserves the values 0 100 The SmartPhone SWT resource file reserves the values 101 107
Filter Hook
Idle Hook
Message Hook and Embedding
Sync Async Widget Communication
Display Shutdown
System Tray
Timers
Keyboard and Mouse
MDI
Message Only Window
System Images Cache
System Cursors Cache
ImageList Cache
Custom Colors for ChooseColor
Display Data
Key Mappings
Keyboard and Mouse Masks
Non Numeric Keypad Keys
Virtual and Ascii Keys
Functions Keys
Numeric Keypad Keys
Other keys
Multiple Displays
Multiple Monitors
Modality
Private SWT Window Messages
Workaround for Adobe Reader 7 0
NON NLS 1
TEMPORARY CODE Install the runnable that gets the current display This code will be removed in the future
TEMPORARY CODE
Constructs a new instance of this class p Note The resulting display is marked as the em current em display If this is the first display which has been constructed since the application started it is also marked as the em default em display p exception SWTException ul li ERROR THREAD INVALID ACCESS if called from a thread that already created an existing display li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see getCurrent see getDefault see Widget checkSubclass see Shell
Constructs a new instance of this class using the parameter param data the device data
Adds the listener to the collection of listeners who will be notifed when an event of the given type occurs anywhere in a widget When the event does occur the listener is notified by sending it the code handleEvent code message p Setting the type of an event to code SWT None code from within the code handleEvent code method can be used to change the event type and stop subsequent ava listeners from running Because event filters run before other listeners event filters can both block other listeners and set arbitrary fields within an event For this reason event filters are both powerful and dangerous They should generally be avoided for performance debugging and code maintenance reasons p param eventType the type of event to listen for param listener the listener which should be notified when the event occurs exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see Listener see removeFilter see removeListener since 3 0
Adds the listener to the collection of listeners who will be notifed when an event of the given type occurs When the event does occur in the display the listener is notified by sending it the code handleEvent code message param eventType the type of event to listen for param listener the listener which should be notified when the event occurs exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see Listener see removeListener since 2 0
Get the current keyboard
Translate the key to ASCII or UNICODE using the virtual keyboard
Causes the code run code method of the runnable to be invoked by the user interface thread at the next reasonable opportunity The caller of this method continues to run in parallel and is not notified when the runnable has completed Specifying code null code as the runnable simply wakes the user interface thread when run p Note that at the time the runnable is invoked widgets that have the receiver as their display may have been disposed Therefore it is necessary to check for this case inside the runnable before accessing the widget p param runnable code to run on the user interface thread or code null code exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see syncExec
Causes the system hardware to emit a short sound if it supports this capability exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Checks that this class can be subclassed p IMPORTANT See the comment in code Widget checkSubclass code p exception SWTException ul li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see Widget checkSubclass
Requests that the connection between SWT and the underlying operating system be closed exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see Device dispose since 2 0
Creates the device in the operating system If the device does not have a handle this method may do nothing depending on the device p This method is called before code init code p param data the DeviceData which describes the receiver see init
Destroys the device in the operating system and releases the device s handle If the device does not have a handle this method may do nothing depending on the device p This method is called after code release code p see Device dispose see release
Causes the code run code method of the runnable to be invoked by the user interface thread just before the receiver is disposed Specifying a code null code runnable is ignored param runnable code to run at dispose time exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Does whatever display specific cleanup is required and then uses the code in code SWTError error code to handle the error param code the descriptive error code see SWT error int
Given the operating system handle for a widget returns the instance of the code Widget code subclass which represents it in the currently running application if such exists or null if no matching widget can be found p b IMPORTANT b This method should not be called from application code The arguments are platform specific p param handle the handle for the widget return the SWT widget that the handle represents exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Given the operating system handle for a widget and widget specific id returns the instance of the code Widget code subclass which represents the handle id pair in the currently running application if such exists or null if no matching widget can be found p b IMPORTANT b This method should not be called from application code The arguments are platform specific p param handle the handle for the widget param id the id for the subwidget usually an item return the SWT widget that the handle id pair represents exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 3 1
Returns the display which the given thread is the user interface thread for or null if the given thread is not a user interface thread for any display Specifying code null code as the thread will return code null code for the display param thread the user interface thread return the display for the given thread
Returns the currently active code Shell code or null if no shell belonging to the currently running application is active return the active shell or null exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns a rectangle describing the receiver s size and location return the bounding rectangle exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns the display which the currently running thread is the user interface thread for or null if the currently running thread is not a user interface thread for any display return the current display
Returns a rectangle which describes the area of the receiver which is capable of displaying data return the client area exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see getBounds
Because GWL USERDATA can be used by native widgets that do not belong to SWT it is possible that GWL USERDATA could return an index that is in the range of the table but was not put there by SWT Therefore it is necessary to check the handle of the control that is in the table against the handle that provided the GWL USERDATA
Returns the control which the on screen pointer is currently over top of or null if it is not currently over one of the controls built by the currently running application return the control under the cursor exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns the location of the on screen pointer relative to the top left corner of the screen return the cursor location exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns an array containing the recommended cursor sizes return the array of cursor sizes exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 3 0
Returns the default display One is created making the thread that invokes this method its user interface thread if it did not already exist return the default display
Returns the application defined property of the receiver with the specified name or null if it has not been set p Applications may have associated arbitrary objects with the receiver in this fashion If the objects stored in the properties need to be notified when the display is disposed of it is the application s responsibility to provide a code disposeExec code handler which does so p param key the name of the property return the value of the property or null if it has not been set exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the key is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see setData String Object see disposeExec Runnable
Returns the application defined display specific data associated with the receiver or null if it has not been set The em display specific data em is a single unnamed field that is stored with every display p Applications may put arbitrary objects in this field If the object stored in the display specific data needs to be notified when the display is disposed of it is the application s responsibility to provide a code disposeExec code handler which does so p return the display specific data exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see setData Object see disposeExec Runnable
Returns the button dismissal alignment one of code LEFT code or code RIGHT code The button dismissal alignment is the ordering that should be used when positioning the default dismissal button for a dialog For example in a dialog that contains an OK and CANCEL button on platforms where the button dismissal alignment is code LEFT code the button ordering should be OK CANCEL When button dismissal alignment is code RIGHT code the button ordering should be CANCEL OK return the button dismissal order exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 2 1
Returns the longest duration in milliseconds between two mouse button clicks that will be considered a em double click em by the underlying operating system return the double click time exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns the control which currently has keyboard focus or null if keyboard events are not currently going to any of the controls built by the currently running application return the control under the cursor exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns true when the high contrast mode is enabled Otherwise false is returned p Note This operation is a hint and is not supported on platforms that do not have this concept p return the high contrast mode exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 3 0
NON NLS 1
Use the character encoding for the default locale
NON NLS 1
Returns the maximum allowed depth of icons on this display in bits per pixel On some platforms this may be different than the actual depth of the display return the maximum icon depth exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see Device getDepth
Returns an array containing the recommended icon sizes return the array of icon sizes exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see Decorations setImages Image since 3 0
NON NLS 1
Returns an array of monitors attached to the device return the array of monitors since 3 0
NON NLS 1
NON NLS 1
Returns the primary monitor for that device return the primary monitor since 3 0
Returns a possibly empty array containing all shells which have not been disposed and have the receiver as their display return the receiver s shells exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns the thread that has invoked code syncExec code or null if no such runnable is currently being invoked by the user interface thread p Note If a runnable invoked by asyncExec is currently running this method will return null p return the receiver s sync interface thread exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns the matching standard color for the given constant which should be one of the color constants specified in class code SWT code Any value other than one of the SWT color constants which is passed in will result in the color black This color should not be free d because it was allocated by the system not the application param id the color constant return the matching color exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see SWT
Returns the matching standard platform cursor for the given constant which should be one of the cursor constants specified in class code SWT code This cursor should not be free d because it was allocated by the system not the application A value of code null code will be returned if the supplied constant is not an swt cursor constant param id the swt cursor constant return the corresponding cursor or code null code exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see SWT CURSOR ARROW see SWT CURSOR WAIT see SWT CURSOR CROSS see SWT CURSOR APPSTARTING see SWT CURSOR HELP see SWT CURSOR SIZEALL see SWT CURSOR SIZENESW see SWT CURSOR SIZENS see SWT CURSOR SIZENWSE see SWT CURSOR SIZEWE see SWT CURSOR SIZEN see SWT CURSOR SIZES see SWT CURSOR SIZEE see SWT CURSOR SIZEW see SWT CURSOR SIZENE see SWT CURSOR SIZESE see SWT CURSOR SIZESW see SWT CURSOR SIZENW see SWT CURSOR UPARROW see SWT CURSOR IBEAM see SWT CURSOR NO see SWT CURSOR HAND since 3 0
Returns a reasonable font for applications to use On some platforms this will match the default font or system font if such can be found This font should not be free d because it was allocated by the system not the application p Typically applications which want the default look should simply not set the font on the widgets they create Widgets are always created with the correct default font for the class of user interface component they represent p return a font exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Returns the matching standard platform image for the given constant which should be one of the icon constants specified in class code SWT code This image should not be free d because it was allocated by the system not the application A value of code null code will be returned either if the supplied constant is not an swt icon constant or if the platform does not define an image that corresponds to the constant param id the swt icon constant return the corresponding image or code null code exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see SWT ICON ERROR see SWT ICON INFORMATION see SWT ICON QUESTION see SWT ICON WARNING see SWT ICON WORKING since 3 0
Returns the single instance of the system tray or null when there is no system tray available for the platform return the system tray or code null code exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 3 0
Returns the user interface thread for the receiver return the receiver s user interface thread exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul
Invokes platform specific functionality to allocate a new GC handle p b IMPORTANT b This method is em not em part of the public API for code Display code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param data the platform specific GC data return the platform specific GC handle exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul exception SWTError ul li ERROR NO HANDLES if a handle could not be obtained for gc creation li ul
NON NLS 1
Remember the current thread id
Use the character encoding for the default locale
Register the SWT window class
Register the SWT drop shadow window class
Initialize the system font
Create the message only HWND
NON NLS 1
NON NLS 1
Create the filter hook
NON NLS 1
Create the idle hook
Register the task bar created message
Initialize OLE
Initialize the Widget Table
Initializes any internal resources needed by the device p This method is called after code create code p see create
Invokes platform specific functionality to dispose a GC handle p b IMPORTANT b This method is em not em part of the public API for code Display code It is marked public only so that it can be shared within the packages provided by SWT It is not available on all platforms and should never be called from application code p param hDC the platform specific GC handle param data the platform specific GC data
NOTE X Mouse is active when bit 1 of the UserPreferencesMask is set
NON NLS 1
NON NLS 1
Maps a point from one coordinate system to another When the control is null coordinates are mapped to the display p NOTE On right to left platforms where the coordinate systems are mirrored special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle When one control is mirrored and the other is not adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped p param from the source code Control code or code null code param to the destination code Control code or code null code param point to be mapped return point with mapped coordinates exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the point is null li li ERROR INVALID ARGUMENT if the Control from or the Control to have been disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 2 1 2
Maps a point from one coordinate system to another When the control is null coordinates are mapped to the display p NOTE On right to left platforms where the coordinate systems are mirrored special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle When one control is mirrored and the other is not adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped p param from the source code Control code or code null code param to the destination code Control code or code null code param x coordinates to be mapped param y coordinates to be mapped return point with mapped coordinates exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the Control from or the Control to have been disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 2 1 2
Maps a point from one coordinate system to another When the control is null coordinates are mapped to the display p NOTE On right to left platforms where the coordinate systems are mirrored special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle When one control is mirrored and the other is not adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped p param from the source code Control code or code null code param to the destination code Control code or code null code param rectangle to be mapped return rectangle with mapped coordinates exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the rectangle is null li li ERROR INVALID ARGUMENT if the Control from or the Control to have been disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 2 1 2
Maps a point from one coordinate system to another When the control is null coordinates are mapped to the display p NOTE On right to left platforms where the coordinate systems are mirrored special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle When one control is mirrored and the other is not adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped p param from the source code Control code or code null code param to the destination code Control code or code null code param x coordinates to be mapped param y coordinates to be mapped param width coordinates to be mapped param height coordinates to be mapped return rectangle with mapped coordinates exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the Control from or the Control to have been disposed li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 2 1 2
Returns a single character converted from the default multi byte character set MBCS used by the operating system widgets to a wide character set WCS used by ava param ch the MBCS character return the WCS character
Returns a single character converted from the specified multi byte character set MBCS used by the operating system widgets to a wide character set WCS used by ava param ch the MBCS character param codePage the code page used to convert the character return the WCS character
Feature in Windows When multiple shells are disabled and one of the shells has an enabled dialog child and the user selects a disabled shell that does not have the enabled dialog child using the Task bar Windows brings the disabled shell to the front As soon as the user clicks on the disabled shell the enabled dialog child comes to the front This behavior is unspecified and seems strange Normally a disabled shell is frozen on the screen and the user cannot change the z order by clicking with the mouse The fix is to look for WM ACTIVATEAPP and force the enabled dialog child to the front This is typically what the user is expecting NOTE If the modal shell is disabled for any reason it should not be brought to the front
When the session is ending no SWT program can continue to run In order to avoid running code after the display has been disposed exit from ava
case SWT LF inputs wVk short OS VK RETURN break
Generate a low level system event code post code is used to generate low level keyboard and mouse events The intent is to enable automated UI testing by simulating the input from the user Most SWT applications should never need to call this method p Note that this operation can fail when the operating system fails to generate the event for any reason For example this can happen when there is no such key or mouse button or when the system event queue is full p p b Event Types b p KeyDown KeyUp p The following fields in the code Event code apply ul li in type KeyDown or KeyUp li p Either one of li in character a character that corresponds to a keyboard key li li in keyCode the key code of the key that was typed as defined by the key code constants in class code SWT code li ul p MouseDown MouseUp p p The following fields in the code Event code apply ul li in type MouseDown or MouseUp li in button the button that is pressed or released ul p MouseMove p p The following fields in the code Event code apply ul li in type MouseMove li in x the x coordinate to move the mouse pointer to in screen coordinates li in y the y coordinate to move the mouse pointer to in screen coordinates ul dl param event the event to be generated return true if the event was generated or false otherwise exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the event is null li ul exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 3 0
Place the event at the end of the event queue This code is always called in the Display s thread so it must be re enterant but does not need to be synchronized
Reads an event from the operating system s event queue dispatches it appropriately and returns code true code if there is potentially more work to do or code false code if the caller can sleep until another event is placed on the event queue p In addition to checking the system event queue this method also checks if any inter thread messages created by code syncExec code or code asyncExec code are waiting to be processed and if so handles them before returning p return code false code if the caller can sleep upon return from this method exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li li ERROR FAILED EXEC if an exception occurred while running an inter thread message li ul see sleep see wake
Releases any internal resources back to the operating system and clears all fields except the device handle p Disposes all shells which are currently open on the display After this method has been invoked all related related shells will answer code true code when sent the message code isDisposed code p p When a device is destroyed resources that were acquired on behalf of the programmer need to be returned to the operating system For example if the device allocated a font to be used as the system font this font would be freed in code release code Also to assist the garbage collector and minimize the amount of memory that is not reclaimed when the programmer keeps a reference to a disposed device all fields except the handle are zero d The handle is needed by code destroy code p This method is called before code destroy code see Device dispose see destroy
Unhook the message hook
Unhook the filter hook
Unhook the idle hook
Destroy the message only HWND
Unregister the SWT window class
Unregister the SWT drop shadow window class
Release the system fonts
Release the System Images
Release the System Cursors
Release Custom Colors for ChooseColor
Uninitialize OLE
Release references
Removes the listener from the collection of listeners who will be notifed when an event of the given type occurs anywhere in a widget param eventType the type of event to listen for param listener the listener which should no longer be notified when the event occurs exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Listener see addFilter see addListener since 3 0
Removes the listener from the collection of listeners who will be notifed when an event of the given type occurs param eventType the type of event to listen for param listener the listener which should no longer be notified when the event occurs exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see Listener see addListener since 2 0
Take an event off the queue
Run the event
Run deferred events This code is always called in the Display s thread so it must be re enterant but need not be synchronized
Clear the queue
Sets the location of the on screen pointer relative to the top left corner of the screen b Note It is typically considered bad practice for a program to move the on screen pointer location b param x the new x coordinate for the cursor param y the new y coordinate for the cursor exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 2 1
Sets the location of the on screen pointer relative to the top left corner of the screen b Note It is typically considered bad practice for a program to move the on screen pointer location b param point new position exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR NULL ARGUMENT if the point is null li ERROR DEVICE DISPOSED if the receiver has been disposed li ul since 2 0
Remove the key value pair
Add the key value pair
Sets the application defined property of the receiver with the specified name to the given argument p Applications may have associated arbitrary objects with the receiver in this fashion If the objects stored in the properties need to be notified when the display is disposed of it is the application s responsibility provide a code disposeExec code handler which does so p param key the name of the property param value the new value for the property exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the key is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see getData String see disposeExec Runnable
Sets the application defined display specific data associated with the receiver to the argument The em display specific data em is a single unnamed field that is stored with every display p Applications may put arbitrary objects in this field If the object stored in the display specific data needs to be notified when the display is disposed of it is the application s responsibility provide a code disposeExec code handler which does so p param data the new display specific data exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see getData see disposeExec Runnable
On platforms which support it sets the application name to be the argument On Motif for example this can be used to set the name used for resource lookup Specifying code null code for the name clears it param name the new app name or code null code
Sets the synchronizer used by the display to be the argument which can not be null param synchronizer the new synchronizer for the display must not be null exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the synchronizer is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li li ERROR FAILED EXEC if an exception occurred while running an inter thread message li ul
Clear the virtual keyboard and press the shift key
Translate the key to ASCII or UNICODE using the virtual keyboard
Causes the user interface thread to em sleep em that is to be put in a state where it does not consume CPU cycles until an event is received or it is otherwise awakened return code true code if an event requiring dispatching was placed on the queue exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see wake
Causes the code run code method of the runnable to be invoked by the user interface thread at the next reasonable opportunity The thread which calls this method is suspended until the runnable completes Specifying code null code as the runnable simply wakes the user interface thread p Note that at the time the runnable is invoked widgets that have the receiver as their display may have been disposed Therefore it is necessary to check for this case inside the runnable before accessing the widget p param runnable code to run on the user interface thread or code null code exception SWTException ul li ERROR FAILED EXEC if an exception occured when executing the runnable li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see asyncExec
Causes the code run code method of the runnable to be invoked by the user interface thread after the specified number of milliseconds have elapsed If milliseconds is less than zero the runnable is not executed p Note that at the time the runnable is invoked widgets that have the receiver as their display may have been disposed Therefore it is necessary to check for this case inside the runnable before accessing the widget p param milliseconds the delay before running the runnable param runnable code to run on the user interface thread exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the runnable is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see asyncExec
Feature in Windows When an application does not remove events from the event queue for some time Windows assumes the application is not responding and no longer sends paint events to the application The fix is to detect that the application is not responding and call PeekMessage with PM REMOVE to tell Windows that the application is ready to dispatch events Note that the message does not have to be found or dispatched in order to wake Windows up NOTE This allows other cross thread messages to be delivered most notably WM ACTIVATE
Forces all outstanding paint requests for the display to be processed before this method returns exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see Control update
If the receiver s user interface thread was code sleep code ing causes it to be awakened and start running again Note that this method may be called from any thread exception SWTException ul li ERROR DEVICE DISPOSED if the receiver has been disposed li ul see sleep
Returns a single character converted from the wide character set WCS used by ava to the specified multi byte character set used by the operating system widgets param ch the WCS character param codePage the code page used to convert the character return the MBCS character
Returns a single character converted from the wide character set WCS used by ava to the default multi byte character set used by the operating system widgets param ch the WCS character return the MBCS character
Bug in Adobe Reader 7 0 For some reason when Adobe Reader 7 0 is deactivated from within Internet Explorer it sends thousands of consecutive WM NCHITTEST messages to the control that is under the cursor It seems that if the control takes some time to respond to the message Adobe stops sending them The fix is to detect this case and sleep NOTE Under normal circumstances Windows will never send consecutive WM NCHITTEST messages to the same control without another message normally WM SETCURSOR in between
If the string is empty return the string
Check for an LF or CR LF and assume the rest of the string is formated that way This will not work if the string contains mixed delimiters
The string is formatted with LF Compute the number of lines and the size of the buffer needed to hold the result
Create a new string with the CR LF line terminator
NON NLS 1
