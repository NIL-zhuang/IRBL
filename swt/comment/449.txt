Instances of this class represent a non selectable user interface object that displays a string or image When SEPARATOR is specified displays a single vertical or horizontal line dl dt b Styles b dt dd SEPARATOR HORIZONTAL VERTICAL dd dd SHADOW IN SHADOW OUT SHADOW NONE dd dd CENTER LEFT RIGHT WRAP dd dt b Events b dt dd none dd dl p Note Only one of SHADOW IN SHADOW OUT and SHADOW NONE may be specified SHADOW NONE is a HINT Only one of HORIZONTAL and VERTICAL may be specified Only one of CENTER LEFT and RIGHT may be specified p p IMPORTANT This class is intended to be subclassed em only em within the SWT implementation p
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT SEPARATOR see SWT HORIZONTAL see SWT VERTICAL see SWT SHADOW IN see SWT SHADOW OUT see SWT SHADOW NONE see SWT CENTER see SWT LEFT see SWT RIGHT see SWT WRAP see Widget checkSubclass see Widget getStyle
Bug in Windows For some reason in Windows XP only indexed palette bitmaps are not drawn properly even though the screen depth can handle all colors in the palette The fix is to use a higher depth bitmap instead
FALL THROUGH
When STM SETIMAGE encounters a bitmap with alpha information it makes a copy of the bitmap Therefore the bitmap that was created to preserve transparency can be deleted right away Note The client code also needs to delete the copied image created by Windows when the image changed but does not need to delete the copied image when the control is disposed
Feature in Windows When STM SETIMAGE is used to set the image for a static control Windows either streches the image to fit the control or shrinks the control to fit the image While not stricly wrong neither of these is desirable The fix is to stop Windows from stretching the image by using SS REALSIZEIMAGE and SS CENTERIMAGE allow Windows to shrink the control and then restore the control to the original size
NOTE SS BITMAP and SS ICON are not single bit masks so it is necessary to test for all of the bits in these masks
Feature in WinCE PPC Text labels have a trim of one pixel wide on the right and left side The fix is to increase the size
Returns a value which describes the position of the text or image in the receiver The value will be one of code LEFT code code RIGHT code or code CENTER code unless the receiver is a code SEPARATOR code label in which case code NONE code is returned return the alignment exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s image if it has one or null if it does not return the receiver s image exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s text which will be an empty string if it has never been set or if the receiver is a code SEPARATOR code label return the receiver s text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Not currently used
Windows deletes the copied image when the control is disposed
Feature in Windows The windows label does not align the bitmap or icon Any attempt to set alignment bits such as SS CENTER cause the label to display text The fix is to disallow alignment NOTE SS BITMAP and SS ICON are not single bit masks so it is necessary to test for all of the bits in these masks
Controls how text and images will be displayed in the receiver The argument should be one of code LEFT code code RIGHT code or code CENTER code If the receiver is a code SEPARATOR code label the argument is ignored and the alignment is not changed param alignment the new alignment exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the receiver s image to the argument which may be null indicating that no image should be displayed param image the image to display on the receiver may be null exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the image has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows For some reason SetWindowText for static controls redraws the control even when the text has has not changed The fix is to check for this case and do nothing
Bug in Windows When the style of a label is SS BITMAP or SS ICON the label does not remember the font that is set in WM SETFONT The fix is to remember the font and return the font in WM GETFONT and to reset the font when the style is changed from SS BITMAP or SS ICON to a style that displays text
Sets the receiver s text p This method sets the widget label The label may include the mnemonic character and line delimiters p p Mnemonics are indicated by an amp that causes the next character to be the mnemonic When the user presses a key sequence that matches the mnemonic focus is assigned to the control that follows the label On most platforms the mnemonic appears underlined but may be emphasised in a platform specific manner The mnemonic indicator character amp can be escaped by doubling it in the string causing a single amp to be displayed p param string the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the text is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Not currently used
Bug in Windows When a label has the SS BITMAP or SS ICON style the label does not draw the background The fix is to draw the background when the label is showing a bitmap or icon NOTE SS BITMAP and SS ICON are not single bit masks so it is necessary to test for all of the bits in these masks
Bug in Windows When the style of a label is SS BITMAP or SS ICON the label does not remember the font that is set in WM SETFONT The fix is to remember the font and return the font in WM GETFONT
Bug in Windows When the style of a label is SS BITMAP or SS ICON the label does not remember the font that is set in WM SETFONT The fix is to remember the font and return the font in WM GETFONT
It is possible but unlikely that application code could have disposed the widget in the resize event If this happens end the processing of the Windows message by returning the result of the WM SIZE message
Bug in Windows For some reason a label with SS BITMAP or SS ICON and SS CENTER does not redraw properly when resized Only the new area is drawn and the old area is not cleared The fix is to force the redraw NOTE SS BITMAP and SS ICON are not single bit masks so it is necessary to test for all of the bits in these masks
Bug in Windows For some reason a label with style SS LEFT SS CENTER or SS RIGHT does not redraw the text in the new position when resized Note that SS LEFTNOWORDWRAP does not have the problem The fix is to force the redraw
