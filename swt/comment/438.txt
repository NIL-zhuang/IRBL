Prevents uninitialized instances from being created outside the package
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT BORDER see SWT CLOSE see SWT MIN see SWT MAX see SWT RESIZE see SWT TITLE see SWT NO TRIM see SWT SHELL TRIM see SWT DIALOG TRIM see SWT ON TOP see SWT TOOL see Widget checkSubclass see Widget getStyle
else
Feature in WinCE PPC WS MINIMIZEBOX or WS MAXIMIZEBOX are not supposed to be used If they are the result is a button which does not repaint correctly The fix is to remove this style
If either WS MINIMIZEBOX or WS MAXIMIZEBOX are set we must also set WS SYSMENU or the buttons will not appear
Both WS SYSMENU and WS CAPTION must be set in order to for the system menu to appear
Get the size of the trimmings
Get the size of the scroll bars
Get the height of the menu bar
Note on WinCE PPC Close the shell when user taps CTRL Q IDOK represents the Done Button which also closes the shell
Icons need black pixels where the mask is transparent
Note The CommandBar is part of the client area not the trim Applications don t expect this so subtract the height of the CommandBar
Feature in Windows For some reason WM NCCALCSIZE does not compute the client area when the window is minimized The fix is to compute it using AdjustWindowRectEx and GetSystemMetrics NOTE This code fails to compute the correct client area for a minimized window where the menu bar would wrap were the window restored There is no fix for this problem at this time
Returns the receiver s default button if one had previously been set otherwise returns null return the default button or null exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see setDefaultButton
Returns the receiver s image if it had previously been set using code setImage code The image is typically displayed by the window manager when the instance is marked as iconified and may also be displayed somewhere in the trim when the instance is in normal or maximized states p Note This method will return null if called before code setImage code is called It does not provide access to a window manager provided default image even if one exists p return the image exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the receiver s images if they had previously been set using code setImages code Images are typically displayed by the window manager when the instance is marked as iconified and may also be displayed somewhere in the trim when the instance is in normal or maximized states Depending where the icon is displayed the platform chooses the icon with the best attributes It is expected that the array will contain the same icon rendered at different sizes with different depth and transparency attributes p Note This method will return an empty array if called before code setImages code is called It does not provide access to a window manager provided default image even if one exists p return the images exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
Returns code true code if the receiver is currently maximized and false otherwise p return the maximized state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see setMaximized
Returns the receiver s menu bar if one had previously been set otherwise returns null return the menu bar or null exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver is currently minimized and false otherwise p return the minimized state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see setMinimized
Use the character encoding for the default locale
Returns the receiver s text which is the string that the window manager will typically display as the receiver s em title em If the text has not previously been set returns an empty string return the text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows Calling SetParent for a shell causes a kind of fake MDI to happen It doesn t work well on Windows and is not supported on the other platforms The fix is to disallow the SetParent
Can t test WS TAB bits because they are the same as WS MAXIMIZEBOX
Can t test WS TAB bits because they are the same as WS MAXIMIZEBOX

If the argument is not null sets the receiver s default button to the argument and if the argument is null sets the receiver s default button to the first button which was set as the receiver s default button called the em saved default button em If no default button had previously been set or the saved default button was disposed the receiver s default button will be set to null p The default button is the button that is selected when the receiver is active and the user presses ENTER p param button the new default button exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the button has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the receiver s image to the argument which may be null The image is typically displayed by the window manager when the instance is marked as iconified and may also be displayed somewhere in the trim when the instance is in normal or maximized states param image the new image or null exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the image has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in WinCE WM SETICON and WM GETICON set the icon for the window class not the window instance This means that it is possible to set an icon into a window and then later free the icon thus freeing the icon for every window The fix is to avoid the API On WinCE PPC icons in windows are not displayed
Bug in Windows When WM SETICON is used to remove an icon from the window trimmings for a window with the extended style bits WS EX DLGMODALFRAME the window trimmings do not redraw to hide the previous icon The fix is to force a redraw
Sets the receiver s images to the argument which may be an empty array Images are typically displayed by the window manager when the instance is marked as iconified and may also be displayed somewhere in the trim when the instance is in normal or maximized states Depending where the icon is displayed the platform chooses the icon with the best attributes It is expected that the array will contain the same icon rendered at different sizes with different depth and transparency attributes param images the new image array exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the array of images is null li li ERROR INVALID ARGUMENT if one of the images is null or has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
Leave space for the menu bar
Note WinCE does not support SW SHOWMAXIMIZED and SW RESTORE The workaround is to resize the window to fit the parent client area
Sets the maximized state of the receiver If the argument is code true code causes the receiver to switch to the maximized state and if the argument is code false code and the receiver was previously maximized causes the receiver to switch back to either the minimized or normal states p Note The result of intermixing calls to code setMaximized true code and code setMinimized true code will vary by platform Typically the behavior will match the platform user s expectations but not always This should be avoided if possible p param maximized the new maximized state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see setMinimized
Note in WinCE PPC The menu bar is a separate popup window If the shell is full screen resize its window to leave space for the menu bar
Sets the receiver s menu bar to the argument which may be null param menu the new menu bar exception IllegalArgumentException ul li ERROR INVALID ARGUMENT if the menu has been disposed li li ERROR INVALID PARENT if the menu is not in the same widget tree li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the minimized stated of the receiver If the argument is code true code causes the receiver to switch to the minimized state and if the argument is code false code and the receiver was previously minimized causes the receiver to switch back to either the maximized or normal states p Note The result of intermixing calls to code setMaximized true code and code setMinimized true code will vary by platform Typically the behavior will match the platform user s expectations but not always This should be avoided if possible p param minimized the new maximized state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see setMaximized
In order for an MDI child window to support a menu bar setParent is needed to reset the parent Otherwise the MDI child window will appear as a separate shell This is an undocumented and possibly dangerous Windows feature
Use the character encoding for the default locale
Sets the receiver s text which is the string that the window manager will typically display as the receiver s em title em to the argument which must not be null param string the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the text is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
It is possible but unlikely that application code could have disposed the widget in the show event If this happens just return
Shell Sort from K R pg 108
It is possible but unlikely that application code could have disposed the widget in focus in or out events Ensure that a disposed widget is not accessed
Clear WS VISIBLE and WS TABSTOP NOTE In Windows WS TABSTOP has the same value as WS MAXIMIZEBOX so these bits cannot be used to control tabbing
Set the title bits and no trim bits
Set the min and max button bits
Note on WinCE PPC SWT RESIZE is used to resize the Shell according to the state of the IME It does not set the WS THICKFRAME style
Set the resize dialog border or border bits
Set the system menu and close box bits
Feature in AWT When an AWT Window is activated for some reason it seems to forward the WM ACTIVATE message to the parent Normally the parent is an AWT Frame When AWT is embedded in SWT the SWT shell gets the WM ACTIVATE and assumes that it came from Windows When an SWT shell is activated it restores focus to the last control that had focus If this control is an embedded composite it takes focus from the AWT Window The fix is to ignore WM ACTIVATE messages that come from AWT Windows
When the high word of wParam is non zero the activation state of the window is being changed while the window is minimized If this is the case do not report activation events or restore the focus
Feature on WinCE SP The Back key is either used to close the foreground Dialog or used as a regular Back key in an EDIT control The article Back Key in MSDN for Smartphone describes how an application should handle it The workaround is to override the Back key when creating the menubar and handle it based on the style of the Shell If the Shell has the SWT CLOSE style close the Shell Otherwise send the Back key to the window with focus
widget could be disposed at this point
