Instances of this class are selectable user interface objects that allow the user to enter and modify text p dl dt b Styles b dt dd CENTER LEFT MULTI PASSWORD SINGLE RIGHT READ ONLY WRAP dd dt b Events b dt dd DefaultSelection Modify Verify dd dl p Note Only one of the styles MULTI and SINGLE may be specified p p IMPORTANT This class is em not em intended to be subclassed p
The maximum number of characters that can be entered into a text widget p Note that this value is platform dependent based upon the native widget implementation p
The delimiter used by multi line text widgets When text is queried and from the widget it will be delimited using this delimiter
These values can be different on different platforms Therefore they are not initialized in the declaration to stop the compiler from inlining
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT SINGLE see SWT MULTI see SWT READ ONLY see SWT WRAP see Widget checkSubclass see Widget getStyle
Adds the listener to the collection of listeners who will be notified when the receiver s text is modified by sending it one of the messages defined in the code ModifyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ModifyListener see removeModifyListener
Adds the listener to the collection of listeners who will be notified when the control is selected by sending it one of the messages defined in the code SelectionListener code interface p code widgetSelected code is not called for texts code widgetDefaultSelected code is typically called when ENTER is pressed in a single line text p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see removeSelectionListener see SelectionEvent
Adds the listener to the collection of listeners who will be notified when the receiver s text is verified by sending it one of the messages defined in the code VerifyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see VerifyListener see removeVerifyListener
Feature in Windows When an edit control with ES MULTILINE style that does not have the WS VSCROLL style is full i e there is no space at the end to draw any more characters EM REPLACESEL sends a WM CHAR with a backspace character to remove any further text that is added This is an implementation detail of the edit control that is unexpected and can cause endless recursion when EM REPLACESEL is sent from a WM CHAR handler The fix is to ignore calling the handler from WM CHAR
Appends a string p The new text is appended to the text at the end of the widget p param string the string to be appended exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in WinCE Calling EM SETSEL with 1 and 0 is equivalent to calling EM SETSEL with 0 and 1 It causes the entire text to be selected instead of clearing the selection The fix is to set the start of the selection to the end of the current selection
Clears the selection exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
The preferred height of a single line text widget has been hand crafted to be the same height as the single line text widget in an editable combo box
Copies the selected text p The current selection is copied to the clipboard p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Cuts the selected text p The current selection is first copied to the clipboard and then deleted from the widget p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When the edit control is not mirrored it uses WS EX RIGHT WS EX RTLREADING and WS EX LEFTSCROLLBAR to give the control a right to left appearance This causes the control to be lead aligned no matter what alignment was specified by the programmer For example setting ES RIGHT and WS EX LAYOUTRTL should cause the contents of the control to be left trail aligned in a mirrored world When the orientation is changed by the user or specified by the programmer WS EX RIGHT conflicts with the mirrored alignment The fix is to clear or set WS EX RIGHT to achieve the correct alignment according to the orientation and mirroring
Bug in Windows 98 When the edit control is created with the style ES RIGHT it automatically sets the WS EX LEFTSCROLLBAR bit The fix is to clear the bit when the orientation of the control is left to right

Returns the line number of the caret p The line number of the caret is returned p return the line number exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows For some reason Windows is unable to return the pixel coordinates of the last character in the widget The fix is to temporarily insert a space query the coordinates and delete the space The selection is always an i beam in this case because this is the only time the start of the selection can be equal to the last character position in the widget If EM POSFROMCHAR fails for any other reason return pixel coordinates 0 0
Feature in Windows When an edit control with ES MULTILINE style that does not have the WS VSCROLL style is full i e there is no space at the end to draw any more characters EM REPLACESEL sends a WM CHAR with a backspace character to remove any further text that is added This is an implementation detail of the edit control that is unexpected and can cause endless recursion when EM REPLACESEL is sent from a WM CHAR handler The fix is to ignore calling the handler from WM CHAR
Returns a point describing the receiver s location relative to its parent or its display if its parent is null p The location of the caret is returned p return a point the location of the caret exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the character position of the caret p Indexing is zero based p return the position of the caret exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of characters return number of characters in the widget exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the double click enabled flag p The double click flag enables or disables the default action of the text widget when the user double clicks p return whether or not double click is enabled exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the echo character p The echo character is the character that is displayed when the user enters text or the text is changed by the programmer p return the echo character exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see setEchoChar
Returns the editable state return whether or not the reciever is editable exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of lines return the number of lines in the widget exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the line delimiter return a string that is the line delimiter exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see DELIMITER
Returns the height of a line return the height of a row of text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the orientation of the receiver which will be one of the constants code SWT LEFT TO RIGHT code or code SWT RIGHT TO LEFT code return the orientation style exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1 2
Returns a code Point code whose x coordinate is the character position representing the start of the selected text and whose y coordinate is the character position representing the end of the selection An empty selection is indicated by the x and y coordinates having the same value p Indexing is zero based The range of a selection is from 0 N where N is the number of characters in the widget p return a point representing the selection start and end exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of selected characters return the number of selected characters exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Gets the selected text or an empty string if there is no current selection return the selected text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of tabs p Tab stop spacing is specified in terms of the space character The width of a single tab stop is the pixel width of the spaces p return the number of tab characters exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the widget text p The text for a text widget is the characters in the widget or an empty string if this has never been set p return the widget text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
NOTE The current implementation uses substring which can reference a potentially large character array
Returns a range of text Returns an empty string if the start of the range is greater than the end p Indexing is zero based The range of a selection is from 0 N 1 where N is the number of characters in the widget p param start the start of the range param end the end of the range return the range of text exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the maximum number of characters that the receiver is capable of holding p If this has not been changed by code setTextLimit code it will be the constant code Text LIMIT code p return the text limit exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see LIMIT
Returns the zero relative index of the line which is currently at the top of the receiver p This index can change when lines are scrolled or new lines are added or removed p return the index of the top line exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Note EM GETSCROLLPOS is implemented in Rich Edit 3 0 and greater The plain text widget and previous versions of Rich Edit return zero
Returns the top pixel p The top pixel is the pixel position of the line that is currently at the top of the widget On some platforms a text widget can be scrolled by pixels instead of lines so that a partial line is displayed at the top of the widget p p The top pixel changes when the widget is scrolled The top pixel does not include the widget trimming p return the pixel position of the top line exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When an edit control with ES MULTILINE style that does not have the WS VSCROLL style is full i e there is no space at the end to draw any more characters EM REPLACESEL sends a WM CHAR with a backspace character to remove any further text that is added This is an implementation detail of the edit control that is unexpected and can cause endless recursion when EM REPLACESEL is sent from a WM CHAR handler The fix is to ignore calling the handler from WM CHAR
Inserts a string p The old selection is replaced with the new text p param string the string exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is code null code li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
ENDIAN
Pastes text from clipboard p The selected text is deleted from the widget and new text inserted from the clipboard p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Removes the listener from the collection of listeners who will be notified when the receiver s text is modified param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ModifyListener see addModifyListener
Removes the listener from the collection of listeners who will be notified when the control is selected param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see addSelectionListener
Removes the listener from the collection of listeners who will be notified when the control is verified param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see VerifyListener see addVerifyListener
Selects all the text in the receiver exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Disable all magic keys that could modify the text and don t send events when Alt Shift or Ctrl is pressed
FALL THROUGH
If the left button is down the text widget refuses the character
Verify the character
Bs
Del
Return
Tab and other characters
Feature in Windows When an edit control with ES MULTILINE style that does not have the WS VSCROLL style is full i e there is no space at the end to draw any more characters EM REPLACESEL sends a WM CHAR with a backspace character to remove any further text that is added This is an implementation detail of the edit control that is unexpected and can cause endless recursion when EM REPLACESEL is sent from a WM CHAR handler The fix is to ignore calling the handler from WM CHAR
Feature in Windows When the caret is moved the text widget scrolls to show the new location This means that the text widget may be scrolled to the right in order to show the caret when the widget is not large enough to show both the caret location and all the text Unfortunately when the text widget is resized such that all the text and the caret could be visible Windows does not scroll the widget back The fix is to resize the text widget set the selection to the start of the text and then restore the selection This will cause the text widget compute the correct scroll position
Sets the double click enabled flag p The double click flag enables or disables the default action of the text widget when the user double clicks p p Note This operation is a hint and is not supported on platforms that do not have this concept p param doubleClick the new double click flag exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows When the password character is changed Windows does not redraw to show the new password character The fix is to force a redraw when the character is set
Sets the echo character p The echo character is the character that is displayed when the user enters text or the text is changed by the programmer Setting the echo character to 0 clears the echo character and redraws the original text If for any reason the echo character is invalid or if the platform does not allow modification of the echo character the default echo character for the platform is used p param echo the new echo character exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the editable state param editable the new editable state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the orientation of the receiver which must be one of the constants code SWT LEFT TO RIGHT code or code SWT RIGHT TO LEFT code p Note This operation is a hint and is not supported on platforms that do not have this concept p param orientation new orientation style exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 1 2
Sets the selection p Indexing is zero based The range of a selection is from 0 N where N is the number of characters in the widget p p Text selections are specified in terms of caret positions In a text widget that contains N characters there are N 1 caret positions ranging from 0 N This differs from other functions that address character position such as getText that use the regular array indexing rules p param start new caret position exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the selection to the range specified by the given start and end indices p Indexing is zero based The range of a selection is from 0 N where N is the number of characters in the widget p p Text selections are specified in terms of caret positions In a text widget that contains N characters there are N 1 caret positions ranging from 0 N This differs from other functions that address character position such as getText that use the usual array indexing rules p param start the start of the range param end the end of the range exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When WM SETREDRAW is used to turn redraw off the edit control is not scrolled to show the i beam The fix is to detect that the i beam has moved while redraw is turned off and force it to be visible when redraw is restored
Sets the selection to the range specified by the given point where the x coordinate represents the start index and the y coordinate represents the end index p Indexing is zero based The range of a selection is from 0 N where N is the number of characters in the widget p p Text selections are specified in terms of caret positions In a text widget that contains N characters there are N 1 caret positions ranging from 0 N This differs from other functions that address character position such as getText that use the usual array indexing rules p param selection the point exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the point is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the number of tabs p Tab stop spacing is specified in terms of the space character The width of a single tab stop is the pixel width of the spaces p param tabs the number of tabs ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows Windows expects the tab spacing in dialog units so we must convert from space widths Due to round off error the tab spacing may not be the exact number of space widths depending on the font
Bug in Windows When the widget is multi line text widget it does not send a WM COMMAND with control code EN CHANGE from SetWindowText to notify the application that the text has changed The fix is to send the event
Sets the contents of the receiver to the given string If the receiver has style SINGLE and the argument contains multiple lines of text the result of this operation is undefined and may vary from platform to platform param string the new text exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets the maximum number of characters that the receiver is capable of holding to be the argument p Instead of trying to set the text limit to zero consider creating a read only text widget p p To reset this value to the default use code setTextLimit Text LIMIT code Specifying a limit value larger than code Text LIMIT code sets the receiver s limit to code Text LIMIT code p param limit new text limit exception IllegalArgumentException ul li ERROR CANNOT BE ZERO if the limit is zero li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see LIMIT
Sets the zero relative index of the line which is currently at the top of the receiver This index can change when lines are scrolled or new lines are added and removed param index the index of the top item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Shows the selection p If the selection is already showing in the receiver this method simply returns Otherwise lines are scrolled until the selection is visible p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
It is possible but unlikely that application code could have disposed the widget in the verify event If this happens answer null to cancel the operation
ENDIAN
Bug in Windows When the user types CTRL and BS in an edit control a DEL character is generated Rather than deleting the text the DEL character is inserted into the control The fix is to detect this case and not call the window proc
FALL THROUGH
Feature in Windows For some reason when the widget is a single line text widget when the user presses tab return or escape Windows beeps The fix is to look for these keys and not call the window proc
Bug in WinCE PPC For some reason sending WM GETDLGCODE to a multi line edit control causes it to ignore return and tab keys The fix is to return the value which is normally returned by the text window proc on other versions of Windows
Feature in Windows Despite the fact that the edit control is read only it still returns a dialog code indicating that it wants all keys The fix is to detect this case and clear the bits NOTE A read only edit control processes arrow keys so DLGC WANTARROWS should not be cleared
Process a DBCS character
Feature in Windows The Windows text widget uses two 2 WM CHAR s to process a DBCS key instead of using WM IME CHAR The fix is to allow the text widget to get the WM CHAR s but ignore sending them to the application
widget could be disposed at this point
Prevent Windows from processing WM LBUTTONDBLCLK when double clicking behavior is disabled by not calling the window proc
Bug in Windows When the last line of text in the widget is double clicked and the line is empty Windows hides the i beam then moves it to the first line in the widget but does not scroll to show the user If the user types without clicking the mouse invalid characters are displayed at the end of each line of text in the widget The fix is to detect this case and avoid calling the window proc
Note On WinCE PPC only attempt to recognize the gesture for a context menu when the control contains a valid menu or there are listeners for the MenuDetect event Note On WinCE PPC the gesture that brings up a popup menu on the text widget must keep the current text selection As a result the window proc is only called if the menu is not shown
Feature in Windows When an edit control with ES MULTILINE style that does not have the WS VSCROLL style is full i e there is no space at the end to draw any more characters EM REPLACESEL sends a WM CHAR with a backspace character to remove any further text that is added This is an implementation detail of the edit control that is unexpected and can cause endless recursion when EM REPLACESEL is sent from a WM CHAR handler The fix is to ignore calling the handler from WM CHAR
It is possible but unlikely that application code could have disposed the widget in the modify event If this happens end the processing of the Windows message by returning zero as the result of the window proc
