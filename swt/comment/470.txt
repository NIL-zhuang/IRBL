Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT SINGLE see SWT MULTI see SWT CHECK see SWT FULL SELECTION see SWT HIDE SELECTION see SWT VIRTUAL see Widget checkSubclass see Widget getStyle
Adds the listener to the collection of listeners who will be notified when the receiver s selection changes by sending it one of the messages defined in the code SelectionListener code interface p When code widgetSelected code is called the item field of the event object is valid If the reciever has code SWT CHECK code style set and the check selection changes the event object detail field contains the value code SWT CHECK code code widgetDefaultSelected code is typically called when an item is double clicked The item field of the event object is valid for default selection but the detail field is not used p param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see removeSelectionListener see SelectionEvent
case OS WM MOUSEWHEEL
Bug in Windows For some reason when the user clicks on this control the Windows hook WH MSGFILTER is sent despite the fact that an input event from a dialog box message box menu or scroll bar did not seem to occur The fix is to ignore the hook
Feature in Windows Windows sends LVN ITEMACTIVATE from WM KEYDOWN instead of WM CHAR This means that application code that expects to consume the key press and therefore avoid a SWT DefaultSelection event will fail The fix is to ignore LVN ITEMACTIVATE when it is caused by WM KEYDOWN and send SWT DefaultSelection from WM CHAR
Feature in Windows It is not possible to create a table that does not have scroll bars Therefore no matter what style bits are specified set the H SCROLL and V SCROLL bits so that the SWT style will match the widget that Windows creates
widget could be disposed at this point
Bug in Windows Despite the fact that every item in the table always has LPSTR TEXTCALLBACK Windows caches the bounds for the selected items This means that when you change the string to be something else Windows correctly asks you for the new string but when the item is selected the selection draws using the bounds of the previous item The fix is to reset LPSTR TEXTCALLBACK even though it has not changed causing Windows to flush cached bounds
Clears the item at the given zero relative index in the receiver The text icon and other attributes of the item are set to the default value If the table was created with the SWT VIRTUAL style these attributes are requested again as needed param index the index of the item to clear exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SWT VIRTUAL see SWT SetData since 3 0
Bug in Windows Despite the fact that every item in the table always has LPSTR TEXTCALLBACK Windows caches the bounds for the selected items This means that when you change the string to be something else Windows correctly asks you for the new string but when the item is selected the selection draws using the bounds of the previous item The fix is to reset LPSTR TEXTCALLBACK even though it has not changed causing Windows to flush cached bounds
Removes the items from the receiver which are between the given zero relative start and end indices inclusive The text icon and other attribues of the items are set to their default values If the table was created with the SWT VIRTUAL style these attributes are requested again as needed param start the start index of the item to clear param end the end index of the item to clear exception IllegalArgumentException ul li ERROR INVALID RANGE if either the start or end are not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SWT VIRTUAL see SWT SetData since 3 0
Bug in Windows Despite the fact that every item in the table always has LPSTR TEXTCALLBACK Windows caches the bounds for the selected items This means that when you change the string to be something else Windows correctly asks you for the new string but when the item is selected the selection draws using the bounds of the previous item The fix is to reset LPSTR TEXTCALLBACK even though it has not changed causing Windows to flush cached bounds
Clears the items at the given zero relative indices in the receiver The text icon and other attribues of the items are set to their default values If the table was created with the SWT VIRTUAL style these attributes are requested again as needed param indices the array of indices of the items exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li li ERROR NULL ARGUMENT if the indices array is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SWT VIRTUAL see SWT SetData since 3 0
Bug in Windows Despite the fact that every item in the table always has LPSTR TEXTCALLBACK Windows caches the bounds for the selected items This means that when you change the string to be something else Windows correctly asks you for the new string but when the item is selected the selection draws using the bounds of the previous item The fix is to reset LPSTR TEXTCALLBACK even though it has not changed causing Windows to flush cached bounds
Clears all the items in the receiver The text icon and other attribues of the items are set to their default values If the table was created with the SWT VIRTUAL style these attributes are requested again as needed exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SWT VIRTUAL see SWT SetData since 3 0
Feature in Windows The height returned by LVM APPROXIMATEVIEWRECT includes the trim plus the height of the items plus one extra row The fix is to subtract the height of one row from the result height
Feature in Windows In version 5 8 of COMCTL32 DLL if the font is changed for an item the bounds for the item are not updated causing the text to be clipped The fix is to detect the version of COMCTL32 DLL and if it is one of the versions with the problem then use version 5 00 of the control a version that does not have the problem This is the recomended work around from the MSDN
Set the checkbox image list
Feature in Windows When the control is created it does not use the default system font A new HFONT is created and destroyed when the control is destroyed This means that a program that queries the font from this control uses the font in another control and then destroys this control will have the font unexpectedly destroyed in the other control The fix is to assign the font ourselves each time the control is created The control will not destroy a font that it did not create
Bug in Windows When the first column is inserted without setting the header text Windows will never allow the header text for the first column to be set The fix is to set the text to an empty string when the column is inserted
Set the extended style bits
Feature in Windows Windows does not explicitly set the orientation of the header Instead the orientation is inherited when WS EX LAYOUTRTL is specified for the table This means that when both WS EX LAYOUTRTL and WS EX NOINHERITLAYOUT are specified for the table the header will not be oriented correctly The fix is to explicitly set the orientation for the header NOTE WS EX LAYOUTRTL is not supported on Windows NT
NON NLS 1
Insert the column into the columns array before inserting it into the widget so that the column will be present when any callbacks are issued as a result of LVM INSERTCOLUMN or LVM SETCOLUMN
Ensure that resize listeners for the table and for columns within the table are not called This can happen when the first column is inserted into a table or when a new column is inserted in the first position
Grow the array faster when redraw is off or the table is not visible When the table is painted the items array is resized to be smaller to reduce memory usage
Bug in Windows Despite the fact that the image list index has never been set for the item Windows always assumes that the image index for the item is valid When an item is inserted the image index is zero Therefore when the first image is inserted and is assigned image index zero every item draws with this image The fix is to set the image index when the the item is created
Insert the item
Force virtual tables to use custom draw This is necessary to support colors and fonts for table items When the application is queried for data setting the custom draw flag at that time is too late The current item is not redrawn in order to avoid recursion and NM CUSTOMDRAW has already been avoided because at the time of the message there were no items that required custom drawing
An index of 1 will apply the change to all items Ensure that indices are greater than 1
Deselects the items at the given zero relative indices in the receiver If the item at the given zero relative index in the receiver is selected it is deselected If the item at the index was not selected it remains deselected Indices that are out of range and duplicate indices are ignored param indices the array of indices for the items to deselect exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the set of indices is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
An index of 1 will apply the change to all items Ensure that index is greater than 1
Deselects the item at the given zero relative index in the receiver If the item at the index was already deselected it remains deselected Indices that are out of range are ignored param index the index of the item to deselect exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
An index of 1 will apply the change to all items Ensure that indices are greater than 1
Deselects the items at the given zero relative indices in the receiver If the item at the given zero relative index in the receiver is selected it is deselected If the item at the index was not selected it remains deselected The range of the indices is inclusive Indices that are out of range are ignored param start the start index of the items to deselect param end the end index of the items to deselect exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Deselects all selected items in the receiver exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
NON NLS 1
NON NLS 1
Bug in Windows When the state image list is larger than the image list Windows incorrectly positions the state images When the table is scrolled Windows draws garbage The fix is to force the state image list to be the same size as the image list
Returns the column at the given zero relative index in the receiver Throws an exception if the index is out of range If no code TableColumn code s were created by the programmer this method will throw code ERROR INVALID RANGE code despite the fact that a single column of data may be visible in the table This occurs when the programmer uses the table like a list adding items but never creating a column param index the index of the column to return return the column at the given index exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of columns contained in the receiver If no code TableColumn code s were created by the programmer this value is zero despite the fact that visually one column of items may be visible This occurs when the programmer uses the table like a list adding items but never creating a column return the number of columns exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns an array of zero relative integers that map the creation order of the receiver s items to the order in which they are currently being displayed p Specifically the indices of the returned array represent the current visual order of the items and the contents of the array represent the creation order of the items p p Note This is not the actual structure used by the receiver to maintain its list of items so modifying the array will not affect the receiver p return the current visual order of the receiver s items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table setColumnOrder int see TableColumn getMoveable see TableColumn setMoveable boolean see SWT Move since 3 1
Returns an array of code TableColumn code s which are the columns in the receiver If no code TableColumn code s were created by the programmer the array is empty despite the fact that visually one column of items may be visible This occurs when the programmer uses the table like a list adding items but never creating a column p Note This is not the actual structure used by the receiver to maintain its list of items so modifying the array will not affect the receiver p return the items in the receiver exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
checkWidget
Not currently used
The Windows table control uses CLR DEFAULT to indicate that it is using the default foreground color This is undocumented
Returns the width in pixels of a grid line return the width of a grid line in pixels exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the height of the receiver s header return the height of the header or zero if the header is not visible exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 0
Returns code true code if the receiver s header is visible and code false code otherwise p If one of the receiver s ancestors is not visible or some other condition makes the receiver not visible this method may still indicate that it is considered visible even though it may not actually be showing p return the receiver s header s visibility state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the item at the given zero relative index in the receiver Throws an exception if the index is out of range param index the index of the item to return return the item at the given index exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the item at the given point in the receiver or null if no such item exists The point is in the coordinate system of the receiver param point the point used to locate the item return the item at the given point exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the point is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of items contained in the receiver return the number of items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the height of the area which would be used to display em one em of the items in the receiver s return the height of one item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns a possibly empty array of code TableItem code s which are the items in the receiver p Note This is not the actual structure used by the receiver to maintain its list of items so modifying the array will not affect the receiver p return the items in the receiver exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the receiver s lines are visible and code false code otherwise p If one of the receiver s ancestors is not visible or some other condition makes the receiver not visible this method may still indicate that it is considered visible even though it may not actually be showing p return the visibility state of the lines exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns an array of code TableItem code s that are currently selected in the receiver The order of the items is unspecified An empty array indicates that no items are selected p Note This is not the actual structure used by the receiver to maintain its selection so modifying the array will not affect the receiver p return an array representing the selection exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of selected items contained in the receiver return the number of selected items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the zero relative index of the item which is currently selected in the receiver or 1 if no item is selected return the index of the selected item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the zero relative indices of the items which are currently selected in the receiver The order of the indices is unspecified The array is empty if no items are selected p Note This is not the actual structure used by the receiver to maintain its selection so modifying the array will not affect the receiver p return the array of indices of the selected items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows Under rare circumstances LVM GETTOPINDEX can return a negative number When this happens the table is displaying blank lines at the top of the controls The fix is to check for a negative number and return zero instead
Returns the zero relative index of the item which is currently at the top of the receiver This index can change when items are scrolled or new items are added or removed return the index of the top item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows Making any change to an item that changes the item height of a table while the table is scrolled can cause the lines to draw incorrectly This happens even when the lines are not currently visible and are shown afterwards The fix is to save the top index scroll to the top of the table and then restore the original top index
Searches the receiver s list starting at the first column index 0 until a column is found that is equal to the argument and returns the index of that column If no column is found returns 1 param column the search column return the index of the column exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Searches the receiver s list starting at the first item index 0 until an item is found that is equal to the argument and returns the index of that item If no item is found returns 1 param item the search item return the index of the item exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the string is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the item is selected and code false code otherwise Indices out of range are ignored param index the index of the item return the visibility state of the item at the index exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Turn off redraw and leave it off
Feature in Windows 98 When there are a large number of columns and items in a table 1000 where each of the subitems in the table has a string it is much faster to delete each item with LVM DELETEITEM rather than using LVM DELETEALLITEMS The fix is to detect this case and delete the items one by one The fact that the fix is only necessary on Windows 98 was confirmed using version 5 81 of COMCTL32 DLL on both Windows 98 and NT NOTE LVM DELETEALLITEMS is also sent by the table when the table is destroyed
Removes the items from the receiver s list at the given zero relative indices param indices the array of indices of the items exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li li ERROR NULL ARGUMENT if the indices array is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Removes the item from the receiver at the given zero relative index param index the index for the item exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Removes the items from the receiver which are between the given zero relative start and end indices inclusive param start the start of the range param end the end of the range exception IllegalArgumentException ul li ERROR INVALID RANGE if either the start or end are not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows 98 When there are a large number of columns and items in a table 1000 where each of the subitems in the table has a string it is much faster to delete each item with LVM DELETEITEM rather than using LVM DELETEALLITEMS The fix is to detect this case and delete the items one by one The fact that the fix is only necessary on Windows 98 was confirmed using version 5 81 of COMCTL32 DLL on both Windows 98 and NT NOTE LVM DELETEALLITEMS is also sent by the table when the table is destroyed
Removes all of the items from the receiver p exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Removes the listener from the collection of listeners who will be notified when the receiver s selection changes param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see SelectionListener see addSelectionListener SelectionListener
An index of 1 will apply the change to all items Ensure that indices are greater than 1
Selects the items at the given zero relative indices in the receiver The current selection is not cleared before the new items are selected p If the item at a given index is not selected it is selected If the item at a given index was already selected it remains selected Indices that are out of range and duplicate indices are ignored If the receiver is single select and multiple indices are specified then all indices are ignored param indices the array of indices for the items to select exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the array of indices is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table setSelection int
An index of 1 will apply the change to all items Ensure that index is greater than 1
Selects the item at the given zero relative index in the receiver If the item at the index was already selected it remains selected Indices that are out of range are ignored param index the index of the item to select exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
An index of 1 will apply the change to all items Indices must be greater than 1
Selects the items in the range specified by the given zero relative indices in the receiver The range of indices is inclusive The current selection is not cleared before the new items are selected p If an item in the given range is not selected it is selected If an item in the given range was already selected it remains selected Indices that are out of range are ignored and no items will be selected if start is greater than end If the receiver is single select and there is more than one item in the given range then all indices are ignored param start the start of the range param end the end of the range exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table setSelection int int
Selects all of the items in the receiver p If the receiver is single select do nothing exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows Inside WM LBUTTONDOWN and WM RBUTTONDOWN the widget starts a modal loop to determine if the user wants to begin a drag drop operation or marque select Unfortunately this modal loop eats the corresponding mouse up The fix is to detect the cases when the modal loop has eaten the mouse up and issue a fake mouse up By observation when the mouse is clicked anywhere but the check box the widget eats the mouse up When the mouse is dragged the widget does not eat the mouse up
Force the table to have focus so that when the user reselects the focus item the LVIS FOCUSED state bits for the item will be set If the user did not click on an item then set focus to the table so that it will come to the front and take focus in the work around below
Feature in Windows When the user selects outside of a table item Windows deselects all the items even when the table is multi select While not strictly wrong this is unexpected The fix is to detect the case and avoid calling the window proc
Feature in Windows When a table item is reselected in a single select table Windows does not issue a WM NOTIFY because the item state has not changed This is strictly correct but is inconsistent with the list widget and other widgets in Windows The fix is to detect the case when an item is mark it as selected
Feature in Windows When the background color is changed the table does not redraw until the next WM PAINT The fix is to force a redraw
Bug in Windows If the table column widths are adjusted in WM SIZE or WM POSITIONCHANGED using LVM SETCOLUMNWIDTH blank lines may be inserted at the top of the table A call to LVM GETTOPINDEX will return a negative number this is an impossible result Once the blank lines appear there seems to be no way to get rid of them other than destroying and recreating the table By observation the problem happens when the height of the table is less than the two times the height of a line this was tested using different fonts and images It also seems that the bug does not occur when the redraw is turned off for the table The fix is to turn off drawing when resizing a table that is small enough to show the problem
Bug in Windows When LVM SETCOLUMNORDERARRAY is used to change the column order the header redraws correctly but the table does not The fix is to force a redraw
Sets the order that the items in the receiver should be displayed in to the given argument which is described in terms of the zero relative ordering of when the items were added param order the new order to display the items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the item order is null li li ERROR INVALID ARGUMENT if the item order is not the same length as the number of items li ul see Table getColumnOrder see TableColumn getMoveable see TableColumn setMoveable boolean see SWT Move since 3 1
An index of 1 will apply the change to all items Ensure that index is greater than 1
Bug in Windows Making any change to an item that changes the item height of a table while the table is scrolled can cause the lines to draw incorrectly This happens even when the lines are not currently visible and are shown afterwards The fix is to save the top index scroll to the top of the table and then restore the original top index
Bug in Windows Setting the font will cause the table to be redrawn but not the column headers The fix is to force a redraw of the column headers
The Windows table control uses CLR DEFAULT to indicate that it is using the default foreground color This is undocumented
Feature in Windows When the foreground color is changed the table does not redraw until the next WM PAINT The fix is to force a redraw
Feature in Windows Setting or clearing LVS NOCOLUMNHEADER causes the table to scroll to the beginning The fix is to save and restore the top index causing the table to scroll to the new location
Marks the receiver s header as visible if the argument is code true code and marks it invisible otherwise p If one of the receiver s ancestors is not visible or some other condition makes the receiver not visible marking it visible may not actually cause it to be displayed p param show the new visibility state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows When a virutal table contains items and LVM SETITEMCOUNT is used to set the new item count to zero Windows does not redraw the table Note that simply not specifying LVSICF NOINVALIDATEALL or LVSICF NOSCROLL does correct the problem The fix is to force a redraw
Sets the number of items contained in the receiver param count the number of items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
Bug in Windows When both a header and grid lines are displayed the grid lines do not take into account the height of the header and draw in the wrong place The fix is to set the height of the table items to be the height of the header so that the lines draw in the right place The height of a table item is the maximum of the height of the font or the height of image list NOTE In version 5 80 of COMCTL32 DLL the bug is fixed
Marks the receiver s lines as visible if the argument is code true code and marks it invisible otherwise p If one of the receiver s ancestors is not visible or some other condition makes the receiver not visible marking it visible may not actually cause it to be displayed p param show the new visibility state exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When WM SETREDRAW is used to turn off drawing in a widget it clears the WS VISIBLE bits and then sets them when redraw is turned back on This means that WM SETREDRAW will make a widget unexpectedly visible The fix is to track the visibility state while drawing is turned off and restore it when drawing is turned back on
Set the width of the horizontal scroll bar
Bug in Windows When LVM SETIMAGELIST is used to remove the image list by setting it to NULL the item width and height is not changed and space is reserved for icons despite the fact that there are none The fix is to set the image list to be very small before setting it to NULL This causes Windows to reserve the smallest possible space when an image list is removed In this case the scroll width must be one pixel larger
NOTE It is much faster to measure the strings and compute the width of the scroll bar in non virtual table rather than using LVM SETCOLUMNWIDTH with LVSCW AUTOSIZE
Selects the items at the given zero relative indices in the receiver The current selection is cleared before the new items are selected p Indices that are out of range and duplicate indices are ignored If the receiver is single select and multiple indices are specified then all indices are ignored param indices the indices of the items to select exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the array of indices is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table deselectAll see Table select int
Sets the receiver s selection to be the given array of items The current selection is cleared before the new items are selected p Items that are not in the receiver are ignored If the receiver is single select and multiple items are specified then all items are ignored param items the array of items exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the array of items is null li li ERROR INVALID ARGUMENT if one of the items has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table deselectAll see Table select int see Table setSelection int
Selects the item at the given zero relative index in the receiver The current selection is first cleared then the new item is selected param index the index of the item to select exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table deselectAll see Table select int
Selects the items in the range specified by the given zero relative indices in the receiver The range of indices is inclusive The current selection is cleared before the new items are selected p Indices that are out of range are ignored and no items will be selected if start is greater than end If the receiver is single select and there is more than one item in the given range then all indices are ignored param start the start index of the items to select param end the end index of the items to select exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table deselectAll see Table select int int
Bug in Windows When LVM SETIMAGELIST is used to remove the image list by setting it to NULL the item width and height is not changed and space is reserved for icons despite the fact that there are none The fix is to set the image list to be very small before setting it to NULL This causes Windows to reserve the smallest possible space when an image list is removed
Bug in Windows For some reason LVM ENSUREVISIBLE can scroll one item more or one item less when there is not enough space to show a single table item The fix is to detect the case and call LVM ENSUREVISIBLE again with the same arguments It seems that once LVM ENSUREVISIBLE has scrolled into the general area it is able to scroll to the exact item
Bug in Windows When the table header is visible and there is not enough space to show a single table item LVM GETCOUNTPERPAGE can return a negative number instead of zero The fix is to test for negative or zero
Use LVM SCROLL to scroll the table
Sets the zero relative index of the item which is currently at the top of the receiver This index can change when items are scrolled or new items are added and removed param index the index of the top item exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows Calling LVM GETSUBITEMRECT with 1 for the row number gives the bounds of the item that would be above the first row in the table This is undocumented and does not work for the first column In this case to get the bounds of the first column get the bounds of the second column and subtract the width of the first The left edge of the second column is also used as the right edge of the first
Shows the column If the column is already showing in the receiver this method simply returns Otherwise the columns are scrolled until the column is visible param column the column to be shown exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the column is null li li ERROR INVALID ARGUMENT if the column has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 3 0
Bug in Windows For some reason LVM ENSUREVISIBLE can scroll one item more or one item less when there is not enough space to show a single table item The fix is to detect the case and call LVM ENSUREVISIBLE again with the same arguments It seems that once LVM ENSUREVISIBLE has scrolled into the general area it is able to scroll to the exact item
Bug in Windows For some reason when there is insufficient space to show an item LVM ENSUREVISIBLE causes blank lines to be inserted at the top of the widget A call to LVM GETTOPINDEX will return a negative number this is an impossible result The fix is to use LVM GETCOUNTPERPAGE to detect the case when the number of visible items is zero and use LVM ENSUREVISIBLE with the fPartialOK flag set to true to scroll the table
Shows the item If the item is already showing in the receiver this method simply returns Otherwise the items are scrolled until the item is visible param item the item to be shown exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the item is null li li ERROR INVALID ARGUMENT if the item has been disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table showSelection
Shows the selection If the selection is already showing in the receiver this method simply returns Otherwise the items are scrolled until the selection is visible exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see Table showItem TableItem
NON NLS 1
if style SWT FLAT 0 bits OS LVS NOSORTHEADER
NOTE Call the window proc with WM KEYDOWN rather than WM CHAR so that the key that was ignored during WM KEYDOWN is processed This allows the application to cancel an operation that is normally performed in WM KEYDOWN from WM CHAR
Feature in Windows Windows sends LVN ITEMACTIVATE from WM KEYDOWN instead of WM CHAR This means that application code that expects to consume the key press and therefore avoid a SWT DefaultSelection event will fail The fix is to ignore LVN ITEMACTIVATE when it is caused by WM KEYDOWN and send SWT DefaultSelection from WM CHAR
return LRESULT ONE
Ensure that there is an accessible object created for this control because support for checked item accessibility is temporarily implemented in the accessibility package
Ensure that the window proc does not process VK SPACE so that it can be handled in WM CHAR This allows the application to cancel an operation that is normally performed in WM KEYDOWN from WM CHAR
Bug in Windows When LVS SHOWSELALWAYS is not specified Windows hides the selection when focus is lost but does not redraw anything other than the text leaving the image and check box appearing selected The fix is to redraw the table
Feature in Windows When the user selects outside of a table item Windows deselects all the items even when the table is multi select While not strictly wrong this is unexpected The fix is to detect the case and avoid calling the window proc
Note that when the table has LVS EX FULLROWSELECT and the user clicks anywhere on a row except on the check box all of the bits are set The hit test flags are LVHT ONITEM This means that a bit test for LVHT ONITEMSTATEICON is not the correct way to determine that the user has selected the check box equality is needed
Look for check uncheck
Feature in Windows For some reason capturing the mouse after processing the mouse event for the widget interferes with the normal mouse processing for the widget The fix is to avoid the automatic mouse capture
Note that when the table has LVS EX FULLROWSELECT and the user clicks anywhere on a row except on the check box all of the bits are set The hit test flags are LVHT ONITEM This means that a bit test for LVHT ONITEMSTATEICON is not the correct way to determine that the user has selected the check box equality is needed
Look for check uncheck
Feature in Windows Despite the fact that hot tracking is not enabled the hot tracking code in WM MOUSEHOVER is executed causing the item under the cursor to be selected The fix is to avoid calling the window proc
Resize the item array to match the item count
Feature in Windows On NT the automatically created header control is created as a UNICODE window not an ANSI window despite the fact that the parent is created as an ANSI window This means that it sends UNICODE notification messages to the parent window on NT for no good reason The data and size in the NMHEADER and HDITEM structs is identical between the platforms so no different message is actually necessary Despite this Windows sends different messages The fix is to look for both messages despite the platform This works because only one will be sent on either platform never both
Bug in Windows When a table has the LVS EX GRIDLINES extended style and the user drags any column over the first column in the table making the size become zero when the user drags a column such that the size of the first column becomes non zero the grid lines are not redrawn The fix is to detect the case and force a redraw of the first column
It is possible but unlikely that application code could have disposed the widget in the resize event If this happens end the processing of the Windows message by returning zero as the result of the window proc
It is possible but unlikely that application code could have disposed the column in the move event If this happens process the move event for those columns that have not been destroyed
Feature in Windows When the user selects outside of a table item Windows deselects all the items even when the table is multi select While not strictly wrong this is unexpected The fix is to detect the case and avoid calling the window proc
Feature in Windows For some reason capturing the mouse after processing the mouse event for the widget interferes with the normal mouse processing for the widget The fix is to avoid the automatic mouse capture
Bug in Windows For some reason the table does not set the default focus rectangle to be the first item in the table when it gets focus and there is no selected item The fix to make the first item be the focus item
Bug in Windows When a table is drawing grid lines and the user scrolls vertically up or down by a line or a page the table does not redraw the grid lines for newly exposed items The fix is to invalidate the items
if drawCount 0 OS IsWindowVisible handle break
The cached flag is used by both virtual and non virtual tables to indicate that Windows has asked at least once for a table item
NON NLS 1
Bug in Windows When pszText points to a zero length NULL terminated string Windows correctly draws the empty string but the cache of the bounds for the item is not reset This means that when the text for the item is set and then reset to an empty string the selection draws using the bounds of the previous text The fix is to use a space rather than an empty string when anything but a tool tip is requested to avoid a tool tip that is a single space NOTE This is only a problem for items in the first column Assigning NULL to other columns stops Windows from drawing the selection when LVS EX FULLROWSELECT is set
Feature in Windows When the font is set for one cell in a table Windows does not reset the font for the next cell As a result all subsequent cells are drawn using the new font The fix is to reset the font to the default NOTE This does not happen for foreground and background
Feature on Pocket PC The tree and table controls detect the tap and hold gesture by default They send a GN CONTEXTMENU message to show the popup menu This default behaviour is unwanted on Pocket PC 2002 when no menu has been set as it still draws a red circle The fix is to disable this default behaviour when no menu is set by returning TRUE when receiving the Pocket PC 2002 specific NM RECOGNIZEGESTURE message
