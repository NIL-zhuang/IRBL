Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a composite control which will be the parent of the new instance cannot be null param style the style of control to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT see Widget checkSubclass see Widget getStyle
Even though it is legal to create this widget with scroll bars they serve no useful purpose because they do not automatically scroll the widget s client area The fix is to clear the SWT style
Feature in Windows When the control is created it does not use the default system font A new HFONT is created and destroyed when the control is destroyed This means that a program that queries the font from this control uses the font in another control and then destroys this control will have the font unexpectedly destroyed in the other control The fix is to assign the font ourselves each time the control is created The control will not destroy a font that it did not create
Feature in Windows When inserting an item at end of a row sometimes Windows will begin to place the item on the right side of the cool bar The fix is to resize the new items to the maximum size and then resize the next to last item to the ideal size
Feature in Windows Is possible that the item at index zero has the RBBS BREAK flag set When a new item is inserted at position zero the previous item at position zero moves to a new line The fix is to detect this case and clear the RBBS BREAK flag on the previous item before inserting the new item
Insert the item
Resize the next to last item to the ideal size
Feature in Windows If the last item in a row is given its ideal size it will be placed at the far right hand edge of the coolbar It is preferred that the last item appear next to the second last item The fix is to size the last item of each row so that it occupies all the available space to the right in the row
Feature in Windows When Windows removed a rebar band it makes the band child invisible The fix is to show the child
When a wrapped item is being deleted make the next item in the row wrapped in order to preserve the row In order to avoid an unnecessary layout temporarily ignore WM SIZE If the next item is wrapped then a row will be deleted and the WM SIZE is necessary
Restore the visible state tof the control
Bug in Windows When the style bit RBS BANDBORDERS is not set the rectangle returned by RBS BANDBORDERS is four pixels too small The fix is to add four pixels to the result
Returns the item that is currently displayed at the given zero relative index Throws an exception if the index is out of range param index the visual index of the item to return return the item at the given visual index exception IllegalArgumentException ul li ERROR INVALID RANGE if the index is not between 0 and the number of elements in the list minus 1 inclusive li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns the number of items contained in the receiver return the number of items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns an array of zero relative ints that map the creation order of the receiver s items to the order in which they are currently being displayed p Specifically the indices of the returned array represent the current visual order of the items and the contents of the array represent the creation order of the items p p Note This is not the actual structure used by the receiver to maintain its list of items so modifying the array will not affect the receiver p return the current visual order of the receiver s items exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns an array of code CoolItem code s in the order in which they are currently being displayed p Note This is not the actual structure used by the receiver to maintain its list of items so modifying the array will not affect the receiver p return the receiver s items in their current visual order exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns an array of points whose x and y coordinates describe the widths and heights respectively of the items in the receiver in the order in which they are currently being displayed return the receiver s item sizes in their current visual order exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns whether or not the receiver is locked When a coolbar is locked its items cannot be repositioned return true if the coolbar is locked false otherwise exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 0
Returns an array of ints that describe the zero relative indices of any item s in the receiver that will begin on a new row The 0th visible item always begins the first row therefore it does not count as a wrap index return an array containing the receiver s wrap indices or an empty array if all items are in one row exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Searches the receiver s items in the order they are currently being displayed starting at the first item index 0 until an item is found that is equal to the argument and returns the index of that item If no item is found returns 1 param item the search item return the visual order index of the search item or 1 if the item is not found exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the item is null li li ERROR INVALID ARGUMENT if the item is disposed li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Bug in Windows When RB GETBANDBORDERS is sent with an index out of range Windows GP s The fix is to ensure the index is in range
Feature in Windows For some reason Windows does not fully erase the coolbar area and coolbar items when you set the background The fix is to invalidate the coolbar area
Sets the receiver s item order wrap indices and item sizes all at once This method is typically used to restore the displayed state of the receiver to a previously stored state p The item order is the order in which the items in the receiver should be displayed given in terms of the zero relative ordering of when the items were added p p The wrap indices are the indices of all item s in the receiver that will begin on a new row The indices are given in the order specified by the item order The 0th item always begins the first row therefore it does not count as a wrap index If wrap indices is null or empty the items will be placed on one line p p The sizes are specified in an array of points whose x and y coordinates describe the new widths and heights respectively of the receiver s items in the order specified by the item order p param itemOrder an array of indices that describe the new order to display the items in param wrapIndices an array of wrap indices or null param sizes an array containing the new sizes for each of the receiver s items in visual order exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if item order or sizes is null li li ERROR INVALID ARGUMENT if item order or sizes is not the same length as the number of items li ul
Ensure that itemOrder does not contain any duplicates
Move the item
Sets the order that the items in the receiver should be displayed in to the given argument which is described in terms of the zero relative ordering of when the items were added param itemOrder the new order to display the items in exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the item order is null li li ERROR INVALID ARGUMENT if the item order is not the same length as the number of items li ul
Sets the width and height of the receiver s items to the ones specified by the argument which is an array of points whose x and y coordinates describe the widths and heights respectively in the order in which the items are currently being displayed param sizes an array containing the new sizes for each of the receiver s items in visual order exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the array of sizes is null li li ERROR INVALID ARGUMENT if the array of sizes is not the same length as the number of items li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Sets whether or not the receiver is locked When a coolbar is locked its items cannot be repositioned param locked lock the coolbar if true otherwise unlock the coolbar exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul since 2 0
Sets the indices of all item s in the receiver that will begin on a new row The indices are given in the order in which they are currently being displayed The 0th item always begins the first row therefore it does not count as a wrap index If indices is null or empty the items will be placed on one line param indices an array of wrap indices or null exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Feature in Windows When the coolbar window proc processes WM COMMAND it forwards this message to its parent This is done so that children of this control that send this message type to their parent will notify not only this control but also the parent of this control which is typically the application window and the window that is looking for the message If the control did not forward the message applications would have to subclass the control window to see the message Because the control window is subclassed by SWT the message is delivered twice once by SWT and once when the message is forwarded by the window proc The fix is to avoid calling the window proc for this control
Feature in Windows For some reason Windows does not fully erase the area that the cool bar occupies when the size of the cool bar is larger than the space occupied by the cool bar items The fix is to erase the cool bar background NOTE On versions of Windows prior to XP for some reason the cool bar draws separators in WM ERASEBKGND Therefore it is essential to run the cool bar window proc after the background has been erased On XP this work around is unnecessary because the background is drawn using NM CUSTOMDRAW
Feature in Windows When the cool bar window proc processes WM NOTIFY it forwards this message to its parent This is done so that children of this control that send this message type to their parent will notify not only this control but also the parent of this control which is typically the application window and the window that is looking for the message If the control did not forward the message applications would have to subclass the control window to see the message Because the control window is subclassed by SWT the message is delivered twice once by SWT and once when the message is forwarded by the window proc The fix is to avoid calling the window proc for this control
Feature in Windows When redraw is turned off the rebar control does not call the default window proc This means that the rebar will redraw and children of the rebar will also redraw The fix is to call both the rebar window proc and the default window proc NOTE The rebar control can resize itself in WM SETREDRAW When redraw is turned off by the default window proc this can leave pixel corruption in the parent The fix is to detect the size change and damage the previous area in the parent NOTE In version 6 00 of COMCTL32 DLL when WM SETREDRAW is off we cannot detect that the size has changed causing pixel corruption The fix is to disallow WM SETREDRAW by not running the default window proc or the rebar window proc
Bug in Windows When Windows sets the size of the rebar band child and the child is a combo box the size of the drop down portion of the combo box is resized to zero The fix is to set the size of the control to the current size after the rebar has already resized it If the control is not a combo this does nothing If the control is a combo the drop down portion is recalculated
Bug in Windows On versions of Windows prior to XP drawing the background color in NM CUSTOMDRAW erases the separators The fix is to draw the background in WM ERASEBKGND
