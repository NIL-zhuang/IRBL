Instances of this class implement rubber banding rectangles that are drawn onto a parent code Composite code or code Display code These rectangles can be specified to respond to mouse and key events by either moving or resizing themselves accordingly Trackers are typically used to represent window geometries in a lightweight manner dl dt b Styles b dt dd LEFT RIGHT UP DOWN RESIZE dd dt b Events b dt dd Move Resize dd dl p Note Rectangle move behavior is assumed unless RESIZE is specified p p IMPORTANT This class is em not em intended to be subclassed p
The following values mirror step sizes on Windows
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p param parent a widget which will be the parent of the new instance cannot be null param style the style of widget to construct exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the parent is null li ul exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT LEFT see SWT RIGHT see SWT UP see SWT DOWN see SWT RESIZE see Widget checkSubclass see Widget getStyle
Constructs a new instance of this class given the display to create it on and a style value describing its behavior and appearance p The style value is either one of the style constants defined in class code SWT code which is applicable to instances of this class or must be built by em bitwise OR em ing together that is using the code int code operator two or more of those code SWT code style constants The class description lists the style constants that are applicable to the class Style bits are also inherited from superclasses p p Note Currently null can be passed in for the display argument This has the effect of creating the tracker on the currently active display if there is one If there is no current display the tracker is created on a default display b Passing in null as the display argument is not considered to be good coding style and may not be supported in a future release of SWT b p param display the display to create the tracker on param style the style of control to construct exception SWTException ul li ERROR THREAD INVALID ACCESS if not called from the thread that created the parent li li ERROR INVALID SUBCLASS if this class is not an allowed subclass li ul see SWT LEFT see SWT RIGHT see SWT UP see SWT DOWN
Adds the listener to the collection of listeners who will be notified when the control is moved or resized by sending it one of the messages defined in the code ControlListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ControlListener see removeControlListener
Adds the listener to the collection of listeners who will be notified when keys are pressed and released on the system keyboard by sending it one of the messages defined in the code KeyListener code interface param listener the listener which should be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see KeyListener see removeKeyListener
Convert to screen coordinates iff needed
Convert to screen coordinates iff needed
If the client has not provided a custom cursor then determine the appropriate resize cursor
Stops displaying the tracker rectangles Note that this is not considered to be a cancelation by the user exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Draw the rectangles displayed by the tracker
Returns the bounds that are being drawn expressed relative to the parent widget If the parent is a code Display code then these are screen coordinates return the bounds of the Rectangles being drawn exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Returns code true code if the rectangles are drawn with a stippled line code false code otherwise return the stippled effect of the rectangles exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
If exactly one of UP DOWN is specified as a style then set the cursor orientation accordingly the same is done for LEFT RIGHT styles below
If this tracker is being created without a mouse drag then we need to create a transparent window that fills the screen in order to get all mouse keyboard events that occur outside of our visible windows ie over the desktop
NON NLS 1
Tracker behaves like a Dialog with its own OS event loop
Cleanup If a transparent window was created in order to capture events then destroy it and its callback object now
Cleanup If this tracker was resizing then the last cursor that it created needs to be destroyed
Displays the Tracker rectangles for manipulation by the user Returns when the user has either finished manipulating the rectangles or has cancelled the Tracker return code true code if the user did not cancel the Tracker code false code otherwise exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Removes the listener from the collection of listeners who will be notified when the control is moved or resized param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see ControlListener see addControlListener
Removes the listener from the collection of listeners who will be notified when keys are pressed and released on the system keyboard param listener the listener which should no longer be notified exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the listener is null li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul see KeyListener see addKeyListener
If the cursor orientation has not been set in the orientation of this change then try to set it here
If the bounds will flip about the x or y axis then apply the adjustment up to the axis ie where bounds width height becomes 0 change the cursor s orientation accordingly and flip each Rectangle s origin only necessary for 1 Rectangles
apply the bounds adjustment
Sets the code Cursor code of the Tracker If this cursor is code null code then the cursor reverts to the default param newCursor the new code Cursor code to display exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Specifies the rectangles that should be drawn expressed relative to the parent widget If the parent is a Display then these are screen coordinates param rectangles the bounds of the rectangles to be drawn exception IllegalArgumentException ul li ERROR NULL ARGUMENT if the set of rectangles is null or contains a null rectangle li ul exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
Changes the appearance of the line used to draw the rectangles param stippled code true code if rectangle should appear stippled exception SWTException ul li ERROR WIDGET DISPOSED if the receiver has been disposed li li ERROR THREAD INVALID ACCESS if not called from the thread that created the receiver li ul
We typically do not want to answer that the transparent window is transparent to hits since doing so negates the effect of having it to grab events However clients of the tracker should not be aware of this transparent window Therefore if there is a hit query performed as a result of client code then answer that the transparent window is transparent to hits so that its existence will not impact the client
It is possible but unlikely that application code could have disposed the widget in the move event If this happens return false to indicate that the tracking has failed
It is possible that application code could have changed the rectangles in the move event If this happens then only redraw the tracker if the rectangle values have changed
It is possible but unlikely that application code could have disposed the widget in the resize event If this happens return false to indicate that the tracking has failed
It is possible that application code could have changed the rectangles in the resize event If this happens then only redraw the tracker if the rectangle values have changed
It is possible but unlikely that application code could have disposed the widget in the move event If this happens return false to indicate that the tracking has failed
It is possible that application code could have changed the rectangles in the move event If this happens then only redraw the tracker if the rectangle values have changed
It is possible but unlikely that application code could have disposed the widget in the resize event If this happens return false to indicate that the tracking has failed
It is possible that application code could have changed the rectangles in the resize event If this happens then only redraw the tracker if the rectangle values have changed
