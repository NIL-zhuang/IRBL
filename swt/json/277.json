{
	"variables":[
		"pBstrName",
		"pBstrDocString",
		"pBstrHelpFile",
		"rc",
		"size",
		"buffer",
		"subindex",
		"size",
		"buffer",
		"subindex",
		"size",
		"buffer",
		"subindex",
		"buffer",
		"size",
		"hHeap",
		"ppNames",
		"memTracker",
		"i",
		"nameSize",
		"pName",
		"i",
		"nameSize",
		"rgBstrNames",
		"rc",
		"i",
		"size",
		"buffer",
		"subindex",
		"address",
		"name",
		"pBstrName",
		"docString",
		"pBstrDocString",
		"helpFile",
		"pBstrHelpFile",
		"COM",
		"address",
		"index",
		"pBstrName",
		"pBstrDocString",
		"pdwHelpContext",
		"pBstrHelpFile",
		"name",
		"pBstrName",
		"COM",
		"pBstrName",
		"size",
		"size",
		"COM",
		"buffer",
		"pBstrName",
		"size",
		"name",
		"buffer",
		"name",
		"subindex",
		"name",
		"name",
		"subindex",
		"COM",
		"pBstrName",
		"docString",
		"pBstrDocString",
		"COM",
		"pBstrDocString",
		"size",
		"size",
		"COM",
		"buffer",
		"pBstrDocString",
		"size",
		"docString",
		"buffer",
		"docString",
		"subindex",
		"docString",
		"docString",
		"subindex",
		"COM",
		"pBstrDocString",
		"helpFile",
		"pBstrHelpFile",
		"COM",
		"pBstrHelpFile",
		"size",
		"size",
		"COM",
		"buffer",
		"pBstrHelpFile",
		"size",
		"helpFile",
		"buffer",
		"helpFile",
		"subindex",
		"helpFile",
		"helpFile",
		"subindex",
		"COM",
		"pBstrHelpFile",
		"rc",
		"COM",
		"address",
		"index",
		"ppFuncDesc",
		"rgszNames",
		"OS",
		"OS",
		"hHeap",
		"OS",
		"size",
		"size",
		"i",
		"size",
		"i",
		"rgszNames",
		"i",
		"buffer",
		"nameSize",
		"rgszNames",
		"i",
		"nameSize",
		"buffer",
		"OS",
		"hHeap",
		"OS",
		"buffer",
		"OS",
		"pName",
		"buffer",
		"buffer",
		"COM",
		"ppNames",
		"i",
		"pName",
		"memTracker",
		"i",
		"pName",
		"COM",
		"address",
		"ppNames",
		"cNames",
		"pMemId",
		"i",
		"memTracker",
		"i",
		"OS",
		"hHeap",
		"memTracker",
		"i",
		"OS",
		"hHeap",
		"ppNames",
		"COM",
		"address",
		"index",
		"pImplTypeFlags",
		"names",
		"nameSize",
		"COM",
		"address",
		"memid",
		"rgBstrNames",
		"nameSize",
		"pcNames",
		"rc",
		"COM",
		"i",
		"pcNames",
		"i",
		"COM",
		"rgBstrNames",
		"i",
		"size",
		"size",
		"COM",
		"buffer",
		"rgBstrNames",
		"i",
		"size",
		"names",
		"i",
		"buffer",
		"names",
		"i",
		"subindex",
		"names",
		"i",
		"names",
		"i",
		"subindex",
		"COM",
		"rgBstrNames",
		"i",
		"rc",
		"COM",
		"address",
		"hRefType",
		"ppTInfo",
		"COM",
		"address",
		"index",
		"pRefType",
		"COM",
		"address",
		"ppTypeAttr",
		"COM",
		"address",
		"index",
		"ppVarDesc",
		"COM",
		"address",
		"pFuncDesc",
		"COM",
		"address",
		"pTypeAttr",
		"COM",
		"address",
		"pVarDesc",
		"length",
		"HEAP_ZERO_MEMORY",
		"HEAP_ZERO_MEMORY",
		"length",
		"length",
		"length",
		"length",
		"S_OK",
		"address",
		"index",
		"name",
		"docString",
		"pdwHelpContext",
		"helpFile",
		"index",
		"ppFuncDesc",
		"rgszNames",
		"cNames",
		"pMemId",
		"index",
		"pImplTypeFlags",
		"memid",
		"names",
		"cMaxNames",
		"pcNames",
		"hRefType",
		"ppTInfo",
		"index",
		"pRefType",
		"ppTypeAttr",
		"index",
		"ppVarDesc",
		"pFuncDesc",
		"pTypeAttr",
		"pVarDesc"
	],
	"extendORImplementFiles":[
		"IUnknown"
	],
	"package":[
		"org.eclipse.swt.internal.ole.win32"
	],
	"import":[
		"org.eclipse.swt.internal.win32.OS"
	],
	"methods":[
		"GetDocumentation",
		"GetFuncDesc",
		"GetIDsOfNames",
		"GetImplTypeFlags",
		"GetNames",
		"GetRefTypeInfo",
		"GetRefTypeOfImplType",
		"GetTypeAttr",
		"GetVarDesc",
		"ReleaseFuncDesc",
		"ReleaseTypeAttr",
		"ReleaseVarDesc",
		"VtblCall",
		"SysStringByteLen",
		"MoveMemory",
		"indexOf",
		"substring",
		"SysFreeString",
		"SysStringByteLen",
		"MoveMemory",
		"indexOf",
		"substring",
		"SysFreeString",
		"SysStringByteLen",
		"MoveMemory",
		"indexOf",
		"substring",
		"SysFreeString",
		"VtblCall",
		"GetProcessHeap",
		"HeapAlloc",
		"length",
		"getChars",
		"HeapAlloc",
		"MoveMemory",
		"MoveMemory",
		"VtblCall",
		"HeapFree",
		"HeapFree",
		"VtblCall",
		"VtblCall",
		"SysStringByteLen",
		"MoveMemory",
		"indexOf",
		"substring",
		"SysFreeString",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"String",
		"String",
		"String",
		"String"
	],
	"methodsBody":{
		"public int GetFuncDesc(int index, int[] ppFuncDesc)":{
			"methodBody":"{\n    return COM.VtblCall(5, address, index, ppFuncDesc);\n}",
			"comments":"",
			"methodName":"public int GetFuncDesc(int index, int[] ppFuncDesc)"
		},
		"public int GetTypeAttr(int[] ppTypeAttr)":{
			"methodBody":"{\n    return COM.VtblCall(3, address, ppTypeAttr);\n}",
			"comments":"",
			"methodName":"public int GetTypeAttr(int[] ppTypeAttr)"
		},
		"public int ReleaseVarDesc(int pVarDesc)":{
			"methodBody":"{\n    return COM.VtblCall(21, address, pVarDesc);\n}",
			"comments":"",
			"methodName":"public int ReleaseVarDesc(int pVarDesc)"
		},
		"public int GetNames(int memid, String[] names, int cMaxNames, int[] pcNames)":{
			"methodBody":"{\n    int nameSize = names.length;\n    int[] rgBstrNames = new int[nameSize];\n    int rc = COM.VtblCall(7, address, memid, rgBstrNames, nameSize, pcNames);\n    if (rc == COM.S_OK) {\n        for (int i = 0; i < pcNames[0]; i++) {\n            int size = COM.SysStringByteLen(rgBstrNames[i]);\n            if (size > 0) {\n                \n                \n                char[] buffer = new char[(size + 1) / 2];\n                COM.MoveMemory(buffer, rgBstrNames[i], size);\n                names[i] = new String(buffer);\n                int subindex = names[i].indexOf(\"\\0\");\n                if (subindex > 0)\n                    names[i] = names[i].substring(0, subindex);\n            }\n            COM.SysFreeString(rgBstrNames[i]);\n        }\n    }\n    return rc;\n}",
			"comments":"// get the unicode character array from the global memory and create a String\n// add one to avoid rounding errors\n",
			"methodName":"public int GetNames(int memid, String[] names, int cMaxNames, int[] pcNames)"
		},
		"public int GetIDsOfNames(String[] rgszNames, int cNames, int[] pMemId)":{
			"methodBody":"{\n    char[] buffer;\n    int size = rgszNames.length;\n    \n    int hHeap = OS.GetProcessHeap();\n    int ppNames = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, size * 4);\n    int[] memTracker = new int[size];\n    try {\n        for (int i = 0; i < size; i++) {\n            \n            int nameSize = rgszNames[i].length();\n            buffer = new char[nameSize + 1];\n            rgszNames[i].getChars(0, nameSize, buffer, 0);\n            \n            int pName = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, buffer.length * 2);\n            OS.MoveMemory(pName, buffer, buffer.length * 2);\n            \n            COM.MoveMemory(ppNames + 4 * i, new int[] { pName }, 4);\n            \n            memTracker[i] = pName;\n        }\n        return COM.VtblCall(10, address, ppNames, cNames, pMemId);\n    } finally {\n        \n        for (int i = 0; i < memTracker.length; i++) {\n            OS.HeapFree(hHeap, 0, memTracker[i]);\n        }\n        OS.HeapFree(hHeap, 0, ppNames);\n    }\n}",
			"comments":"// create an array to hold the addresses\n// add the address of each string to the array\n// create a null terminated array of char for each String\n// get the address of the start of the array of char\n// copy the address to the array of addresses\n// keep track of the Global Memory so we can free it\n// free the memory\n",
			"methodName":"public int GetIDsOfNames(String[] rgszNames, int cNames, int[] pMemId)"
		},
		"public int GetImplTypeFlags(int index, int[] pImplTypeFlags)":{
			"methodBody":"{\n    return COM.VtblCall(9, address, index, pImplTypeFlags);\n}",
			"comments":"",
			"methodName":"public int GetImplTypeFlags(int index, int[] pImplTypeFlags)"
		},
		"public int GetVarDesc(int index, int[] ppVarDesc)":{
			"methodBody":"{\n    return COM.VtblCall(6, address, index, ppVarDesc);\n}",
			"comments":"",
			"methodName":"public int GetVarDesc(int index, int[] ppVarDesc)"
		},
		"public int GetDocumentation(int index, String[] name, String[] docString, int[] pdwHelpContext, String[] helpFile)":{
			"methodBody":"{\n    int[] pBstrName = null;\n    if (name != null)\n        pBstrName = new int[1];\n    int[] pBstrDocString = null;\n    if (docString != null)\n        pBstrDocString = new int[1];\n    int[] pBstrHelpFile = null;\n    if (helpFile != null)\n        pBstrHelpFile = new int[1];\n    int rc = COM.VtblCall(12, address, index, pBstrName, pBstrDocString, pdwHelpContext, pBstrHelpFile);\n    if (name != null && pBstrName[0] != 0) {\n        int size = COM.SysStringByteLen(pBstrName[0]);\n        if (size > 0) {\n            \n            \n            char[] buffer = new char[(size + 1) / 2];\n            COM.MoveMemory(buffer, pBstrName[0], size);\n            name[0] = new String(buffer);\n            int subindex = name[0].indexOf(\"\\0\");\n            if (subindex > 0)\n                name[0] = name[0].substring(0, subindex);\n        }\n        COM.SysFreeString(pBstrName[0]);\n    }\n    if (docString != null && pBstrDocString[0] != 0) {\n        int size = COM.SysStringByteLen(pBstrDocString[0]);\n        if (size > 0) {\n            \n            \n            char[] buffer = new char[(size + 1) / 2];\n            COM.MoveMemory(buffer, pBstrDocString[0], size);\n            docString[0] = new String(buffer);\n            int subindex = docString[0].indexOf(\"\\0\");\n            if (subindex > 0)\n                docString[0] = docString[0].substring(0, subindex);\n        }\n        COM.SysFreeString(pBstrDocString[0]);\n    }\n    if (helpFile != null && pBstrHelpFile[0] != 0) {\n        int size = COM.SysStringByteLen(pBstrHelpFile[0]);\n        if (size > 0) {\n            \n            \n            char[] buffer = new char[(size + 1) / 2];\n            COM.MoveMemory(buffer, pBstrHelpFile[0], size);\n            helpFile[0] = new String(buffer);\n            int subindex = helpFile[0].indexOf(\"\\0\");\n            if (subindex > 0)\n                helpFile[0] = helpFile[0].substring(0, subindex);\n        }\n        COM.SysFreeString(pBstrHelpFile[0]);\n    }\n    return rc;\n}",
			"comments":"// get the unicode character array from the global memory and create a String\n// add one to avoid rounding errors\n// get the unicode character array from the global memory and create a String\n// add one to avoid rounding errors\n// get the unicode character array from the global memory and create a String\n// add one to avoid rounding errors\n",
			"methodName":"public int GetDocumentation(int index, String[] name, String[] docString, int[] pdwHelpContext, String[] helpFile)"
		},
		"public int GetRefTypeInfo(int hRefType, int[] ppTInfo)":{
			"methodBody":"{\n    return COM.VtblCall(14, address, hRefType, ppTInfo);\n}",
			"comments":"",
			"methodName":"public int GetRefTypeInfo(int hRefType, int[] ppTInfo)"
		},
		"public int GetRefTypeOfImplType(int index, int[] pRefType)":{
			"methodBody":"{\n    return COM.VtblCall(8, address, index, pRefType);\n}",
			"comments":"",
			"methodName":"public int GetRefTypeOfImplType(int index, int[] pRefType)"
		},
		"public int ReleaseFuncDesc(int pFuncDesc)":{
			"methodBody":"{\n    return COM.VtblCall(20, address, pFuncDesc);\n}",
			"comments":"",
			"methodName":"public int ReleaseFuncDesc(int pFuncDesc)"
		},
		"public int ReleaseTypeAttr(int pTypeAttr)":{
			"methodBody":"{\n    return COM.VtblCall(19, address, pTypeAttr);\n}",
			"comments":"",
			"methodName":"public int ReleaseTypeAttr(int pTypeAttr)"
		}
	},
	"ClassORInterfaceName":[
		"ITypeInfo"
	]
}
