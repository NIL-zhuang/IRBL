{
	"variables":[
		"parent",
		"x",
		"y",
		"width",
		"height",
		"control",
		"toolTipText",
		"shortenedText",
		"shortenedTextWidth",
		"font",
		"disabledImage",
		"closeRect",
		"closeImageState",
		"showClose",
		"showing",
		"TOP_MARGIN",
		"BOTTOM_MARGIN",
		"LEFT_MARGIN",
		"RIGHT_MARGIN",
		"INTERNAL_SPACING",
		"FLAGS",
		"ELLIPSIS",
		"ellipseWidth",
		"length",
		"end",
		"l",
		"display",
		"indent",
		"x",
		"y",
		"closeBorder",
		"shape",
		"shape",
		"fill",
		"shape",
		"fill",
		"shape",
		"defaultBackground",
		"image",
		"colors",
		"percents",
		"vertical",
		"size",
		"rightEdge",
		"xx",
		"yy",
		"ww",
		"hh",
		"shape",
		"x1",
		"y1",
		"x2",
		"left",
		"right",
		"index",
		"i",
		"i",
		"left",
		"right",
		"index",
		"i",
		"i",
		"clipping",
		"bounds",
		"tabInPaint",
		"defaultBackground",
		"image",
		"colors",
		"percents",
		"vertical",
		"i",
		"inside",
		"outside",
		"xDraw",
		"image",
		"imageBounds",
		"maxImageWidth",
		"imageX",
		"imageHeight",
		"imageY",
		"imageWidth",
		"textWidth",
		"gcFont",
		"extent",
		"textY",
		"display",
		"clipping",
		"bounds",
		"nextVisible",
		"i",
		"xDraw",
		"image",
		"imageBounds",
		"maxImageWidth",
		"imageX",
		"imageHeight",
		"imageY",
		"imageWidth",
		"textWidth",
		"gcFont",
		"extent",
		"textY",
		"w",
		"text",
		"image",
		"h",
		"text",
		"gcFont",
		"w",
		"image",
		"text",
		"minChars",
		"end",
		"gcFont",
		"index",
		"oldImage",
		"oldBounds",
		"bounds",
		"CTabFolder",
		"SWT",
		"SWT",
		"parent",
		"style",
		"parent",
		"parent",
		"style",
		"showClose",
		"style",
		"SWT",
		"parent",
		"index",
		"SWT",
		"gc",
		"text",
		"FLAGS",
		"width",
		"text",
		"gc",
		"ELLIPSIS",
		"FLAGS",
		"text",
		"length",
		"end",
		"text",
		"text",
		"end",
		"gc",
		"text",
		"FLAGS",
		"l",
		"ellipseWidth",
		"width",
		"text",
		"ELLIPSIS",
		"end",
		"text",
		"parent",
		"parent",
		"control",
		"toolTipText",
		"shortenedText",
		"font",
		"closeRect",
		"closeRect",
		"Math",
		"CTabFolder",
		"closeRect",
		"indent",
		"closeRect",
		"indent",
		"y",
		"parent",
		"display",
		"CTabFolder",
		"closeImageState",
		"CTabFolder",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"gc",
		"display",
		"CTabFolder",
		"gc",
		"shape",
		"gc",
		"closeBorder",
		"gc",
		"shape",
		"CTabFolder",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"display",
		"CTabFolder",
		"gc",
		"fill",
		"gc",
		"shape",
		"fill",
		"gc",
		"closeBorder",
		"gc",
		"shape",
		"CTabFolder",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"display",
		"CTabFolder",
		"gc",
		"fill",
		"gc",
		"shape",
		"fill",
		"gc",
		"closeBorder",
		"gc",
		"shape",
		"CTabFolder",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"parent",
		"parent",
		"parent",
		"gc",
		"shape",
		"parent",
		"parent",
		"parent",
		"parent",
		"parent",
		"parent",
		"gc",
		"shape",
		"x",
		"y",
		"defaultBackground",
		"image",
		"colors",
		"percents",
		"vertical",
		"parent",
		"Math",
		"x",
		"width",
		"parent",
		"parent",
		"parent",
		"size",
		"parent",
		"parent",
		"parent",
		"parent",
		"parent",
		"size",
		"parent",
		"parent",
		"parent",
		"xx",
		"yy",
		"xx",
		"ww",
		"yy",
		"xx",
		"ww",
		"yy",
		"hh",
		"xx",
		"yy",
		"hh",
		"parent",
		"parent",
		"parent",
		"gc",
		"shape",
		"gc",
		"parent",
		"gc",
		"xx",
		"yy",
		"ww",
		"hh",
		"parent",
		"showing",
		"showing",
		"Math",
		"parent",
		"parent",
		"y",
		"y",
		"height",
		"size",
		"parent",
		"gc",
		"CTabFolder",
		"gc",
		"x1",
		"y1",
		"x2",
		"y1",
		"shape",
		"parent",
		"CTabFolder",
		"CTabFolder",
		"parent",
		"CTabFolder",
		"parent",
		"parent",
		"parent",
		"parent",
		"left",
		"x",
		"y",
		"height",
		"shape",
		"left",
		"right",
		"shape",
		"index",
		"x",
		"shape",
		"index",
		"y",
		"shape",
		"index",
		"x",
		"shape",
		"index",
		"y",
		"i",
		"left",
		"i",
		"shape",
		"index",
		"x",
		"left",
		"i",
		"shape",
		"index",
		"y",
		"height",
		"left",
		"i",
		"i",
		"right",
		"i",
		"shape",
		"index",
		"parent",
		"rightEdge",
		"right",
		"i",
		"rightEdge",
		"parent",
		"right",
		"i",
		"shape",
		"index",
		"parent",
		"y",
		"height",
		"right",
		"i",
		"y",
		"right",
		"i",
		"shape",
		"index",
		"parent",
		"rightEdge",
		"rightEdge",
		"parent",
		"parent",
		"shape",
		"index",
		"y",
		"shape",
		"index",
		"parent",
		"rightEdge",
		"rightEdge",
		"parent",
		"parent",
		"shape",
		"index",
		"y",
		"parent",
		"CTabFolder",
		"CTabFolder",
		"parent",
		"CTabFolder",
		"parent",
		"parent",
		"parent",
		"parent",
		"left",
		"x",
		"y",
		"shape",
		"left",
		"right",
		"shape",
		"index",
		"x",
		"shape",
		"index",
		"y",
		"height",
		"shape",
		"index",
		"x",
		"shape",
		"index",
		"y",
		"height",
		"i",
		"left",
		"i",
		"shape",
		"index",
		"x",
		"left",
		"i",
		"shape",
		"index",
		"y",
		"left",
		"i",
		"i",
		"right",
		"i",
		"shape",
		"index",
		"parent",
		"rightEdge",
		"right",
		"i",
		"rightEdge",
		"parent",
		"right",
		"i",
		"shape",
		"index",
		"y",
		"right",
		"i",
		"shape",
		"index",
		"parent",
		"rightEdge",
		"rightEdge",
		"parent",
		"parent",
		"shape",
		"index",
		"y",
		"height",
		"shape",
		"index",
		"parent",
		"rightEdge",
		"rightEdge",
		"parent",
		"parent",
		"shape",
		"index",
		"y",
		"height",
		"gc",
		"bounds",
		"parent",
		"bounds",
		"clipping",
		"bounds",
		"tabInPaint",
		"parent",
		"parent",
		"parent",
		"gc",
		"shape",
		"parent",
		"parent",
		"parent",
		"parent",
		"parent",
		"xx",
		"x",
		"yy",
		"parent",
		"y",
		"y",
		"ww",
		"width",
		"hh",
		"height",
		"parent",
		"parent",
		"ww",
		"parent",
		"parent",
		"parent",
		"gc",
		"shape",
		"xx",
		"yy",
		"ww",
		"hh",
		"defaultBackground",
		"image",
		"colors",
		"percents",
		"vertical",
		"shape",
		"Math",
		"parent",
		"parent",
		"parent",
		"parent",
		"shape",
		"parent",
		"y",
		"height",
		"y",
		"shape",
		"shape",
		"shape",
		"shape",
		"shape",
		"size",
		"parent",
		"i",
		"shape",
		"i",
		"shape",
		"i",
		"y",
		"height",
		"shape",
		"i",
		"parent",
		"parent",
		"parent",
		"parent",
		"inside",
		"parent",
		"parent",
		"parent",
		"parent",
		"outside",
		"parent",
		"shape",
		"CTabFolder",
		"inside",
		"outside",
		"gc",
		"gc",
		"CTabFolder",
		"gc",
		"shape",
		"tabInPaint",
		"x",
		"LEFT_MARGIN",
		"parent",
		"parent",
		"showClose",
		"xDraw",
		"CTabFolder",
		"image",
		"image",
		"rightEdge",
		"xDraw",
		"RIGHT_MARGIN",
		"parent",
		"closeRect",
		"maxImageWidth",
		"closeRect",
		"INTERNAL_SPACING",
		"imageBounds",
		"maxImageWidth",
		"xDraw",
		"imageBounds",
		"y",
		"height",
		"imageHeight",
		"imageY",
		"parent",
		"imageBounds",
		"imageHeight",
		"imageBounds",
		"gc",
		"image",
		"imageBounds",
		"imageBounds",
		"imageBounds",
		"imageBounds",
		"imageX",
		"imageY",
		"imageWidth",
		"imageHeight",
		"xDraw",
		"imageWidth",
		"INTERNAL_SPACING",
		"rightEdge",
		"xDraw",
		"RIGHT_MARGIN",
		"parent",
		"closeRect",
		"textWidth",
		"closeRect",
		"INTERNAL_SPACING",
		"textWidth",
		"gc",
		"gc",
		"font",
		"parent",
		"font",
		"shortenedText",
		"shortenedTextWidth",
		"textWidth",
		"shortenedText",
		"gc",
		"textWidth",
		"shortenedTextWidth",
		"textWidth",
		"gc",
		"shortenedText",
		"FLAGS",
		"y",
		"height",
		"extent",
		"textY",
		"parent",
		"gc",
		"parent",
		"gc",
		"shortenedText",
		"xDraw",
		"textY",
		"FLAGS",
		"gc",
		"gcFont",
		"parent",
		"parent",
		"parent",
		"gc",
		"display",
		"SWT",
		"gc",
		"display",
		"SWT",
		"gc",
		"xDraw",
		"textY",
		"extent",
		"extent",
		"gc",
		"display",
		"CTabFolder",
		"gc",
		"xDraw",
		"textY",
		"extent",
		"xDraw",
		"extent",
		"textY",
		"extent",
		"parent",
		"showClose",
		"gc",
		"showing",
		"gc",
		"clipping",
		"bounds",
		"parent",
		"i",
		"parent",
		"i",
		"parent",
		"i",
		"nextVisible",
		"i",
		"nextVisible",
		"nextVisible",
		"parent",
		"gc",
		"CTabFolder",
		"gc",
		"x",
		"width",
		"y",
		"x",
		"width",
		"y",
		"height",
		"x",
		"LEFT_MARGIN",
		"image",
		"parent",
		"image",
		"x",
		"width",
		"xDraw",
		"RIGHT_MARGIN",
		"parent",
		"parent",
		"showClose",
		"maxImageWidth",
		"closeRect",
		"INTERNAL_SPACING",
		"imageBounds",
		"maxImageWidth",
		"xDraw",
		"imageBounds",
		"y",
		"height",
		"imageHeight",
		"imageY",
		"parent",
		"imageBounds",
		"imageHeight",
		"imageBounds",
		"gc",
		"image",
		"imageBounds",
		"imageBounds",
		"imageBounds",
		"imageBounds",
		"imageX",
		"imageY",
		"imageWidth",
		"imageHeight",
		"xDraw",
		"imageWidth",
		"INTERNAL_SPACING",
		"x",
		"width",
		"xDraw",
		"RIGHT_MARGIN",
		"parent",
		"parent",
		"showClose",
		"textWidth",
		"closeRect",
		"INTERNAL_SPACING",
		"textWidth",
		"gc",
		"gc",
		"font",
		"parent",
		"font",
		"shortenedText",
		"shortenedTextWidth",
		"textWidth",
		"shortenedText",
		"gc",
		"textWidth",
		"shortenedTextWidth",
		"textWidth",
		"gc",
		"shortenedText",
		"FLAGS",
		"y",
		"height",
		"extent",
		"textY",
		"parent",
		"gc",
		"parent",
		"gc",
		"shortenedText",
		"xDraw",
		"textY",
		"FLAGS",
		"gc",
		"gcFont",
		"parent",
		"parent",
		"showClose",
		"gc",
		"width",
		"parent",
		"parent",
		"parent",
		"parent",
		"w",
		"parent",
		"parent",
		"x",
		"y",
		"w",
		"height",
		"control",
		"disabledImage",
		"font",
		"font",
		"parent",
		"parent",
		"toolTipText",
		"shortenedText",
		"shortenedText",
		"text",
		"text",
		"toolTipText",
		"showing",
		"width",
		"height",
		"isSelected",
		"gc",
		"gc",
		"image",
		"image",
		"font",
		"h",
		"Math",
		"h",
		"gc",
		"text",
		"FLAGS",
		"gc",
		"gc",
		"font",
		"h",
		"Math",
		"h",
		"gc",
		"text",
		"FLAGS",
		"gc",
		"gcFont",
		"h",
		"TOP_MARGIN",
		"BOTTOM_MARGIN",
		"image",
		"isSelected",
		"parent",
		"w",
		"image",
		"minimum",
		"parent",
		"text",
		"minChars",
		"text",
		"text",
		"minChars",
		"minChars",
		"ELLIPSIS",
		"minChars",
		"minChars",
		"ELLIPSIS",
		"text",
		"text",
		"end",
		"minChars",
		"ELLIPSIS",
		"text",
		"ELLIPSIS",
		"text",
		"text",
		"w",
		"w",
		"INTERNAL_SPACING",
		"font",
		"w",
		"gc",
		"text",
		"FLAGS",
		"gc",
		"gc",
		"font",
		"w",
		"gc",
		"text",
		"FLAGS",
		"gc",
		"gcFont",
		"parent",
		"showClose",
		"isSelected",
		"parent",
		"w",
		"w",
		"INTERNAL_SPACING",
		"w",
		"CTabFolder",
		"w",
		"LEFT_MARGIN",
		"RIGHT_MARGIN",
		"control",
		"control",
		"SWT",
		"SWT",
		"control",
		"parent",
		"SWT",
		"SWT",
		"control",
		"parent",
		"index",
		"parent",
		"parent",
		"image",
		"image",
		"SWT",
		"SWT",
		"image",
		"font",
		"font",
		"SWT",
		"SWT",
		"font",
		"font",
		"font",
		"font",
		"parent",
		"parent",
		"parent",
		"image",
		"image",
		"SWT",
		"SWT",
		"image",
		"oldImage",
		"image",
		"image",
		"oldImage",
		"image",
		"parent",
		"oldImage",
		"image",
		"oldImage",
		"image",
		"bounds",
		"oldBounds",
		"bounds",
		"oldBounds",
		"showing",
		"parent",
		"x",
		"y",
		"width",
		"height",
		"parent",
		"parent",
		"string",
		"SWT",
		"SWT",
		"string",
		"string",
		"shortenedText",
		"shortenedTextWidth",
		"parent",
		"parent",
		"parent",
		"toolTipText",
		"string",
		"NONE",
		"DRAW_TRANSPARENT",
		"DRAW_MNEMONIC",
		"CLOSE",
		"NONE",
		"x",
		"x",
		"x",
		"width",
		"height",
		"BUTTON_SIZE",
		"x",
		"y",
		"onBottom",
		"BUTTON_BORDER",
		"NORMAL",
		"BUTTON_FILL",
		"HOT",
		"CLOSE_FILL",
		"SELECTED",
		"CLOSE_FILL",
		"NONE",
		"gradientColors",
		"gradientVertical",
		"bgImage",
		"gradientColors",
		"gradientPercents",
		"gradientVertical",
		"borderLeft",
		"onBottom",
		"y",
		"borderBottom",
		"tabHeight",
		"highlight_header",
		"borderTop",
		"tabHeight",
		"x",
		"borderLeft",
		"borderRight",
		"highlight_header",
		"selectionGradientColors",
		"selectionGradientVertical",
		"selectionBackground",
		"single",
		"borderLeft",
		"onBottom",
		"x",
		"borderRight",
		"borderColor",
		"onBottom",
		"parent",
		"simple",
		"SIMPLE_BOTTOM_LEFT_CORNER",
		"BOTTOM_LEFT_CORNER",
		"simple",
		"SIMPLE_BOTTOM_RIGHT_CORNER",
		"curve",
		"borderLeft",
		"firstIndex",
		"length",
		"length",
		"length",
		"length",
		"simple",
		"curveIndent",
		"simple",
		"simple",
		"curveWidth",
		"curveIndent",
		"simple",
		"curveWidth",
		"curveIndent",
		"simple",
		"SIMPLE_TOP_LEFT_CORNER",
		"TOP_LEFT_CORNER",
		"simple",
		"SIMPLE_TOP_RIGHT_CORNER",
		"curve",
		"borderLeft",
		"firstIndex",
		"length",
		"length",
		"length",
		"length",
		"simple",
		"curveIndent",
		"simple",
		"curveWidth",
		"curveIndent",
		"simple",
		"curveWidth",
		"curveIndent",
		"height",
		"onBottom",
		"y",
		"selectionGradientColors",
		"selectionGradientVertical",
		"selectionBackground",
		"selectionBgImage",
		"selectionGradientColors",
		"selectionGradientPercents",
		"selectionGradientVertical",
		"onBottom",
		"single",
		"simple",
		"curveWidth",
		"curveIndent",
		"borderLeft",
		"borderLeft",
		"firstIndex",
		"onBottom",
		"length",
		"x",
		"borderRight",
		"length",
		"selectionBackground",
		"selectionBgImage",
		"selectionGradientColors",
		"length",
		"selectionGradientColors",
		"bgImage",
		"gradientColors",
		"length",
		"gradientColors",
		"borderColor",
		"borderColor",
		"single",
		"showClose",
		"BUTTON_SIZE",
		"single",
		"width",
		"width",
		"width",
		"height",
		"onBottom",
		"width",
		"height",
		"x",
		"y",
		"width",
		"height",
		"single",
		"width",
		"width",
		"y",
		"onBottom",
		"selectionForeground",
		"simple",
		"single",
		"COLOR_BLACK",
		"COLOR_WHITE",
		"x",
		"y",
		"BUTTON_BORDER",
		"y",
		"x",
		"y",
		"showClose",
		"length",
		"items",
		"showing",
		"items",
		"selectedIndex",
		"borderColor",
		"showUnselectedImage",
		"showUnselectedClose",
		"showClose",
		"width",
		"width",
		"height",
		"onBottom",
		"width",
		"height",
		"x",
		"y",
		"width",
		"height",
		"showUnselectedClose",
		"showClose",
		"width",
		"y",
		"onBottom",
		"showUnselectedClose",
		"showClose",
		"simple",
		"single",
		"selectedIndex",
		"curveWidth",
		"curveIndent",
		"height",
		"y",
		"y",
		"showUnselectedImage",
		"width",
		"minChars",
		"x",
		"x",
		"showClose",
		"showUnselectedClose",
		"BUTTON_SIZE",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_PARENT",
		"control",
		"control",
		"control",
		"control",
		"control",
		"control",
		"control",
		"control",
		"ERROR_INVALID_ARGUMENT",
		"disabledImage",
		"ERROR_INVALID_ARGUMENT",
		"font",
		"font",
		"font",
		"ERROR_INVALID_ARGUMENT",
		"width",
		"width",
		"height",
		"height",
		"ERROR_NULL_ARGUMENT",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"style",
		"gc",
		"text",
		"width",
		"gc",
		"gc",
		"gc",
		"gc",
		"isSelected",
		"gc",
		"gc",
		"isSelected",
		"minimum",
		"control",
		"image",
		"font",
		"image",
		"string",
		"string"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"checkStyle",
		"shortenText",
		"dispose",
		"drawClose",
		"drawSelected",
		"drawUnselected",
		"getBounds",
		"getControl",
		"getDisabledImage",
		"getFont",
		"getParent",
		"getToolTipText",
		"isShowing",
		"onPaint",
		"preferredHeight",
		"preferredWidth",
		"setControl",
		"setDisabledImage",
		"setFont",
		"setImage",
		"setText",
		"setToolTipText",
		"getItemCount",
		"checkStyle",
		"createItem",
		"textExtent",
		"textExtent",
		"length",
		"substring",
		"textExtent",
		"substring",
		"isDisposed",
		"destroyItem",
		"dispose",
		"getDisplay",
		"max",
		"getSystemColor",
		"setBackground",
		"getSystemColor",
		"fillPolygon",
		"setForeground",
		"drawPolygon",
		"setBackground",
		"fillPolygon",
		"dispose",
		"setForeground",
		"drawPolygon",
		"setBackground",
		"fillPolygon",
		"dispose",
		"setForeground",
		"drawPolygon",
		"drawBackground",
		"getBackground",
		"drawBackground",
		"getSize",
		"min",
		"getRightItemEdge",
		"drawBackground",
		"setBackground",
		"fillRectangle",
		"max",
		"setForeground",
		"drawLine",
		"indexOf",
		"indexOf",
		"getClipping",
		"getBounds",
		"intersects",
		"drawBackground",
		"drawBackground",
		"max",
		"indexOf",
		"getRGB",
		"getRGB",
		"getBackground",
		"antialias",
		"getRGB",
		"setForeground",
		"drawPolyline",
		"getImage",
		"getBounds",
		"drawImage",
		"getFont",
		"setFont",
		"getFont",
		"shortenText",
		"getText",
		"textExtent",
		"setForeground",
		"drawText",
		"setFont",
		"isFocusControl",
		"getDisplay",
		"setBackground",
		"getSystemColor",
		"setForeground",
		"getSystemColor",
		"drawFocus",
		"setForeground",
		"getSystemColor",
		"drawLine",
		"drawClose",
		"getClipping",
		"getBounds",
		"intersects",
		"indexOf",
		"setForeground",
		"drawLine",
		"getImage",
		"getBounds",
		"drawImage",
		"getFont",
		"setFont",
		"getFont",
		"shortenText",
		"getText",
		"textExtent",
		"setForeground",
		"getForeground",
		"drawText",
		"setFont",
		"drawClose",
		"indexOf",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"getFont",
		"checkWidget",
		"getText",
		"equals",
		"checkWidget",
		"drawSelected",
		"drawUnselected",
		"getImage",
		"getBounds",
		"getText",
		"max",
		"textExtent",
		"getFont",
		"setFont",
		"max",
		"textExtent",
		"setFont",
		"isDisposed",
		"getImage",
		"getBounds",
		"getText",
		"length",
		"length",
		"length",
		"substring",
		"length",
		"getText",
		"textExtent",
		"getFont",
		"setFont",
		"textExtent",
		"setFont",
		"checkWidget",
		"isDisposed",
		"error",
		"getParent",
		"error",
		"isDisposed",
		"setVisible",
		"indexOf",
		"getSelectionIndex",
		"setBounds",
		"getClientArea",
		"setVisible",
		"setVisible",
		"checkWidget",
		"isDisposed",
		"error",
		"checkWidget",
		"isDisposed",
		"error",
		"equals",
		"updateTabHeight",
		"updateItems",
		"redrawTabs",
		"checkWidget",
		"isDisposed",
		"error",
		"getImage",
		"equals",
		"setImage",
		"updateTabHeight",
		"getBounds",
		"getBounds",
		"redraw",
		"updateItems",
		"redrawTabs",
		"checkWidget",
		"error",
		"equals",
		"getText",
		"setText",
		"updateTabHeight",
		"updateItems",
		"redrawTabs",
		"checkWidget",
		"Rectangle",
		"Color",
		"Color",
		"Rectangle"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (string.equals(getText()))\n        return;\n    super.setText(string);\n    shortenedText = null;\n    shortenedTextWidth = 0;\n    if (!parent.updateTabHeight(false)) {\n        parent.updateItems();\n        parent.redrawTabs();\n    }\n}",
			"comments":"",
			"methodName":"public void setText(String string)"
		},
		"public void setDisabledImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    this.disabledImage = image;\n}",
			"comments":"/**\n* Sets the image that is displayed if the tab item is disabled.\n* Null will clear the image.\n*\n* @param image the image to be displayed when the item is disabled or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @deprecated This image is not used\n*/\n",
			"methodName":"public void setDisabledImage(Image image)"
		},
		"public void dispose()":{
			"methodBody":"{\n    if (isDisposed())\n        return;\n    \n    parent.destroyItem(this);\n    super.dispose();\n    parent = null;\n    control = null;\n    toolTipText = null;\n    shortenedText = null;\n    font = null;\n}",
			"comments":"//if (!isValidThread ()) error (SWT.ERROR_THREAD_INVALID_ACCESS);\n",
			"methodName":"public void dispose()"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    Image oldImage = getImage();\n    if (image == null && oldImage == null)\n        return;\n    if (image != null && image.equals(oldImage))\n        return;\n    super.setImage(image);\n    if (!parent.updateTabHeight(false)) {\n        \n        if (oldImage != null && image != null) {\n            Rectangle oldBounds = oldImage.getBounds();\n            Rectangle bounds = image.getBounds();\n            if (bounds.width == oldBounds.width && bounds.height == oldBounds.height) {\n                if (showing)\n                    parent.redraw(x, y, width, height, false);\n                return;\n            }\n        }\n        parent.updateItems();\n        parent.redrawTabs();\n    }\n}",
			"comments":"// If image is the same size as before,\n// redraw only the image\n",
			"methodName":"public void setImage(Image image)"
		},
		"public Rectangle getBounds()":{
			"methodBody":"{\n    \n    int w = width;\n    if (!parent.simple && !parent.single && parent.indexOf(this) == parent.selectedIndex)\n        w += parent.curveWidth - parent.curveIndent;\n    return new Rectangle(x, y, w, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent.\n*\n* @return the receiver's bounding column rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n//checkWidget();\n",
			"methodName":"public Rectangle getBounds()"
		},
		"public Control getControl()":{
			"methodBody":"{\n    checkWidget();\n    return control;\n}",
			"comments":"/**\n* Gets the control that is displayed in the content are of the tab item.\n*\n* @return the control\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Control getControl()"
		},
		"public boolean isShowing()":{
			"methodBody":"{\n    checkWidget();\n    return showing;\n}",
			"comments":"/**\n* Returns <code>true</code> if the item will be rendered in the visible area of the CTabFolder. Returns false otherwise.\n*\n*  @return <code>true</code> if the item will be rendered in the visible area of the CTabFolder. Returns false otherwise.\n*\n*  @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public boolean isShowing()"
		},
		"void drawSelected(GC gc)":{
			"methodBody":"{\n    Point size = parent.getSize();\n    int rightEdge = Math.min(x + width, parent.getRightItemEdge());\n    \n    int xx = parent.borderLeft;\n    int yy = parent.onBottom ? size.y - parent.borderBottom - parent.tabHeight - parent.highlight_header : parent.borderTop + parent.tabHeight + 1;\n    int ww = size.x - parent.borderLeft - parent.borderRight;\n    int hh = parent.highlight_header - 1;\n    int[] shape = new int[] { xx, yy, xx + ww, yy, xx + ww, yy + hh, xx, yy + hh };\n    if (parent.selectionGradientColors != null && !parent.selectionGradientVertical) {\n        parent.drawBackground(gc, shape, true);\n    } else {\n        gc.setBackground(parent.selectionBackground);\n        gc.fillRectangle(xx, yy, ww, hh);\n    }\n    if (parent.single) {\n        if (!showing)\n            return;\n    } else {\n        \n        if (!showing) {\n            int x1 = Math.max(0, parent.borderLeft - 1);\n            int y1 = (parent.onBottom) ? y - 1 : y + height;\n            int x2 = size.x - parent.borderRight;\n            gc.setForeground(CTabFolder.borderColor);\n            gc.drawLine(x1, y1, x2, y1);\n            return;\n        }\n        \n        shape = null;\n        if (this.parent.onBottom) {\n            int[] left = parent.simple ? CTabFolder.SIMPLE_BOTTOM_LEFT_CORNER : CTabFolder.BOTTOM_LEFT_CORNER;\n            int[] right = parent.simple ? CTabFolder.SIMPLE_BOTTOM_RIGHT_CORNER : parent.curve;\n            if (parent.borderLeft == 0 && parent.indexOf(this) == parent.firstIndex) {\n                left = new int[] { x, y + height };\n            }\n            shape = new int[left.length + right.length + 8];\n            int index = 0;\n            \n            shape[index++] = x;\n            shape[index++] = y - 1;\n            shape[index++] = x;\n            shape[index++] = y - 1;\n            for (int i = 0; i < left.length / 2; i++) {\n                shape[index++] = x + left[2 * i];\n                shape[index++] = y + height + left[2 * i + 1] - 1;\n            }\n            for (int i = 0; i < right.length / 2; i++) {\n                shape[index++] = parent.simple ? rightEdge - 1 + right[2 * i] : rightEdge - parent.curveIndent + right[2 * i];\n                shape[index++] = parent.simple ? y + height + right[2 * i + 1] - 1 : y + right[2 * i + 1] - 2;\n            }\n            shape[index++] = parent.simple ? rightEdge - 1 : rightEdge + parent.curveWidth - parent.curveIndent;\n            shape[index++] = y - 1;\n            shape[index++] = parent.simple ? rightEdge - 1 : rightEdge + parent.curveWidth - parent.curveIndent;\n            shape[index++] = y - 1;\n        } else {\n            int[] left = parent.simple ? CTabFolder.SIMPLE_TOP_LEFT_CORNER : CTabFolder.TOP_LEFT_CORNER;\n            int[] right = parent.simple ? CTabFolder.SIMPLE_TOP_RIGHT_CORNER : parent.curve;\n            if (parent.borderLeft == 0 && parent.indexOf(this) == parent.firstIndex) {\n                left = new int[] { x, y };\n            }\n            shape = new int[left.length + right.length + 8];\n            int index = 0;\n            \n            shape[index++] = x;\n            shape[index++] = y + height + 1;\n            shape[index++] = x;\n            shape[index++] = y + height + 1;\n            for (int i = 0; i < left.length / 2; i++) {\n                shape[index++] = x + left[2 * i];\n                shape[index++] = y + left[2 * i + 1];\n            }\n            for (int i = 0; i < right.length / 2; i++) {\n                shape[index++] = parent.simple ? rightEdge - 1 + right[2 * i] : rightEdge - parent.curveIndent + right[2 * i];\n                shape[index++] = y + right[2 * i + 1];\n            }\n            shape[index++] = parent.simple ? rightEdge - 1 : rightEdge + parent.curveWidth - parent.curveIndent;\n            shape[index++] = y + height + 1;\n            shape[index++] = parent.simple ? rightEdge - 1 : rightEdge + parent.curveWidth - parent.curveIndent;\n            shape[index++] = y + height + 1;\n        }\n        Rectangle clipping = gc.getClipping();\n        Rectangle bounds = getBounds();\n        bounds.height += 1;\n        if (parent.onBottom)\n            bounds.y -= 1;\n        boolean tabInPaint = clipping.intersects(bounds);\n        if (tabInPaint) {\n            \n            if (parent.selectionGradientColors != null && !parent.selectionGradientVertical) {\n                parent.drawBackground(gc, shape, true);\n            } else {\n                Color defaultBackground = parent.selectionBackground;\n                Image image = parent.selectionBgImage;\n                Color[] colors = parent.selectionGradientColors;\n                int[] percents = parent.selectionGradientPercents;\n                boolean vertical = parent.selectionGradientVertical;\n                xx = x;\n                yy = parent.onBottom ? y - 1 : y + 1;\n                ww = width;\n                hh = height;\n                if (!parent.single && !parent.simple)\n                    ww += parent.curveWidth - parent.curveIndent;\n                parent.drawBackground(gc, shape, xx, yy, ww, hh, defaultBackground, image, colors, percents, vertical);\n            }\n        }\n        \n        shape[0] = Math.max(0, parent.borderLeft - 1);\n        if (parent.borderLeft == 0 && parent.indexOf(this) == parent.firstIndex) {\n            shape[1] = parent.onBottom ? y + height - 1 : y;\n            shape[5] = shape[3] = shape[1];\n        }\n        shape[shape.length - 2] = size.x - parent.borderRight + 1;\n        for (int i = 0; i < shape.length / 2; i++) {\n            if (shape[2 * i + 1] == y + height + 1)\n                shape[2 * i + 1] -= 1;\n        }\n        RGB inside = parent.selectionBackground.getRGB();\n        if (parent.selectionBgImage != null || (parent.selectionGradientColors != null && parent.selectionGradientColors.length > 1)) {\n            inside = null;\n        }\n        RGB outside = parent.getBackground().getRGB();\n        if (parent.bgImage != null || (parent.gradientColors != null && parent.gradientColors.length > 1)) {\n            outside = null;\n        }\n        parent.antialias(shape, CTabFolder.borderColor.getRGB(), inside, outside, gc);\n        gc.setForeground(CTabFolder.borderColor);\n        gc.drawPolyline(shape);\n        if (!tabInPaint)\n            return;\n    }\n    \n    int xDraw = x + LEFT_MARGIN;\n    if (parent.single && (parent.showClose || showClose))\n        xDraw += CTabFolder.BUTTON_SIZE;\n    Image image = getImage();\n    if (image != null) {\n        Rectangle imageBounds = image.getBounds();\n        \n        int maxImageWidth = rightEdge - xDraw - RIGHT_MARGIN;\n        if (!parent.single && closeRect.width > 0)\n            maxImageWidth -= closeRect.width + INTERNAL_SPACING;\n        if (imageBounds.width < maxImageWidth) {\n            int imageX = xDraw;\n            int imageHeight = imageBounds.height;\n            int imageY = y + (height - imageHeight) / 2;\n            imageY += parent.onBottom ? -1 : 1;\n            int imageWidth = imageBounds.width * imageHeight / imageBounds.height;\n            gc.drawImage(image, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height, imageX, imageY, imageWidth, imageHeight);\n            xDraw += imageWidth + INTERNAL_SPACING;\n        }\n    }\n    \n    int textWidth = rightEdge - xDraw - RIGHT_MARGIN;\n    if (!parent.single && closeRect.width > 0)\n        textWidth -= closeRect.width + INTERNAL_SPACING;\n    if (textWidth > 0) {\n        Font gcFont = gc.getFont();\n        gc.setFont(font == null ? parent.getFont() : font);\n        if (shortenedText == null || shortenedTextWidth != textWidth) {\n            shortenedText = shortenText(gc, getText(), textWidth);\n            shortenedTextWidth = textWidth;\n        }\n        Point extent = gc.textExtent(shortenedText, FLAGS);\n        int textY = y + (height - extent.y) / 2;\n        textY += parent.onBottom ? -1 : 1;\n        gc.setForeground(parent.selectionForeground);\n        gc.drawText(shortenedText, xDraw, textY, FLAGS);\n        gc.setFont(gcFont);\n        \n        if (parent.isFocusControl()) {\n            Display display = getDisplay();\n            if (parent.simple || parent.single) {\n                gc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));\n                gc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));\n                gc.drawFocus(xDraw - 1, textY - 1, extent.x + 2, extent.y + 2);\n            } else {\n                gc.setForeground(display.getSystemColor(CTabFolder.BUTTON_BORDER));\n                gc.drawLine(xDraw, textY + extent.y + 1, xDraw + extent.x + 1, textY + extent.y + 1);\n            }\n        }\n    }\n    if (parent.showClose || showClose)\n        drawClose(gc);\n}",
			"comments":"//\t Draw selection border across all tabs\n// if selected tab scrolled out of view or partially out of view\n// just draw bottom line\n// draw selected tab background and outline\n// first point repeated here because below we reuse shape to draw outline\n// first point repeated here because below we reuse shape to draw outline\n// fill in tab background\n// draw outline\n// draw Image\n// only draw image if it won't overlap with close button\n// draw Text\n// draw a Focus rectangle\n",
			"methodName":"void drawSelected(GC gc)"
		},
		"public Image getDisabledImage()":{
			"methodBody":"{\n    checkWidget();\n    return disabledImage;\n}",
			"comments":"/**\n* Get the image displayed in the tab if the tab is disabled.\n*\n* @return the disabled image or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @deprecated the disabled image is not used\n*/\n",
			"methodName":"public Image getDisabledImage()"
		},
		"int preferredWidth(GC gc, boolean isSelected, boolean minimum)":{
			"methodBody":"{\n    \n    if (isDisposed())\n        return 0;\n    int w = 0;\n    Image image = getImage();\n    if (image != null && (isSelected || parent.showUnselectedImage)) {\n        w += image.getBounds().width;\n    }\n    String text = null;\n    if (minimum) {\n        int minChars = parent.minChars;\n        text = minChars == 0 ? null : getText();\n        if (text != null && text.length() > minChars) {\n            int end = minChars < ELLIPSIS.length() + 1 ? minChars : minChars - ELLIPSIS.length();\n            text = text.substring(0, end);\n            if (minChars > ELLIPSIS.length() + 1)\n                text += ELLIPSIS;\n        }\n    } else {\n        text = getText();\n    }\n    if (text != null) {\n        if (w > 0)\n            w += INTERNAL_SPACING;\n        if (font == null) {\n            w += gc.textExtent(text, FLAGS).x;\n        } else {\n            Font gcFont = gc.getFont();\n            gc.setFont(font);\n            w += gc.textExtent(text, FLAGS).x;\n            gc.setFont(gcFont);\n        }\n    }\n    if (parent.showClose || showClose) {\n        if (isSelected || parent.showUnselectedClose) {\n            if (w > 0)\n                w += INTERNAL_SPACING;\n            w += CTabFolder.BUTTON_SIZE;\n        }\n    }\n    return w + LEFT_MARGIN + RIGHT_MARGIN;\n}",
			"comments":"// NOTE: preferred width does not include the \"dead space\" caused\n// by the curve.\n",
			"methodName":"int preferredWidth(GC gc, boolean isSelected, boolean minimum)"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    checkWidget();\n    if (font != null && font.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (font == null && this.font == null)\n        return;\n    if (font != null && font.equals(this.font))\n        return;\n    this.font = font;\n    if (!parent.updateTabHeight(false)) {\n        parent.updateItems();\n        parent.redrawTabs();\n    }\n}",
			"comments":"/**\n* Sets the font that the receiver will use to paint textual information\n* for this item to the font specified by the argument, or to the default font\n* for that kind of control if the argument is null.\n*\n* @param font the new font (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setFont(Font font)"
		},
		"public void setControl(Control control)":{
			"methodBody":"{\n    checkWidget();\n    if (control != null) {\n        if (control.isDisposed())\n            SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n        if (control.getParent() != parent)\n            SWT.error(SWT.ERROR_INVALID_PARENT);\n    }\n    if (this.control != null && !this.control.isDisposed()) {\n        this.control.setVisible(false);\n    }\n    this.control = control;\n    if (this.control != null) {\n        int index = parent.indexOf(this);\n        if (index == parent.getSelectionIndex()) {\n            this.control.setBounds(parent.getClientArea());\n            this.control.setVisible(true);\n        } else {\n            this.control.setVisible(false);\n        }\n    }\n}",
			"comments":"/**\n* Sets the control that is used to fill the client area of\n* the tab folder when the user selects the tab item.\n*\n* @param control the new control (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>\n*    <li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setControl(Control control)"
		},
		"public CTabFolder getParent()":{
			"methodBody":"{\n    \n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>CTabFolder</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n//checkWidget();\n",
			"methodName":"public CTabFolder getParent()"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    return SWT.NONE;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"void drawUnselected(GC gc)":{
			"methodBody":"{\n    \n    if (!showing)\n        return;\n    Rectangle clipping = gc.getClipping();\n    Rectangle bounds = getBounds();\n    if (!clipping.intersects(bounds))\n        return;\n    \n    int nextVisible = -1;\n    for (int i = parent.indexOf(this) + 1; i < parent.items.length; i++) {\n        if (parent.items[i].showing) {\n            nextVisible = i;\n            break;\n        }\n    }\n    if (nextVisible == -1 || nextVisible != parent.selectedIndex) {\n        gc.setForeground(CTabFolder.borderColor);\n        gc.drawLine(x + width - 1, y, x + width - 1, y + height);\n    }\n    \n    int xDraw = x + LEFT_MARGIN;\n    Image image = getImage();\n    if (image != null && parent.showUnselectedImage) {\n        Rectangle imageBounds = image.getBounds();\n        \n        int maxImageWidth = x + width - xDraw - RIGHT_MARGIN;\n        if (parent.showUnselectedClose && (parent.showClose || showClose)) {\n            maxImageWidth -= closeRect.width + INTERNAL_SPACING;\n        }\n        if (imageBounds.width < maxImageWidth) {\n            int imageX = xDraw;\n            int imageHeight = imageBounds.height;\n            int imageY = y + (height - imageHeight) / 2;\n            imageY += parent.onBottom ? -1 : 1;\n            int imageWidth = imageBounds.width * imageHeight / imageBounds.height;\n            gc.drawImage(image, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height, imageX, imageY, imageWidth, imageHeight);\n            xDraw += imageWidth + INTERNAL_SPACING;\n        }\n    }\n    \n    int textWidth = x + width - xDraw - RIGHT_MARGIN;\n    if (parent.showUnselectedClose && (parent.showClose || showClose)) {\n        textWidth -= closeRect.width + INTERNAL_SPACING;\n    }\n    if (textWidth > 0) {\n        Font gcFont = gc.getFont();\n        gc.setFont(font == null ? parent.getFont() : font);\n        if (shortenedText == null || shortenedTextWidth != textWidth) {\n            shortenedText = shortenText(gc, getText(), textWidth);\n            shortenedTextWidth = textWidth;\n        }\n        Point extent = gc.textExtent(shortenedText, FLAGS);\n        int textY = y + (height - extent.y) / 2;\n        textY += parent.onBottom ? -1 : 1;\n        gc.setForeground(parent.getForeground());\n        gc.drawText(shortenedText, xDraw, textY, FLAGS);\n        gc.setFont(gcFont);\n    }\n    \n    if (parent.showUnselectedClose && (parent.showClose || showClose))\n        drawClose(gc);\n}",
			"comments":"// Do not draw partial items\n// draw border\n// draw Image\n// only draw image if it won't overlap with close button\n// draw Text\n// draw close\n",
			"methodName":"void drawUnselected(GC gc)"
		},
		"static String shortenText(GC gc, String text, int width)":{
			"methodBody":"{\n    if (gc.textExtent(text, FLAGS).x <= width)\n        return text;\n    int ellipseWidth = gc.textExtent(ELLIPSIS, FLAGS).x;\n    int length = text.length();\n    int end = length - 1;\n    while (end > 0) {\n        text = text.substring(0, end);\n        int l = gc.textExtent(text, FLAGS).x;\n        if (l + ellipseWidth <= width) {\n            return text + ELLIPSIS;\n        }\n        end--;\n    }\n    return text.substring(0, 1);\n}",
			"comments":"",
			"methodName":"static String shortenText(GC gc, String text, int width)"
		},
		"public String getToolTipText()":{
			"methodBody":"{\n    checkWidget();\n    if (toolTipText == null && shortenedText != null) {\n        String text = getText();\n        if (!shortenedText.equals(text))\n            return text;\n    }\n    return toolTipText;\n}",
			"comments":"/**\n* Returns the receiver's tool tip text, or null if it has\n* not been set.\n*\n* @return the receiver's tool tip text\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String getToolTipText()"
		},
		"void drawClose(GC gc)":{
			"methodBody":"{\n    if (closeRect.width == 0 || closeRect.height == 0)\n        return;\n    Display display = getDisplay();\n    \n    int indent = Math.max(1, (CTabFolder.BUTTON_SIZE - 9) / 2);\n    int x = closeRect.x + indent;\n    int y = closeRect.y + indent;\n    y += parent.onBottom ? -1 : 1;\n    Color closeBorder = display.getSystemColor(CTabFolder.BUTTON_BORDER);\n    switch(closeImageState) {\n        case CTabFolder.NORMAL:\n            {\n                int[] shape = new int[] { x, y, x + 2, y, x + 4, y + 2, x + 5, y + 2, x + 7, y, x + 9, y, x + 9, y + 2, x + 7, y + 4, x + 7, y + 5, x + 9, y + 7, x + 9, y + 9, x + 7, y + 9, x + 5, y + 7, x + 4, y + 7, x + 2, y + 9, x, y + 9, x, y + 7, x + 2, y + 5, x + 2, y + 4, x, y + 2 };\n                gc.setBackground(display.getSystemColor(CTabFolder.BUTTON_FILL));\n                gc.fillPolygon(shape);\n                gc.setForeground(closeBorder);\n                gc.drawPolygon(shape);\n                break;\n            }\n        case CTabFolder.HOT:\n            {\n                int[] shape = new int[] { x, y, x + 2, y, x + 4, y + 2, x + 5, y + 2, x + 7, y, x + 9, y, x + 9, y + 2, x + 7, y + 4, x + 7, y + 5, x + 9, y + 7, x + 9, y + 9, x + 7, y + 9, x + 5, y + 7, x + 4, y + 7, x + 2, y + 9, x, y + 9, x, y + 7, x + 2, y + 5, x + 2, y + 4, x, y + 2 };\n                Color fill = new Color(display, CTabFolder.CLOSE_FILL);\n                gc.setBackground(fill);\n                gc.fillPolygon(shape);\n                fill.dispose();\n                gc.setForeground(closeBorder);\n                gc.drawPolygon(shape);\n                break;\n            }\n        case CTabFolder.SELECTED:\n            {\n                int[] shape = new int[] { x + 1, y + 1, x + 3, y + 1, x + 5, y + 3, x + 6, y + 3, x + 8, y + 1, x + 10, y + 1, x + 10, y + 3, x + 8, y + 5, x + 8, y + 6, x + 10, y + 8, x + 10, y + 10, x + 8, y + 10, x + 6, y + 8, x + 5, y + 8, x + 3, y + 10, x + 1, y + 10, x + 1, y + 8, x + 3, y + 6, x + 3, y + 5, x + 1, y + 3 };\n                Color fill = new Color(display, CTabFolder.CLOSE_FILL);\n                gc.setBackground(fill);\n                gc.fillPolygon(shape);\n                fill.dispose();\n                gc.setForeground(closeBorder);\n                gc.drawPolygon(shape);\n                break;\n            }\n        case CTabFolder.NONE:\n            {\n                int[] shape = new int[] { x, y, x + 10, y, x + 10, y + 10, x, y + 10 };\n                if (parent.gradientColors != null && !parent.gradientVertical) {\n                    parent.drawBackground(gc, shape, false);\n                } else {\n                    Color defaultBackground = parent.getBackground();\n                    Image image = parent.bgImage;\n                    Color[] colors = parent.gradientColors;\n                    int[] percents = parent.gradientPercents;\n                    boolean vertical = parent.gradientVertical;\n                    parent.drawBackground(gc, shape, x, y, 10, 10, defaultBackground, image, colors, percents, vertical);\n                }\n                break;\n            }\n    }\n}",
			"comments":"// draw X 9x9\n",
			"methodName":"void drawClose(GC gc)"
		},
		"public Font getFont()":{
			"methodBody":"{\n    checkWidget();\n    if (font != null)\n        return font;\n    return parent.getFont();\n}",
			"comments":"/**\n* Returns the font that the receiver will use to paint textual information.\n*\n* @return the receiver's font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n*  @since 3.0\n*/\n",
			"methodName":"public Font getFont()"
		},
		"void onPaint(GC gc, boolean isSelected)":{
			"methodBody":"{\n    if (width == 0 || height == 0)\n        return;\n    if (isSelected) {\n        drawSelected(gc);\n    } else {\n        drawUnselected(gc);\n    }\n}",
			"comments":"",
			"methodName":"void onPaint(GC gc, boolean isSelected)"
		},
		"int preferredHeight(GC gc)":{
			"methodBody":"{\n    Image image = getImage();\n    int h = (image == null) ? 0 : image.getBounds().height;\n    String text = getText();\n    if (font == null) {\n        h = Math.max(h, gc.textExtent(text, FLAGS).y);\n    } else {\n        Font gcFont = gc.getFont();\n        gc.setFont(font);\n        h = Math.max(h, gc.textExtent(text, FLAGS).y);\n        gc.setFont(gcFont);\n    }\n    return h + TOP_MARGIN + BOTTOM_MARGIN;\n}",
			"comments":"",
			"methodName":"int preferredHeight(GC gc)"
		},
		"public void setToolTipText(String string)":{
			"methodBody":"{\n    checkWidget();\n    toolTipText = string;\n}",
			"comments":"/**\n* Sets the receiver's tool tip text to the argument, which\n* may be null indicating that no tool tip text should be shown.\n*\n* @param string the new tool tip text (or null)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setToolTipText(String string)"
		}
	},
	"ClassORInterfaceName":[
		"CTabItem"
	]
}
