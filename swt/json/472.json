{
	"variables":[
		"parent",
		"strings",
		"images",
		"checked",
		"grayed",
		"cached",
		"imageIndent",
		"background",
		"foreground",
		"font",
		"cellBackground",
		"cellForeground",
		"cellFont",
		"pixel",
		"count",
		"pixel",
		"itemIndex",
		"rect",
		"width",
		"height",
		"itemIndex",
		"rect",
		"width",
		"height",
		"count",
		"rect",
		"hwnd",
		"iconRect",
		"iconRect",
		"gridWidth",
		"count",
		"hFont",
		"pixel",
		"count",
		"pixel",
		"itemIndex",
		"rect",
		"width",
		"height",
		"string",
		"hwnd",
		"index",
		"hwnd",
		"index",
		"rect",
		"pixel",
		"count",
		"pixel",
		"i",
		"event",
		"hFont",
		"itemIndex",
		"hwnd",
		"lvItem",
		"count",
		"hFont",
		"i",
		"itemIndex",
		"hwnd",
		"lvItem",
		"pixel",
		"count",
		"pixel",
		"i",
		"i",
		"count",
		"index",
		"hwnd",
		"lvItem",
		"i",
		"string",
		"count",
		"itemIndex",
		"hwnd",
		"lvItem",
		"parent",
		"style",
		"parent",
		"parent",
		"style",
		"index",
		"parent",
		"style",
		"parent",
		"create",
		"parent",
		"index",
		"control",
		"SWT",
		"SWT",
		"control",
		"SWT",
		"text",
		"image",
		"strings",
		"images",
		"imageIndent",
		"checked",
		"grayed",
		"background",
		"foreground",
		"font",
		"cellBackground",
		"cellForeground",
		"cellFont",
		"parent",
		"SWT",
		"cached",
		"parent",
		"SWT",
		"background",
		"parent",
		"background",
		"Color",
		"display",
		"pixel",
		"parent",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"cellBackground",
		"cellBackground",
		"index",
		"pixel",
		"Color",
		"display",
		"pixel",
		"parent",
		"SWT",
		"parent",
		"itemIndex",
		"itemIndex",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"parent",
		"SWT",
		"parent",
		"itemIndex",
		"itemIndex",
		"index",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"getText",
		"getImage",
		"Math",
		"parent",
		"column",
		"column",
		"count",
		"parent",
		"parent",
		"parent",
		"column",
		"count",
		"getText",
		"getImage",
		"rect",
		"OS",
		"rect",
		"getText",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"row",
		"rect",
		"rect",
		"rect",
		"column",
		"rect",
		"getText",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"row",
		"rect",
		"getText",
		"getImage",
		"column",
		"iconRect",
		"OS",
		"iconRect",
		"column",
		"OS",
		"hwnd",
		"OS",
		"row",
		"iconRect",
		"rect",
		"iconRect",
		"rect",
		"Math",
		"rect",
		"iconRect",
		"column",
		"images",
		"images",
		"column",
		"getText",
		"iconRect",
		"OS",
		"iconRect",
		"column",
		"OS",
		"hwnd",
		"OS",
		"row",
		"iconRect",
		"rect",
		"iconRect",
		"Table",
		"getImage",
		"rect",
		"rect",
		"rect",
		"rect",
		"parent",
		"Table",
		"OS",
		"OS",
		"rect",
		"gridWidth",
		"column",
		"rect",
		"gridWidth",
		"rect",
		"Math",
		"rect",
		"rect",
		"rect",
		"gridWidth",
		"rect",
		"Math",
		"rect",
		"gridWidth",
		"rect",
		"rect",
		"parent",
		"SWT",
		"parent",
		"SWT",
		"checked",
		"parent",
		"SWT",
		"font",
		"parent",
		"Font",
		"display",
		"font",
		"parent",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"cellFont",
		"cellFont",
		"index",
		"font",
		"hFont",
		"Font",
		"display",
		"hFont",
		"parent",
		"SWT",
		"foreground",
		"parent",
		"foreground",
		"Color",
		"display",
		"pixel",
		"parent",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"cellForeground",
		"cellForeground",
		"index",
		"pixel",
		"Color",
		"display",
		"pixel",
		"parent",
		"SWT",
		"parent",
		"SWT",
		"grayed",
		"parent",
		"SWT",
		"parent",
		"SWT",
		"index",
		"images",
		"index",
		"index",
		"images",
		"images",
		"index",
		"parent",
		"SWT",
		"parent",
		"itemIndex",
		"itemIndex",
		"index",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"parent",
		"SWT",
		"imageIndent",
		"parent",
		"SWT",
		"cached",
		"parent",
		"parent",
		"SWT",
		"parent",
		"SWT",
		"index",
		"strings",
		"index",
		"index",
		"strings",
		"strings",
		"index",
		"string",
		"string",
		"parent",
		"SWT",
		"cached",
		"parent",
		"parent",
		"parent",
		"OS",
		"hwnd",
		"parent",
		"index",
		"OS",
		"hwnd",
		"OS",
		"index",
		"index",
		"parent",
		"SWT",
		"cached",
		"parent",
		"parent",
		"parent",
		"OS",
		"hwnd",
		"parent",
		"index",
		"index",
		"column",
		"drawText",
		"drawImage",
		"OS",
		"hwnd",
		"rect",
		"parent",
		"parent",
		"strings",
		"images",
		"cellBackground",
		"cellForeground",
		"cellFont",
		"color",
		"color",
		"SWT",
		"SWT",
		"color",
		"parent",
		"pixel",
		"color",
		"background",
		"pixel",
		"background",
		"pixel",
		"color",
		"color",
		"SWT",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"color",
		"parent",
		"pixel",
		"color",
		"cellBackground",
		"cellBackground",
		"count",
		"i",
		"count",
		"i",
		"cellBackground",
		"i",
		"cellBackground",
		"index",
		"pixel",
		"cellBackground",
		"index",
		"pixel",
		"index",
		"parent",
		"SWT",
		"checked",
		"checked",
		"checked",
		"notify",
		"event",
		"event",
		"SWT",
		"parent",
		"SWT",
		"event",
		"font",
		"font",
		"SWT",
		"SWT",
		"font",
		"parent",
		"hFont",
		"font",
		"hFont",
		"hFont",
		"parent",
		"SWT",
		"cached",
		"parent",
		"itemIndex",
		"parent",
		"lvItem",
		"OS",
		"lvItem",
		"itemIndex",
		"lvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"lvItem",
		"cached",
		"parent",
		"font",
		"font",
		"SWT",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"font",
		"parent",
		"hFont",
		"font",
		"cellFont",
		"cellFont",
		"count",
		"i",
		"count",
		"i",
		"cellFont",
		"i",
		"cellFont",
		"index",
		"hFont",
		"cellFont",
		"index",
		"hFont",
		"index",
		"parent",
		"SWT",
		"cached",
		"parent",
		"itemIndex",
		"parent",
		"lvItem",
		"OS",
		"lvItem",
		"itemIndex",
		"lvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"lvItem",
		"cached",
		"parent",
		"index",
		"color",
		"color",
		"SWT",
		"SWT",
		"color",
		"parent",
		"pixel",
		"color",
		"foreground",
		"pixel",
		"foreground",
		"pixel",
		"color",
		"color",
		"SWT",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"color",
		"parent",
		"pixel",
		"color",
		"cellForeground",
		"cellForeground",
		"count",
		"i",
		"count",
		"i",
		"cellForeground",
		"i",
		"cellForeground",
		"index",
		"pixel",
		"cellForeground",
		"index",
		"pixel",
		"index",
		"parent",
		"SWT",
		"grayed",
		"grayed",
		"images",
		"SWT",
		"i",
		"images",
		"i",
		"i",
		"images",
		"i",
		"image",
		"image",
		"SWT",
		"index",
		"image",
		"image",
		"SWT",
		"image",
		"image",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"images",
		"index",
		"images",
		"count",
		"images",
		"image",
		"image",
		"SWT",
		"image",
		"images",
		"index",
		"images",
		"index",
		"image",
		"parent",
		"image",
		"index",
		"parent",
		"index",
		"image",
		"indent",
		"imageIndent",
		"indent",
		"imageIndent",
		"indent",
		"parent",
		"SWT",
		"parent",
		"index",
		"parent",
		"lvItem",
		"OS",
		"lvItem",
		"index",
		"lvItem",
		"indent",
		"OS",
		"hwnd",
		"OS",
		"lvItem",
		"parent",
		"strings",
		"SWT",
		"i",
		"strings",
		"i",
		"strings",
		"i",
		"string",
		"i",
		"string",
		"string",
		"SWT",
		"index",
		"string",
		"text",
		"string",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"strings",
		"index",
		"strings",
		"count",
		"strings",
		"string",
		"strings",
		"index",
		"strings",
		"index",
		"string",
		"index",
		"parent",
		"SWT",
		"cached",
		"parent",
		"itemIndex",
		"parent",
		"lvItem",
		"OS",
		"lvItem",
		"itemIndex",
		"lvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"lvItem",
		"cached",
		"parent",
		"index",
		"string",
		"parent",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_SUBCLASS",
		"style",
		"VIRTUAL",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"right",
		"left",
		"bottom",
		"top",
		"left",
		"top",
		"ERROR_WIDGET_DISPOSED",
		"right",
		"left",
		"bottom",
		"top",
		"left",
		"top",
		"fixScrollWidth",
		"handle",
		"left",
		"LVIR_SELECTBOUNDS",
		"left",
		"LVIR_LABEL",
		"LVIR_ICON",
		"LVM_GETITEMRECT",
		"left",
		"top",
		"left",
		"LVIR_LABEL",
		"LVIR_ICON",
		"LVM_GETSUBITEMRECT",
		"left",
		"LVIR_ICON",
		"top",
		"LVM_GETSUBITEMRECT",
		"left",
		"left",
		"right",
		"right",
		"right",
		"left",
		"LVIR_ICON",
		"top",
		"LVM_GETSUBITEMRECT",
		"left",
		"right",
		"INSET",
		"right",
		"left",
		"left",
		"top",
		"GRID_WIDTH",
		"COMCTL32_VERSION",
		"top",
		"left",
		"right",
		"right",
		"left",
		"top",
		"bottom",
		"bottom",
		"top",
		"ERROR_WIDGET_DISPOSED",
		"style",
		"CHECK",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"style",
		"CHECK",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"length",
		"ERROR_WIDGET_DISPOSED",
		"right",
		"left",
		"bottom",
		"top",
		"left",
		"top",
		"ERROR_WIDGET_DISPOSED",
		"style",
		"VIRTUAL",
		"ERROR_WIDGET_DISPOSED",
		"ERROR_WIDGET_DISPOSED",
		"length",
		"style",
		"VIRTUAL",
		"currentItem",
		"drawCount",
		"handle",
		"LVM_REDRAWITEMS",
		"style",
		"VIRTUAL",
		"currentItem",
		"drawCount",
		"handle",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"style",
		"CHECK",
		"checked",
		"checked",
		"item",
		"detail",
		"CHECK",
		"Selection",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"font",
		"font",
		"style",
		"VIRTUAL",
		"handle",
		"mask",
		"LVIF_TEXT",
		"iItem",
		"pszText",
		"LPSTR_TEXTCALLBACK",
		"LVM_SETITEM",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"style",
		"VIRTUAL",
		"handle",
		"mask",
		"LVIF_TEXT",
		"iItem",
		"pszText",
		"LPSTR_TEXTCALLBACK",
		"LVM_SETITEM",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"style",
		"CHECK",
		"grayed",
		"grayed",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"type",
		"ICON",
		"image",
		"type",
		"ICON",
		"style",
		"VIRTUAL",
		"handle",
		"mask",
		"LVIF_INDENT",
		"iItem",
		"iIndent",
		"LVM_SETITEM",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_NULL_ARGUMENT",
		"style",
		"VIRTUAL",
		"handle",
		"mask",
		"LVIF_TEXT",
		"iItem",
		"pszText",
		"LPSTR_TEXTCALLBACK",
		"LVM_SETITEM",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"parent",
		"style",
		"index",
		"create",
		"control",
		"index",
		"index",
		"row",
		"column",
		"getText",
		"getImage",
		"index",
		"index",
		"index",
		"index",
		"index",
		"column",
		"drawText",
		"drawImage",
		"color",
		"index",
		"color",
		"checked",
		"checked",
		"notify",
		"font",
		"index",
		"font",
		"color",
		"index",
		"color",
		"grayed",
		"images",
		"index",
		"image",
		"image",
		"indent",
		"strings",
		"index",
		"string",
		"string"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"checkNull",
		"checkSubclass",
		"clear",
		"getBackground",
		"getBackground",
		"getBounds",
		"getBounds",
		"getBounds",
		"getChecked",
		"getFont",
		"getFont",
		"getForeground",
		"getForeground",
		"getGrayed",
		"getImage",
		"getImage",
		"getImageBounds",
		"getImageIndent",
		"getNameText",
		"getParent",
		"getText",
		"getText",
		"redraw",
		"redraw",
		"releaseChild",
		"releaseWidget",
		"setBackground",
		"setBackground",
		"setChecked",
		"setChecked",
		"setFont",
		"setFont",
		"setForeground",
		"setForeground",
		"setGrayed",
		"setImage",
		"setImage",
		"setImage",
		"setImageIndent",
		"setText",
		"setText",
		"setText",
		"getItemCount",
		"checkNull",
		"createItem",
		"error",
		"isValidSubclass",
		"error",
		"checkWidget",
		"checkData",
		"error",
		"getBackgroundPixel",
		"win32_new",
		"checkWidget",
		"checkData",
		"error",
		"max",
		"getColumnCount",
		"getBackground",
		"getBackground",
		"win32_new",
		"checkWidget",
		"checkData",
		"error",
		"indexOf",
		"getBounds",
		"checkWidget",
		"checkData",
		"error",
		"indexOf",
		"getBounds",
		"max",
		"getColumnCount",
		"setScrollWidth",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"max",
		"SendMessage",
		"getLinesVisible",
		"VERSION",
		"max",
		"max",
		"checkWidget",
		"checkData",
		"error",
		"checkWidget",
		"checkData",
		"error",
		"getFont",
		"win32_new",
		"checkWidget",
		"checkData",
		"error",
		"max",
		"getColumnCount",
		"getFont",
		"getFont",
		"win32_new",
		"checkWidget",
		"checkData",
		"error",
		"getForegroundPixel",
		"win32_new",
		"checkWidget",
		"checkData",
		"error",
		"max",
		"getColumnCount",
		"getForeground",
		"getForeground",
		"win32_new",
		"checkWidget",
		"checkData",
		"error",
		"checkWidget",
		"checkData",
		"error",
		"getImage",
		"checkWidget",
		"checkData",
		"error",
		"getImage",
		"checkWidget",
		"checkData",
		"error",
		"indexOf",
		"getBounds",
		"checkWidget",
		"checkData",
		"error",
		"getNameText",
		"checkWidget",
		"checkWidget",
		"checkData",
		"error",
		"getText",
		"checkWidget",
		"checkData",
		"error",
		"getText",
		"IsWindowVisible",
		"indexOf",
		"SendMessage",
		"IsWindowVisible",
		"indexOf",
		"getBounds",
		"InvalidateRect",
		"releaseChild",
		"destroyItem",
		"releaseWidget",
		"checkWidget",
		"isDisposed",
		"error",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"max",
		"getColumnCount",
		"redraw",
		"checkWidget",
		"setChecked",
		"postEvent",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"indexOf",
		"SendMessage",
		"setScrollWidth",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"max",
		"getColumnCount",
		"indexOf",
		"SendMessage",
		"setScrollWidth",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"max",
		"getColumnCount",
		"redraw",
		"checkWidget",
		"redraw",
		"checkWidget",
		"error",
		"setImage",
		"checkWidget",
		"isDisposed",
		"error",
		"equals",
		"setImage",
		"max",
		"getColumnCount",
		"equals",
		"imageIndex",
		"setScrollWidth",
		"redraw",
		"checkWidget",
		"setImage",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"setScrollWidth",
		"redraw",
		"checkWidget",
		"error",
		"setText",
		"checkWidget",
		"error",
		"equals",
		"setText",
		"max",
		"getColumnCount",
		"equals",
		"indexOf",
		"SendMessage",
		"setScrollWidth",
		"redraw",
		"checkWidget",
		"setText",
		"Rectangle",
		"Rectangle",
		"Rectangle",
		"Rectangle",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"Rectangle",
		"Rectangle",
		"Event",
		"LVITEM",
		"LVITEM",
		"LVITEM",
		"LVITEM"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    checkWidget();\n    setText(0, string);\n}",
			"comments":"",
			"methodName":"public void setText(String string)"
		},
		"public void setImageIndent(int indent)":{
			"methodBody":"{\n    checkWidget();\n    if (indent < 0)\n        return;\n    if (imageIndent == indent)\n        return;\n    imageIndent = indent;\n    if ((parent.style & SWT.VIRTUAL) == 0) {\n        int index = parent.indexOf(this);\n        if (index != -1) {\n            int hwnd = parent.handle;\n            LVITEM lvItem = new LVITEM();\n            lvItem.mask = OS.LVIF_INDENT;\n            lvItem.iItem = index;\n            lvItem.iIndent = indent;\n            OS.SendMessage(hwnd, OS.LVM_SETITEM, 0, lvItem);\n        }\n    }\n    parent.setScrollWidth(this, false);\n    redraw();\n}",
			"comments":"/**\n* Sets the indent of the first column's image, expressed in terms of the image's width.\n*\n* @param indent the new indent\n*\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @deprecated this functionality is not supported on most platforms\n*/\n",
			"methodName":"public void setImageIndent(int indent)"
		},
		"public void setBackground(int index, Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (cellBackground == null) {\n        cellBackground = new int[count];\n        for (int i = 0; i < count; i++) {\n            cellBackground[i] = -1;\n        }\n    }\n    if (cellBackground[index] == pixel)\n        return;\n    cellBackground[index] = pixel;\n    redraw(index, true, true);\n}",
			"comments":"/**\n* Sets the background color at the given column index in the receiver\n* to the color specified by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param index the column index\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setBackground(int index, Color color)"
		},
		"public Table getParent()":{
			"methodBody":"{\n    checkWidget();\n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>Table</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Table getParent()"
		},
		"public Color getBackground()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int pixel = (background == -1) ? parent.getBackgroundPixel() : background;\n    return Color.win32_new(display, pixel);\n}",
			"comments":"/**\n* Returns the receiver's background color.\n*\n* @return the background color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public Color getBackground()"
		},
		"public boolean getGrayed()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    if ((parent.style & SWT.CHECK) == 0)\n        return false;\n    return grayed;\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is grayed,\n* and false otherwise. When the parent does not have\n* the <code>CHECK</code> style, return false.\n*\n* @return the grayed state of the checkbox\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getGrayed()"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    if (!isValidSubclass())\n        error(SWT.ERROR_INVALID_SUBCLASS);\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"public Color getBackground(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return getBackground();\n    int pixel = cellBackground != null ? cellBackground[index] : -1;\n    return pixel == -1 ? getBackground() : Color.win32_new(display, pixel);\n}",
			"comments":"/**\n* Returns the background color at the given column index in the receiver.\n*\n* @param index the column index\n* @return the background color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Color getBackground(int index)"
		},
		"public int getImageIndent()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    return imageIndent;\n}",
			"comments":"/**\n* Gets the image indent.\n*\n* @return the indent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getImageIndent()"
		},
		"public void setGrayed(boolean grayed)":{
			"methodBody":"{\n    checkWidget();\n    if ((parent.style & SWT.CHECK) == 0)\n        return;\n    if (this.grayed == grayed)\n        return;\n    this.grayed = grayed;\n    redraw();\n}",
			"comments":"/**\n* Sets the grayed state of the checkbox for this item.  This state change\n* only applies if the Table was created with the SWT.CHECK style.\n*\n* @param grayed the new grayed state of the checkbox;\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setGrayed(boolean grayed)"
		},
		"void redraw(int column, boolean drawText, boolean drawImage)":{
			"methodBody":"{\n    if ((parent.style & SWT.VIRTUAL) != 0)\n        cached = true;\n    if (parent.currentItem == this || parent.drawCount != 0)\n        return;\n    int hwnd = parent.handle;\n    if (!OS.IsWindowVisible(hwnd))\n        return;\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    RECT rect = getBounds(index, column, drawText, drawImage);\n    OS.InvalidateRect(hwnd, rect, true);\n}",
			"comments":"",
			"methodName":"void redraw(int column, boolean drawText, boolean drawImage)"
		},
		"public void setChecked(boolean checked)":{
			"methodBody":"{\n    checkWidget();\n    if ((parent.style & SWT.CHECK) == 0)\n        return;\n    if (this.checked == checked)\n        return;\n    setChecked(checked, false);\n}",
			"comments":"/**\n* Sets the checked state of the checkbox for this item.  This state change\n* only applies if the Table was created with the SWT.CHECK style.\n*\n* @param checked the new checked state of the checkbox\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setChecked(boolean checked)"
		},
		"public Color getForeground(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return getForeground();\n    int pixel = cellForeground != null ? cellForeground[index] : -1;\n    return pixel == -1 ? getForeground() : Color.win32_new(display, pixel);\n}",
			"comments":"/**\n*\n* Returns the foreground color at the given column index in the receiver.\n*\n* @param index the column index\n* @return the foreground color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Color getForeground(int index)"
		},
		"public String getText(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    if (index == 0)\n        return getText();\n    if (strings != null) {\n        if (0 <= index && index < strings.length) {\n            String string = strings[index];\n            return string != null ? string : \"\";\n        }\n    }\n    return \"\";\n}",
			"comments":"/**\n* Returns the text stored at the given column index in the receiver,\n* or empty string if the text has not been set.\n*\n* @param index the column index\n* @return the text stored at the given column index in the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String getText(int index)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (foreground == pixel)\n        return;\n    foreground = pixel;\n    redraw();\n}",
			"comments":"/**\n* Sets the receiver's foreground color to the color specified\n* by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public void setForeground(Color color)"
		},
		"public void setText(int index, String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (index == 0) {\n        if (string.equals(text))\n            return;\n        super.setText(string);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    if (strings == null && index != 0)\n        strings = new String[count];\n    if (strings != null) {\n        if (string.equals(strings[index]))\n            return;\n        strings[index] = string;\n    }\n    if (index == 0) {\n        \n        if ((parent.style & SWT.VIRTUAL) == 0 && cached) {\n            int itemIndex = parent.indexOf(this);\n            if (itemIndex != -1) {\n                int hwnd = parent.handle;\n                LVITEM lvItem = new LVITEM();\n                lvItem.mask = OS.LVIF_TEXT;\n                lvItem.iItem = itemIndex;\n                lvItem.pszText = OS.LPSTR_TEXTCALLBACK;\n                OS.SendMessage(hwnd, OS.LVM_SETITEM, 0, lvItem);\n                cached = false;\n            }\n        }\n        parent.setScrollWidth(this, false);\n    }\n    redraw(index, true, false);\n}",
			"comments":"/**\n* Sets the receiver's text at a column\n*\n* @param index the column index\n* @param string the new text\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the text is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* Bug in Windows.  Despite the fact that every item in the\n* table always has LPSTR_TEXTCALLBACK, Windows caches the\n* bounds for the selected items.  This means that\n* when you change the string to be something else, Windows\n* correctly asks you for the new string but when the item\n* is selected, the selection draws using the bounds of the\n* previous item.  The fix is to reset LPSTR_TEXTCALLBACK\n* even though it has not changed, causing Windows to flush\n* cached bounds.\n*/\n",
			"methodName":"public void setText(int index, String string)"
		},
		"public void setText(String[] strings)":{
			"methodBody":"{\n    checkWidget();\n    if (strings == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    for (int i = 0; i < strings.length; i++) {\n        String string = strings[i];\n        if (string != null)\n            setText(i, string);\n    }\n}",
			"comments":"/**\n* Sets the text for multiple columns in the table.\n*\n* @param strings the array of new strings\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the text is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setText(String[] strings)"
		},
		"public void setForeground(int index, Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (cellForeground == null) {\n        cellForeground = new int[count];\n        for (int i = 0; i < count; i++) {\n            cellForeground[i] = -1;\n        }\n    }\n    if (cellForeground[index] == pixel)\n        return;\n    cellForeground[index] = pixel;\n    redraw(index, true, false);\n}",
			"comments":"/**\n* Sets the foreground color at the given column index in the receiver\n* to the color specified by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param index the column index\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setForeground(int index, Color color)"
		},
		"public Font getFont()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    return font == -1 ? parent.getFont() : Font.win32_new(display, font);\n}",
			"comments":"/**\n* Returns the font that the receiver will use to paint textual information for this item.\n*\n* @return the receiver's font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Font getFont()"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (background == pixel)\n        return;\n    background = pixel;\n    redraw();\n}",
			"comments":"/**\n* Sets the receiver's background color to the color specified\n* by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public void setBackground(Color color)"
		},
		"void clear()":{
			"methodBody":"{\n    text = \"\";\n    image = null;\n    strings = null;\n    images = null;\n    imageIndent = 0;\n    checked = grayed = false;\n    background = foreground = font = -1;\n    cellBackground = cellForeground = cellFont = null;\n    if ((parent.style & SWT.VIRTUAL) != 0)\n        cached = false;\n}",
			"comments":"",
			"methodName":"void clear()"
		},
		"public Image getImage()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    return super.getImage();\n}",
			"comments":"",
			"methodName":"public Image getImage()"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    setImage(0, image);\n}",
			"comments":"",
			"methodName":"public void setImage(Image image)"
		},
		"static Table checkNull(Table control)":{
			"methodBody":"{\n    if (control == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return control;\n}",
			"comments":"",
			"methodName":"static Table checkNull(Table control)"
		},
		"public Rectangle getBounds(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int itemIndex = parent.indexOf(this);\n    if (itemIndex == -1)\n        return new Rectangle(0, 0, 0, 0);\n    RECT rect = getBounds(itemIndex, index, true, true);\n    int width = rect.right - rect.left, height = rect.bottom - rect.top;\n    return new Rectangle(rect.left, rect.top, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent at a column in the table.\n*\n* @param index the index that specifies the column\n* @return the receiver's bounding column rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle getBounds(int index)"
		},
		"RECT getBounds(int row, int column, boolean getText, boolean getImage)":{
			"methodBody":"{\n    if (!getText && !getImage)\n        return new RECT();\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > column || column > count - 1)\n        return new RECT();\n    if (parent.fixScrollWidth)\n        parent.setScrollWidth(null, true);\n    RECT rect = new RECT();\n    int hwnd = parent.handle;\n    if (column == 0 && count == 1) {\n        if (getText && getImage) {\n            rect.left = OS.LVIR_SELECTBOUNDS;\n        } else {\n            rect.left = getText ? OS.LVIR_LABEL : OS.LVIR_ICON;\n        }\n        if (OS.SendMessage(hwnd, OS.LVM_GETITEMRECT, row, rect) == 0) {\n            rect.left = 0;\n        }\n    } else {\n        \n        rect.top = column;\n        rect.left = getText ? OS.LVIR_LABEL : OS.LVIR_ICON;\n        if (OS.SendMessage(hwnd, OS.LVM_GETSUBITEMRECT, row, rect) != 0) {\n            if (getText && getImage) {\n                if (column == 0) {\n                    RECT iconRect = new RECT();\n                    iconRect.left = OS.LVIR_ICON;\n                    iconRect.top = column;\n                    if (OS.SendMessage(hwnd, OS.LVM_GETSUBITEMRECT, row, iconRect) != 0) {\n                        rect.left = iconRect.left;\n                        rect.right = Math.max(rect.right, iconRect.right);\n                    }\n                }\n            } else {\n                if (column != 0) {\n                    \n                    if (images != null && images[column] != null) {\n                        if (getText) {\n                            RECT iconRect = new RECT();\n                            iconRect.left = OS.LVIR_ICON;\n                            iconRect.top = column;\n                            if (OS.SendMessage(hwnd, OS.LVM_GETSUBITEMRECT, row, iconRect) != 0) {\n                                rect.left = iconRect.right + Table.INSET / 2;\n                            }\n                        }\n                    } else {\n                        if (getImage)\n                            rect.right = rect.left;\n                    }\n                }\n            }\n        } else {\n            rect.left = rect.top = 0;\n        }\n    }\n    \n    int gridWidth = parent.getLinesVisible() ? Table.GRID_WIDTH : 0;\n    if (OS.COMCTL32_VERSION >= OS.VERSION(5, 80))\n        rect.top -= gridWidth;\n    if (column != 0)\n        rect.left += gridWidth;\n    rect.right = Math.max(rect.right, rect.left);\n    rect.top += gridWidth;\n    rect.bottom = Math.max(rect.bottom - gridWidth, rect.top);\n    return rect;\n}",
			"comments":"/*\n* Feature in Windows.  Calling LVM_GETSUBITEMRECT with LVIR_LABEL\n* and zero for the column number gives the bounds of the first item\n* without including the bounds of the icon.  This is undocumented.\n* When called with values greater than zero, the icon bounds are\n* included and this behavior is documented.\n*/\n/*\n* Feature in Windows.  LVM_GETSUBITEMRECT returns an image width\n* even when the subitem does not contain an image.  The fix is to\n* adjust the rectangle to represent the area the table is drawing.\n*/\n/*\n* Bug in Windows.  In version 5.80 of COMCTL32.DLL, the top\n* of the rectangle returned by LVM_GETSUBITEMRECT is off by\n* the grid width when the grid is visible.  The fix is to\n* move the top of the rectangle up by the grid width.\n*/\n",
			"methodName":"RECT getBounds(int row, int column, boolean getText, boolean getImage)"
		},
		"String getNameText()":{
			"methodBody":"{\n    if ((parent.style & SWT.VIRTUAL) != 0) {\n        \n        if (!cached)\n            return \"*virtual*\";\n    }\n    return super.getNameText();\n}",
			"comments":"//$NON-NLS-1$\n",
			"methodName":"String getNameText()"
		},
		"void redraw()":{
			"methodBody":"{\n    if ((parent.style & SWT.VIRTUAL) != 0)\n        cached = true;\n    if (parent.currentItem == this || parent.drawCount != 0)\n        return;\n    int hwnd = parent.handle;\n    if (!OS.IsWindowVisible(hwnd))\n        return;\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    OS.SendMessage(hwnd, OS.LVM_REDRAWITEMS, index, index);\n}",
			"comments":"",
			"methodName":"void redraw()"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    checkWidget();\n    if (font != null && font.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int hFont = -1;\n    if (font != null) {\n        parent.customDraw = true;\n        hFont = font.handle;\n    }\n    if (this.font == hFont)\n        return;\n    this.font = hFont;\n    \n    if ((parent.style & SWT.VIRTUAL) == 0 && cached) {\n        int itemIndex = parent.indexOf(this);\n        if (itemIndex != -1) {\n            int hwnd = parent.handle;\n            LVITEM lvItem = new LVITEM();\n            lvItem.mask = OS.LVIF_TEXT;\n            lvItem.iItem = itemIndex;\n            lvItem.pszText = OS.LPSTR_TEXTCALLBACK;\n            OS.SendMessage(hwnd, OS.LVM_SETITEM, 0, lvItem);\n            cached = false;\n        }\n    }\n    parent.setScrollWidth(this, false);\n    redraw();\n}",
			"comments":"/**\n* Sets the font that the receiver will use to paint textual information\n* for this item to the font specified by the argument, or to the default font\n* for that kind of control if the argument is null.\n*\n* @param font the new font (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n/*\n* Bug in Windows.  Despite the fact that every item in the\n* table always has LPSTR_TEXTCALLBACK, Windows caches the\n* bounds for the selected items.  This means that\n* when you change the string to be something else, Windows\n* correctly asks you for the new string but when the item\n* is selected, the selection draws using the bounds of the\n* previous item.  The fix is to reset LPSTR_TEXTCALLBACK\n* even though it has not changed, causing Windows to flush\n* cached bounds.\n*/\n",
			"methodName":"public void setFont(Font font)"
		},
		"public boolean getChecked()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    if ((parent.style & SWT.CHECK) == 0)\n        return false;\n    return checked;\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is checked,\n* and false otherwise.  When the parent does not have\n* the <code>CHECK</code> style, return false.\n*\n* @return the checked state of the checkbox\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getChecked()"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    parent = null;\n    strings = null;\n    images = null;\n    cellBackground = cellForeground = cellFont = null;\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public String getText()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    return super.getText();\n}",
			"comments":"",
			"methodName":"public String getText()"
		},
		"public Font getFont(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return getFont();\n    int hFont = (cellFont != null) ? cellFont[index] : font;\n    return hFont == -1 ? getFont() : Font.win32_new(display, hFont);\n}",
			"comments":"/**\n* Returns the font that the receiver will use to paint textual information\n* for the specified cell in this item.\n*\n* @param index the column index\n* @return the receiver's font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Font getFont(int index)"
		},
		"void setChecked(boolean checked, boolean notify)":{
			"methodBody":"{\n    this.checked = checked;\n    if (notify) {\n        Event event = new Event();\n        event.item = this;\n        event.detail = SWT.CHECK;\n        parent.postEvent(SWT.Selection, event);\n    }\n    redraw();\n}",
			"comments":"",
			"methodName":"void setChecked(boolean checked, boolean notify)"
		},
		"public Image getImage(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    if (index == 0)\n        return getImage();\n    if (images != null) {\n        if (0 <= index && index < images.length)\n            return images[index];\n    }\n    return null;\n}",
			"comments":"/**\n* Returns the image stored at the given column index in the receiver,\n* or null if the image has not been set or if the column does not exist.\n*\n* @param index the column index\n* @return the image stored at the given column index in the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Image getImage(int index)"
		},
		"public Rectangle getImageBounds(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int itemIndex = parent.indexOf(this);\n    if (itemIndex == -1)\n        return new Rectangle(0, 0, 0, 0);\n    RECT rect = getBounds(itemIndex, index, false, true);\n    int width = rect.right - rect.left, height = rect.bottom - rect.top;\n    return new Rectangle(rect.left, rect.top, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the size and location\n* relative to its parent of an image at a column in the\n* table.  An empty rectangle is returned if index exceeds\n* the index of the table's last column.\n*\n* @param index the index that specifies the column\n* @return the receiver's bounding image rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle getImageBounds(int index)"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    parent.destroyItem(this);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"public void setImage(Image[] images)":{
			"methodBody":"{\n    checkWidget();\n    if (images == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    for (int i = 0; i < images.length; i++) {\n        setImage(i, images[i]);\n    }\n}",
			"comments":"/**\n* Sets the image for multiple columns in the table.\n*\n* @param images the array of new images\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the array of images is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if one of the images has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setImage(Image[] images)"
		},
		"public void setFont(int index, Font font)":{
			"methodBody":"{\n    checkWidget();\n    if (font != null && font.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    int hFont = -1;\n    if (font != null) {\n        parent.customDraw = true;\n        hFont = font.handle;\n    }\n    if (cellFont == null) {\n        cellFont = new int[count];\n        for (int i = 0; i < count; i++) {\n            cellFont[i] = -1;\n        }\n    }\n    if (cellFont[index] == hFont)\n        return;\n    cellFont[index] = hFont;\n    if (index == 0) {\n        \n        if ((parent.style & SWT.VIRTUAL) == 0 && cached) {\n            int itemIndex = parent.indexOf(this);\n            if (itemIndex != -1) {\n                int hwnd = parent.handle;\n                LVITEM lvItem = new LVITEM();\n                lvItem.mask = OS.LVIF_TEXT;\n                lvItem.iItem = itemIndex;\n                lvItem.pszText = OS.LPSTR_TEXTCALLBACK;\n                OS.SendMessage(hwnd, OS.LVM_SETITEM, 0, lvItem);\n                cached = false;\n            }\n        }\n        parent.setScrollWidth(this, false);\n    }\n    redraw(index, true, false);\n}",
			"comments":"/**\n* Sets the font that the receiver will use to paint textual information\n* for the specified cell in this item to the font specified by the\n* argument, or to the default font for that kind of control if the\n* argument is null.\n*\n* @param index the column index\n* @param font the new font (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n/*\n* Bug in Windows.  Despite the fact that every item in the\n* table always has LPSTR_TEXTCALLBACK, Windows caches the\n* bounds for the selected items.  This means that\n* when you change the string to be something else, Windows\n* correctly asks you for the new string but when the item\n* is selected, the selection draws using the bounds of the\n* previous item.  The fix is to reset LPSTR_TEXTCALLBACK\n* even though it has not changed, causing Windows to flush\n* cached bounds.\n*/\n",
			"methodName":"public void setFont(int index, Font font)"
		},
		"public void setImage(int index, Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed()) {\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (index == 0) {\n        if (image != null && image.type == SWT.ICON) {\n            if (image.equals(this.image))\n                return;\n        }\n        super.setImage(image);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    if (images == null && index != 0)\n        images = new Image[count];\n    if (images != null) {\n        if (image != null && image.type == SWT.ICON) {\n            if (image.equals(images[index]))\n                return;\n        }\n        images[index] = image;\n    }\n    \n    parent.imageIndex(image);\n    if (index == 0)\n        parent.setScrollWidth(this, false);\n    redraw(index, false, true);\n}",
			"comments":"/**\n* Sets the receiver's image at a column.\n*\n* @param index the column index\n* @param image the new image\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/* Ensure that the image list is created */\n",
			"methodName":"public void setImage(int index, Image image)"
		},
		"Rectangle getBounds()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int itemIndex = parent.indexOf(this);\n    if (itemIndex == -1)\n        return new Rectangle(0, 0, 0, 0);\n    RECT rect = getBounds(itemIndex, 0, true, false);\n    int width = rect.right - rect.left, height = rect.bottom - rect.top;\n    return new Rectangle(rect.left, rect.top, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent.\n*\n* @return the receiver's bounding rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n/*public*/\n",
			"methodName":"Rectangle getBounds()"
		},
		"public Color getForeground()":{
			"methodBody":"{\n    checkWidget();\n    if (!parent.checkData(this, true))\n        error(SWT.ERROR_WIDGET_DISPOSED);\n    int pixel = (foreground == -1) ? parent.getForegroundPixel() : foreground;\n    return Color.win32_new(display, pixel);\n}",
			"comments":"/**\n* Returns the foreground color that the receiver will use to draw.\n*\n* @return the receiver's foreground color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public Color getForeground()"
		}
	},
	"ClassORInterfaceName":[
		"TableItem"
	]
}
