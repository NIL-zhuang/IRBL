{
	"variables":[
		"left",
		"right",
		"bottom",
		"simple",
		"curve",
		"curveStart",
		"curveRect",
		"curve_width",
		"curve_indent",
		"rightWidth",
		"rightMinWidth",
		"rightMinHeight",
		"resizeCursor",
		"dragging",
		"rightDragDisplacement",
		"OFFSCREEN",
		"BORDER_BOTTOM",
		"BORDER_TOP",
		"BORDER_STRIPE",
		"CURVE_TAIL",
		"BEZIER_RIGHT",
		"BEZIER_LEFT",
		"MIN_LEFT",
		"BORDER1",
		"listener",
		"events",
		"i",
		"a0",
		"a1",
		"a2",
		"a3",
		"b0",
		"b1",
		"b2",
		"b3",
		"polygon",
		"i",
		"t",
		"size",
		"size",
		"size",
		"border1",
		"y",
		"line1",
		"index",
		"x",
		"y",
		"i",
		"background",
		"line2",
		"i",
		"line3",
		"i",
		"from",
		"to",
		"red",
		"green",
		"blue",
		"color",
		"x1",
		"x1",
		"size",
		"size",
		"size",
		"h",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"style",
		"resizeCursor",
		"SWT",
		"e",
		"SWT",
		"SWT",
		"e",
		"e",
		"SWT",
		"SWT",
		"e",
		"e",
		"SWT",
		"SWT",
		"e",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"events",
		"i",
		"events",
		"i",
		"listener",
		"x0",
		"x1",
		"x0",
		"x0",
		"x2",
		"x1",
		"x3",
		"x0",
		"x1",
		"x2",
		"y0",
		"y1",
		"y0",
		"y0",
		"y2",
		"y1",
		"y3",
		"y0",
		"y1",
		"y2",
		"count",
		"i",
		"count",
		"i",
		"i",
		"count",
		"polygon",
		"i",
		"a0",
		"a1",
		"t",
		"a2",
		"t",
		"t",
		"a3",
		"t",
		"t",
		"t",
		"polygon",
		"i",
		"b0",
		"b1",
		"t",
		"b2",
		"t",
		"t",
		"b3",
		"t",
		"t",
		"t",
		"polygon",
		"SWT",
		"bottom",
		"left",
		"right",
		"rightMinWidth",
		"rightMinHeight",
		"right",
		"rightWidth",
		"SWT",
		"right",
		"SWT",
		"size",
		"rightWidth",
		"simple",
		"resizeCursor",
		"resizeCursor",
		"resizeCursor",
		"left",
		"right",
		"curveRect",
		"x",
		"y",
		"dragging",
		"rightDragDisplacement",
		"curveStart",
		"x",
		"curve_width",
		"curve_indent",
		"dragging",
		"dragging",
		"x",
		"x",
		"size",
		"rightWidth",
		"Math",
		"size",
		"x",
		"rightDragDisplacement",
		"rightMinWidth",
		"SWT",
		"rightWidth",
		"Math",
		"rightMinWidth",
		"rightWidth",
		"curveRect",
		"x",
		"y",
		"resizeCursor",
		"dragging",
		"BORDER1",
		"bottom",
		"left",
		"right",
		"gc",
		"border1",
		"bottom",
		"BORDER_STRIPE",
		"gc",
		"y",
		"size",
		"y",
		"left",
		"right",
		"curve",
		"curveStart",
		"line1",
		"index",
		"x",
		"line1",
		"index",
		"size",
		"BORDER_STRIPE",
		"i",
		"curve",
		"i",
		"line1",
		"index",
		"x",
		"curve",
		"i",
		"line1",
		"index",
		"y",
		"curve",
		"i",
		"line1",
		"index",
		"x",
		"curve_width",
		"line1",
		"index",
		"line1",
		"index",
		"size",
		"line1",
		"index",
		"line1",
		"index",
		"i",
		"line1",
		"i",
		"line2",
		"index",
		"line1",
		"index",
		"line2",
		"index",
		"line1",
		"index",
		"line1",
		"index",
		"i",
		"line1",
		"i",
		"line3",
		"index",
		"line1",
		"index",
		"line3",
		"index",
		"line1",
		"index",
		"border1",
		"background",
		"from",
		"to",
		"from",
		"from",
		"to",
		"from",
		"from",
		"to",
		"from",
		"red",
		"green",
		"blue",
		"gc",
		"color",
		"gc",
		"line2",
		"gc",
		"line3",
		"color",
		"Math",
		"curveStart",
		"CURVE_TAIL",
		"gc",
		"background",
		"gc",
		"border1",
		"gc",
		"x1",
		"size",
		"BORDER_STRIPE",
		"curveStart",
		"x1",
		"Math",
		"curveStart",
		"CURVE_TAIL",
		"gc",
		"border1",
		"gc",
		"x1",
		"size",
		"BORDER_STRIPE",
		"curveStart",
		"size",
		"BORDER_STRIPE",
		"gc",
		"border1",
		"gc",
		"line1",
		"control",
		"control",
		"SWT",
		"SWT",
		"bottom",
		"bottom",
		"bottom",
		"bottom",
		"OFFSCREEN",
		"size",
		"OFFSCREEN",
		"size",
		"bottom",
		"control",
		"control",
		"control",
		"SWT",
		"SWT",
		"left",
		"left",
		"left",
		"left",
		"OFFSCREEN",
		"size",
		"OFFSCREEN",
		"size",
		"left",
		"control",
		"control",
		"control",
		"SWT",
		"SWT",
		"right",
		"right",
		"right",
		"right",
		"OFFSCREEN",
		"size",
		"OFFSCREEN",
		"size",
		"right",
		"control",
		"size",
		"size",
		"SWT",
		"size",
		"SWT",
		"SWT",
		"SWT",
		"rightMinWidth",
		"size",
		"rightMinHeight",
		"size",
		"width",
		"SWT",
		"SWT",
		"SWT",
		"rightWidth",
		"width",
		"simple",
		"simple",
		"simple",
		"curve_width",
		"curve_indent",
		"curve_width",
		"curve_indent",
		"height",
		"BORDER_STRIPE",
		"simple",
		"curve",
		"h",
		"h",
		"h",
		"h",
		"curve",
		"h",
		"BEZIER_LEFT",
		"h",
		"curve_width",
		"BEZIER_RIGHT",
		"curve_width",
		"curve_width",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"COLOR_WIDGET_HIGHLIGHT_SHADOW",
		"CURSOR_SIZEWE",
		"type",
		"Dispose",
		"MouseDown",
		"x",
		"y",
		"MouseExit",
		"MouseMove",
		"x",
		"y",
		"MouseUp",
		"Paint",
		"gc",
		"Resize",
		"Dispose",
		"MouseDown",
		"MouseExit",
		"MouseMove",
		"MouseUp",
		"Paint",
		"Resize",
		"length",
		"NONE",
		"DEFAULT",
		"DEFAULT",
		"y",
		"x",
		"x",
		"x",
		"DEFAULT",
		"y",
		"x",
		"length",
		"y",
		"length",
		"x",
		"length",
		"length",
		"length",
		"length",
		"red",
		"red",
		"red",
		"green",
		"green",
		"green",
		"blue",
		"blue",
		"blue",
		"y",
		"y",
		"y",
		"y",
		"ERROR_INVALID_ARGUMENT",
		"x",
		"y",
		"ERROR_INVALID_ARGUMENT",
		"x",
		"y",
		"ERROR_INVALID_ARGUMENT",
		"x",
		"y",
		"x",
		"DEFAULT",
		"y",
		"DEFAULT",
		"ERROR_INVALID_ARGUMENT",
		"x",
		"y",
		"DEFAULT",
		"ERROR_INVALID_ARGUMENT",
		"simple",
		"simple",
		"y",
		"parent",
		"style",
		"e",
		"x0",
		"y0",
		"x1",
		"y1",
		"x2",
		"y2",
		"x3",
		"y3",
		"count",
		"style",
		"x",
		"y",
		"x",
		"y",
		"gc",
		"control",
		"layout",
		"control",
		"control",
		"size",
		"width",
		"simple",
		"height"
	],
	"extendORImplementFiles":[
		"Composite"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt"
	],
	"methods":[
		"handleEvent",
		"bezier",
		"checkStyle",
		"getBottom",
		"getClientArea",
		"getLeft",
		"getRight",
		"getRightMinimumSize",
		"getRightWidth",
		"getSimple",
		"onDispose",
		"onMouseDown",
		"onMouseExit",
		"onMouseMove",
		"onMouseUp",
		"onPaint",
		"onResize",
		"setBottom",
		"setLayout",
		"setLeft",
		"setRight",
		"setRightMinimumSize",
		"setRightWidth",
		"setSimple",
		"updateCurve",
		"checkStyle",
		"setLayout",
		"getDisplay",
		"onDispose",
		"onMouseDown",
		"onMouseExit",
		"onMouseMove",
		"onMouseUp",
		"onPaint",
		"onResize",
		"addListener",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"computeSize",
		"getSize",
		"checkWidget",
		"dispose",
		"contains",
		"setCursor",
		"getSize",
		"max",
		"max",
		"layout",
		"contains",
		"setCursor",
		"setCursor",
		"getSize",
		"getSystemColor",
		"getDisplay",
		"setForeground",
		"getBounds",
		"drawLine",
		"getBackground",
		"getDepth",
		"getDisplay",
		"getRGB",
		"getRGB",
		"getDisplay",
		"setForeground",
		"drawPolyline",
		"drawPolyline",
		"dispose",
		"max",
		"setForeground",
		"setBackground",
		"fillGradientRectangle",
		"max",
		"setForeground",
		"drawLine",
		"setForeground",
		"drawPolyline",
		"updateCurve",
		"getSize",
		"checkWidget",
		"getParent",
		"error",
		"isDisposed",
		"getSize",
		"setLocation",
		"layout",
		"checkWidget",
		"checkWidget",
		"getParent",
		"error",
		"isDisposed",
		"getSize",
		"setLocation",
		"layout",
		"checkWidget",
		"getParent",
		"error",
		"isDisposed",
		"getSize",
		"setLocation",
		"layout",
		"checkWidget",
		"error",
		"checkWidget",
		"error",
		"layout",
		"checkWidget",
		"updateCurve",
		"getSize",
		"layout",
		"redraw",
		"bezier",
		"Rectangle",
		"CBannerLayout",
		"Cursor",
		"Listener",
		"Rectangle",
		"Point",
		"Color"
	],
	"methodsBody":{
		"public Control getRight()":{
			"methodBody":"{\n    checkWidget();\n    return right;\n}",
			"comments":"/**\n* Returns the Control that appears on the right side of the banner.\n*\n* @return the control that appears on the right side of the banner or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Control getRight()"
		},
		"void onMouseExit()":{
			"methodBody":"{\n    if (!dragging)\n        setCursor(null);\n}",
			"comments":"",
			"methodName":"void onMouseExit()"
		},
		"public boolean getSimple()":{
			"methodBody":"{\n    checkWidget();\n    return simple;\n}",
			"comments":"/**\n* Returns <code>true</code> if the CBanner is rendered\n* with a simple, traditional shape.\n*\n* @return <code>true</code> if the Cbanner is rendered with a simple shape\n*\n* @since 3.0\n*/\n",
			"methodName":"public boolean getSimple()"
		},
		"static int[] bezier(int x0, int y0, int x1, int y1, int x2, int y2, int x3, int y3, int count)":{
			"methodBody":"{\n    \n    \n    \n    double a0 = x0;\n    double a1 = 3 * (x1 - x0);\n    double a2 = 3 * (x0 + x2 - 2 * x1);\n    double a3 = x3 - x0 + 3 * x1 - 3 * x2;\n    double b0 = y0;\n    double b1 = 3 * (y1 - y0);\n    double b2 = 3 * (y0 + y2 - 2 * y1);\n    double b3 = y3 - y0 + 3 * y1 - 3 * y2;\n    int[] polygon = new int[2 * count + 2];\n    for (int i = 0; i <= count; i++) {\n        double t = (double) i / (double) count;\n        polygon[2 * i] = (int) (a0 + a1 * t + a2 * t * t + a3 * t * t * t);\n        polygon[2 * i + 1] = (int) (b0 + b1 * t + b2 * t * t + b3 * t * t * t);\n    }\n    return polygon;\n}",
			"comments":"// The parametric equations for a Bezier curve for x[t] and y[t] where  0 <= t <=1 are:\n// x[t] = x0+3(x1-x0)t+3(x0+x2-2x1)t^2+(x3-x0+3x1-3x2)t^3\n// y[t] = y0+3(y1-y0)t+3(y0+y2-2y1)t^2+(y3-y0+3y1-3y2)t^3\n",
			"methodName":"static int[] bezier(int x0, int y0, int x1, int y1, int x2, int y2, int x3, int y3, int count)"
		},
		"public Rectangle getClientArea()":{
			"methodBody":"{\n    return new Rectangle(0, 0, 0, 0);\n}",
			"comments":"",
			"methodName":"public Rectangle getClientArea()"
		},
		"public Control getBottom()":{
			"methodBody":"{\n    checkWidget();\n    return bottom;\n}",
			"comments":"/**\n* Returns the Control that appears on the bottom side of the banner.\n*\n* @return the control that appears on the bottom side of the banner or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Control getBottom()"
		},
		"public int getRightWidth()":{
			"methodBody":"{\n    checkWidget();\n    if (right == null)\n        return 0;\n    if (rightWidth == SWT.DEFAULT) {\n        Point size = right.computeSize(SWT.DEFAULT, getSize().y, false);\n        return size.x;\n    }\n    return rightWidth;\n}",
			"comments":"/**\n* Returns the width of the control that appears on the right of the banner.\n*\n* @return the width of the control that appears on the right of the banner\n*\n* @since 3.0\n*/\n",
			"methodName":"public int getRightWidth()"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    return SWT.NONE;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void setLayout(Layout layout)":{
			"methodBody":"{\n    checkWidget();\n    return;\n}",
			"comments":"/**\n* Sets the layout which is associated with the receiver to be\n* the argument which may be null.\n* <p>\n* Note : No Layout can be set on this Control because it already\n* manages the size and position of its children.\n* </p>\n*\n* @param layout the receiver's new layout or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setLayout(Layout layout)"
		},
		"public void setLeft(Control control)":{
			"methodBody":"{\n    checkWidget();\n    if (control != null && control.getParent() != this) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (left != null && !left.isDisposed()) {\n        Point size = left.getSize();\n        left.setLocation(OFFSCREEN - size.x, OFFSCREEN - size.y);\n    }\n    left = control;\n    layout(false);\n}",
			"comments":"/**\n* Set the control that appears on the left side of the banner.\n* The left control is optional.  Setting the left control to null will remove it from\n* the banner - however, the creator of the control must dispose of the control.\n*\n* @param control the control to be displayed on the left or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the left control was not created as a child of the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setLeft(Control control)"
		},
		"public void setBottom(Control control)":{
			"methodBody":"{\n    checkWidget();\n    if (control != null && control.getParent() != this) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (bottom != null && !bottom.isDisposed()) {\n        Point size = bottom.getSize();\n        bottom.setLocation(OFFSCREEN - size.x, OFFSCREEN - size.y);\n    }\n    bottom = control;\n    layout(false);\n}",
			"comments":"/**\n* Set the control that appears on the bottom side of the banner.\n* The bottom control is optional.  Setting the bottom control to null will remove it from\n* the banner - however, the creator of the control must dispose of the control.\n*\n* @param control the control to be displayed on the bottom or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the bottom control was not created as a child of the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setBottom(Control control)"
		},
		"public void setRightMinimumSize(Point size)":{
			"methodBody":"{\n    checkWidget();\n    if (size == null || size.x < SWT.DEFAULT || size.y < SWT.DEFAULT)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    rightMinWidth = size.x;\n    rightMinHeight = size.y;\n}",
			"comments":"/**\n* Set the minumum height of the control that appears on the right side of the banner.\n*\n* @param size the minimum size of the control on the right\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the size is null or the values of size are less than SWT.DEFAULT</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void setRightMinimumSize(Point size)"
		},
		"void onMouseDown(int x, int y)":{
			"methodBody":"{\n    if (curveRect.contains(x, y)) {\n        dragging = true;\n        rightDragDisplacement = curveStart - x + curve_width - curve_indent;\n    }\n}",
			"comments":"",
			"methodName":"void onMouseDown(int x, int y)"
		},
		"public void setRight(Control control)":{
			"methodBody":"{\n    checkWidget();\n    if (control != null && control.getParent() != this) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (right != null && !right.isDisposed()) {\n        Point size = right.getSize();\n        right.setLocation(OFFSCREEN - size.x, OFFSCREEN - size.y);\n    }\n    right = control;\n    layout(false);\n}",
			"comments":"/**\n* Set the control that appears on the right side of the banner.\n* The right control is optional.  Setting the right control to null will remove it from\n* the banner - however, the creator of the control must dispose of the control.\n*\n* @param control the control to be displayed on the right or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the right control was not created as a child of the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setRight(Control control)"
		},
		"public Control getLeft()":{
			"methodBody":"{\n    checkWidget();\n    return left;\n}",
			"comments":"/**\n* Returns the Control that appears on the left side of the banner.\n*\n* @return the control that appears on the left side of the banner or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Control getLeft()"
		},
		"void onMouseMove(int x, int y)":{
			"methodBody":"{\n    if (dragging) {\n        Point size = getSize();\n        if (!(0 < x && x < size.x))\n            return;\n        rightWidth = Math.max(0, size.x - x - rightDragDisplacement);\n        if (rightMinWidth != SWT.DEFAULT) {\n            rightWidth = Math.max(rightMinWidth, rightWidth);\n        }\n        layout(false);\n        return;\n    }\n    if (curveRect.contains(x, y)) {\n        setCursor(resizeCursor);\n    } else {\n        setCursor(null);\n    }\n}",
			"comments":"",
			"methodName":"void onMouseMove(int x, int y)"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    switch(e.type) {\n        case SWT.Dispose:\n            onDispose();\n            break;\n        case SWT.MouseDown:\n            onMouseDown(e.x, e.y);\n            break;\n        case SWT.MouseExit:\n            onMouseExit();\n            break;\n        case SWT.MouseMove:\n            onMouseMove(e.x, e.y);\n            break;\n        case SWT.MouseUp:\n            onMouseUp();\n            break;\n        case SWT.Paint:\n            onPaint(e.gc);\n            break;\n        case SWT.Resize:\n            onResize();\n            break;\n    }\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"public void setRightWidth(int width)":{
			"methodBody":"{\n    checkWidget();\n    if (width < SWT.DEFAULT)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    rightWidth = width;\n    layout(false);\n}",
			"comments":"/**\n* Set the width of the control that appears on the right side of the banner.\n*\n* @param width the width of the control on the right\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if width is less than SWT.DEFAULT</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setRightWidth(int width)"
		},
		"public void setSimple(boolean simple)":{
			"methodBody":"{\n    checkWidget();\n    if (this.simple != simple) {\n        this.simple = simple;\n        if (simple) {\n            curve_width = 5;\n            curve_indent = -2;\n        } else {\n            curve_width = 50;\n            curve_indent = 5;\n        }\n        updateCurve(getSize().y);\n        layout(false);\n        redraw();\n    }\n}",
			"comments":"/**\n* Sets the shape that the CBanner will use to render itself.\n*\n* @param simple <code>true</code> if the CBanner should render itself in a simple, traditional style\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setSimple(boolean simple)"
		},
		"void onDispose()":{
			"methodBody":"{\n    if (resizeCursor != null)\n        resizeCursor.dispose();\n    resizeCursor = null;\n    left = null;\n    right = null;\n}",
			"comments":"",
			"methodName":"void onDispose()"
		},
		"void onMouseUp()":{
			"methodBody":"{\n    dragging = false;\n}",
			"comments":"",
			"methodName":"void onMouseUp()"
		},
		"void onPaint(GC gc)":{
			"methodBody":"{\n    \n    \n    \n    \n    \n    \n    Point size = getSize();\n    Color border1 = getDisplay().getSystemColor(BORDER1);\n    if (bottom != null && (left != null || right != null)) {\n        gc.setForeground(border1);\n        int y = bottom.getBounds().y - BORDER_STRIPE - 1;\n        gc.drawLine(0, y, size.x, y);\n    }\n    if (left == null || right == null)\n        return;\n    int[] line1 = new int[curve.length + 6];\n    int index = 0;\n    int x = curveStart;\n    int y = 0;\n    line1[index++] = x + 1;\n    line1[index++] = size.y - BORDER_STRIPE;\n    for (int i = 0; i < curve.length / 2; i++) {\n        line1[index++] = x + curve[2 * i];\n        line1[index++] = y + curve[2 * i + 1];\n    }\n    line1[index++] = x + curve_width;\n    line1[index++] = 0;\n    line1[index++] = size.x;\n    line1[index++] = 0;\n    Color background = getBackground();\n    if (getDisplay().getDepth() >= 15) {\n        \n        int[] line2 = new int[line1.length];\n        index = 0;\n        for (int i = 0; i < line1.length / 2; i++) {\n            line2[index] = line1[index++] - 1;\n            line2[index] = line1[index++];\n        }\n        int[] line3 = new int[line1.length];\n        index = 0;\n        for (int i = 0; i < line1.length / 2; i++) {\n            line3[index] = line1[index++] + 1;\n            line3[index] = line1[index++];\n        }\n        RGB from = border1.getRGB();\n        RGB to = background.getRGB();\n        int red = from.red + 3 * (to.red - from.red) / 4;\n        int green = from.green + 3 * (to.green - from.green) / 4;\n        int blue = from.blue + 3 * (to.blue - from.blue) / 4;\n        Color color = new Color(getDisplay(), red, green, blue);\n        gc.setForeground(color);\n        gc.drawPolyline(line2);\n        gc.drawPolyline(line3);\n        color.dispose();\n        \n        int x1 = Math.max(0, curveStart - CURVE_TAIL);\n        gc.setForeground(background);\n        gc.setBackground(border1);\n        gc.fillGradientRectangle(x1, size.y - BORDER_STRIPE, curveStart - x1 + 1, 1, false);\n    } else {\n        \n        int x1 = Math.max(0, curveStart - CURVE_TAIL);\n        gc.setForeground(border1);\n        gc.drawLine(x1, size.y - BORDER_STRIPE, curveStart + 1, size.y - BORDER_STRIPE);\n    }\n    \n    gc.setForeground(border1);\n    gc.drawPolyline(line1);\n}",
			"comments":"//\t Useful for debugging paint problems\n//\t{\n//\tPoint size = getSize();\n//\tgc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GREEN));\n//\tgc.fillRectangle(-10, -10, size.x+20, size.y+20);\n//\t}\n// Anti- aliasing\n// draw tail fading to background\n// draw solid tail\n// draw border\n",
			"methodName":"void onPaint(GC gc)"
		},
		"public Point getRightMinimumSize()":{
			"methodBody":"{\n    checkWidget();\n    return new Point(rightMinWidth, rightMinHeight);\n}",
			"comments":"/**\n* Returns the minimum size of the control that appears on the right of the banner.\n*\n* @return the minimum size of the control that appears on the right of the banner\n*\n* @since 3.1\n*/\n",
			"methodName":"public Point getRightMinimumSize()"
		},
		"void updateCurve(int height)":{
			"methodBody":"{\n    int h = height - BORDER_STRIPE;\n    if (simple) {\n        curve = new int[] { 0, h, 1, h, 2, h - 1, 3, h - 2, 3, 2, 4, 1, 5, 0 };\n    } else {\n        curve = bezier(0, h + 1, BEZIER_LEFT, h + 1, curve_width - BEZIER_RIGHT, 0, curve_width, 0, curve_width);\n    }\n}",
			"comments":"",
			"methodName":"void updateCurve(int height)"
		},
		"void onResize()":{
			"methodBody":"{\n    updateCurve(getSize().y);\n}",
			"comments":"",
			"methodName":"void onResize()"
		}
	},
	"ClassORInterfaceName":[
		"CBanner"
	]
}
