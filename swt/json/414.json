{
	"variables":[
		"iOleControlSite",
		"iDispatch",
		"olePropertyChangeSink",
		"oleEventSink",
		"oleEventSinkGUID",
		"oleEventSinkIUnknown",
		"currentControlInfo",
		"sitePropertyIds",
		"sitePropertyValues",
		"licinfo",
		"address",
		"result",
		"ppvObject",
		"result",
		"classFactory",
		"persist",
		"riid",
		"ppvObject",
		"pci2",
		"riid",
		"result",
		"pci",
		"ppTI",
		"ppEI",
		"result",
		"classInfo",
		"ppTypeAttr",
		"typeAttribute",
		"implMask",
		"implBits",
		"i",
		"pImplTypeFlags",
		"pRefType",
		"eventInfo",
		"riid",
		"address",
		"unknown",
		"riid",
		"index",
		"i",
		"oldLength",
		"newOleEventSink",
		"newOleEventSinkGUID",
		"newOleEventSinkIUnknown",
		"ppvObject",
		"objIOleControl",
		"i",
		"sink",
		"oleObject",
		"varBackColor",
		"colorRef",
		"oleObject",
		"varDispFont",
		"iDispFont",
		"lfFaceName",
		"lfHeight",
		"lfItalic",
		"lfBold",
		"style",
		"font",
		"oleObject",
		"varForeColor",
		"colorRef",
		"ppvObject",
		"classFactory",
		"licinfo",
		"pBstrKey",
		"i",
		"result",
		"ppvObject",
		"objIOleControl",
		"phwnd",
		"result",
		"guid",
		"result",
		"i",
		"riid",
		"address",
		"unknown",
		"riid",
		"i",
		"oldLength",
		"newOleEventSink",
		"newOleEventSinkGUID",
		"newOleEventSinkIUnknown",
		"oleObject",
		"oleObject",
		"varDispFont",
		"iDispFont",
		"fdata",
		"oleObject",
		"i",
		"oldLength",
		"newSitePropertyIds",
		"newSitePropertyValues",
		"oldLength",
		"newSitePropertyIds",
		"newSitePropertyValues",
		"parent",
		"style",
		"appClsid",
		"progId",
		"appClsid",
		"OLE",
		"OLE",
		"appClsid",
		"licinfo",
		"tempStorage",
		"COM",
		"appClsid",
		"COM",
		"COM",
		"tempStorage",
		"address",
		"result",
		"COM",
		"OLE",
		"OLE",
		"result",
		"objIUnknown",
		"address",
		"COM",
		"appClsid",
		"COM",
		"COM",
		"COM",
		"ppvObject",
		"result",
		"COM",
		"OLE",
		"OLE",
		"result",
		"ppvObject",
		"ppvObject",
		"result",
		"classFactory",
		"COM",
		"licinfo",
		"ppvObject",
		"classFactory",
		"result",
		"COM",
		"OLE",
		"OLE",
		"result",
		"COM",
		"licinfo",
		"objIUnknown",
		"ppvObject",
		"ppvObject",
		"objIUnknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"tempStorage",
		"persist",
		"tempStorage",
		"persist",
		"COM",
		"COM",
		"COM",
		"objIUnknown",
		"OLE",
		"state",
		"STATE_RUNNING",
		"e",
		"listener",
		"OLE",
		"SWT",
		"objIUnknown",
		"riid",
		"objIUnknown",
		"riid",
		"eventID",
		"listener",
		"unknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"pci2",
		"COM",
		"riid",
		"pci2",
		"result",
		"COM",
		"riid",
		"unknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"pci",
		"ppTI",
		"pci",
		"result",
		"COM",
		"ppTI",
		"ppTI",
		"result",
		"classInfo",
		"ppTypeAttr",
		"result",
		"COM",
		"ppTypeAttr",
		"COM",
		"typeAttribute",
		"ppTypeAttr",
		"TYPEATTR",
		"classInfo",
		"ppTypeAttr",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"i",
		"typeAttribute",
		"i",
		"classInfo",
		"i",
		"pImplTypeFlags",
		"COM",
		"pImplTypeFlags",
		"implMask",
		"implBits",
		"classInfo",
		"i",
		"pRefType",
		"COM",
		"classInfo",
		"pRefType",
		"ppEI",
		"classInfo",
		"ppEI",
		"ppEI",
		"ppTypeAttr",
		"result",
		"eventInfo",
		"ppTypeAttr",
		"result",
		"COM",
		"ppTypeAttr",
		"riid",
		"COM",
		"riid",
		"ppTypeAttr",
		"GUID",
		"eventInfo",
		"ppTypeAttr",
		"eventInfo",
		"riid",
		"listener",
		"automation",
		"OLE",
		"SWT",
		"automation",
		"address",
		"unknown",
		"riid",
		"address",
		"riid",
		"eventID",
		"listener",
		"listener",
		"iunknown",
		"guid",
		"OLE",
		"SWT",
		"i",
		"oleEventSinkGUID",
		"i",
		"COM",
		"oleEventSinkGUID",
		"i",
		"guid",
		"iunknown",
		"oleEventSinkIUnknown",
		"i",
		"index",
		"i",
		"index",
		"oleEventSink",
		"index",
		"eventID",
		"listener",
		"oleEventSink",
		"oldLength",
		"oldLength",
		"oldLength",
		"System",
		"oleEventSink",
		"newOleEventSink",
		"oldLength",
		"System",
		"oleEventSinkGUID",
		"newOleEventSinkGUID",
		"oldLength",
		"System",
		"oleEventSinkIUnknown",
		"newOleEventSinkIUnknown",
		"oldLength",
		"oleEventSink",
		"newOleEventSink",
		"oleEventSinkGUID",
		"newOleEventSinkGUID",
		"oleEventSinkIUnknown",
		"newOleEventSinkIUnknown",
		"oleEventSink",
		"oldLength",
		"iunknown",
		"guid",
		"oleEventSinkGUID",
		"oldLength",
		"guid",
		"oleEventSinkIUnknown",
		"oldLength",
		"iunknown",
		"oleEventSink",
		"oldLength",
		"oleEventSink",
		"oldLength",
		"oleEventSink",
		"oldLength",
		"eventID",
		"listener",
		"objIUnknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"currentControlInfo",
		"objIOleControl",
		"currentControlInfo",
		"objIOleControl",
		"listener",
		"SWT",
		"SWT",
		"olePropertyChangeSink",
		"propertyID",
		"listener",
		"olePropertyChangeSink",
		"olePropertyChangeSink",
		"olePropertyChangeSink",
		"objIUnknown",
		"iOleControlSite",
		"args",
		"args",
		"args",
		"iDispatch",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"i",
		"oleEventSink",
		"i",
		"oleEventSink",
		"i",
		"sink",
		"sink",
		"oleEventSink",
		"oleEventSinkGUID",
		"oleEventSinkIUnknown",
		"olePropertyChangeSink",
		"olePropertyChangeSink",
		"objIUnknown",
		"olePropertyChangeSink",
		"olePropertyChangeSink",
		"iOleControlSite",
		"iOleControlSite",
		"iOleControlSite",
		"iDispatch",
		"iDispatch",
		"iDispatch",
		"objIUnknown",
		"oleObject",
		"COM",
		"oleObject",
		"varBackColor",
		"COM",
		"varBackColor",
		"colorRef",
		"COM",
		"Color",
		"colorRef",
		"objIUnknown",
		"oleObject",
		"COM",
		"oleObject",
		"varDispFont",
		"varDispFont",
		"iDispFont",
		"COM",
		"iDispFont",
		"COM",
		"iDispFont",
		"COM",
		"iDispFont",
		"COM",
		"iDispFont",
		"lfFaceName",
		"lfHeight",
		"lfItalic",
		"lfBold",
		"lfBold",
		"lfItalic",
		"lfFaceName",
		"lfHeight",
		"style",
		"font",
		"objIUnknown",
		"oleObject",
		"COM",
		"oleObject",
		"varForeColor",
		"COM",
		"varForeColor",
		"colorRef",
		"COM",
		"Color",
		"colorRef",
		"COM",
		"clsid",
		"COM",
		"COM",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"classFactory",
		"licinfo",
		"COM",
		"classFactory",
		"licinfo",
		"licinfo",
		"classFactory",
		"pBstrKey",
		"COM",
		"classFactory",
		"pBstrKey",
		"classFactory",
		"i",
		"sitePropertyIds",
		"i",
		"sitePropertyIds",
		"i",
		"dispId",
		"sitePropertyValues",
		"i",
		"phwnd",
		"COM",
		"frame",
		"COM",
		"phwnd",
		"COM",
		"COM",
		"phwnd",
		"handle",
		"COM",
		"pVarResult",
		"dwFlags",
		"COM",
		"pExcepInfo",
		"COM",
		"pExcepInfo",
		"pArgErr",
		"COM",
		"pArgErr",
		"COM",
		"dispIdMember",
		"result",
		"pVarResult",
		"result",
		"pVarResult",
		"COM",
		"dispIdMember",
		"COM",
		"COM",
		"COM",
		"pVarResult",
		"COM",
		"pVarResult",
		"pExcepInfo",
		"COM",
		"pExcepInfo",
		"pArgErr",
		"COM",
		"pArgErr",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"pVarResult",
		"COM",
		"pVarResult",
		"pExcepInfo",
		"COM",
		"pExcepInfo",
		"pArgErr",
		"COM",
		"pArgErr",
		"COM",
		"pVarResult",
		"COM",
		"pVarResult",
		"pExcepInfo",
		"COM",
		"pExcepInfo",
		"pArgErr",
		"COM",
		"pArgErr",
		"COM",
		"objIUnknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"currentControlInfo",
		"objIOleControl",
		"currentControlInfo",
		"objIOleControl",
		"COM",
		"objIOleInPlaceObject",
		"OLE",
		"objIOleInPlaceObject",
		"phwnd",
		"phwnd",
		"OS",
		"phwnd",
		"objIOleInPlaceObject",
		"objIOleInPlaceObject",
		"COM",
		"state",
		"STATE_INPLACEACTIVE",
		"COM",
		"riid",
		"ppvObject",
		"result",
		"COM",
		"result",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iOleControlSite",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iDispatch",
		"COM",
		"COM",
		"ppvObject",
		"COM",
		"result",
		"i",
		"sitePropertyIds",
		"i",
		"sitePropertyValues",
		"i",
		"sitePropertyIds",
		"sitePropertyValues",
		"result",
		"listener",
		"SWT",
		"SWT",
		"objIUnknown",
		"riid",
		"objIUnknown",
		"riid",
		"eventID",
		"listener",
		"automation",
		"listener",
		"guid",
		"SWT",
		"SWT",
		"automation",
		"guid",
		"eventID",
		"listener",
		"automation",
		"listener",
		"SWT",
		"SWT",
		"automation",
		"address",
		"unknown",
		"riid",
		"address",
		"riid",
		"eventID",
		"listener",
		"listener",
		"guid",
		"SWT",
		"SWT",
		"i",
		"oleEventSink",
		"i",
		"COM",
		"oleEventSinkGUID",
		"i",
		"guid",
		"iunknown",
		"oleEventSinkIUnknown",
		"i",
		"oleEventSink",
		"i",
		"eventID",
		"listener",
		"oleEventSink",
		"i",
		"oleEventSink",
		"i",
		"oleEventSink",
		"i",
		"oleEventSink",
		"oldLength",
		"oleEventSink",
		"oleEventSinkGUID",
		"oleEventSinkIUnknown",
		"oldLength",
		"System",
		"oleEventSink",
		"newOleEventSink",
		"i",
		"System",
		"oleEventSink",
		"i",
		"newOleEventSink",
		"i",
		"oldLength",
		"i",
		"oleEventSink",
		"newOleEventSink",
		"oldLength",
		"System",
		"oleEventSinkGUID",
		"newOleEventSinkGUID",
		"i",
		"System",
		"oleEventSinkGUID",
		"i",
		"newOleEventSinkGUID",
		"i",
		"oldLength",
		"i",
		"oleEventSinkGUID",
		"newOleEventSinkGUID",
		"oldLength",
		"System",
		"oleEventSinkIUnknown",
		"newOleEventSinkIUnknown",
		"i",
		"System",
		"oleEventSinkIUnknown",
		"i",
		"newOleEventSinkIUnknown",
		"i",
		"oldLength",
		"i",
		"oleEventSinkIUnknown",
		"newOleEventSinkIUnknown",
		"listener",
		"SWT",
		"SWT",
		"olePropertyChangeSink",
		"propertyID",
		"listener",
		"color",
		"objIUnknown",
		"oleObject",
		"COM",
		"color",
		"oleObject",
		"font",
		"objIUnknown",
		"oleObject",
		"COM",
		"oleObject",
		"varDispFont",
		"varDispFont",
		"font",
		"iDispFont",
		"COM",
		"fdata",
		"iDispFont",
		"COM",
		"fdata",
		"iDispFont",
		"COM",
		"fdata",
		"SWT",
		"iDispFont",
		"COM",
		"fdata",
		"SWT",
		"iDispFont",
		"color",
		"objIUnknown",
		"oleObject",
		"COM",
		"color",
		"oleObject",
		"i",
		"sitePropertyIds",
		"i",
		"sitePropertyIds",
		"i",
		"dispId",
		"sitePropertyValues",
		"i",
		"sitePropertyValues",
		"i",
		"value",
		"sitePropertyValues",
		"i",
		"value",
		"sitePropertyIds",
		"oldLength",
		"oldLength",
		"System",
		"sitePropertyIds",
		"newSitePropertyIds",
		"i",
		"System",
		"sitePropertyIds",
		"i",
		"newSitePropertyIds",
		"i",
		"oldLength",
		"i",
		"System",
		"sitePropertyValues",
		"newSitePropertyValues",
		"i",
		"System",
		"sitePropertyValues",
		"i",
		"newSitePropertyValues",
		"i",
		"oldLength",
		"i",
		"sitePropertyIds",
		"newSitePropertyIds",
		"sitePropertyValues",
		"newSitePropertyValues",
		"sitePropertyIds",
		"oldLength",
		"oldLength",
		"System",
		"sitePropertyIds",
		"newSitePropertyIds",
		"oldLength",
		"System",
		"sitePropertyValues",
		"newSitePropertyValues",
		"oldLength",
		"newSitePropertyIds",
		"oldLength",
		"dispId",
		"newSitePropertyValues",
		"oldLength",
		"value",
		"sitePropertyIds",
		"newSitePropertyIds",
		"sitePropertyValues",
		"newSitePropertyValues",
		"ERROR_INVALID_CLASSID",
		"IIDIUnknown",
		"OLERENDER_DRAW",
		"S_OK",
		"ERROR_CANNOT_CREATE_OBJECT",
		"CLSCTX_INPROC_HANDLER",
		"CLSCTX_INPROC_SERVER",
		"IIDIClassFactory2",
		"S_OK",
		"ERROR_CANNOT_ACCESS_CLASSFACTORY",
		"IIDIUnknown",
		"S_OK",
		"ERROR_CANNOT_CREATE_LICENSED_OBJECT",
		"IIDIPersistStorage",
		"S_OK",
		"DISPID_AMBIENT_USERMODE",
		"DISPID_AMBIENT_UIDEAD",
		"S_OK",
		"ERROR_NULL_ARGUMENT",
		"IIDIProvideClassInfo2",
		"S_OK",
		"GUIDKIND_DEFAULT_SOURCE_DISP_IID",
		"S_OK",
		"IIDIProvideClassInfo",
		"S_OK",
		"S_OK",
		"S_OK",
		"sizeof",
		"IMPLTYPEFLAG_FDEFAULT",
		"IMPLTYPEFLAG_FSOURCE",
		"IMPLTYPEFLAG_FRESTRICTED",
		"IMPLTYPEFLAG_FDEFAULT",
		"IMPLTYPEFLAG_FSOURCE",
		"cImplTypes",
		"S_OK",
		"S_OK",
		"S_OK",
		"sizeof",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"length",
		"length",
		"IIDIOleControl",
		"S_OK",
		"ERROR_NULL_ARGUMENT",
		"length",
		"DISPID_BACKCOLOR",
		"hPalette",
		"S_OK",
		"DISPID_FONT",
		"DISPID_FONT_NAME",
		"DISPID_FONT_SIZE",
		"DISPID_FONT_ITALIC",
		"DISPID_FONT_BOLD",
		"DISPID_FORECOLOR",
		"hPalette",
		"S_OK",
		"CLSCTX_INPROC_HANDLER",
		"CLSCTX_INPROC_SERVER",
		"IIDIClassFactory2",
		"S_OK",
		"S_OK",
		"fRuntimeKeyAvail",
		"S_OK",
		"length",
		"E_INVALIDARG",
		"E_NOTIMPL",
		"S_OK",
		"DISPATCH_PROPERTYGET",
		"DISP_E_MEMBERNOTFOUND",
		"S_OK",
		"DISPID_AMBIENT_SUPPORTSMNEMONICS",
		"DISPID_AMBIENT_SHOWGRABHANDLES",
		"DISPID_AMBIENT_SHOWHATCHING",
		"S_FALSE",
		"DISPID_AMBIENT_OFFLINEIFNOTCONNECTED",
		"DISPID_AMBIENT_BACKCOLOR",
		"DISPID_AMBIENT_FORECOLOR",
		"DISPID_AMBIENT_FONT",
		"DISPID_AMBIENT_LOCALEID",
		"DISPID_AMBIENT_SILENT",
		"DISPID_AMBIENT_MESSAGEREFLECT",
		"E_NOTIMPL",
		"DISP_E_MEMBERNOTFOUND",
		"IIDIOleControl",
		"S_OK",
		"S_OK",
		"OLEIVERB_UIACTIVATE",
		"S_OK",
		"S_OK",
		"S_OK",
		"E_INVALIDARG",
		"sizeof",
		"IIDIOleControlSite",
		"S_OK",
		"IIDIDispatch",
		"S_OK",
		"E_NOINTERFACE",
		"length",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"length",
		"length",
		"ERROR_NULL_ARGUMENT",
		"DISPID_BACKCOLOR",
		"handle",
		"DISPID_FONT",
		"DISPID_FONT_NAME",
		"DISPID_FONT_SIZE",
		"DISPID_FONT_ITALIC",
		"ITALIC",
		"DISPID_FONT_BOLD",
		"BOLD",
		"DISPID_FORECOLOR",
		"handle",
		"length",
		"length",
		"length",
		"parent",
		"style",
		"progId",
		"e",
		"eventID",
		"listener",
		"unknown",
		"automation",
		"eventID",
		"listener",
		"iunknown",
		"guid",
		"eventID",
		"listener",
		"propertyID",
		"listener",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"clsid",
		"dispId",
		"phwnd",
		"dispIdMember",
		"riid",
		"lcid",
		"dwFlags",
		"pDispParams",
		"pVarResult",
		"pExcepInfo",
		"pArgErr",
		"e",
		"e",
		"fGotFocus",
		"fUndoable",
		"riid",
		"ppvObject",
		"eventID",
		"listener",
		"automation",
		"guid",
		"eventID",
		"listener",
		"automation",
		"eventID",
		"listener",
		"iunknown",
		"guid",
		"eventID",
		"listener",
		"propertyID",
		"listener",
		"color",
		"font",
		"color",
		"dispId",
		"value"
	],
	"extendORImplementFiles":[
		"OleClientSite"
	],
	"package":[
		"org.eclipse.swt.ole.win32"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"addEventListener",
		"getDefaultEventSinkGUID",
		"addEventListener",
		"addEventListener",
		"addObjectReferences",
		"addPropertyListener",
		"connectPropertyChangeSink",
		"createCOMInterfaces",
		"method0",
		"method1",
		"method2",
		"method3",
		"method8",
		"method0",
		"method1",
		"method2",
		"method6",
		"disconnectEventSinks",
		"disconnectPropertyChangeSink",
		"disposeCOMInterfaces",
		"getBackground",
		"getFont",
		"getForeground",
		"getLicenseInfo",
		"getSiteProperty",
		"GetWindow",
		"Invoke",
		"OnControlInfoChanged",
		"onFocusIn",
		"onFocusOut",
		"OnFocus",
		"OnUIDeactivate",
		"QueryInterface",
		"Release",
		"releaseObjectInterfaces",
		"removeEventListener",
		"removeEventListener",
		"removeEventListener",
		"removeEventListener",
		"removePropertyListener",
		"setBackground",
		"setFont",
		"setForeground",
		"setSiteProperty",
		"getClassID",
		"error",
		"getLicenseInfo",
		"createTempStorage",
		"OleCreate",
		"getAddress",
		"error",
		"CoGetClassObject",
		"error",
		"CreateInstanceLic",
		"Release",
		"error",
		"SysFreeString",
		"QueryInterface",
		"createTempStorage",
		"InitNew",
		"getAddress",
		"Release",
		"addObjectReferences",
		"setSiteProperty",
		"setSiteProperty",
		"OleRun",
		"getAddress",
		"dispose",
		"disposeCOMInterfaces",
		"error",
		"getDefaultEventSinkGUID",
		"addEventListener",
		"getAddress",
		"QueryInterface",
		"GetGUID",
		"Release",
		"QueryInterface",
		"GetClassInfo",
		"Release",
		"GetTypeAttr",
		"MoveMemory",
		"ReleaseTypeAttr",
		"GetImplTypeFlags",
		"GetRefTypeOfImplType",
		"GetRefTypeInfo",
		"Release",
		"GetTypeAttr",
		"MoveMemory",
		"ReleaseTypeAttr",
		"Release",
		"error",
		"getAddress",
		"getDefaultEventSinkGUID",
		"addEventListener",
		"error",
		"IsEqualGUID",
		"addListener",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"AddRef",
		"connect",
		"addListener",
		"addObjectReferences",
		"connectPropertyChangeSink",
		"QueryInterface",
		"GetControlInfo",
		"Release",
		"error",
		"addListener",
		"AddRef",
		"connect",
		"createCOMInterfaces",
		"QueryInterface",
		"AddRef",
		"Release",
		"OnControlInfoChanged",
		"OnFocus",
		"QueryInterface",
		"AddRef",
		"Release",
		"Invoke",
		"disconnect",
		"Release",
		"disconnect",
		"Release",
		"disposeCOMInterfaces",
		"dispose",
		"dispose",
		"getProperty",
		"dispose",
		"OleTranslateColor",
		"getInt",
		"getDisplay",
		"win32_new",
		"getDisplay",
		"getBackground",
		"getProperty",
		"dispose",
		"getAutomation",
		"getProperty",
		"getProperty",
		"getProperty",
		"getProperty",
		"dispose",
		"getInt",
		"getInt",
		"getDisplay",
		"getShell",
		"getString",
		"getInt",
		"getFont",
		"getProperty",
		"dispose",
		"OleTranslateColor",
		"getInt",
		"getDisplay",
		"win32_new",
		"getDisplay",
		"getForeground",
		"CoGetClassObject",
		"GetLicInfo",
		"Release",
		"RequestLicKey",
		"Release",
		"Release",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"getSiteProperty",
		"getData",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"QueryInterface",
		"GetControlInfo",
		"Release",
		"doVerb",
		"isFocusControl",
		"GetWindow",
		"SetFocus",
		"UIDeactivate",
		"QueryInterface",
		"MoveMemory",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"Release",
		"dispose",
		"disconnectEventSinks",
		"disconnectPropertyChangeSink",
		"releaseObjectInterfaces",
		"checkWidget",
		"error",
		"getDefaultEventSinkGUID",
		"removeEventListener",
		"getAddress",
		"checkWidget",
		"error",
		"removeEventListener",
		"getAddress",
		"checkWidget",
		"error",
		"getAddress",
		"getDefaultEventSinkGUID",
		"removeEventListener",
		"error",
		"IsEqualGUID",
		"removeListener",
		"hasListeners",
		"disconnect",
		"Release",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"error",
		"removeListener",
		"setBackground",
		"setProperty",
		"dispose",
		"setFont",
		"getProperty",
		"dispose",
		"getAutomation",
		"getFontData",
		"setProperty",
		"getName",
		"setProperty",
		"getHeight",
		"setProperty",
		"getStyle",
		"setProperty",
		"getStyle",
		"dispose",
		"setForeground",
		"setProperty",
		"dispose",
		"dispose",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"IUnknown",
		"IClassFactory2",
		"IUnknown",
		"IPersistStorage",
		"Variant",
		"Variant",
		"IProvideClassInfo2",
		"GUID",
		"IProvideClassInfo",
		"ITypeInfo",
		"TYPEATTR",
		"ITypeInfo",
		"GUID",
		"IUnknown",
		"OleEventSink",
		"IOleControl",
		"CONTROLINFO",
		"OlePropertyChangeSink",
		"COMObject",
		"COMObject",
		"OleAutomation",
		"OleAutomation",
		"Font",
		"OleAutomation",
		"IClassFactory2",
		"LICINFO",
		"IOleControl",
		"CONTROLINFO",
		"GUID",
		"IUnknown",
		"OleAutomation",
		"Variant",
		"OleAutomation",
		"Variant",
		"Variant",
		"Variant",
		"Variant",
		"OleAutomation",
		"Variant"
	],
	"methodsBody":{
		"private int OnControlInfoChanged()":{
			"methodBody":"{\n    int[] ppvObject = new int[1];\n    if (objIUnknown.QueryInterface(COM.IIDIOleControl, ppvObject) == COM.S_OK) {\n        IOleControl objIOleControl = new IOleControl(ppvObject[0]);\n        \n        \n        currentControlInfo = new CONTROLINFO();\n        objIOleControl.GetControlInfo(currentControlInfo);\n        objIOleControl.Release();\n    }\n    return COM.S_OK;\n}",
			"comments":"// ask the control for its info in case users\n// need to act on it\n",
			"methodName":"private int OnControlInfoChanged()"
		},
		"public void removePropertyListener(int propertyID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    olePropertyChangeSink.removeListener(propertyID, listener);\n}",
			"comments":"/**\n* Removes the listener.\n*\n* @param listener the listener\n*\n* @exception IllegalArgumentException <ul>\n*\t    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n* </ul>\n*/\n",
			"methodName":"public void removePropertyListener(int propertyID, OleListener listener)"
		},
		"public void removeEventListener(OleAutomation automation, int eventID, OleListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (automation == null || listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    int address = automation.getAddress();\n    IUnknown unknown = new IUnknown(address);\n    GUID riid = getDefaultEventSinkGUID(unknown);\n    if (riid != null) {\n        removeEventListener(address, riid, eventID, listener);\n    }\n}",
			"comments":"/**\n* Removes the listener.\n*\n* @since 2.0\n*\n* @param automation the automation object that provides the event notification\n*\n* @param eventID the event identifier\n*\n* @param listener the listener\n*\n* @exception IllegalArgumentException <ul>\n*\t    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n* </ul>\n*/\n",
			"methodName":"public void removeEventListener(OleAutomation automation, int eventID, OleListener listener)"
		},
		"public void addPropertyListener(int propertyID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    olePropertyChangeSink.addListener(propertyID, listener);\n}",
			"comments":"/**\n* Adds the listener to receive events.\n*\n* @param propertyID the identifier of the property\n* @param listener the listener\n*\n* @exception IllegalArgumentException <ul>\n*\t    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n* </ul>\n*/\n",
			"methodName":"public void addPropertyListener(int propertyID, OleListener listener)"
		},
		"public void removeEventListener(int eventID, OleListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    GUID riid = getDefaultEventSinkGUID(objIUnknown);\n    if (riid != null) {\n        removeEventListener(objIUnknown.getAddress(), riid, eventID, listener);\n    }\n}",
			"comments":"/**\n* Removes the listener.\n*\n* @param eventID the event identifier\n*\n* @param listener the listener\n*\n* @exception IllegalArgumentException <ul>\n*\t    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n* </ul>\n*/\n",
			"methodName":"public void removeEventListener(int eventID, OleListener listener)"
		},
		"private void disconnectEventSinks()":{
			"methodBody":"{\n    for (int i = 0; i < oleEventSink.length; i++) {\n        OleEventSink sink = oleEventSink[i];\n        sink.disconnect();\n        sink.Release();\n    }\n    oleEventSink = new OleEventSink[0];\n    oleEventSinkGUID = new GUID[0];\n    oleEventSinkIUnknown = new int[0];\n}",
			"comments":"",
			"methodName":"private void disconnectEventSinks()"
		},
		"protected void createCOMInterfaces()":{
			"methodBody":"{\n    super.createCOMInterfaces();\n    \n    iOleControlSite = new COMObject(new int[] { 2, 0, 0, 0, 1, 1, 3, 2, 1, 0 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return OnControlInfoChanged();\n        }\n\n        \n        \n        \n        \n        public int method8(int[] args) {\n            return OnFocus(args[0]);\n        }\n    };\n    iDispatch = new COMObject(new int[] { 2, 0, 0, 1, 3, 5, 8 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        \n        \n        \n        public int method6(int[] args) {\n            return Invoke(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n        }\n    };\n}",
			"comments":"// register each of the interfaces that this object implements\n// method4 LockInPlaceActive - not implemented\n// method5 GetExtendedControl - not implemented\n// method6 TransformCoords - not implemented\n// method7 Translate Accelerator - not implemented\n// method9 ShowPropertyFrame - not implemented\n// method3 GetTypeInfoCount - not implemented\n// method4 GetTypeInfo - not implemented\n// method5 GetIDsOfNames - not implemented\n",
			"methodName":"protected void createCOMInterfaces()"
		},
		"public Color getBackground()":{
			"methodBody":"{\n    if (objIUnknown != null) {\n        \n        OleAutomation oleObject = new OleAutomation(this);\n        Variant varBackColor = oleObject.getProperty(COM.DISPID_BACKCOLOR);\n        oleObject.dispose();\n        if (varBackColor != null) {\n            int[] colorRef = new int[1];\n            if (COM.OleTranslateColor(varBackColor.getInt(), getDisplay().hPalette, colorRef) == COM.S_OK)\n                return Color.win32_new(getDisplay(), colorRef[0]);\n        }\n    }\n    return super.getBackground();\n}",
			"comments":"// !! We are getting the OLE_COLOR - should we change this to the COLORREF value?\n",
			"methodName":"public Color getBackground()"
		},
		"public void addEventListener(int eventID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    GUID riid = getDefaultEventSinkGUID(objIUnknown);\n    if (riid != null) {\n        addEventListener(objIUnknown.getAddress(), riid, eventID, listener);\n    }\n}",
			"comments":"/**\n* Adds the listener to receive events.\n*\n* @param eventID the id of the event\n*\n* @param listener the listener\n*\n* @exception IllegalArgumentException <ul>\n*\t    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n* </ul>\n*/\n",
			"methodName":"public void addEventListener(int eventID, OleListener listener)"
		},
		"private void connectPropertyChangeSink()":{
			"methodBody":"{\n    olePropertyChangeSink = new OlePropertyChangeSink(this);\n    olePropertyChangeSink.AddRef();\n    olePropertyChangeSink.connect(objIUnknown);\n}",
			"comments":"",
			"methodName":"private void connectPropertyChangeSink()"
		},
		"private void disconnectPropertyChangeSink()":{
			"methodBody":"{\n    if (olePropertyChangeSink != null) {\n        olePropertyChangeSink.disconnect(objIUnknown);\n        olePropertyChangeSink.Release();\n    }\n    olePropertyChangeSink = null;\n}",
			"comments":"",
			"methodName":"private void disconnectPropertyChangeSink()"
		},
		"public int method6(int[] args)":{
			"methodBody":"{\n    return Invoke(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n}",
			"comments":"// method3 GetTypeInfoCount - not implemented\n// method4 GetTypeInfo - not implemented\n// method5 GetIDsOfNames - not implemented\n",
			"methodName":"public int method6(int[] args)"
		},
		"protected int getLicenseInfo(GUID clsid)":{
			"methodBody":"{\n    int[] ppvObject = new int[1];\n    if (COM.CoGetClassObject(clsid, COM.CLSCTX_INPROC_HANDLER | COM.CLSCTX_INPROC_SERVER, 0, COM.IIDIClassFactory2, ppvObject) != COM.S_OK) {\n        return 0;\n    }\n    IClassFactory2 classFactory = new IClassFactory2(ppvObject[0]);\n    LICINFO licinfo = new LICINFO();\n    if (classFactory.GetLicInfo(licinfo) != COM.S_OK) {\n        classFactory.Release();\n        return 0;\n    }\n    int[] pBstrKey = new int[1];\n    if (licinfo != null && licinfo.fRuntimeKeyAvail) {\n        if (classFactory.RequestLicKey(0, pBstrKey) == COM.S_OK) {\n            classFactory.Release();\n            return pBstrKey[0];\n        }\n    }\n    classFactory.Release();\n    return 0;\n}",
			"comments":"",
			"methodName":"protected int getLicenseInfo(GUID clsid)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    super.setForeground(color);\n    \n    if (objIUnknown != null) {\n        OleAutomation oleObject = new OleAutomation(this);\n        oleObject.setProperty(COM.DISPID_FORECOLOR, new Variant(color.handle));\n        oleObject.dispose();\n    }\n}",
			"comments":"//set the foreground of the ActiveX Control\n",
			"methodName":"public void setForeground(Color color)"
		},
		"public void addEventListener(OleAutomation automation, int eventID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null || automation == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    int address = automation.getAddress();\n    IUnknown unknown = new IUnknown(address);\n    GUID riid = getDefaultEventSinkGUID(unknown);\n    if (riid != null) {\n        addEventListener(address, riid, eventID, listener);\n    }\n}",
			"comments":"/**\n* Adds the listener to receive events.\n*\n* @since 2.0\n*\n* @param automation the automation object that provides the event notification\n*\n* @param eventID the id of the event\n*\n* @param listener the listener\n*\n* @exception IllegalArgumentException <ul>\n*\t   <li>ERROR_NULL_ARGUMENT when listener is null</li>\n* </ul>\n*/\n",
			"methodName":"public void addEventListener(OleAutomation automation, int eventID, OleListener listener)"
		},
		"protected void releaseObjectInterfaces()":{
			"methodBody":"{\n    disconnectEventSinks();\n    disconnectPropertyChangeSink();\n    super.releaseObjectInterfaces();\n}",
			"comments":"",
			"methodName":"protected void releaseObjectInterfaces()"
		},
		"public Font getFont()":{
			"methodBody":"{\n    if (objIUnknown != null) {\n        OleAutomation oleObject = new OleAutomation(this);\n        Variant varDispFont = oleObject.getProperty(COM.DISPID_FONT);\n        oleObject.dispose();\n        if (varDispFont != null) {\n            OleAutomation iDispFont = varDispFont.getAutomation();\n            Variant lfFaceName = iDispFont.getProperty(COM.DISPID_FONT_NAME);\n            Variant lfHeight = iDispFont.getProperty(COM.DISPID_FONT_SIZE);\n            Variant lfItalic = iDispFont.getProperty(COM.DISPID_FONT_ITALIC);\n            \n            Variant lfBold = iDispFont.getProperty(COM.DISPID_FONT_BOLD);\n            iDispFont.dispose();\n            if (lfFaceName != null && lfHeight != null && lfItalic != null && lfBold != null) {\n                int style = 3 * lfBold.getInt() + 2 * lfItalic.getInt();\n                Font font = new Font(getShell().getDisplay(), lfFaceName.getString(), lfHeight.getInt(), style);\n                return font;\n            }\n        }\n    }\n    return super.getFont();\n}",
			"comments":"//Variant lfCharSet  = iDispFont.getProperty(COM.DISPID_FONT_CHARSET);\n",
			"methodName":"public Font getFont()"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    super.setBackground(color);\n    \n    if (objIUnknown != null) {\n        OleAutomation oleObject = new OleAutomation(this);\n        oleObject.setProperty(COM.DISPID_BACKCOLOR, new Variant(color.handle));\n        oleObject.dispose();\n    }\n}",
			"comments":"//set the background of the ActiveX Control\n",
			"methodName":"public void setBackground(Color color)"
		},
		"public int method8(int[] args)":{
			"methodBody":"{\n    return OnFocus(args[0]);\n}",
			"comments":"// method4 LockInPlaceActive - not implemented\n// method5 GetExtendedControl - not implemented\n// method6 TransformCoords - not implemented\n// method7 Translate Accelerator - not implemented\n",
			"methodName":"public int method8(int[] args)"
		},
		"private int OnFocus(int fGotFocus)":{
			"methodBody":"{\n    return COM.S_OK;\n}",
			"comments":"",
			"methodName":"private int OnFocus(int fGotFocus)"
		},
		"void addEventListener(int iunknown, GUID guid, int eventID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null || iunknown == 0 || guid == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    \n    int index = -1;\n    for (int i = 0; i < oleEventSinkGUID.length; i++) {\n        if (COM.IsEqualGUID(oleEventSinkGUID[i], guid)) {\n            if (iunknown == oleEventSinkIUnknown[i]) {\n                index = i;\n                break;\n            }\n        }\n    }\n    if (index != -1) {\n        oleEventSink[index].addListener(eventID, listener);\n    } else {\n        int oldLength = oleEventSink.length;\n        OleEventSink[] newOleEventSink = new OleEventSink[oldLength + 1];\n        GUID[] newOleEventSinkGUID = new GUID[oldLength + 1];\n        int[] newOleEventSinkIUnknown = new int[oldLength + 1];\n        System.arraycopy(oleEventSink, 0, newOleEventSink, 0, oldLength);\n        System.arraycopy(oleEventSinkGUID, 0, newOleEventSinkGUID, 0, oldLength);\n        System.arraycopy(oleEventSinkIUnknown, 0, newOleEventSinkIUnknown, 0, oldLength);\n        oleEventSink = newOleEventSink;\n        oleEventSinkGUID = newOleEventSinkGUID;\n        oleEventSinkIUnknown = newOleEventSinkIUnknown;\n        oleEventSink[oldLength] = new OleEventSink(this, iunknown, guid);\n        oleEventSinkGUID[oldLength] = guid;\n        oleEventSinkIUnknown[oldLength] = iunknown;\n        oleEventSink[oldLength].AddRef();\n        oleEventSink[oldLength].connect();\n        oleEventSink[oldLength].addListener(eventID, listener);\n    }\n}",
			"comments":"// have we connected to this kind of event sink before?\n",
			"methodName":"void addEventListener(int iunknown, GUID guid, int eventID, OleListener listener)"
		},
		"protected int QueryInterface(int riid, int ppvObject)":{
			"methodBody":"{\n    int result = super.QueryInterface(riid, ppvObject);\n    if (result == COM.S_OK)\n        return result;\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_INVALIDARG;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIOleControlSite)) {\n        COM.MoveMemory(ppvObject, new int[] { iOleControlSite.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    if (COM.IsEqualGUID(guid, COM.IIDIDispatch)) {\n        COM.MoveMemory(ppvObject, new int[] { iDispatch.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    COM.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"protected int QueryInterface(int riid, int ppvObject)"
		},
		"protected int GetWindow(int phwnd)":{
			"methodBody":"{\n    if (phwnd == 0)\n        return COM.E_INVALIDARG;\n    if (frame == null) {\n        COM.MoveMemory(phwnd, new int[] { 0 }, 4);\n        return COM.E_NOTIMPL;\n    }\n    \n    COM.MoveMemory(phwnd, new int[] { handle }, 4);\n    return COM.S_OK;\n}",
			"comments":"// Copy the Window's handle into the memory passed in\n",
			"methodName":"protected int GetWindow(int phwnd)"
		},
		"public void removeEventListener(OleAutomation automation, GUID guid, int eventID, OleListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (automation == null || listener == null || guid == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    removeEventListener(automation.getAddress(), guid, eventID, listener);\n}",
			"comments":"/**\n* Removes the listener.\n*\n* @since 2.0\n* @deprecated - use OleControlSite.removeEventListener(OleAutomation, int, OleListener)\n*\n* @param automation the automation object that provides the event notification\n*\n* @param guid the identifier of the events COM interface\n*\n* @param eventID the event identifier\n*\n* @param listener the listener\n*\n* @exception IllegalArgumentException <ul>\n*\t    <li>ERROR_NULL_ARGUMENT when listener is null</li>\n* </ul>\n*/\n",
			"methodName":"public void removeEventListener(OleAutomation automation, GUID guid, int eventID, OleListener listener)"
		},
		"public void setSiteProperty(int dispId, Variant value)":{
			"methodBody":"{\n    for (int i = 0; i < sitePropertyIds.length; i++) {\n        if (sitePropertyIds[i] == dispId) {\n            if (sitePropertyValues[i] != null) {\n                sitePropertyValues[i].dispose();\n            }\n            if (value != null) {\n                sitePropertyValues[i] = value;\n            } else {\n                int oldLength = sitePropertyIds.length;\n                int[] newSitePropertyIds = new int[oldLength - 1];\n                Variant[] newSitePropertyValues = new Variant[oldLength - 1];\n                System.arraycopy(sitePropertyIds, 0, newSitePropertyIds, 0, i);\n                System.arraycopy(sitePropertyIds, i + 1, newSitePropertyIds, i, oldLength - i - 1);\n                System.arraycopy(sitePropertyValues, 0, newSitePropertyValues, 0, i);\n                System.arraycopy(sitePropertyValues, i + 1, newSitePropertyValues, i, oldLength - i - 1);\n                sitePropertyIds = newSitePropertyIds;\n                sitePropertyValues = newSitePropertyValues;\n            }\n            return;\n        }\n    }\n    int oldLength = sitePropertyIds.length;\n    int[] newSitePropertyIds = new int[oldLength + 1];\n    Variant[] newSitePropertyValues = new Variant[oldLength + 1];\n    System.arraycopy(sitePropertyIds, 0, newSitePropertyIds, 0, oldLength);\n    System.arraycopy(sitePropertyValues, 0, newSitePropertyValues, 0, oldLength);\n    newSitePropertyIds[oldLength] = dispId;\n    newSitePropertyValues[oldLength] = value;\n    sitePropertyIds = newSitePropertyIds;\n    sitePropertyValues = newSitePropertyValues;\n}",
			"comments":"/**\n* Sets the control site property specified by the dispIdMember to a new value.\n* The value will be disposed by the control site when it is no longer required\n* using Variant.dispose.  Passing a value of null will clear the dispId value.\n*\n* @param dispId the ID of the property as specified by the IDL of the ActiveX Control\n* @param value The new value for the property as expressed in a Variant.\n*\n* @since 2.1\n*/\n",
			"methodName":"public void setSiteProperty(int dispId, Variant value)"
		},
		"protected int Release()":{
			"methodBody":"{\n    int result = super.Release();\n    if (result == 0) {\n        for (int i = 0; i < sitePropertyIds.length; i++) {\n            sitePropertyValues[i].dispose();\n        }\n        sitePropertyIds = new int[0];\n        sitePropertyValues = new Variant[0];\n    }\n    return result;\n}",
			"comments":"",
			"methodName":"protected int Release()"
		},
		"protected void disposeCOMInterfaces()":{
			"methodBody":"{\n    super.disposeCOMInterfaces();\n    if (iOleControlSite != null)\n        iOleControlSite.dispose();\n    iOleControlSite = null;\n    if (iDispatch != null)\n        iDispatch.dispose();\n    iDispatch = null;\n}",
			"comments":"",
			"methodName":"protected void disposeCOMInterfaces()"
		},
		"private int Invoke(int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)":{
			"methodBody":"{\n    if (pVarResult == 0 || dwFlags != COM.DISPATCH_PROPERTYGET) {\n        if (pExcepInfo != 0)\n            COM.MoveMemory(pExcepInfo, new int[] { 0 }, 4);\n        if (pArgErr != 0)\n            COM.MoveMemory(pArgErr, new int[] { 0 }, 4);\n        return COM.DISP_E_MEMBERNOTFOUND;\n    }\n    Variant result = getSiteProperty(dispIdMember);\n    if (result != null) {\n        if (pVarResult != 0)\n            result.getData(pVarResult);\n        return COM.S_OK;\n    }\n    switch(dispIdMember) {\n        \n        case COM.DISPID_AMBIENT_SUPPORTSMNEMONICS:\n        case COM.DISPID_AMBIENT_SHOWGRABHANDLES:\n        case COM.DISPID_AMBIENT_SHOWHATCHING:\n            if (pVarResult != 0)\n                COM.MoveMemory(pVarResult, new int[] { 0 }, 4);\n            if (pExcepInfo != 0)\n                COM.MoveMemory(pExcepInfo, new int[] { 0 }, 4);\n            if (pArgErr != 0)\n                COM.MoveMemory(pArgErr, new int[] { 0 }, 4);\n            return COM.S_FALSE;\n        \n        case COM.DISPID_AMBIENT_OFFLINEIFNOTCONNECTED:\n        case COM.DISPID_AMBIENT_BACKCOLOR:\n        case COM.DISPID_AMBIENT_FORECOLOR:\n        case COM.DISPID_AMBIENT_FONT:\n        case COM.DISPID_AMBIENT_LOCALEID:\n        case COM.DISPID_AMBIENT_SILENT:\n        case COM.DISPID_AMBIENT_MESSAGEREFLECT:\n            if (pVarResult != 0)\n                COM.MoveMemory(pVarResult, new int[] { 0 }, 4);\n            if (pExcepInfo != 0)\n                COM.MoveMemory(pExcepInfo, new int[] { 0 }, 4);\n            if (pArgErr != 0)\n                COM.MoveMemory(pArgErr, new int[] { 0 }, 4);\n            return COM.E_NOTIMPL;\n        default:\n            if (pVarResult != 0)\n                COM.MoveMemory(pVarResult, new int[] { 0 }, 4);\n            if (pExcepInfo != 0)\n                COM.MoveMemory(pExcepInfo, new int[] { 0 }, 4);\n            if (pArgErr != 0)\n                COM.MoveMemory(pArgErr, new int[] { 0 }, 4);\n            return COM.DISP_E_MEMBERNOTFOUND;\n    }\n}",
			"comments":"// indicate a false result\n// not implemented\n",
			"methodName":"private int Invoke(int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)"
		},
		"protected void addObjectReferences()":{
			"methodBody":"{\n    super.addObjectReferences();\n    \n    connectPropertyChangeSink();\n    \n    int[] ppvObject = new int[1];\n    if (objIUnknown.QueryInterface(COM.IIDIOleControl, ppvObject) == COM.S_OK) {\n        IOleControl objIOleControl = new IOleControl(ppvObject[0]);\n        \n        \n        currentControlInfo = new CONTROLINFO();\n        objIOleControl.GetControlInfo(currentControlInfo);\n        objIOleControl.Release();\n    }\n}",
			"comments":"// Get property change notification from control\n// Get access to the Control object\n// ask the control for its info in case users\n// need to act on it\n",
			"methodName":"protected void addObjectReferences()"
		},
		"void onFocusOut(Event e)":{
			"methodBody":"{\n    if (objIOleInPlaceObject != null) {\n        objIOleInPlaceObject.UIDeactivate();\n    }\n}",
			"comments":"",
			"methodName":"void onFocusOut(Event e)"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    super.setFont(font);\n    \n    if (objIUnknown != null) {\n        OleAutomation oleObject = new OleAutomation(this);\n        Variant varDispFont = oleObject.getProperty(COM.DISPID_FONT);\n        oleObject.dispose();\n        if (varDispFont != null) {\n            OleAutomation iDispFont = varDispFont.getAutomation();\n            FontData[] fdata = font.getFontData();\n            iDispFont.setProperty(COM.DISPID_FONT_NAME, new Variant(fdata[0].getName()));\n            iDispFont.setProperty(COM.DISPID_FONT_SIZE, new Variant(fdata[0].getHeight()));\n            iDispFont.setProperty(COM.DISPID_FONT_ITALIC, new Variant(fdata[0].getStyle() & SWT.ITALIC));\n            \n            iDispFont.setProperty(COM.DISPID_FONT_BOLD, new Variant((fdata[0].getStyle() & SWT.BOLD)));\n            iDispFont.dispose();\n        }\n    }\n    return;\n}",
			"comments":"//set the font of the ActiveX Control\n//iDispFont.setProperty(COM.DISPID_FONT_CHARSET, new Variant(fdata[0].getCharset));\n",
			"methodName":"public void setFont(Font font)"
		},
		"protected int OnUIDeactivate(int fUndoable)":{
			"methodBody":"{\n    \n    \n    state = STATE_INPLACEACTIVE;\n    return COM.S_OK;\n}",
			"comments":"// controls don't need to do anything for\n// border space or menubars\n",
			"methodName":"protected int OnUIDeactivate(int fUndoable)"
		},
		"public Variant getSiteProperty(int dispId)":{
			"methodBody":"{\n    for (int i = 0; i < sitePropertyIds.length; i++) {\n        if (sitePropertyIds[i] == dispId) {\n            return sitePropertyValues[i];\n        }\n    }\n    return null;\n}",
			"comments":"/**\n*\n* Get the control site property specified by the dispIdMember.\n*\n* @since 2.1\n*\n*/\n",
			"methodName":"public Variant getSiteProperty(int dispId)"
		},
		"public int method3(int[] args)":{
			"methodBody":"{\n    return OnControlInfoChanged();\n}",
			"comments":"",
			"methodName":"public int method3(int[] args)"
		},
		"void onFocusIn(Event e)":{
			"methodBody":"{\n    if (objIOleInPlaceObject == null)\n        return;\n    doVerb(OLE.OLEIVERB_UIACTIVATE);\n    if (isFocusControl())\n        return;\n    int[] phwnd = new int[1];\n    objIOleInPlaceObject.GetWindow(phwnd);\n    if (phwnd[0] == 0)\n        return;\n    OS.SetFocus(phwnd[0]);\n}",
			"comments":"",
			"methodName":"void onFocusIn(Event e)"
		},
		"public int method2(int[] args)":{
			"methodBody":"{\n    return Release();\n}",
			"comments":"",
			"methodName":"public int method2(int[] args)"
		},
		"static GUID getDefaultEventSinkGUID(IUnknown unknown)":{
			"methodBody":"{\n    \n    int[] ppvObject = new int[1];\n    if (unknown.QueryInterface(COM.IIDIProvideClassInfo2, ppvObject) == COM.S_OK) {\n        IProvideClassInfo2 pci2 = new IProvideClassInfo2(ppvObject[0]);\n        GUID riid = new GUID();\n        int result = pci2.GetGUID(COM.GUIDKIND_DEFAULT_SOURCE_DISP_IID, riid);\n        pci2.Release();\n        if (result == COM.S_OK)\n            return riid;\n    }\n    \n    if (unknown.QueryInterface(COM.IIDIProvideClassInfo, ppvObject) == COM.S_OK) {\n        IProvideClassInfo pci = new IProvideClassInfo(ppvObject[0]);\n        int[] ppTI = new int[1];\n        int[] ppEI = new int[1];\n        int result = pci.GetClassInfo(ppTI);\n        pci.Release();\n        if (result == COM.S_OK && ppTI[0] != 0) {\n            ITypeInfo classInfo = new ITypeInfo(ppTI[0]);\n            int[] ppTypeAttr = new int[1];\n            result = classInfo.GetTypeAttr(ppTypeAttr);\n            if (result == COM.S_OK && ppTypeAttr[0] != 0) {\n                TYPEATTR typeAttribute = new TYPEATTR();\n                COM.MoveMemory(typeAttribute, ppTypeAttr[0], TYPEATTR.sizeof);\n                classInfo.ReleaseTypeAttr(ppTypeAttr[0]);\n                int implMask = COM.IMPLTYPEFLAG_FDEFAULT | COM.IMPLTYPEFLAG_FSOURCE | COM.IMPLTYPEFLAG_FRESTRICTED;\n                int implBits = COM.IMPLTYPEFLAG_FDEFAULT | COM.IMPLTYPEFLAG_FSOURCE;\n                for (int i = 0; i < typeAttribute.cImplTypes; i++) {\n                    int[] pImplTypeFlags = new int[1];\n                    if (classInfo.GetImplTypeFlags(i, pImplTypeFlags) == COM.S_OK) {\n                        if ((pImplTypeFlags[0] & implMask) == implBits) {\n                            int[] pRefType = new int[1];\n                            if (classInfo.GetRefTypeOfImplType(i, pRefType) == COM.S_OK) {\n                                classInfo.GetRefTypeInfo(pRefType[0], ppEI);\n                            }\n                        }\n                    }\n                }\n            }\n            classInfo.Release();\n            if (ppEI[0] != 0) {\n                ITypeInfo eventInfo = new ITypeInfo(ppEI[0]);\n                ppTypeAttr = new int[1];\n                result = eventInfo.GetTypeAttr(ppTypeAttr);\n                GUID riid = null;\n                if (result == COM.S_OK && ppTypeAttr[0] != 0) {\n                    riid = new GUID();\n                    COM.MoveMemory(riid, ppTypeAttr[0], GUID.sizeof);\n                    eventInfo.ReleaseTypeAttr(ppTypeAttr[0]);\n                }\n                eventInfo.Release();\n                return riid;\n            }\n        }\n    }\n    return null;\n}",
			"comments":"// get Event Sink I/F from IProvideClassInfo2\n// get Event Sink I/F from IProvideClassInfo\n",
			"methodName":"static GUID getDefaultEventSinkGUID(IUnknown unknown)"
		},
		"public int method1(int[] args)":{
			"methodBody":"{\n    return AddRef();\n}",
			"comments":"",
			"methodName":"public int method1(int[] args)"
		},
		"void removeEventListener(int iunknown, GUID guid, int eventID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null || guid == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    for (int i = 0; i < oleEventSink.length; i++) {\n        if (COM.IsEqualGUID(oleEventSinkGUID[i], guid)) {\n            if (iunknown == oleEventSinkIUnknown[i]) {\n                oleEventSink[i].removeListener(eventID, listener);\n                if (!oleEventSink[i].hasListeners()) {\n                    \n                    oleEventSink[i].disconnect();\n                    oleEventSink[i].Release();\n                    int oldLength = oleEventSink.length;\n                    if (oldLength == 1) {\n                        oleEventSink = new OleEventSink[0];\n                        oleEventSinkGUID = new GUID[0];\n                        oleEventSinkIUnknown = new int[0];\n                    } else {\n                        OleEventSink[] newOleEventSink = new OleEventSink[oldLength - 1];\n                        System.arraycopy(oleEventSink, 0, newOleEventSink, 0, i);\n                        System.arraycopy(oleEventSink, i + 1, newOleEventSink, i, oldLength - i - 1);\n                        oleEventSink = newOleEventSink;\n                        GUID[] newOleEventSinkGUID = new GUID[oldLength - 1];\n                        System.arraycopy(oleEventSinkGUID, 0, newOleEventSinkGUID, 0, i);\n                        System.arraycopy(oleEventSinkGUID, i + 1, newOleEventSinkGUID, i, oldLength - i - 1);\n                        oleEventSinkGUID = newOleEventSinkGUID;\n                        int[] newOleEventSinkIUnknown = new int[oldLength - 1];\n                        System.arraycopy(oleEventSinkIUnknown, 0, newOleEventSinkIUnknown, 0, i);\n                        System.arraycopy(oleEventSinkIUnknown, i + 1, newOleEventSinkIUnknown, i, oldLength - i - 1);\n                        oleEventSinkIUnknown = newOleEventSinkIUnknown;\n                    }\n                }\n                return;\n            }\n        }\n    }\n}",
			"comments":"//free resources associated with event sink\n",
			"methodName":"void removeEventListener(int iunknown, GUID guid, int eventID, OleListener listener)"
		},
		"public int method0(int[] args)":{
			"methodBody":"{\n    return QueryInterface(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method0(int[] args)"
		},
		"public Color getForeground()":{
			"methodBody":"{\n    if (objIUnknown != null) {\n        \n        OleAutomation oleObject = new OleAutomation(this);\n        Variant varForeColor = oleObject.getProperty(COM.DISPID_FORECOLOR);\n        oleObject.dispose();\n        if (varForeColor != null) {\n            int[] colorRef = new int[1];\n            if (COM.OleTranslateColor(varForeColor.getInt(), getDisplay().hPalette, colorRef) == COM.S_OK)\n                return Color.win32_new(getDisplay(), colorRef[0]);\n        }\n    }\n    return super.getForeground();\n}",
			"comments":"// !! We are getting the OLE_COLOR - should we change this to the COLORREF value?\n",
			"methodName":"public Color getForeground()"
		}
	},
	"ClassORInterfaceName":[
		"OleControlSite"
	]
}
