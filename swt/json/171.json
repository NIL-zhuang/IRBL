{
	"variables":[
		"isDirect",
		"colors",
		"redMask",
		"greenMask",
		"blueMask",
		"redShift",
		"greenShift",
		"blueShift",
		"pixel",
		"i",
		"r",
		"g",
		"b",
		"i",
		"colors",
		"SWT",
		"SWT",
		"colors",
		"redMask",
		"greenMask",
		"blueMask",
		"redMask",
		"greenMask",
		"blueMask",
		"rgb",
		"SWT",
		"SWT",
		"isDirect",
		"pixel",
		"redShift",
		"rgb",
		"redShift",
		"rgb",
		"redShift",
		"redMask",
		"pixel",
		"greenShift",
		"rgb",
		"greenShift",
		"rgb",
		"greenShift",
		"greenMask",
		"pixel",
		"blueShift",
		"rgb",
		"blueShift",
		"rgb",
		"blueShift",
		"blueMask",
		"pixel",
		"i",
		"colors",
		"i",
		"colors",
		"i",
		"rgb",
		"i",
		"SWT",
		"SWT",
		"isDirect",
		"pixel",
		"redMask",
		"r",
		"redShift",
		"r",
		"redShift",
		"r",
		"redShift",
		"pixel",
		"greenMask",
		"g",
		"greenShift",
		"g",
		"greenShift",
		"g",
		"greenShift",
		"pixel",
		"blueMask",
		"b",
		"blueShift",
		"b",
		"blueShift",
		"b",
		"blueShift",
		"r",
		"g",
		"b",
		"pixel",
		"pixel",
		"colors",
		"SWT",
		"SWT",
		"colors",
		"pixel",
		"colors",
		"i",
		"i",
		"mask",
		"i",
		"i",
		"ERROR_NULL_ARGUMENT",
		"colors",
		"isDirect",
		"redMask",
		"greenMask",
		"blueMask",
		"isDirect",
		"redShift",
		"greenShift",
		"blueShift",
		"ERROR_NULL_ARGUMENT",
		"red",
		"red",
		"green",
		"green",
		"blue",
		"blue",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"colors",
		"redMask",
		"greenMask",
		"blueMask",
		"rgb",
		"pixel",
		"mask"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt"
	],
	"methods":[
		"getPixel",
		"getRGB",
		"getRGBs",
		"shiftForMask",
		"error",
		"shiftForMask",
		"shiftForMask",
		"shiftForMask",
		"error",
		"equals",
		"error",
		"error",
		"RGB"
	],
	"methodsBody":{
		"public RGB[] getRGBs()":{
			"methodBody":"{\n    return colors;\n}",
			"comments":"/**\n* Returns all the RGB values in the receiver if it is an\n* indexed palette, or null if it is a direct palette.\n*\n* @return the <code>RGB</code>s for the receiver or null\n*/\n",
			"methodName":"public RGB[] getRGBs()"
		},
		"int shiftForMask(int mask)":{
			"methodBody":"{\n    for (int i = 31; i >= 0; i--) {\n        if (((mask >> i) & 0x1) != 0)\n            return 7 - i;\n    }\n    return 32;\n}",
			"comments":"/**\n* Computes the shift value for a given mask.\n*\n* @param mask the mask to compute the shift for\n* @return the shift amount\n*\n* @see PaletteData\n*/\n",
			"methodName":"int shiftForMask(int mask)"
		},
		"public RGB getRGB(int pixel)":{
			"methodBody":"{\n    if (isDirect) {\n        int r = pixel & redMask;\n        r = (redShift < 0) ? r >>> -redShift : r << redShift;\n        int g = pixel & greenMask;\n        g = (greenShift < 0) ? g >>> -greenShift : g << greenShift;\n        int b = pixel & blueMask;\n        b = (blueShift < 0) ? b >>> -blueShift : b << blueShift;\n        return new RGB(r, g, b);\n    } else {\n        if (pixel < 0 || pixel >= colors.length) {\n            SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n        }\n        return colors[pixel];\n    }\n}",
			"comments":"/**\n* Returns an <code>RGB</code> corresponding to the given pixel value.\n*\n* @param pixel the pixel to get the RGB value for\n* @return the RGB value for the given pixel\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the pixel does not exist in the palette</li>\n* </ul>\n*/\n",
			"methodName":"public RGB getRGB(int pixel)"
		},
		"public int getPixel(RGB rgb)":{
			"methodBody":"{\n    if (rgb == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (isDirect) {\n        int pixel = 0;\n        pixel |= (redShift < 0 ? rgb.red << -redShift : rgb.red >>> redShift) & redMask;\n        pixel |= (greenShift < 0 ? rgb.green << -greenShift : rgb.green >>> greenShift) & greenMask;\n        pixel |= (blueShift < 0 ? rgb.blue << -blueShift : rgb.blue >>> blueShift) & blueMask;\n        return pixel;\n    } else {\n        for (int i = 0; i < colors.length; i++) {\n            if (colors[i].equals(rgb))\n                return i;\n        }\n        \n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n        return 0;\n    }\n}",
			"comments":"/**\n* Returns the pixel value corresponding to the given <code>RGB</code>.\n*\n* @param rgb the RGB to get the pixel value for\n* @return the pixel value for the given RGB\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the RGB is not found in the palette</li>\n* </ul>\n*/\n/* The RGB did not exist in the palette */\n",
			"methodName":"public int getPixel(RGB rgb)"
		}
	},
	"ClassORInterfaceName":[
		"PaletteData"
	]
}
