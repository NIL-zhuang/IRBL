{
	"variables":[
		"ListProc",
		"ListClass",
		"lpWndClass",
		"buffer",
		"result",
		"buffer",
		"result",
		"count",
		"typedListener",
		"width",
		"height",
		"count",
		"newFont",
		"oldFont",
		"hDC",
		"rect",
		"flags",
		"cp",
		"buffer",
		"i",
		"length",
		"result",
		"count",
		"itemHeight",
		"border",
		"oldIndex",
		"i",
		"i",
		"index",
		"oldIndex",
		"oldIndex",
		"count",
		"result",
		"count",
		"length",
		"buffer",
		"result",
		"count",
		"result",
		"result",
		"count",
		"result",
		"i",
		"indices",
		"result",
		"i",
		"result",
		"result",
		"count",
		"index",
		"result",
		"buffer",
		"result",
		"length",
		"indices",
		"result",
		"count",
		"i",
		"count",
		"index",
		"last",
		"buffer",
		"result",
		"newIndices",
		"start",
		"end",
		"count",
		"topIndex",
		"rect",
		"hDC",
		"oldFont",
		"newFont",
		"newWidth",
		"cp",
		"i",
		"topCount",
		"last",
		"index",
		"buffer",
		"length",
		"result",
		"result",
		"flags",
		"buffer",
		"length",
		"result",
		"topIndex",
		"result",
		"count",
		"count",
		"topIndex",
		"rect",
		"hDC",
		"oldFont",
		"newFont",
		"newWidth",
		"cp",
		"index",
		"flags",
		"buffer",
		"length",
		"result",
		"result",
		"index",
		"length",
		"i",
		"index",
		"count",
		"topIndex",
		"itemRect",
		"selectedRect",
		"redraw",
		"focusIndex",
		"oldIndex",
		"count",
		"rect",
		"oldWidth",
		"oldHeight",
		"info",
		"count",
		"topIndex",
		"isSelected",
		"i",
		"oldProc",
		"redraw",
		"rect",
		"hDC",
		"oldFont",
		"newFont",
		"newWidth",
		"length",
		"index",
		"cp",
		"string",
		"buffer",
		"result",
		"flags",
		"newWidth",
		"rect",
		"newFont",
		"oldFont",
		"hDC",
		"cp",
		"count",
		"flags",
		"i",
		"length",
		"buffer",
		"result",
		"rect",
		"newFont",
		"oldFont",
		"hDC",
		"flags",
		"width",
		"length",
		"focusIndex",
		"length",
		"focusIndex",
		"i",
		"string",
		"index",
		"localFocus",
		"count",
		"result",
		"count",
		"index",
		"indices",
		"result",
		"count",
		"height",
		"rect",
		"topIndex",
		"visibleCount",
		"bottomIndex",
		"newTop",
		"bits",
		"code",
		"OS",
		"ListClass",
		"lpWndClass",
		"ListProc",
		"lpWndClass",
		"parent",
		"style",
		"string",
		"SWT",
		"string",
		"OS",
		"handle",
		"OS",
		"buffer",
		"result",
		"OS",
		"SWT",
		"result",
		"OS",
		"SWT",
		"style",
		"SWT",
		"buffer",
		"string",
		"SWT",
		"index",
		"SWT",
		"string",
		"OS",
		"handle",
		"OS",
		"index",
		"buffer",
		"result",
		"OS",
		"SWT",
		"result",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"index",
		"count",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"buffer",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"handle",
		"OS",
		"ListProc",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"SWT",
		"SWT",
		"wHint",
		"SWT",
		"style",
		"SWT",
		"width",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"newFont",
		"OS",
		"handle",
		"OS",
		"newFont",
		"oldFont",
		"OS",
		"hDC",
		"newFont",
		"OS",
		"OS",
		"OS",
		"cp",
		"i",
		"count",
		"i",
		"OS",
		"handle",
		"OS",
		"i",
		"length",
		"OS",
		"length",
		"buffer",
		"buffer",
		"cp",
		"length",
		"OS",
		"handle",
		"OS",
		"i",
		"buffer",
		"result",
		"OS",
		"OS",
		"hDC",
		"buffer",
		"length",
		"rect",
		"flags",
		"width",
		"Math",
		"width",
		"rect",
		"rect",
		"newFont",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"handle",
		"hDC",
		"hHint",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"height",
		"count",
		"itemHeight",
		"width",
		"width",
		"DEFAULT_WIDTH",
		"height",
		"height",
		"DEFAULT_HEIGHT",
		"wHint",
		"SWT",
		"width",
		"wHint",
		"hHint",
		"SWT",
		"height",
		"hHint",
		"width",
		"border",
		"height",
		"border",
		"style",
		"SWT",
		"width",
		"OS",
		"OS",
		"style",
		"SWT",
		"height",
		"OS",
		"OS",
		"width",
		"height",
		"OS",
		"OS",
		"indices",
		"SWT",
		"indices",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"oldIndex",
		"OS",
		"i",
		"indices",
		"i",
		"oldIndex",
		"indices",
		"i",
		"OS",
		"handle",
		"OS",
		"i",
		"indices",
		"i",
		"indices",
		"i",
		"index",
		"OS",
		"handle",
		"OS",
		"index",
		"index",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"oldIndex",
		"OS",
		"oldIndex",
		"index",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"start",
		"end",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"oldIndex",
		"OS",
		"start",
		"oldIndex",
		"oldIndex",
		"end",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"start",
		"end",
		"start",
		"count",
		"end",
		"count",
		"start",
		"Math",
		"count",
		"Math",
		"start",
		"end",
		"Math",
		"count",
		"Math",
		"end",
		"OS",
		"handle",
		"OS",
		"end",
		"start",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"result",
		"OS",
		"handle",
		"OS",
		"count",
		"result",
		"OS",
		"handle",
		"OS",
		"index",
		"length",
		"OS",
		"length",
		"OS",
		"handle",
		"OS",
		"index",
		"buffer",
		"result",
		"OS",
		"buffer",
		"length",
		"OS",
		"handle",
		"OS",
		"index",
		"index",
		"count",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"OS",
		"result",
		"OS",
		"SWT",
		"result",
		"OS",
		"handle",
		"OS",
		"result",
		"OS",
		"SWT",
		"result",
		"count",
		"i",
		"count",
		"i",
		"result",
		"i",
		"i",
		"result",
		"indices",
		"i",
		"indices",
		"i",
		"result",
		"i",
		"indices",
		"i",
		"result",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"result",
		"OS",
		"OS",
		"handle",
		"OS",
		"result",
		"OS",
		"SWT",
		"result",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"count",
		"OS",
		"SWT",
		"count",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"result",
		"OS",
		"SWT",
		"result",
		"index",
		"result",
		"OS",
		"handle",
		"OS",
		"buffer",
		"result",
		"SWT",
		"buffer",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"result",
		"OS",
		"result",
		"OS",
		"handle",
		"OS",
		"length",
		"OS",
		"SWT",
		"length",
		"OS",
		"handle",
		"OS",
		"length",
		"indices",
		"result",
		"length",
		"SWT",
		"indices",
		"OS",
		"handle",
		"OS",
		"string",
		"string",
		"SWT",
		"string",
		"start",
		"i",
		"count",
		"i",
		"string",
		"i",
		"i",
		"OS",
		"handle",
		"OS",
		"start",
		"start",
		"count",
		"start",
		"string",
		"index",
		"OS",
		"handle",
		"OS",
		"last",
		"index",
		"buffer",
		"index",
		"OS",
		"index",
		"last",
		"string",
		"index",
		"index",
		"OS",
		"handle",
		"OS",
		"index",
		"result",
		"result",
		"OS",
		"indices",
		"SWT",
		"indices",
		"indices",
		"System",
		"indices",
		"newIndices",
		"indices",
		"newIndices",
		"newIndices",
		"newIndices",
		"newIndices",
		"OS",
		"handle",
		"OS",
		"start",
		"start",
		"end",
		"end",
		"count",
		"SWT",
		"OS",
		"handle",
		"OS",
		"style",
		"SWT",
		"rect",
		"hDC",
		"OS",
		"handle",
		"newFont",
		"OS",
		"handle",
		"OS",
		"newFont",
		"oldFont",
		"OS",
		"hDC",
		"newFont",
		"i",
		"newIndices",
		"newIndices",
		"i",
		"index",
		"last",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"index",
		"length",
		"OS",
		"buffer",
		"cp",
		"length",
		"OS",
		"handle",
		"OS",
		"index",
		"buffer",
		"result",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"result",
		"OS",
		"style",
		"SWT",
		"OS",
		"OS",
		"OS",
		"OS",
		"hDC",
		"buffer",
		"rect",
		"flags",
		"newWidth",
		"Math",
		"newWidth",
		"rect",
		"rect",
		"index",
		"topIndex",
		"topCount",
		"last",
		"index",
		"i",
		"style",
		"SWT",
		"newFont",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"handle",
		"hDC",
		"newWidth",
		"topCount",
		"topIndex",
		"topCount",
		"OS",
		"handle",
		"OS",
		"topIndex",
		"i",
		"newIndices",
		"SWT",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"index",
		"length",
		"OS",
		"SWT",
		"buffer",
		"length",
		"OS",
		"handle",
		"OS",
		"index",
		"buffer",
		"result",
		"OS",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"result",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"index",
		"count",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"buffer",
		"index",
		"topIndex",
		"OS",
		"handle",
		"OS",
		"topIndex",
		"start",
		"end",
		"OS",
		"handle",
		"OS",
		"start",
		"start",
		"end",
		"end",
		"count",
		"SWT",
		"start",
		"end",
		"count",
		"OS",
		"handle",
		"OS",
		"style",
		"SWT",
		"rect",
		"hDC",
		"OS",
		"handle",
		"newFont",
		"OS",
		"handle",
		"OS",
		"newFont",
		"oldFont",
		"OS",
		"hDC",
		"newFont",
		"start",
		"OS",
		"OS",
		"OS",
		"index",
		"end",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"start",
		"length",
		"OS",
		"buffer",
		"cp",
		"length",
		"OS",
		"handle",
		"OS",
		"start",
		"buffer",
		"result",
		"OS",
		"OS",
		"handle",
		"OS",
		"start",
		"result",
		"OS",
		"style",
		"SWT",
		"OS",
		"hDC",
		"buffer",
		"rect",
		"flags",
		"newWidth",
		"Math",
		"newWidth",
		"rect",
		"rect",
		"index",
		"style",
		"SWT",
		"newFont",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"handle",
		"hDC",
		"newWidth",
		"end",
		"topIndex",
		"topIndex",
		"end",
		"start",
		"OS",
		"handle",
		"OS",
		"topIndex",
		"index",
		"end",
		"SWT",
		"string",
		"SWT",
		"string",
		"index",
		"SWT",
		"index",
		"OS",
		"handle",
		"OS",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"indices",
		"SWT",
		"indices",
		"length",
		"style",
		"SWT",
		"length",
		"indices",
		"i",
		"indices",
		"indices",
		"i",
		"index",
		"index",
		"i",
		"scroll",
		"index",
		"index",
		"OS",
		"handle",
		"OS",
		"index",
		"count",
		"scroll",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"index",
		"OS",
		"handle",
		"OS",
		"index",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"itemRect",
		"drawCount",
		"OS",
		"handle",
		"redraw",
		"OS",
		"handle",
		"OS",
		"handle",
		"OS",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"oldIndex",
		"selectedRect",
		"OS",
		"handle",
		"OS",
		"oldIndex",
		"selectedRect",
		"OS",
		"handle",
		"OS",
		"index",
		"focusIndex",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"style",
		"SWT",
		"focusIndex",
		"OS",
		"handle",
		"OS",
		"focusIndex",
		"OS",
		"handle",
		"OS",
		"topIndex",
		"redraw",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"handle",
		"itemRect",
		"selectedRect",
		"OS",
		"handle",
		"selectedRect",
		"end",
		"start",
		"end",
		"style",
		"SWT",
		"start",
		"end",
		"OS",
		"handle",
		"OS",
		"count",
		"start",
		"count",
		"start",
		"Math",
		"start",
		"end",
		"Math",
		"end",
		"count",
		"style",
		"SWT",
		"start",
		"start",
		"end",
		"start",
		"end",
		"start",
		"scroll",
		"OS",
		"handle",
		"OS",
		"start",
		"end",
		"scroll",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"parent",
		"flags",
		"OS",
		"x",
		"y",
		"width",
		"height",
		"flags",
		"OS",
		"handle",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"flags",
		"oldWidth",
		"width",
		"oldHeight",
		"height",
		"info",
		"SCROLLINFO",
		"info",
		"OS",
		"OS",
		"handle",
		"OS",
		"info",
		"info",
		"OS",
		"handle",
		"OS",
		"handle",
		"OS",
		"index",
		"index",
		"count",
		"OS",
		"handle",
		"OS",
		"index",
		"font",
		"style",
		"SWT",
		"string",
		"SWT",
		"index",
		"index",
		"string",
		"index",
		"isSelected",
		"index",
		"topIndex",
		"items",
		"SWT",
		"i",
		"items",
		"i",
		"items",
		"i",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"ListProc",
		"drawCount",
		"OS",
		"handle",
		"redraw",
		"OS",
		"handle",
		"OS",
		"style",
		"SWT",
		"rect",
		"hDC",
		"OS",
		"handle",
		"newFont",
		"OS",
		"handle",
		"OS",
		"newFont",
		"oldFont",
		"OS",
		"hDC",
		"newFont",
		"OS",
		"handle",
		"OS",
		"items",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"length",
		"length",
		"index",
		"length",
		"items",
		"index",
		"cp",
		"string",
		"OS",
		"handle",
		"OS",
		"buffer",
		"result",
		"OS",
		"result",
		"OS",
		"style",
		"SWT",
		"OS",
		"OS",
		"OS",
		"OS",
		"hDC",
		"buffer",
		"buffer",
		"rect",
		"flags",
		"newWidth",
		"Math",
		"newWidth",
		"rect",
		"rect",
		"index",
		"style",
		"SWT",
		"newFont",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"handle",
		"hDC",
		"OS",
		"handle",
		"OS",
		"newWidth",
		"redraw",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"oldProc",
		"index",
		"items",
		"SWT",
		"OS",
		"handle",
		"newFont",
		"OS",
		"handle",
		"OS",
		"newFont",
		"oldFont",
		"OS",
		"hDC",
		"newFont",
		"OS",
		"handle",
		"OS",
		"OS",
		"OS",
		"OS",
		"i",
		"count",
		"i",
		"OS",
		"handle",
		"OS",
		"i",
		"length",
		"OS",
		"cp",
		"length",
		"OS",
		"handle",
		"OS",
		"i",
		"buffer",
		"result",
		"OS",
		"OS",
		"hDC",
		"buffer",
		"rect",
		"flags",
		"newWidth",
		"Math",
		"newWidth",
		"rect",
		"rect",
		"newFont",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"handle",
		"hDC",
		"OS",
		"handle",
		"OS",
		"newWidth",
		"OS",
		"handle",
		"newFont",
		"OS",
		"handle",
		"OS",
		"newFont",
		"oldFont",
		"OS",
		"hDC",
		"newFont",
		"OS",
		"OS",
		"OS",
		"OS",
		"hDC",
		"buffer",
		"rect",
		"flags",
		"newFont",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"handle",
		"hDC",
		"rect",
		"rect",
		"grow",
		"OS",
		"handle",
		"OS",
		"grow",
		"newWidth",
		"width",
		"OS",
		"handle",
		"OS",
		"newWidth",
		"newWidth",
		"width",
		"indices",
		"SWT",
		"indices",
		"length",
		"style",
		"SWT",
		"length",
		"indices",
		"style",
		"SWT",
		"indices",
		"focusIndex",
		"focusIndex",
		"items",
		"SWT",
		"items",
		"length",
		"style",
		"SWT",
		"length",
		"length",
		"i",
		"i",
		"items",
		"i",
		"string",
		"index",
		"string",
		"index",
		"localFocus",
		"localFocus",
		"index",
		"index",
		"style",
		"SWT",
		"index",
		"index",
		"localFocus",
		"focusIndex",
		"localFocus",
		"style",
		"SWT",
		"focusIndex",
		"focusIndex",
		"index",
		"style",
		"SWT",
		"index",
		"index",
		"end",
		"start",
		"end",
		"style",
		"SWT",
		"start",
		"end",
		"OS",
		"handle",
		"OS",
		"count",
		"start",
		"count",
		"start",
		"Math",
		"start",
		"end",
		"Math",
		"end",
		"count",
		"style",
		"SWT",
		"start",
		"start",
		"end",
		"start",
		"OS",
		"handle",
		"OS",
		"index",
		"result",
		"OS",
		"OS",
		"handle",
		"OS",
		"index",
		"Math",
		"count",
		"Math",
		"index",
		"OS",
		"handle",
		"OS",
		"index",
		"style",
		"SWT",
		"index",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"indices",
		"index",
		"indices",
		"result",
		"index",
		"index",
		"OS",
		"handle",
		"OS",
		"count",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"rect",
		"OS",
		"handle",
		"OS",
		"Math",
		"rect",
		"height",
		"Math",
		"topIndex",
		"visibleCount",
		"count",
		"topIndex",
		"index",
		"index",
		"bottomIndex",
		"Math",
		"Math",
		"index",
		"visibleCount",
		"count",
		"OS",
		"handle",
		"OS",
		"newTop",
		"OS",
		"OS",
		"style",
		"SWT",
		"bits",
		"style",
		"SWT",
		"style",
		"SWT",
		"bits",
		"OS",
		"bits",
		"OS",
		"bits",
		"ListClass",
		"ListProc",
		"wParam",
		"code",
		"OS",
		"SWT",
		"OS",
		"SWT",
		"wParam",
		"lParam",
		"lpfnWndProc",
		"ERROR_NULL_ARGUMENT",
		"LB_ADDSTRING",
		"LB_ERR",
		"ERROR_ITEM_NOT_ADDED",
		"LB_ERRSPACE",
		"ERROR_ITEM_NOT_ADDED",
		"H_SCROLL",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_RANGE",
		"LB_INSERTSTRING",
		"LB_ERRSPACE",
		"ERROR_ITEM_NOT_ADDED",
		"LB_ERR",
		"LB_GETCOUNT",
		"ERROR_ITEM_NOT_ADDED",
		"ERROR_INVALID_RANGE",
		"H_SCROLL",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"SINGLE",
		"MULTI",
		"DEFAULT",
		"H_SCROLL",
		"LB_GETHORIZONTALEXTENT",
		"LB_GETCOUNT",
		"WM_GETFONT",
		"DT_CALCRECT",
		"DT_SINGLELINE",
		"DT_NOPREFIX",
		"LB_GETTEXTLEN",
		"LB_ERR",
		"LB_GETTEXT",
		"LB_ERR",
		"right",
		"left",
		"DEFAULT",
		"LB_GETCOUNT",
		"LB_GETITEMHEIGHT",
		"DEFAULT",
		"DEFAULT",
		"V_SCROLL",
		"SM_CXVSCROLL",
		"H_SCROLL",
		"SM_CYHSCROLL",
		"COLOR_WINDOW",
		"ERROR_NULL_ARGUMENT",
		"length",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_ERR",
		"length",
		"LB_SETCURSEL",
		"length",
		"LB_SETSEL",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_ERR",
		"LB_SETCURSEL",
		"LB_SETSEL",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_ERR",
		"LB_SETCURSEL",
		"LB_GETCOUNT",
		"LB_SELITEMRANGEEX",
		"SINGLE",
		"LB_SETCURSEL",
		"LB_SETSEL",
		"LB_GETCARETINDEX",
		"LB_GETCOUNT",
		"LB_GETTEXTLEN",
		"LB_ERR",
		"LB_GETTEXT",
		"LB_ERR",
		"LB_GETCOUNT",
		"ERROR_CANNOT_GET_ITEM",
		"ERROR_INVALID_RANGE",
		"LB_GETCOUNT",
		"LB_ERR",
		"ERROR_CANNOT_GET_COUNT",
		"LB_GETITEMHEIGHT",
		"LB_ERR",
		"ERROR_CANNOT_GET_ITEM_HEIGHT",
		"length",
		"length",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_ERR",
		"LB_GETSELCOUNT",
		"LB_ERR",
		"ERROR_CANNOT_GET_COUNT",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_GETSELCOUNT",
		"LB_ERR",
		"ERROR_CANNOT_GET_SELECTION",
		"LB_GETCARETINDEX",
		"LB_GETSEL",
		"LB_ERR",
		"ERROR_CANNOT_GET_SELECTION",
		"LB_GETSELITEMS",
		"ERROR_CANNOT_GET_SELECTION",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_ERR",
		"LB_GETSELCOUNT",
		"LB_ERR",
		"ERROR_CANNOT_GET_SELECTION",
		"LB_GETSELITEMS",
		"ERROR_CANNOT_GET_SELECTION",
		"LB_GETTOPINDEX",
		"ERROR_NULL_ARGUMENT",
		"LB_GETCOUNT",
		"LB_FINDSTRINGEXACT",
		"LB_ERR",
		"LB_GETSEL",
		"LB_ERR",
		"ERROR_NULL_ARGUMENT",
		"length",
		"length",
		"length",
		"length",
		"LB_GETCOUNT",
		"ERROR_INVALID_RANGE",
		"LB_GETTOPINDEX",
		"H_SCROLL",
		"WM_GETFONT",
		"length",
		"H_SCROLL",
		"LB_GETTEXTLEN",
		"LB_ERR",
		"LB_GETTEXT",
		"LB_ERR",
		"LB_DELETESTRING",
		"LB_ERR",
		"H_SCROLL",
		"DT_CALCRECT",
		"DT_SINGLELINE",
		"DT_NOPREFIX",
		"right",
		"left",
		"H_SCROLL",
		"LB_SETTOPINDEX",
		"length",
		"ERROR_ITEM_NOT_REMOVED",
		"H_SCROLL",
		"LB_GETTEXTLEN",
		"LB_ERR",
		"ERROR_ITEM_NOT_REMOVED",
		"LB_GETTEXT",
		"LB_ERR",
		"ERROR_ITEM_NOT_REMOVED",
		"LB_GETTOPINDEX",
		"LB_DELETESTRING",
		"LB_ERR",
		"LB_GETCOUNT",
		"ERROR_ITEM_NOT_REMOVED",
		"ERROR_INVALID_RANGE",
		"H_SCROLL",
		"LB_SETTOPINDEX",
		"LB_GETCOUNT",
		"ERROR_INVALID_RANGE",
		"LB_GETTOPINDEX",
		"H_SCROLL",
		"WM_GETFONT",
		"DT_CALCRECT",
		"DT_SINGLELINE",
		"DT_NOPREFIX",
		"H_SCROLL",
		"LB_GETTEXTLEN",
		"LB_ERR",
		"LB_GETTEXT",
		"LB_ERR",
		"LB_DELETESTRING",
		"LB_ERR",
		"H_SCROLL",
		"right",
		"left",
		"H_SCROLL",
		"LB_SETTOPINDEX",
		"ERROR_ITEM_NOT_REMOVED",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"LB_RESETCONTENT",
		"H_SCROLL",
		"LB_SETHORIZONTALEXTENT",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"ERROR_NULL_ARGUMENT",
		"length",
		"SINGLE",
		"length",
		"LB_GETCOUNT",
		"SINGLE",
		"LB_SETCURSEL",
		"LB_SETSEL",
		"LB_GETTOPINDEX",
		"LB_GETITEMRECT",
		"WM_SETREDRAW",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_GETITEMRECT",
		"LB_SETCURSEL",
		"LB_GETCARETINDEX",
		"LB_SETSEL",
		"MULTI",
		"LB_SETCARETINDEX",
		"LB_SETTOPINDEX",
		"WM_SETREDRAW",
		"SINGLE",
		"LB_GETCOUNT",
		"SINGLE",
		"LB_SELITEMRANGEEX",
		"SINGLE",
		"LB_SETSEL",
		"lpwp",
		"SWP_NOSIZE",
		"right",
		"left",
		"bottom",
		"top",
		"cbSize",
		"sizeof",
		"fMask",
		"SIF_POS",
		"SB_HORZ",
		"nPos",
		"LB_GETCOUNT",
		"LB_SETCARETINDEX",
		"H_SCROLL",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"GWL_WNDPROC",
		"GWL_WNDPROC",
		"WM_SETREDRAW",
		"H_SCROLL",
		"WM_GETFONT",
		"LB_SETHORIZONTALEXTENT",
		"length",
		"LB_RESETCONTENT",
		"LB_INITSTORAGE",
		"LB_ADDSTRING",
		"LB_ERR",
		"LB_ERRSPACE",
		"H_SCROLL",
		"DT_CALCRECT",
		"DT_SINGLELINE",
		"DT_NOPREFIX",
		"right",
		"left",
		"H_SCROLL",
		"LB_SETHORIZONTALEXTENT",
		"WM_SETREDRAW",
		"GWL_WNDPROC",
		"length",
		"ERROR_ITEM_NOT_ADDED",
		"WM_GETFONT",
		"LB_GETCOUNT",
		"DT_CALCRECT",
		"DT_SINGLELINE",
		"DT_NOPREFIX",
		"LB_GETTEXTLEN",
		"LB_ERR",
		"LB_GETTEXT",
		"LB_ERR",
		"right",
		"left",
		"LB_SETHORIZONTALEXTENT",
		"WM_GETFONT",
		"DT_CALCRECT",
		"DT_SINGLELINE",
		"DT_NOPREFIX",
		"right",
		"left",
		"LB_GETHORIZONTALEXTENT",
		"LB_SETHORIZONTALEXTENT",
		"ERROR_NULL_ARGUMENT",
		"length",
		"SINGLE",
		"MULTI",
		"ERROR_NULL_ARGUMENT",
		"length",
		"SINGLE",
		"SINGLE",
		"MULTI",
		"MULTI",
		"SINGLE",
		"LB_GETCOUNT",
		"SINGLE",
		"LB_SETTOPINDEX",
		"LB_ERR",
		"LB_GETCOUNT",
		"LB_SETTOPINDEX",
		"SINGLE",
		"LB_GETCURSEL",
		"LB_GETSELITEMS",
		"LB_GETCOUNT",
		"LB_GETITEMHEIGHT",
		"LB_GETTOPINDEX",
		"bottom",
		"LB_SETTOPINDEX",
		"LBS_NOTIFY",
		"LBS_NOINTEGRALHEIGHT",
		"SINGLE",
		"MULTI",
		"SIMPLE",
		"LBS_MULTIPLESEL",
		"LBS_EXTENDEDSEL",
		"LBN_SELCHANGE",
		"Selection",
		"LBN_DBLCLK",
		"DefaultSelection",
		"parent",
		"style",
		"string",
		"string",
		"index",
		"listener",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"wHint",
		"hHint",
		"changed",
		"indices",
		"index",
		"start",
		"end",
		"index",
		"string",
		"string",
		"start",
		"index",
		"indices",
		"index",
		"start",
		"end",
		"string",
		"listener",
		"indices",
		"indices",
		"scroll",
		"index",
		"index",
		"scroll",
		"start",
		"end",
		"start",
		"end",
		"scroll",
		"x",
		"y",
		"width",
		"height",
		"flags",
		"index",
		"font",
		"index",
		"string",
		"items",
		"buffer",
		"grow",
		"newWidth",
		"grow",
		"indices",
		"items",
		"index",
		"start",
		"end",
		"index",
		"wParam",
		"lParam"
	],
	"extendORImplementFiles":[
		"Scrollable"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.events"
	],
	"methods":[
		"add",
		"add",
		"addSelectionListener",
		"callWindowProc",
		"checkStyle",
		"computeSize",
		"defaultBackground",
		"deselect",
		"deselect",
		"deselect",
		"deselectAll",
		"getFocusIndex",
		"getItem",
		"getItemCount",
		"getItemHeight",
		"getItems",
		"getSelection",
		"getSelectionCount",
		"getSelectionIndex",
		"getSelectionIndices",
		"getTopIndex",
		"indexOf",
		"indexOf",
		"isSelected",
		"remove",
		"remove",
		"remove",
		"remove",
		"removeAll",
		"removeSelectionListener",
		"select",
		"select",
		"select",
		"select",
		"select",
		"select",
		"selectAll",
		"setBounds",
		"setFocusIndex",
		"setFont",
		"setItem",
		"setItems",
		"setScrollWidth",
		"setScrollWidth",
		"setScrollWidth",
		"setSelection",
		"setSelection",
		"setSelection",
		"setSelection",
		"setTopIndex",
		"showSelection",
		"widgetStyle",
		"windowClass",
		"windowProc",
		"wmCommandChild",
		"GetClassInfo",
		"checkStyle",
		"checkWidget",
		"error",
		"getCodePage",
		"SendMessage",
		"error",
		"error",
		"setScrollWidth",
		"checkWidget",
		"error",
		"error",
		"getCodePage",
		"SendMessage",
		"error",
		"SendMessage",
		"error",
		"error",
		"setScrollWidth",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"CallWindowProc",
		"checkBits",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"GetDC",
		"SendMessage",
		"SelectObject",
		"getCodePage",
		"SendMessage",
		"length",
		"SendMessage",
		"DrawText",
		"max",
		"SelectObject",
		"ReleaseDC",
		"SendMessage",
		"SendMessage",
		"getBorderWidth",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"GetSysColor",
		"checkWidget",
		"error",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"min",
		"max",
		"min",
		"max",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"getCodePage",
		"SendMessage",
		"toString",
		"SendMessage",
		"error",
		"error",
		"checkWidget",
		"SendMessage",
		"error",
		"checkWidget",
		"SendMessage",
		"error",
		"checkWidget",
		"getItemCount",
		"getItem",
		"checkWidget",
		"getSelectionIndices",
		"getItem",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"error",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"error",
		"SendMessage",
		"SendMessage",
		"error",
		"SendMessage",
		"error",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"error",
		"SendMessage",
		"error",
		"checkWidget",
		"SendMessage",
		"indexOf",
		"checkWidget",
		"error",
		"length",
		"getItemCount",
		"equals",
		"getItem",
		"SendMessage",
		"getCodePage",
		"SendMessage",
		"equals",
		"getItem",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"error",
		"arraycopy",
		"sort",
		"SendMessage",
		"error",
		"SendMessage",
		"GetDC",
		"SendMessage",
		"SelectObject",
		"getCodePage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"DrawText",
		"max",
		"SelectObject",
		"ReleaseDC",
		"setScrollWidth",
		"SendMessage",
		"error",
		"checkWidget",
		"SendMessage",
		"error",
		"getCodePage",
		"SendMessage",
		"error",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"error",
		"error",
		"setScrollWidth",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"error",
		"removeAll",
		"SendMessage",
		"GetDC",
		"SendMessage",
		"SelectObject",
		"getCodePage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"DrawText",
		"max",
		"SelectObject",
		"ReleaseDC",
		"setScrollWidth",
		"SendMessage",
		"error",
		"checkWidget",
		"error",
		"indexOf",
		"error",
		"remove",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"error",
		"select",
		"select",
		"showSelection",
		"checkWidget",
		"select",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"IsWindowVisible",
		"UpdateWindow",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"ValidateRect",
		"InvalidateRect",
		"InvalidateRect",
		"checkWidget",
		"SendMessage",
		"max",
		"min",
		"select",
		"select",
		"select",
		"SendMessage",
		"showSelection",
		"checkWidget",
		"SendMessage",
		"setBounds",
		"GetWindowRect",
		"setBounds",
		"GetScrollInfo",
		"InvalidateRect",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"setFont",
		"setScrollWidth",
		"checkWidget",
		"error",
		"getTopIndex",
		"isSelected",
		"remove",
		"add",
		"select",
		"setTopIndex",
		"checkWidget",
		"error",
		"error",
		"GetWindowLong",
		"SetWindowLong",
		"IsWindowVisible",
		"SendMessage",
		"GetDC",
		"SendMessage",
		"SelectObject",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"getCodePage",
		"SendMessage",
		"DrawText",
		"length",
		"max",
		"SelectObject",
		"ReleaseDC",
		"SendMessage",
		"SendMessage",
		"SetWindowLong",
		"error",
		"GetDC",
		"SendMessage",
		"SelectObject",
		"getCodePage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"DrawText",
		"max",
		"SelectObject",
		"ReleaseDC",
		"SendMessage",
		"GetDC",
		"SendMessage",
		"SelectObject",
		"DrawText",
		"SelectObject",
		"ReleaseDC",
		"setScrollWidth",
		"SendMessage",
		"SendMessage",
		"setScrollWidth",
		"checkWidget",
		"error",
		"deselectAll",
		"select",
		"setFocusIndex",
		"checkWidget",
		"error",
		"deselectAll",
		"indexOf",
		"select",
		"isSelected",
		"showSelection",
		"setFocusIndex",
		"checkWidget",
		"deselectAll",
		"select",
		"setFocusIndex",
		"checkWidget",
		"deselectAll",
		"SendMessage",
		"max",
		"min",
		"select",
		"select",
		"setFocusIndex",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"min",
		"max",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"forceResize",
		"GetClientRect",
		"SendMessage",
		"max",
		"min",
		"min",
		"max",
		"SendMessage",
		"widgetStyle",
		"postEvent",
		"postEvent",
		"wmCommandChild",
		"TCHAR",
		"WNDCLASS",
		"TCHAR",
		"TCHAR",
		"TypedListener",
		"RECT",
		"TCHAR",
		"TCHAR",
		"Point",
		"TCHAR",
		"TCHAR",
		"RECT",
		"TCHAR",
		"TCHAR",
		"RECT",
		"TCHAR",
		"RECT",
		"RECT",
		"RECT",
		"SCROLLINFO",
		"RECT",
		"TCHAR",
		"RECT",
		"TCHAR",
		"RECT",
		"RECT"
	],
	"methodsBody":{
		"public void selectAll()":{
			"methodBody":"{\n    checkWidget();\n    if ((style & SWT.SINGLE) != 0)\n        return;\n    OS.SendMessage(handle, OS.LB_SETSEL, 1, -1);\n}",
			"comments":"/**\n* Selects all of the items in the receiver.\n* <p>\n* If the receiver is single-select, do nothing.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void selectAll()"
		},
		"LRESULT wmCommandChild(int wParam, int lParam)":{
			"methodBody":"{\n    int code = wParam >> 16;\n    switch(code) {\n        case OS.LBN_SELCHANGE:\n            postEvent(SWT.Selection);\n            break;\n        case OS.LBN_DBLCLK:\n            postEvent(SWT.DefaultSelection);\n            break;\n    }\n    return super.wmCommandChild(wParam, lParam);\n}",
			"comments":"",
			"methodName":"LRESULT wmCommandChild(int wParam, int lParam)"
		},
		"public void setSelection(String[] items)":{
			"methodBody":"{\n    checkWidget();\n    if (items == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    deselectAll();\n    int length = items.length;\n    if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1))\n        return;\n    int focusIndex = -1;\n    for (int i = length - 1; i >= 0; --i) {\n        String string = items[i];\n        int index = 0;\n        if (string != null) {\n            int localFocus = -1;\n            while ((index = indexOf(string, index)) != -1) {\n                if (localFocus == -1)\n                    localFocus = index;\n                select(index, false);\n                if ((style & SWT.SINGLE) != 0 && isSelected(index)) {\n                    showSelection();\n                    return;\n                }\n                index++;\n            }\n            if (localFocus != -1)\n                focusIndex = localFocus;\n        }\n    }\n    if ((style & SWT.MULTI) != 0) {\n        if (focusIndex >= 0)\n            setFocusIndex(focusIndex);\n    }\n}",
			"comments":"/**\n* Sets the receiver's selection to be the given array of items.\n* The current selection is cleared before the new items are selected.\n* <p>\n* Items that are not in the receiver are ignored.\n* If the receiver is single-select and multiple items are specified,\n* then all items are ignored.\n*\n* @param items the array of items\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the array of items is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see List#deselectAll()\n* @see List#select(int[])\n* @see List#setSelection(int[])\n*/\n",
			"methodName":"public void setSelection(String[] items)"
		},
		"public void add(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TCHAR buffer = new TCHAR(getCodePage(), string, true);\n    int result = OS.SendMessage(handle, OS.LB_ADDSTRING, 0, buffer);\n    if (result == OS.LB_ERR)\n        error(SWT.ERROR_ITEM_NOT_ADDED);\n    if (result == OS.LB_ERRSPACE)\n        error(SWT.ERROR_ITEM_NOT_ADDED);\n    if ((style & SWT.H_SCROLL) != 0)\n        setScrollWidth(buffer, true);\n}",
			"comments":"/**\n* Adds the argument to the end of the receiver's list.\n*\n* @param string the new item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see #add(String,int)\n*/\n",
			"methodName":"public void add(String string)"
		},
		"public String getItem(int index)":{
			"methodBody":"{\n    checkWidget();\n    int length = OS.SendMessage(handle, OS.LB_GETTEXTLEN, index, 0);\n    if (length != OS.LB_ERR) {\n        TCHAR buffer = new TCHAR(getCodePage(), length + 1);\n        int result = OS.SendMessage(handle, OS.LB_GETTEXT, index, buffer);\n        if (result != OS.LB_ERR)\n            return buffer.toString(0, length);\n    }\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (0 <= index && index < count) {\n        error(SWT.ERROR_CANNOT_GET_ITEM);\n    } else {\n        error(SWT.ERROR_INVALID_RANGE);\n    }\n    return \"\";\n}",
			"comments":"/**\n* Returns the item at the given, zero-relative index in the\n* receiver. Throws an exception if the index is out of range.\n*\n* @param index the index of the item to return\n* @return the item at the given index\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String getItem(int index)"
		},
		"public void setSelection(int start, int end)":{
			"methodBody":"{\n    checkWidget();\n    deselectAll();\n    if (end < 0 || start > end || ((style & SWT.SINGLE) != 0 && start != end))\n        return;\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (count == 0 || start >= count)\n        return;\n    start = Math.max(0, start);\n    end = Math.min(end, count - 1);\n    if ((style & SWT.SINGLE) != 0) {\n        select(start, true);\n    } else {\n        select(start, end, true);\n        setFocusIndex(start);\n    }\n}",
			"comments":"/**\n* Selects the items in the range specified by the given zero-relative\n* indices in the receiver. The range of indices is inclusive.\n* The current selection is cleared before the new items are selected.\n* <p>\n* Indices that are out of range are ignored and no items will be selected\n* if start is greater than end.\n* If the receiver is single-select and there is more than one item in the\n* given range, then all indices are ignored.\n*\n* @param start the start index of the items to select\n* @param end the end index of the items to select\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see List#deselectAll()\n* @see List#select(int,int)\n*/\n",
			"methodName":"public void setSelection(int start, int end)"
		},
		"public void setSelection(int index)":{
			"methodBody":"{\n    checkWidget();\n    deselectAll();\n    select(index, true);\n    if ((style & SWT.MULTI) != 0) {\n        if (index >= 0)\n            setFocusIndex(index);\n    }\n}",
			"comments":"/**\n* Selects the item at the given zero-relative index in the receiver.\n* If the item at the index was already selected, it remains selected.\n* The current selection is first cleared, then the new item is selected.\n* Indices that are out of range are ignored.\n*\n* @param index the index of the item to select\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n* @see List#deselectAll()\n* @see List#select(int)\n*/\n",
			"methodName":"public void setSelection(int index)"
		},
		"void setFocusIndex(int index)":{
			"methodBody":"{\n    \n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (!(0 <= index && index < count))\n        return;\n    OS.SendMessage(handle, OS.LB_SETCARETINDEX, index, 0);\n}",
			"comments":"//\tcheckWidget ();\n",
			"methodName":"void setFocusIndex(int index)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Selection, listener);\n    eventTable.unhook(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the receiver's selection changes.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"public int indexOf(String string)":{
			"methodBody":"{\n    return indexOf(string, 0);\n}",
			"comments":"/**\n* Gets the index of an item.\n* <p>\n* The list is searched starting at 0 until an\n* item is found that is equal to the search item.\n* If no item is found, -1 is returned.  Indexing\n* is zero based.\n*\n* @param string the search item\n* @return the index of the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int indexOf(String string)"
		},
		"public void select(int index)":{
			"methodBody":"{\n    checkWidget();\n    select(index, false);\n}",
			"comments":"/**\n* Selects the item at the given zero-relative index in the receiver's\n* list.  If the item at the index was already selected, it remains\n* selected. Indices that are out of range are ignored.\n*\n* @param index the index of the item to select\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void select(int index)"
		},
		"public int getFocusIndex()":{
			"methodBody":"{\n    checkWidget();\n    int result = OS.SendMessage(handle, OS.LB_GETCARETINDEX, 0, 0);\n    if (result == 0) {\n        int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n        if (count == 0)\n            return -1;\n    }\n    return result;\n}",
			"comments":"/**\n* Returns the zero-relative index of the item which currently\n* has the focus in the receiver, or -1 if no item has focus.\n*\n* @return the index of the selected item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getFocusIndex()"
		},
		"public int getTopIndex()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0);\n}",
			"comments":"/**\n* Returns the zero-relative index of the item which is currently\n* at the top of the receiver. This index can change when items are\n* scrolled or new items are added or removed.\n*\n* @return the index of the top item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getTopIndex()"
		},
		"void select(int index, boolean scroll)":{
			"methodBody":"{\n    if (index < 0)\n        return;\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (index >= count)\n        return;\n    if (scroll) {\n        if ((style & SWT.SINGLE) != 0) {\n            OS.SendMessage(handle, OS.LB_SETCURSEL, index, 0);\n        } else {\n            OS.SendMessage(handle, OS.LB_SETSEL, 1, index);\n        }\n        return;\n    }\n    int topIndex = OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0);\n    RECT itemRect = new RECT(), selectedRect = null;\n    OS.SendMessage(handle, OS.LB_GETITEMRECT, index, itemRect);\n    boolean redraw = drawCount == 0 && OS.IsWindowVisible(handle);\n    if (redraw) {\n        OS.UpdateWindow(handle);\n        OS.SendMessage(handle, OS.WM_SETREDRAW, 0, 0);\n    }\n    int focusIndex = -1;\n    if ((style & SWT.SINGLE) != 0) {\n        int oldIndex = OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n        if (oldIndex != -1) {\n            selectedRect = new RECT();\n            OS.SendMessage(handle, OS.LB_GETITEMRECT, oldIndex, selectedRect);\n        }\n        OS.SendMessage(handle, OS.LB_SETCURSEL, index, 0);\n    } else {\n        focusIndex = OS.SendMessage(handle, OS.LB_GETCARETINDEX, 0, 0);\n        OS.SendMessage(handle, OS.LB_SETSEL, 1, index);\n    }\n    if ((style & SWT.MULTI) != 0) {\n        if (focusIndex != -1) {\n            OS.SendMessage(handle, OS.LB_SETCARETINDEX, focusIndex, 0);\n        }\n    }\n    OS.SendMessage(handle, OS.LB_SETTOPINDEX, topIndex, 0);\n    if (redraw) {\n        OS.SendMessage(handle, OS.WM_SETREDRAW, 1, 0);\n        OS.ValidateRect(handle, null);\n        OS.InvalidateRect(handle, itemRect, true);\n        if (selectedRect != null) {\n            OS.InvalidateRect(handle, selectedRect, true);\n        }\n    }\n}",
			"comments":"",
			"methodName":"void select(int index, boolean scroll)"
		},
		"public void setSelection(int[] indices)":{
			"methodBody":"{\n    checkWidget();\n    if (indices == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    deselectAll();\n    int length = indices.length;\n    if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1))\n        return;\n    select(indices, true);\n    if ((style & SWT.MULTI) != 0) {\n        int focusIndex = indices[0];\n        if (focusIndex >= 0)\n            setFocusIndex(focusIndex);\n    }\n}",
			"comments":"/**\n* Selects the items at the given zero-relative indices in the receiver.\n* The current selection is cleared before the new items are selected.\n* <p>\n* Indices that are out of range and duplicate indices are ignored.\n* If the receiver is single-select and multiple indices are specified,\n* then all indices are ignored.\n*\n* @param indices the indices of the items to select\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the array of indices is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see List#deselectAll()\n* @see List#select(int[])\n*/\n",
			"methodName":"public void setSelection(int[] indices)"
		},
		"int defaultBackground()":{
			"methodBody":"{\n    return OS.GetSysColor(OS.COLOR_WINDOW);\n}",
			"comments":"",
			"methodName":"int defaultBackground()"
		},
		"public String[] getItems()":{
			"methodBody":"{\n    checkWidget();\n    int count = getItemCount();\n    String[] result = new String[count];\n    for (int i = 0; i < count; i++) result[i] = getItem(i);\n    return result;\n}",
			"comments":"/**\n* Returns a (possibly empty) array of <code>String</code>s which\n* are the items in the receiver.\n* <p>\n* Note: This is not the actual structure used by the receiver\n* to maintain its list of items, so modifying the array will\n* not affect the receiver.\n* </p>\n*\n* @return the items in the receiver's list\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String[] getItems()"
		},
		"public void remove(int start, int end)":{
			"methodBody":"{\n    checkWidget();\n    if (start > end)\n        return;\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (!(0 <= start && start <= end && end < count)) {\n        error(SWT.ERROR_INVALID_RANGE);\n    }\n    if (start == 0 && end == count - 1) {\n        removeAll();\n        return;\n    }\n    int topIndex = OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0);\n    RECT rect = null;\n    int hDC = 0, oldFont = 0, newFont = 0, newWidth = 0;\n    if ((style & SWT.H_SCROLL) != 0) {\n        rect = new RECT();\n        hDC = OS.GetDC(handle);\n        newFont = OS.SendMessage(handle, OS.WM_GETFONT, 0, 0);\n        if (newFont != 0)\n            oldFont = OS.SelectObject(hDC, newFont);\n    }\n    int cp = getCodePage();\n    int index = start;\n    int flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;\n    while (index <= end) {\n        TCHAR buffer = null;\n        if ((style & SWT.H_SCROLL) != 0) {\n            int length = OS.SendMessage(handle, OS.LB_GETTEXTLEN, start, 0);\n            if (length == OS.LB_ERR)\n                break;\n            buffer = new TCHAR(cp, length + 1);\n            int result = OS.SendMessage(handle, OS.LB_GETTEXT, start, buffer);\n            if (result == OS.LB_ERR)\n                break;\n        }\n        int result = OS.SendMessage(handle, OS.LB_DELETESTRING, start, 0);\n        if (result == OS.LB_ERR)\n            break;\n        if ((style & SWT.H_SCROLL) != 0) {\n            OS.DrawText(hDC, buffer, -1, rect, flags);\n            newWidth = Math.max(newWidth, rect.right - rect.left);\n        }\n        index++;\n    }\n    if ((style & SWT.H_SCROLL) != 0) {\n        if (newFont != 0)\n            OS.SelectObject(hDC, oldFont);\n        OS.ReleaseDC(handle, hDC);\n        setScrollWidth(newWidth, false);\n    }\n    if (end < topIndex) {\n        topIndex -= end - start + 1;\n        OS.SendMessage(handle, OS.LB_SETTOPINDEX, topIndex, 0);\n    }\n    if (index <= end)\n        error(SWT.ERROR_ITEM_NOT_REMOVED);\n}",
			"comments":"/**\n* Removes the items from the receiver which are\n* between the given zero-relative start and end\n* indices (inclusive).\n*\n* @param start the start of the range\n* @param end the end of the range\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void remove(int start, int end)"
		},
		"public void remove(int index)":{
			"methodBody":"{\n    checkWidget();\n    TCHAR buffer = null;\n    if ((style & SWT.H_SCROLL) != 0) {\n        int length = OS.SendMessage(handle, OS.LB_GETTEXTLEN, index, 0);\n        if (length == OS.LB_ERR)\n            error(SWT.ERROR_ITEM_NOT_REMOVED);\n        buffer = new TCHAR(getCodePage(), length + 1);\n        int result = OS.SendMessage(handle, OS.LB_GETTEXT, index, buffer);\n        if (result == OS.LB_ERR)\n            error(SWT.ERROR_ITEM_NOT_REMOVED);\n    }\n    int topIndex = OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0);\n    int result = OS.SendMessage(handle, OS.LB_DELETESTRING, index, 0);\n    if (result == OS.LB_ERR) {\n        int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n        if (0 <= index && index < count)\n            error(SWT.ERROR_ITEM_NOT_REMOVED);\n        error(SWT.ERROR_INVALID_RANGE);\n    }\n    if ((style & SWT.H_SCROLL) != 0)\n        setScrollWidth(buffer, false);\n    if (index < topIndex) {\n        OS.SendMessage(handle, OS.LB_SETTOPINDEX, topIndex - 1, 0);\n    }\n}",
			"comments":"/**\n* Removes the item from the receiver at the given\n* zero-relative index.\n*\n* @param index the index for the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void remove(int index)"
		},
		"public void add(String string, int index)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (index == -1)\n        error(SWT.ERROR_INVALID_RANGE);\n    TCHAR buffer = new TCHAR(getCodePage(), string, true);\n    int result = OS.SendMessage(handle, OS.LB_INSERTSTRING, index, buffer);\n    if (result == OS.LB_ERRSPACE)\n        error(SWT.ERROR_ITEM_NOT_ADDED);\n    if (result == OS.LB_ERR) {\n        int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n        if (0 <= index && index <= count) {\n            error(SWT.ERROR_ITEM_NOT_ADDED);\n        } else {\n            error(SWT.ERROR_INVALID_RANGE);\n        }\n    }\n    if ((style & SWT.H_SCROLL) != 0)\n        setScrollWidth(buffer, true);\n}",
			"comments":"/**\n* Adds the argument to the receiver's list at the given\n* zero-relative index.\n* <p>\n* Note: To add an item at the end of the list, use the\n* result of calling <code>getItemCount()</code> as the\n* index or use <code>add(String)</code>.\n* </p>\n*\n* @param string the new item\n* @param index the index for the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see #add(String)\n*/\n",
			"methodName":"public void add(String string, int index)"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    checkWidget();\n    super.setFont(font);\n    if ((style & SWT.H_SCROLL) != 0)\n        setScrollWidth();\n}",
			"comments":"",
			"methodName":"public void setFont(Font font)"
		},
		"int windowProc()":{
			"methodBody":"{\n    return ListProc;\n}",
			"comments":"",
			"methodName":"int windowProc()"
		},
		"public int getSelectionCount()":{
			"methodBody":"{\n    checkWidget();\n    if ((style & SWT.SINGLE) != 0) {\n        int result = OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n        if (result == OS.LB_ERR)\n            return 0;\n        return 1;\n    }\n    int result = OS.SendMessage(handle, OS.LB_GETSELCOUNT, 0, 0);\n    if (result == OS.LB_ERR)\n        error(SWT.ERROR_CANNOT_GET_COUNT);\n    return result;\n}",
			"comments":"/**\n* Returns the number of selected items contained in the receiver.\n*\n* @return the number of selected items\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getSelectionCount()"
		},
		"public void removeAll()":{
			"methodBody":"{\n    checkWidget();\n    OS.SendMessage(handle, OS.LB_RESETCONTENT, 0, 0);\n    if ((style & SWT.H_SCROLL) != 0) {\n        OS.SendMessage(handle, OS.LB_SETHORIZONTALEXTENT, 0, 0);\n    }\n}",
			"comments":"/**\n* Removes all of the items from the receiver.\n* <p>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void removeAll()"
		},
		"void setScrollWidth()":{
			"methodBody":"{\n    int newWidth = 0;\n    RECT rect = new RECT();\n    int newFont, oldFont = 0;\n    int hDC = OS.GetDC(handle);\n    newFont = OS.SendMessage(handle, OS.WM_GETFONT, 0, 0);\n    if (newFont != 0)\n        oldFont = OS.SelectObject(hDC, newFont);\n    int cp = getCodePage();\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    int flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;\n    for (int i = 0; i < count; i++) {\n        int length = OS.SendMessage(handle, OS.LB_GETTEXTLEN, i, 0);\n        if (length != OS.LB_ERR) {\n            TCHAR buffer = new TCHAR(cp, length + 1);\n            int result = OS.SendMessage(handle, OS.LB_GETTEXT, i, buffer);\n            if (result != OS.LB_ERR) {\n                OS.DrawText(hDC, buffer, -1, rect, flags);\n                newWidth = Math.max(newWidth, rect.right - rect.left);\n            }\n        }\n    }\n    if (newFont != 0)\n        OS.SelectObject(hDC, oldFont);\n    OS.ReleaseDC(handle, hDC);\n    OS.SendMessage(handle, OS.LB_SETHORIZONTALEXTENT, newWidth + 3, 0);\n}",
			"comments":"",
			"methodName":"void setScrollWidth()"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the receiver's selection changes, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* <code>widgetSelected</code> is called when the selection changes.\n* <code>widgetDefaultSelected</code> is typically called when an item is double-clicked.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"void setBounds(int x, int y, int width, int height, int flags)":{
			"methodBody":"{\n    \n    if (parent.lpwp != null || (flags & OS.SWP_NOSIZE) != 0) {\n        super.setBounds(x, y, width, height, flags);\n        return;\n    }\n    RECT rect = new RECT();\n    OS.GetWindowRect(handle, rect);\n    int oldWidth = rect.right - rect.left;\n    int oldHeight = rect.bottom - rect.top;\n    super.setBounds(x, y, width, height, flags);\n    if (oldWidth == width && oldHeight == height)\n        return;\n    SCROLLINFO info = new SCROLLINFO();\n    info.cbSize = SCROLLINFO.sizeof;\n    info.fMask = OS.SIF_POS;\n    if (!OS.GetScrollInfo(handle, OS.SB_HORZ, info))\n        return;\n    if (info.nPos != 0)\n        OS.InvalidateRect(handle, null, true);\n}",
			"comments":"/*\n* Bug in Windows.  If the receiver is scrolled horizontally\n* and is resized, the list does not redraw properly.  The fix\n* is to redraw the control when resizing is not deferred and\n* the new size is different from the previous size.\n*/\n",
			"methodName":"void setBounds(int x, int y, int width, int height, int flags)"
		},
		"public void deselect(int[] indices)":{
			"methodBody":"{\n    checkWidget();\n    if (indices == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (indices.length == 0)\n        return;\n    if ((style & SWT.SINGLE) != 0) {\n        int oldIndex = OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n        if (oldIndex == OS.LB_ERR)\n            return;\n        for (int i = 0; i < indices.length; i++) {\n            if (oldIndex == indices[i]) {\n                OS.SendMessage(handle, OS.LB_SETCURSEL, -1, 0);\n                return;\n            }\n        }\n        return;\n    }\n    for (int i = 0; i < indices.length; i++) {\n        int index = indices[i];\n        if (index != -1) {\n            OS.SendMessage(handle, OS.LB_SETSEL, 0, index);\n        }\n    }\n}",
			"comments":"/**\n* Deselects the items at the given zero-relative indices in the receiver.\n* If the item at the given zero-relative index in the receiver\n* is selected, it is deselected.  If the item at the index\n* was not selected, it remains deselected. Indices that are out\n* of range and duplicate indices are ignored.\n*\n* @param indices the array of indices for the items to deselect\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the set of indices is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void deselect(int[] indices)"
		},
		"public void setItems(String[] items)":{
			"methodBody":"{\n    checkWidget();\n    if (items == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    for (int i = 0; i < items.length; i++) {\n        if (items[i] == null)\n            error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int oldProc = OS.GetWindowLong(handle, OS.GWL_WNDPROC);\n    OS.SetWindowLong(handle, OS.GWL_WNDPROC, ListProc);\n    boolean redraw = drawCount == 0 && OS.IsWindowVisible(handle);\n    if (redraw) {\n        OS.SendMessage(handle, OS.WM_SETREDRAW, 0, 0);\n    }\n    RECT rect = null;\n    int hDC = 0, oldFont = 0, newFont = 0, newWidth = 0;\n    if ((style & SWT.H_SCROLL) != 0) {\n        rect = new RECT();\n        hDC = OS.GetDC(handle);\n        newFont = OS.SendMessage(handle, OS.WM_GETFONT, 0, 0);\n        if (newFont != 0)\n            oldFont = OS.SelectObject(hDC, newFont);\n        OS.SendMessage(handle, OS.LB_SETHORIZONTALEXTENT, 0, 0);\n    }\n    int length = items.length;\n    OS.SendMessage(handle, OS.LB_RESETCONTENT, 0, 0);\n    OS.SendMessage(handle, OS.LB_INITSTORAGE, length, length * 32);\n    int index = 0;\n    int cp = getCodePage();\n    while (index < length) {\n        String string = items[index];\n        TCHAR buffer = new TCHAR(cp, string, true);\n        int result = OS.SendMessage(handle, OS.LB_ADDSTRING, 0, buffer);\n        if (result == OS.LB_ERR || result == OS.LB_ERRSPACE)\n            break;\n        if ((style & SWT.H_SCROLL) != 0) {\n            int flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;\n            OS.DrawText(hDC, buffer, buffer.length(), rect, flags);\n            newWidth = Math.max(newWidth, rect.right - rect.left);\n        }\n        index++;\n    }\n    if ((style & SWT.H_SCROLL) != 0) {\n        if (newFont != 0)\n            OS.SelectObject(hDC, oldFont);\n        OS.ReleaseDC(handle, hDC);\n        OS.SendMessage(handle, OS.LB_SETHORIZONTALEXTENT, newWidth + 3, 0);\n    }\n    if (redraw) {\n        OS.SendMessage(handle, OS.WM_SETREDRAW, 1, 0);\n    \n    \n    \n    }\n    OS.SetWindowLong(handle, OS.GWL_WNDPROC, oldProc);\n    if (index < items.length)\n        error(SWT.ERROR_ITEM_NOT_ADDED);\n}",
			"comments":"/**\n* Sets the receiver's items to be the given array of items.\n*\n* @param items the array of items\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the items array is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if an item in the items array is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* This code is intentionally commented.  The window proc\n* for the list box implements WM_SETREDRAW to invalidate\n* and erase the widget.  This is undocumented behavior.\n* The commented code below shows what is actually happening\n* and reminds us that we are relying on this undocumented\n* behavior.\n*/\n//\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE;\n//\t\tOS.RedrawWindow (handle, null, 0, flags);\n",
			"methodName":"public void setItems(String[] items)"
		},
		"int widgetStyle()":{
			"methodBody":"{\n    int bits = super.widgetStyle() | OS.LBS_NOTIFY | OS.LBS_NOINTEGRALHEIGHT;\n    if ((style & SWT.SINGLE) != 0)\n        return bits;\n    if ((style & SWT.MULTI) != 0) {\n        if ((style & SWT.SIMPLE) != 0)\n            return bits | OS.LBS_MULTIPLESEL;\n        return bits | OS.LBS_EXTENDEDSEL;\n    }\n    return bits;\n}",
			"comments":"",
			"methodName":"int widgetStyle()"
		},
		"public int getItemCount()":{
			"methodBody":"{\n    checkWidget();\n    int result = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (result == OS.LB_ERR)\n        error(SWT.ERROR_CANNOT_GET_COUNT);\n    return result;\n}",
			"comments":"/**\n* Returns the number of items contained in the receiver.\n*\n* @return the number of items\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getItemCount()"
		},
		"public int[] getSelectionIndices()":{
			"methodBody":"{\n    checkWidget();\n    if ((style & SWT.SINGLE) != 0) {\n        int result = OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n        if (result == OS.LB_ERR)\n            return new int[0];\n        return new int[] { result };\n    }\n    int length = OS.SendMessage(handle, OS.LB_GETSELCOUNT, 0, 0);\n    if (length == OS.LB_ERR)\n        error(SWT.ERROR_CANNOT_GET_SELECTION);\n    int[] indices = new int[length];\n    int result = OS.SendMessage(handle, OS.LB_GETSELITEMS, length, indices);\n    if (result != length)\n        error(SWT.ERROR_CANNOT_GET_SELECTION);\n    return indices;\n}",
			"comments":"/**\n* Returns the zero-relative indices of the items which are currently\n* selected in the receiver.  The order of the indices is unspecified.\n* The array is empty if no items are selected.\n* <p>\n* Note: This is not the actual structure used by the receiver\n* to maintain its selection, so modifying the array will\n* not affect the receiver.\n* </p>\n* @return the array of indices of the selected items\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int[] getSelectionIndices()"
		},
		"public void showSelection()":{
			"methodBody":"{\n    checkWidget();\n    int index;\n    if ((style & SWT.SINGLE) != 0) {\n        index = OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n    } else {\n        int[] indices = new int[1];\n        int result = OS.SendMessage(handle, OS.LB_GETSELITEMS, 1, indices);\n        index = indices[0];\n        if (result != 1)\n            index = -1;\n    }\n    if (index == -1)\n        return;\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (count == 0)\n        return;\n    int height = OS.SendMessage(handle, OS.LB_GETITEMHEIGHT, 0, 0);\n    forceResize();\n    RECT rect = new RECT();\n    OS.GetClientRect(handle, rect);\n    int topIndex = OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0);\n    int visibleCount = Math.max(rect.bottom / height, 1);\n    int bottomIndex = Math.min(topIndex + visibleCount, count) - 1;\n    if (topIndex <= index && index <= bottomIndex)\n        return;\n    int newTop = Math.min(Math.max(index - (visibleCount / 2), 0), count - 1);\n    OS.SendMessage(handle, OS.LB_SETTOPINDEX, newTop, 0);\n}",
			"comments":"/**\n* Shows the selection.  If the selection is already showing in the receiver,\n* this method simply returns.  Otherwise, the items are scrolled until\n* the selection is visible.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void showSelection()"
		},
		"public int getItemHeight()":{
			"methodBody":"{\n    checkWidget();\n    int result = OS.SendMessage(handle, OS.LB_GETITEMHEIGHT, 0, 0);\n    if (result == OS.LB_ERR)\n        error(SWT.ERROR_CANNOT_GET_ITEM_HEIGHT);\n    return result;\n}",
			"comments":"/**\n* Returns the height of the area which would be used to\n* display <em>one</em> of the items in the list.\n*\n* @return the height of one item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getItemHeight()"
		},
		"public void deselectAll()":{
			"methodBody":"{\n    checkWidget();\n    if ((style & SWT.SINGLE) != 0) {\n        OS.SendMessage(handle, OS.LB_SETCURSEL, -1, 0);\n    } else {\n        OS.SendMessage(handle, OS.LB_SETSEL, 0, -1);\n    }\n}",
			"comments":"/**\n* Deselects all selected items in the receiver.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void deselectAll()"
		},
		"public void remove(int[] indices)":{
			"methodBody":"{\n    checkWidget();\n    if (indices == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (indices.length == 0)\n        return;\n    int[] newIndices = new int[indices.length];\n    System.arraycopy(indices, 0, newIndices, 0, indices.length);\n    sort(newIndices);\n    int start = newIndices[newIndices.length - 1], end = newIndices[0];\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (!(0 <= start && start <= end && end < count)) {\n        error(SWT.ERROR_INVALID_RANGE);\n    }\n    int topIndex = OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0);\n    RECT rect = null;\n    int hDC = 0, oldFont = 0, newFont = 0, newWidth = 0;\n    if ((style & SWT.H_SCROLL) != 0) {\n        rect = new RECT();\n        hDC = OS.GetDC(handle);\n        newFont = OS.SendMessage(handle, OS.WM_GETFONT, 0, 0);\n        if (newFont != 0)\n            oldFont = OS.SelectObject(hDC, newFont);\n    }\n    int cp = getCodePage();\n    int i = 0, topCount = 0, last = -1;\n    while (i < newIndices.length) {\n        int index = newIndices[i];\n        if (index != last) {\n            TCHAR buffer = null;\n            if ((style & SWT.H_SCROLL) != 0) {\n                int length = OS.SendMessage(handle, OS.LB_GETTEXTLEN, index, 0);\n                if (length == OS.LB_ERR)\n                    break;\n                buffer = new TCHAR(cp, length + 1);\n                int result = OS.SendMessage(handle, OS.LB_GETTEXT, index, buffer);\n                if (result == OS.LB_ERR)\n                    break;\n            }\n            int result = OS.SendMessage(handle, OS.LB_DELETESTRING, index, 0);\n            if (result == OS.LB_ERR)\n                break;\n            if ((style & SWT.H_SCROLL) != 0) {\n                int flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;\n                OS.DrawText(hDC, buffer, -1, rect, flags);\n                newWidth = Math.max(newWidth, rect.right - rect.left);\n            }\n            if (index < topIndex)\n                topCount++;\n            last = index;\n        }\n        i++;\n    }\n    if ((style & SWT.H_SCROLL) != 0) {\n        if (newFont != 0)\n            OS.SelectObject(hDC, oldFont);\n        OS.ReleaseDC(handle, hDC);\n        setScrollWidth(newWidth, false);\n    }\n    if (topCount > 0) {\n        topIndex -= topCount;\n        OS.SendMessage(handle, OS.LB_SETTOPINDEX, topIndex, 0);\n    }\n    if (i < newIndices.length)\n        error(SWT.ERROR_ITEM_NOT_REMOVED);\n}",
			"comments":"/**\n* Removes the items from the receiver at the given\n* zero-relative indices.\n*\n* @param indices the array of indices of the items\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n*    <li>ERROR_NULL_ARGUMENT - if the indices array is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void remove(int[] indices)"
		},
		"void select(int[] indices, boolean scroll)":{
			"methodBody":"{\n    int i = 0;\n    while (i < indices.length) {\n        int index = indices[i];\n        if (index != -1) {\n            select(index, false);\n        }\n        i++;\n    }\n    if (scroll)\n        showSelection();\n}",
			"comments":"",
			"methodName":"void select(int[] indices, boolean scroll)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    return checkBits(style, SWT.SINGLE, SWT.MULTI, 0, 0, 0, 0);\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void remove(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    int index = indexOf(string, 0);\n    if (index == -1)\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    remove(index);\n}",
			"comments":"/**\n* Searches the receiver's list starting at the first item\n* until an item is found that is equal to the argument,\n* and removes that item from the list.\n*\n* @param string the item to remove\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the string is not found in the list</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void remove(String string)"
		},
		"public Point computeSize(int wHint, int hHint, boolean changed)":{
			"methodBody":"{\n    checkWidget();\n    int width = 0, height = 0;\n    if (wHint == SWT.DEFAULT) {\n        if ((style & SWT.H_SCROLL) != 0) {\n            width = OS.SendMessage(handle, OS.LB_GETHORIZONTALEXTENT, 0, 0);\n        } else {\n            int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n            int newFont, oldFont = 0;\n            int hDC = OS.GetDC(handle);\n            newFont = OS.SendMessage(handle, OS.WM_GETFONT, 0, 0);\n            if (newFont != 0)\n                oldFont = OS.SelectObject(hDC, newFont);\n            RECT rect = new RECT();\n            int flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;\n            int cp = getCodePage();\n            TCHAR buffer = new TCHAR(cp, 64 + 1);\n            for (int i = 0; i < count; i++) {\n                int length = OS.SendMessage(handle, OS.LB_GETTEXTLEN, i, 0);\n                if (length != OS.LB_ERR) {\n                    if (length + 1 > buffer.length()) {\n                        buffer = new TCHAR(cp, length + 1);\n                    }\n                    int result = OS.SendMessage(handle, OS.LB_GETTEXT, i, buffer);\n                    if (result != OS.LB_ERR) {\n                        OS.DrawText(hDC, buffer, length, rect, flags);\n                        width = Math.max(width, rect.right - rect.left);\n                    }\n                }\n            }\n            if (newFont != 0)\n                OS.SelectObject(hDC, oldFont);\n            OS.ReleaseDC(handle, hDC);\n        }\n    }\n    if (hHint == SWT.DEFAULT) {\n        int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n        int itemHeight = OS.SendMessage(handle, OS.LB_GETITEMHEIGHT, 0, 0);\n        height = count * itemHeight;\n    }\n    if (width == 0)\n        width = DEFAULT_WIDTH;\n    if (height == 0)\n        height = DEFAULT_HEIGHT;\n    if (wHint != SWT.DEFAULT)\n        width = wHint;\n    if (hHint != SWT.DEFAULT)\n        height = hHint;\n    int border = getBorderWidth();\n    width += border * 2 + 3;\n    height += border * 2;\n    if ((style & SWT.V_SCROLL) != 0) {\n        width += OS.GetSystemMetrics(OS.SM_CXVSCROLL);\n    }\n    if ((style & SWT.H_SCROLL) != 0) {\n        height += OS.GetSystemMetrics(OS.SM_CYHSCROLL);\n    }\n    return new Point(width, height);\n}",
			"comments":"",
			"methodName":"public Point computeSize(int wHint, int hHint, boolean changed)"
		},
		"public int indexOf(String string, int start)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    \n    if (string.length() == 0) {\n        int count = getItemCount();\n        for (int i = start; i < count; i++) {\n            if (string.equals(getItem(i)))\n                return i;\n        }\n        return -1;\n    }\n    \n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (!(0 <= start && start < count))\n        return -1;\n    int index = start - 1, last;\n    TCHAR buffer = new TCHAR(getCodePage(), string, true);\n    do {\n        index = OS.SendMessage(handle, OS.LB_FINDSTRINGEXACT, last = index, buffer);\n        if (index == OS.LB_ERR || index <= last)\n            return -1;\n    } while (!string.equals(getItem(index)));\n    return index;\n}",
			"comments":"/**\n* Searches the receiver's list starting at the given,\n* zero-relative index until an item is found that is equal\n* to the argument, and returns the index of that item. If\n* no item is found or the starting index is out of range,\n* returns -1.\n*\n* @param string the search item\n* @param start the zero-relative index at which to start the search\n* @return the index of the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* Bug in Windows.  For some reason, LB_FINDSTRINGEXACT\n* will not find empty strings even though it is legal\n* to insert an empty string into a list.  The fix is\n* to search the list, an item at a time.\n*/\n/* Use LB_FINDSTRINGEXACT to search for the item */\n",
			"methodName":"public int indexOf(String string, int start)"
		},
		"void setScrollWidth(int newWidth, boolean grow)":{
			"methodBody":"{\n    int width = OS.SendMessage(handle, OS.LB_GETHORIZONTALEXTENT, 0, 0);\n    if (grow) {\n        if (newWidth <= width)\n            return;\n        OS.SendMessage(handle, OS.LB_SETHORIZONTALEXTENT, newWidth + 3, 0);\n    } else {\n        if (newWidth < width)\n            return;\n        setScrollWidth();\n    }\n}",
			"comments":"",
			"methodName":"void setScrollWidth(int newWidth, boolean grow)"
		},
		"TCHAR windowClass()":{
			"methodBody":"{\n    return ListClass;\n}",
			"comments":"",
			"methodName":"TCHAR windowClass()"
		},
		"public void setItem(int index, String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    int topIndex = getTopIndex();\n    boolean isSelected = isSelected(index);\n    remove(index);\n    add(string, index);\n    if (isSelected)\n        select(index, false);\n    setTopIndex(topIndex);\n}",
			"comments":"/**\n* Sets the text of the item in the receiver's list at the given\n* zero-relative index to the string argument. This is equivalent\n* to <code>remove</code>'ing the old item at the index, and then\n* <code>add</code>'ing the new item at that index.\n*\n* @param index the index for the item\n* @param string the new text for the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setItem(int index, String string)"
		},
		"void setScrollWidth(TCHAR buffer, boolean grow)":{
			"methodBody":"{\n    RECT rect = new RECT();\n    int newFont, oldFont = 0;\n    int hDC = OS.GetDC(handle);\n    newFont = OS.SendMessage(handle, OS.WM_GETFONT, 0, 0);\n    if (newFont != 0)\n        oldFont = OS.SelectObject(hDC, newFont);\n    int flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;\n    OS.DrawText(hDC, buffer, -1, rect, flags);\n    if (newFont != 0)\n        OS.SelectObject(hDC, oldFont);\n    OS.ReleaseDC(handle, hDC);\n    setScrollWidth(rect.right - rect.left, grow);\n}",
			"comments":"",
			"methodName":"void setScrollWidth(TCHAR buffer, boolean grow)"
		},
		"public void deselect(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (index == -1)\n        return;\n    if ((style & SWT.SINGLE) != 0) {\n        int oldIndex = OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n        if (oldIndex == OS.LB_ERR)\n            return;\n        if (oldIndex == index)\n            OS.SendMessage(handle, OS.LB_SETCURSEL, -1, 0);\n        return;\n    }\n    OS.SendMessage(handle, OS.LB_SETSEL, 0, index);\n}",
			"comments":"/**\n* Deselects the item at the given zero-relative index in the receiver.\n* If the item at the index was already deselected, it remains\n* deselected. Indices that are out of range are ignored.\n*\n* @param index the index of the item to deselect\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void deselect(int index)"
		},
		"public void setTopIndex(int index)":{
			"methodBody":"{\n    checkWidget();\n    int result = OS.SendMessage(handle, OS.LB_SETTOPINDEX, index, 0);\n    if (result == OS.LB_ERR) {\n        int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n        index = Math.min(count - 1, Math.max(0, index));\n        OS.SendMessage(handle, OS.LB_SETTOPINDEX, index, 0);\n    }\n}",
			"comments":"/**\n* Sets the zero-relative index of the item which is currently\n* at the top of the receiver. This index can change when items\n* are scrolled or new items are added and removed.\n*\n* @param index the index of the top item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setTopIndex(int index)"
		},
		"public String[] getSelection()":{
			"methodBody":"{\n    checkWidget();\n    int[] indices = getSelectionIndices();\n    String[] result = new String[indices.length];\n    for (int i = 0; i < indices.length; i++) {\n        result[i] = getItem(indices[i]);\n    }\n    return result;\n}",
			"comments":"/**\n* Returns an array of <code>String</code>s that are currently\n* selected in the receiver.  The order of the items is unspecified.\n* An empty array indicates that no items are selected.\n* <p>\n* Note: This is not the actual structure used by the receiver\n* to maintain its selection, so modifying the array will\n* not affect the receiver.\n* </p>\n* @return an array representing the selection\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String[] getSelection()"
		},
		"void select(int start, int end, boolean scroll)":{
			"methodBody":"{\n    \n    if (start == end) {\n        select(start, scroll);\n        return;\n    }\n    OS.SendMessage(handle, OS.LB_SELITEMRANGEEX, start, end);\n    if (scroll)\n        showSelection();\n}",
			"comments":"/*\n* Note that when start = end, LB_SELITEMRANGEEX\n* deselects the item.\n*/\n",
			"methodName":"void select(int start, int end, boolean scroll)"
		},
		"public void deselect(int start, int end)":{
			"methodBody":"{\n    checkWidget();\n    if (start > end)\n        return;\n    if ((style & SWT.SINGLE) != 0) {\n        int oldIndex = OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n        if (oldIndex == OS.LB_ERR)\n            return;\n        if (start <= oldIndex && oldIndex <= end) {\n            OS.SendMessage(handle, OS.LB_SETCURSEL, -1, 0);\n        }\n        return;\n    }\n    \n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (start < 0 && end < 0)\n        return;\n    if (start >= count && end >= count)\n        return;\n    start = Math.min(count - 1, Math.max(0, start));\n    end = Math.min(count - 1, Math.max(0, end));\n    OS.SendMessage(handle, OS.LB_SELITEMRANGEEX, end, start);\n}",
			"comments":"/**\n* Deselects the items at the given zero-relative indices in the receiver.\n* If the item at the given zero-relative index in the receiver\n* is selected, it is deselected.  If the item at the index\n* was not selected, it remains deselected.  The range of the\n* indices is inclusive. Indices that are out of range are ignored.\n*\n* @param start the start index of the items to deselect\n* @param end the end index of the items to deselect\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* Ensure that at least one item is contained in\n* the range from start to end.  Note that when\n* start = end, LB_SELITEMRANGEEX deselects the\n* item.\n*/\n",
			"methodName":"public void deselect(int start, int end)"
		},
		"public void select(int start, int end)":{
			"methodBody":"{\n    checkWidget();\n    if (end < 0 || start > end || ((style & SWT.SINGLE) != 0 && start != end))\n        return;\n    int count = OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0);\n    if (count == 0 || start >= count)\n        return;\n    start = Math.max(0, start);\n    end = Math.min(end, count - 1);\n    if ((style & SWT.SINGLE) != 0) {\n        select(start, false);\n    } else {\n        select(start, end, false);\n    }\n}",
			"comments":"/**\n* Selects the items in the range specified by the given zero-relative\n* indices in the receiver. The range of indices is inclusive.\n* The current selection is not cleared before the new items are selected.\n* <p>\n* If an item in the given range is not selected, it is selected.\n* If an item in the given range was already selected, it remains selected.\n* Indices that are out of range are ignored and no items will be selected\n* if start is greater than end.\n* If the receiver is single-select and there is more than one item in the\n* given range, then all indices are ignored.\n*\n* @param start the start of the range\n* @param end the end of the range\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see List#setSelection(int,int)\n*/\n",
			"methodName":"public void select(int start, int end)"
		},
		"public void select(int[] indices)":{
			"methodBody":"{\n    checkWidget();\n    if (indices == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    int length = indices.length;\n    if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1))\n        return;\n    select(indices, false);\n}",
			"comments":"/**\n* Selects the items at the given zero-relative indices in the receiver.\n* The current selection is not cleared before the new items are selected.\n* <p>\n* If the item at a given index is not selected, it is selected.\n* If the item at a given index was already selected, it remains selected.\n* Indices that are out of range and duplicate indices are ignored.\n* If the receiver is single-select and multiple indices are specified,\n* then all indices are ignored.\n*\n* @param indices the array of indices for the items to select\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the array of indices is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see List#setSelection(int[])\n*/\n",
			"methodName":"public void select(int[] indices)"
		},
		"public int getSelectionIndex()":{
			"methodBody":"{\n    checkWidget();\n    if ((style & SWT.SINGLE) != 0) {\n        return OS.SendMessage(handle, OS.LB_GETCURSEL, 0, 0);\n    }\n    int count = OS.SendMessage(handle, OS.LB_GETSELCOUNT, 0, 0);\n    if (count == OS.LB_ERR)\n        error(SWT.ERROR_CANNOT_GET_SELECTION);\n    if (count == 0)\n        return -1;\n    int index = OS.SendMessage(handle, OS.LB_GETCARETINDEX, 0, 0);\n    int result = OS.SendMessage(handle, OS.LB_GETSEL, index, 0);\n    if (result == OS.LB_ERR)\n        error(SWT.ERROR_CANNOT_GET_SELECTION);\n    if (result != 0)\n        return index;\n    int[] buffer = new int[1];\n    result = OS.SendMessage(handle, OS.LB_GETSELITEMS, 1, buffer);\n    if (result != 1)\n        error(SWT.ERROR_CANNOT_GET_SELECTION);\n    return buffer[0];\n}",
			"comments":"/**\n* Returns the zero-relative index of the item which is currently\n* selected in the receiver, or -1 if no item is selected.\n*\n* @return the index of the selected item or -1\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getSelectionIndex()"
		},
		"int callWindowProc(int hwnd, int msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (handle == 0)\n        return 0;\n    return OS.CallWindowProc(ListProc, hwnd, msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"int callWindowProc(int hwnd, int msg, int wParam, int lParam)"
		},
		"public boolean isSelected(int index)":{
			"methodBody":"{\n    checkWidget();\n    int result = OS.SendMessage(handle, OS.LB_GETSEL, index, 0);\n    return (result != 0) && (result != OS.LB_ERR);\n}",
			"comments":"/**\n* Returns <code>true</code> if the item is selected,\n* and <code>false</code> otherwise.  Indices out of\n* range are ignored.\n*\n* @param index the index of the item\n* @return the visibility state of the item at the index\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean isSelected(int index)"
		}
	},
	"ClassORInterfaceName":[
		"List"
	]
}
