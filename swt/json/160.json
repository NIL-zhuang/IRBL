{
	"variables":[
		"handle",
		"i",
		"font",
		"logFont",
		"logFont",
		"lfHeight",
		"font",
		"device",
		"device",
		"Device",
		"device",
		"SWT",
		"SWT",
		"device",
		"fd",
		"device",
		"device",
		"device",
		"device",
		"Device",
		"device",
		"SWT",
		"SWT",
		"fds",
		"SWT",
		"SWT",
		"fds",
		"SWT",
		"SWT",
		"i",
		"fds",
		"i",
		"fds",
		"i",
		"SWT",
		"SWT",
		"device",
		"fds",
		"device",
		"device",
		"device",
		"device",
		"Device",
		"device",
		"SWT",
		"SWT",
		"name",
		"SWT",
		"SWT",
		"device",
		"name",
		"height",
		"style",
		"device",
		"device",
		"handle",
		"device",
		"OS",
		"handle",
		"handle",
		"device",
		"device",
		"device",
		"object",
		"object",
		"object",
		"device",
		"font",
		"handle",
		"font",
		"SWT",
		"SWT",
		"OS",
		"OS",
		"handle",
		"LOGFONT",
		"logFont",
		"FontData",
		"logFont",
		"device",
		"logFont",
		"handle",
		"handle",
		"fd",
		"SWT",
		"SWT",
		"device",
		"fd",
		"logFont",
		"logFont",
		"device",
		"fd",
		"handle",
		"OS",
		"logFont",
		"logFont",
		"lfHeight",
		"handle",
		"SWT",
		"SWT",
		"handle",
		"handle",
		"device",
		"device",
		"Device",
		"font",
		"handle",
		"font",
		"device",
		"font",
		"ERROR_NULL_ARGUMENT",
		"tracking",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"tracking",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"tracking",
		"tracking",
		"device",
		"handle",
		"ERROR_GRAPHIC_DISPOSED",
		"IsUnicode",
		"sizeof",
		"ERROR_NULL_ARGUMENT",
		"device",
		"data",
		"lfHeight",
		"lfHeight",
		"height",
		"lfHeight",
		"ERROR_NO_HANDLES",
		"handle",
		"device",
		"device",
		"fd",
		"device",
		"fds",
		"device",
		"name",
		"height",
		"style",
		"object",
		"device",
		"fd",
		"device",
		"handle"
	],
	"extendORImplementFiles":[
		"Resource"
	],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt"
	],
	"methods":[
		"dispose",
		"equals",
		"getFontData",
		"hashCode",
		"init",
		"isDisposed",
		"toString",
		"win32_new",
		"getDevice",
		"error",
		"init",
		"new_Object",
		"getDevice",
		"error",
		"error",
		"error",
		"error",
		"init",
		"new_Object",
		"getDevice",
		"error",
		"error",
		"init",
		"new_Object",
		"isDisposed",
		"DeleteObject",
		"dispose_Object",
		"isDisposed",
		"error",
		"GetObject",
		"win32_new",
		"computePoints",
		"error",
		"computePixels",
		"CreateFontIndirect",
		"error",
		"isDisposed",
		"getDevice",
		"FontData",
		"LOGFONTW",
		"LOGFONTA",
		"Font"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    if (isDisposed())\n        return \"Font {*DISPOSED*}\";\n    return \"Font {\" + handle + \"}\";\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the receiver\n*/\n",
			"methodName":"public String toString()"
		},
		"public void dispose()":{
			"methodBody":"{\n    if (handle == 0)\n        return;\n    if (device.isDisposed())\n        return;\n    OS.DeleteObject(handle);\n    handle = 0;\n    if (device.tracking)\n        device.dispose_Object(this);\n    device = null;\n}",
			"comments":"/**\n* Disposes of the operating system resources associated with\n* the font. Applications must dispose of all fonts which\n* they allocate.\n*/\n",
			"methodName":"public void dispose()"
		},
		"public int hashCode()":{
			"methodBody":"{\n    return handle;\n}",
			"comments":"/**\n* Returns an integer hash code for the receiver. Any two\n* objects that return <code>true</code> when passed to\n* <code>equals</code> must return the same value for this\n* method.\n*\n* @return the receiver's hash\n*\n* @see #equals\n*/\n",
			"methodName":"public int hashCode()"
		},
		"void init(Device device, FontData fd)":{
			"methodBody":"{\n    if (fd == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    this.device = device;\n    LOGFONT logFont = fd.data;\n    int lfHeight = logFont.lfHeight;\n    logFont.lfHeight = device.computePixels(fd.height);\n    handle = OS.CreateFontIndirect(logFont);\n    logFont.lfHeight = lfHeight;\n    if (handle == 0)\n        SWT.error(SWT.ERROR_NO_HANDLES);\n}",
			"comments":"",
			"methodName":"void init(Device device, FontData fd)"
		},
		"public FontData[] getFontData()":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    LOGFONT logFont = OS.IsUnicode ? (LOGFONT) new LOGFONTW() : new LOGFONTA();\n    OS.GetObject(handle, LOGFONT.sizeof, logFont);\n    return new FontData[] { FontData.win32_new(logFont, device.computePoints(logFont, handle)) };\n}",
			"comments":"/**\n* Returns an array of <code>FontData</code>s representing the receiver.\n* On Windows, only one FontData will be returned per font. On X however,\n* a <code>Font</code> object <em>may</em> be composed of multiple X\n* fonts. To support this case, we return an array of font data objects.\n*\n* @return an array of font data objects describing the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public FontData[] getFontData()"
		},
		"public boolean isDisposed()":{
			"methodBody":"{\n    return handle == 0;\n}",
			"comments":"/**\n* Returns <code>true</code> if the font has been disposed,\n* and <code>false</code> otherwise.\n* <p>\n* This method gets the dispose state for the font.\n* When a font has been disposed, it is an error to\n* invoke any other method using the font.\n*\n* @return <code>true</code> when the font is disposed and <code>false</code> otherwise\n*/\n",
			"methodName":"public boolean isDisposed()"
		},
		"public boolean equals(Object object)":{
			"methodBody":"{\n    if (object == this)\n        return true;\n    if (!(object instanceof Font))\n        return false;\n    Font font = (Font) object;\n    return device == font.device && handle == font.handle;\n}",
			"comments":"/**\n* Compares the argument to the receiver, and returns true\n* if they represent the <em>same</em> object using a class\n* specific comparison.\n*\n* @param object the object to compare with this object\n* @return <code>true</code> if the object is the same as this object and <code>false</code> otherwise\n*\n* @see #hashCode\n*/\n",
			"methodName":"public boolean equals(Object object)"
		},
		"public static Font win32_new(Device device, int handle)":{
			"methodBody":"{\n    if (device == null)\n        device = Device.getDevice();\n    Font font = new Font();\n    font.handle = handle;\n    font.device = device;\n    return font;\n}",
			"comments":"/**\n* Invokes platform specific functionality to allocate a new font.\n* <p>\n* <b>IMPORTANT:</b> This method is <em>not</em> part of the public\n* API for <code>Font</code>. It is marked public only so that it\n* can be shared within the packages provided by SWT. It is not\n* available on all platforms, and should never be called from\n* application code.\n* </p>\n*\n* @param device the device on which to allocate the color\n* @param handle the handle for the font\n* @return a new font object containing the specified device and handle\n*/\n",
			"methodName":"public static Font win32_new(Device device, int handle)"
		}
	},
	"ClassORInterfaceName":[
		"Font"
	]
}
