{
	"variables":[
		"scope",
		"startPage",
		"endPage",
		"printToFile",
		"name",
		"validName",
		"pd",
		"parent",
		"display",
		"shells",
		"i",
		"data",
		"success",
		"i",
		"hMem",
		"size",
		"ptr",
		"offsets",
		"buffer",
		"driverOffset",
		"i",
		"driver",
		"deviceOffset",
		"device",
		"outputOffset",
		"output",
		"PrinterData",
		"parent",
		"SWT",
		"parent",
		"style",
		"scope",
		"scope",
		"startPage",
		"startPage",
		"endPage",
		"endPage",
		"printToFile",
		"printToFile",
		"validName",
		"name",
		"SWT",
		"SWT",
		"pd",
		"PRINTDLG",
		"parent",
		"pd",
		"parent",
		"pd",
		"OS",
		"printToFile",
		"pd",
		"OS",
		"scope",
		"PrinterData",
		"pd",
		"OS",
		"PrinterData",
		"pd",
		"OS",
		"pd",
		"OS",
		"pd",
		"pd",
		"pd",
		"Math",
		"Math",
		"startPage",
		"pd",
		"Math",
		"Math",
		"endPage",
		"parent",
		"display",
		"SWT",
		"SWT",
		"i",
		"shells",
		"i",
		"shells",
		"i",
		"shells",
		"i",
		"parent",
		"shells",
		"i",
		"shells",
		"i",
		"OS",
		"pd",
		"SWT",
		"SWT",
		"i",
		"shells",
		"i",
		"shells",
		"i",
		"shells",
		"i",
		"shells",
		"i",
		"success",
		"pd",
		"OS",
		"hMem",
		"TCHAR",
		"TCHAR",
		"OS",
		"hMem",
		"OS",
		"offsets",
		"ptr",
		"offsets",
		"size",
		"OS",
		"buffer",
		"ptr",
		"size",
		"OS",
		"hMem",
		"offsets",
		"driverOffset",
		"i",
		"size",
		"buffer",
		"driverOffset",
		"i",
		"i",
		"buffer",
		"driverOffset",
		"i",
		"offsets",
		"i",
		"deviceOffset",
		"i",
		"size",
		"buffer",
		"deviceOffset",
		"i",
		"i",
		"buffer",
		"deviceOffset",
		"i",
		"offsets",
		"i",
		"outputOffset",
		"i",
		"size",
		"buffer",
		"outputOffset",
		"i",
		"i",
		"buffer",
		"outputOffset",
		"i",
		"data",
		"driver",
		"device",
		"pd",
		"OS",
		"data",
		"PrinterData",
		"data",
		"pd",
		"data",
		"pd",
		"pd",
		"OS",
		"data",
		"PrinterData",
		"data",
		"pd",
		"OS",
		"data",
		"data",
		"output",
		"data",
		"pd",
		"data",
		"pd",
		"OS",
		"hMem",
		"pd",
		"size",
		"OS",
		"hMem",
		"ptr",
		"OS",
		"hMem",
		"data",
		"size",
		"OS",
		"data",
		"ptr",
		"size",
		"OS",
		"hMem",
		"endPage",
		"data",
		"printToFile",
		"data",
		"scope",
		"data",
		"startPage",
		"data",
		"data",
		"ALL_PAGES",
		"PRIMARY_MODAL",
		"scope",
		"startPage",
		"endPage",
		"printToFile",
		"ERROR_INVALID_SUBCLASS",
		"lStructSize",
		"sizeof",
		"hwndOwner",
		"handle",
		"Flags",
		"PD_USEDEVMODECOPIESANDCOLLATE",
		"Flags",
		"PD_PRINTTOFILE",
		"PAGE_RANGE",
		"Flags",
		"PD_PAGENUMS",
		"SELECTION",
		"Flags",
		"PD_SELECTION",
		"Flags",
		"PD_ALLPAGES",
		"nMinPage",
		"nMaxPage",
		"nFromPage",
		"nToPage",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"length",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"length",
		"hDevNames",
		"sizeof",
		"sizeof",
		"length",
		"Flags",
		"PD_PAGENUMS",
		"scope",
		"PAGE_RANGE",
		"startPage",
		"nFromPage",
		"endPage",
		"nToPage",
		"Flags",
		"PD_SELECTION",
		"scope",
		"SELECTION",
		"printToFile",
		"Flags",
		"PD_PRINTTOFILE",
		"printToFile",
		"fileName",
		"copyCount",
		"nCopies",
		"collate",
		"Flags",
		"PD_COLLATE",
		"hDevMode",
		"otherData",
		"otherData",
		"endPage",
		"printToFile",
		"scope",
		"startPage",
		"parent",
		"parent",
		"style",
		"scope",
		"startPage",
		"endPage",
		"printToFile"
	],
	"extendORImplementFiles":[
		"Dialog"
	],
	"package":[
		"org.eclipse.swt.printing"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"getScope",
		"setScope",
		"getStartPage",
		"setStartPage",
		"getEndPage",
		"setEndPage",
		"getPrintToFile",
		"setPrintToFile",
		"checkSubclass",
		"open",
		"checkSubclass",
		"getName",
		"getClass",
		"getName",
		"equals",
		"error",
		"getParent",
		"min",
		"max",
		"min",
		"max",
		"getDisplay",
		"getShells",
		"getStyle",
		"isEnabled",
		"setEnabled",
		"PrintDlg",
		"getStyle",
		"isDisposed",
		"setEnabled",
		"GlobalSize",
		"GlobalLock",
		"MoveMemory",
		"MoveMemory",
		"GlobalUnlock",
		"tcharAt",
		"toString",
		"tcharAt",
		"toString",
		"tcharAt",
		"toString",
		"GlobalSize",
		"GlobalLock",
		"MoveMemory",
		"GlobalUnlock",
		"PRINTDLG",
		"TCHAR",
		"PrinterData"
	],
	"methodsBody":{
		"public boolean getPrintToFile()":{
			"methodBody":"{\n    return printToFile;\n}",
			"comments":"/**\n* Returns the 'Print to file' setting that the user selected\n* before pressing OK in the dialog.\n*\n* @return the 'Print to file' setting that the user selected\n*/\n",
			"methodName":"public boolean getPrintToFile()"
		},
		"public void setPrintToFile(boolean printToFile)":{
			"methodBody":"{\n    this.printToFile = printToFile;\n}",
			"comments":"/**\n* Sets the 'Print to file' setting that the user will see\n* when the dialog is opened.\n*\n* @param printToFile the 'Print to file' setting when the dialog is opened\n*/\n",
			"methodName":"public void setPrintToFile(boolean printToFile)"
		},
		"public int getStartPage()":{
			"methodBody":"{\n    return startPage;\n}",
			"comments":"/**\n* Returns the start page setting that the user selected\n* before pressing OK in the dialog.\n* <p>\n* Note that this value is one based and only valid if the scope is\n* <code>PAGE_RANGE</code>.\n* </p>\n*\n* @return the start page setting that the user selected\n*/\n",
			"methodName":"public int getStartPage()"
		},
		"public void setStartPage(int startPage)":{
			"methodBody":"{\n    this.startPage = startPage;\n}",
			"comments":"/**\n* Sets the start page that the user will see when the dialog\n* is opened.\n* <p>\n* Note that this value is one based and only valid if the scope is\n* <code>PAGE_RANGE</code>.\n* </p>\n*\n* @param startPage the startPage setting when the dialog is opened\n*/\n",
			"methodName":"public void setStartPage(int startPage)"
		},
		"public int getScope()":{
			"methodBody":"{\n    return scope;\n}",
			"comments":"/**\n* Returns the print job scope that the user selected\n* before pressing OK in the dialog. This will be one\n* of the following values:\n* <dl>\n* <dt><code>ALL_PAGES</code></dt>\n* <dd>Print all pages in the current document</dd>\n* <dt><code>PAGE_RANGE</code></dt>\n* <dd>Print the range of pages specified by startPage and endPage</dd>\n* <dt><code>SELECTION</code></dt>\n* <dd>Print the current selection</dd>\n* </dl>\n*\n* @return the scope setting that the user selected\n*/\n",
			"methodName":"public int getScope()"
		},
		"public PrinterData open()":{
			"methodBody":"{\n    PRINTDLG pd = new PRINTDLG();\n    pd.lStructSize = PRINTDLG.sizeof;\n    Control parent = getParent();\n    if (parent != null)\n        pd.hwndOwner = parent.handle;\n    pd.Flags = OS.PD_USEDEVMODECOPIESANDCOLLATE;\n    if (printToFile)\n        pd.Flags |= OS.PD_PRINTTOFILE;\n    switch(scope) {\n        case PrinterData.PAGE_RANGE:\n            pd.Flags |= OS.PD_PAGENUMS;\n            break;\n        case PrinterData.SELECTION:\n            pd.Flags |= OS.PD_SELECTION;\n            break;\n        default:\n            pd.Flags |= OS.PD_ALLPAGES;\n    }\n    pd.nMinPage = 1;\n    pd.nMaxPage = -1;\n    pd.nFromPage = (short) Math.min(0xFFFF, Math.max(1, startPage));\n    pd.nToPage = (short) Math.min(0xFFFF, Math.max(1, endPage));\n    Display display = parent.getDisplay();\n    Shell[] shells = display.getShells();\n    if ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        for (int i = 0; i < shells.length; i++) {\n            if (shells[i].isEnabled() && shells[i] != parent) {\n                shells[i].setEnabled(false);\n            } else {\n                shells[i] = null;\n            }\n        }\n    }\n    PrinterData data = null;\n    boolean success = OS.PrintDlg(pd);\n    if ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        for (int i = 0; i < shells.length; i++) {\n            if (shells[i] != null && !shells[i].isDisposed()) {\n                shells[i].setEnabled(true);\n            }\n        }\n    }\n    if (success) {\n        \n        int hMem = pd.hDevNames;\n        \n        int size = OS.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;\n        int ptr = OS.GlobalLock(hMem);\n        short[] offsets = new short[4];\n        OS.MoveMemory(offsets, ptr, 2 * offsets.length);\n        TCHAR buffer = new TCHAR(0, size);\n        OS.MoveMemory(buffer, ptr, size);\n        OS.GlobalUnlock(hMem);\n        int driverOffset = offsets[0];\n        int i = 0;\n        while (driverOffset + i < size) {\n            if (buffer.tcharAt(driverOffset + i) == 0)\n                break;\n            i++;\n        }\n        String driver = buffer.toString(driverOffset, i);\n        int deviceOffset = offsets[1];\n        i = 0;\n        while (deviceOffset + i < size) {\n            if (buffer.tcharAt(deviceOffset + i) == 0)\n                break;\n            i++;\n        }\n        String device = buffer.toString(deviceOffset, i);\n        int outputOffset = offsets[2];\n        i = 0;\n        while (outputOffset + i < size) {\n            if (buffer.tcharAt(outputOffset + i) == 0)\n                break;\n            i++;\n        }\n        String output = buffer.toString(outputOffset, i);\n        \n        data = new PrinterData(driver, device);\n        if ((pd.Flags & OS.PD_PAGENUMS) != 0) {\n            data.scope = PrinterData.PAGE_RANGE;\n            data.startPage = pd.nFromPage & 0xFFFF;\n            data.endPage = pd.nToPage & 0xFFFF;\n        } else if ((pd.Flags & OS.PD_SELECTION) != 0) {\n            data.scope = PrinterData.SELECTION;\n        }\n        data.printToFile = (pd.Flags & OS.PD_PRINTTOFILE) != 0;\n        if (data.printToFile)\n            data.fileName = output;\n        data.copyCount = pd.nCopies;\n        data.collate = (pd.Flags & OS.PD_COLLATE) != 0;\n        \n        hMem = pd.hDevMode;\n        size = OS.GlobalSize(hMem);\n        ptr = OS.GlobalLock(hMem);\n        data.otherData = new byte[size];\n        OS.MoveMemory(data.otherData, ptr, size);\n        OS.GlobalUnlock(hMem);\n        endPage = data.endPage;\n        printToFile = data.printToFile;\n        scope = data.scope;\n        startPage = data.startPage;\n    }\n    return data;\n}",
			"comments":"/**\n* Makes the receiver visible and brings it to the front\n* of the display.\n*\n* @return a printer data object describing the desired print job parameters\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/* Get driver and device from the DEVNAMES struct */\n/* Ensure size is a multiple of 2 bytes on UNICODE platforms */\n/* Create PrinterData object and set fields from PRINTDLG */\n/* Bulk-save the printer-specific settings in the DEVMODE struct */\n",
			"methodName":"public PrinterData open()"
		},
		"public void setScope(int scope)":{
			"methodBody":"{\n    this.scope = scope;\n}",
			"comments":"/**\n* Sets the scope of the print job. The user will see this\n* setting when the dialog is opened. This can have one of\n* the following values:\n* <dl>\n* <dt><code>ALL_PAGES</code></dt>\n* <dd>Print all pages in the current document</dd>\n* <dt><code>PAGE_RANGE</code></dt>\n* <dd>Print the range of pages specified by startPage and endPage</dd>\n* <dt><code>SELECTION</code></dt>\n* <dd>Print the current selection</dd>\n* </dl>\n*\n* @param scope the scope setting when the dialog is opened\n*/\n",
			"methodName":"public void setScope(int scope)"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    String name = getClass().getName();\n    String validName = PrintDialog.class.getName();\n    if (!validName.equals(name)) {\n        SWT.error(SWT.ERROR_INVALID_SUBCLASS);\n    }\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"public int getEndPage()":{
			"methodBody":"{\n    return endPage;\n}",
			"comments":"/**\n* Returns the end page setting that the user selected\n* before pressing OK in the dialog.\n* <p>\n* Note that this value is one based and only valid if the scope is\n* <code>PAGE_RANGE</code>.\n* </p>\n*\n* @return the end page setting that the user selected\n*/\n",
			"methodName":"public int getEndPage()"
		},
		"public void setEndPage(int endPage)":{
			"methodBody":"{\n    this.endPage = endPage;\n}",
			"comments":"/**\n* Sets the end page that the user will see when the dialog\n* is opened.\n* <p>\n* Note that this value is one based and only valid if the scope is\n* <code>PAGE_RANGE</code>.\n* </p>\n*\n* @param endPage the end page setting when the dialog is opened\n*/\n",
			"methodName":"public void setEndPage(int endPage)"
		}
	},
	"ClassORInterfaceName":[
		"PrintDialog"
	]
}
