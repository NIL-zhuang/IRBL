{
	"variables":[
		"form",
		"left",
		"center",
		"right",
		"content",
		"leftSize",
		"centerSize",
		"rightSize",
		"size",
		"count",
		"contentSize",
		"data",
		"rect",
		"data",
		"form",
		"left",
		"center",
		"right",
		"content",
		"rect",
		"leftSize",
		"centerSize",
		"rightSize",
		"minTopWidth",
		"count",
		"x",
		"y",
		"top",
		"topHeight",
		"trim",
		"leftW",
		"trim",
		"w",
		"topHeight",
		"trim",
		"w",
		"h",
		"oldSeperator",
		"t",
		"b",
		"composite",
		"form",
		"form",
		"form",
		"form",
		"left",
		"leftSize",
		"left",
		"SWT",
		"SWT",
		"flushCache",
		"center",
		"centerSize",
		"center",
		"SWT",
		"SWT",
		"flushCache",
		"right",
		"rightSize",
		"right",
		"SWT",
		"SWT",
		"flushCache",
		"form",
		"wHint",
		"SWT",
		"leftSize",
		"centerSize",
		"rightSize",
		"wHint",
		"size",
		"leftSize",
		"rightSize",
		"leftSize",
		"rightSize",
		"size",
		"form",
		"size",
		"Math",
		"centerSize",
		"size",
		"size",
		"Math",
		"leftSize",
		"rightSize",
		"center",
		"size",
		"centerSize",
		"left",
		"right",
		"size",
		"form",
		"size",
		"leftSize",
		"centerSize",
		"rightSize",
		"leftSize",
		"count",
		"centerSize",
		"count",
		"rightSize",
		"count",
		"count",
		"size",
		"count",
		"form",
		"size",
		"Math",
		"leftSize",
		"Math",
		"centerSize",
		"rightSize",
		"content",
		"left",
		"right",
		"center",
		"size",
		"contentSize",
		"content",
		"SWT",
		"SWT",
		"flushCache",
		"size",
		"Math",
		"size",
		"contentSize",
		"size",
		"contentSize",
		"size",
		"contentSize",
		"size",
		"form",
		"size",
		"form",
		"size",
		"form",
		"wHint",
		"SWT",
		"size",
		"wHint",
		"hHint",
		"SWT",
		"size",
		"hHint",
		"size",
		"control",
		"data",
		"data",
		"data",
		"control",
		"data",
		"data",
		"control",
		"wHint",
		"hHint",
		"flushCache",
		"c",
		"c",
		"rect",
		"c",
		"control",
		"data",
		"data",
		"data",
		"composite",
		"form",
		"form",
		"form",
		"form",
		"composite",
		"left",
		"left",
		"leftSize",
		"left",
		"SWT",
		"SWT",
		"flushCache",
		"center",
		"center",
		"centerSize",
		"center",
		"SWT",
		"SWT",
		"flushCache",
		"right",
		"right",
		"rightSize",
		"right",
		"SWT",
		"SWT",
		"flushCache",
		"leftSize",
		"centerSize",
		"rightSize",
		"form",
		"form",
		"leftSize",
		"count",
		"centerSize",
		"count",
		"rightSize",
		"count",
		"count",
		"minTopWidth",
		"count",
		"form",
		"rect",
		"rect",
		"form",
		"form",
		"rect",
		"form",
		"form",
		"form",
		"minTopWidth",
		"rect",
		"Math",
		"rightSize",
		"leftSize",
		"right",
		"right",
		"top",
		"x",
		"rightSize",
		"right",
		"x",
		"y",
		"rightSize",
		"topHeight",
		"x",
		"form",
		"left",
		"left",
		"top",
		"left",
		"x",
		"rect",
		"form",
		"form",
		"trim",
		"leftSize",
		"left",
		"leftW",
		"SWT",
		"left",
		"rect",
		"form",
		"form",
		"y",
		"leftSize",
		"topHeight",
		"top",
		"y",
		"topHeight",
		"form",
		"center",
		"center",
		"top",
		"center",
		"rect",
		"form",
		"form",
		"trim",
		"centerSize",
		"center",
		"w",
		"SWT",
		"center",
		"rect",
		"rect",
		"form",
		"form",
		"centerSize",
		"y",
		"centerSize",
		"centerSize",
		"y",
		"centerSize",
		"form",
		"Math",
		"rightSize",
		"Math",
		"centerSize",
		"leftSize",
		"right",
		"right",
		"top",
		"x",
		"rightSize",
		"right",
		"x",
		"y",
		"rightSize",
		"topHeight",
		"x",
		"form",
		"center",
		"center",
		"top",
		"x",
		"centerSize",
		"center",
		"x",
		"y",
		"centerSize",
		"topHeight",
		"x",
		"form",
		"left",
		"left",
		"top",
		"left",
		"left",
		"x",
		"rect",
		"form",
		"form",
		"trim",
		"topHeight",
		"trim",
		"leftSize",
		"left",
		"w",
		"h",
		"left",
		"rect",
		"form",
		"form",
		"y",
		"leftSize",
		"topHeight",
		"top",
		"y",
		"topHeight",
		"form",
		"form",
		"form",
		"content",
		"content",
		"left",
		"right",
		"center",
		"form",
		"y",
		"y",
		"content",
		"rect",
		"form",
		"form",
		"y",
		"rect",
		"form",
		"form",
		"rect",
		"rect",
		"y",
		"form",
		"form",
		"oldSeperator",
		"form",
		"Math",
		"form",
		"oldSeperator",
		"Math",
		"form",
		"oldSeperator",
		"form",
		"form",
		"t",
		"form",
		"form",
		"form",
		"b",
		"t",
		"topLeft",
		"topCenter",
		"topRight",
		"content",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"separateTopCenter",
		"DEFAULT",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"horizontalSpacing",
		"x",
		"x",
		"x",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"verticalSpacing",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"horizontalSpacing",
		"y",
		"y",
		"y",
		"y",
		"y",
		"DEFAULT",
		"DEFAULT",
		"x",
		"x",
		"x",
		"y",
		"y",
		"y",
		"y",
		"y",
		"verticalSpacing",
		"x",
		"marginWidth",
		"y",
		"marginHeight",
		"DEFAULT",
		"x",
		"DEFAULT",
		"y",
		"width",
		"topLeft",
		"topCenter",
		"topRight",
		"content",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"x",
		"x",
		"x",
		"marginWidth",
		"highlight",
		"x",
		"x",
		"x",
		"horizontalSpacing",
		"x",
		"width",
		"marginWidth",
		"highlight",
		"y",
		"marginHeight",
		"highlight",
		"separateTopCenter",
		"width",
		"y",
		"y",
		"x",
		"x",
		"horizontalSpacing",
		"x",
		"marginWidth",
		"highlight",
		"DEFAULT",
		"x",
		"marginWidth",
		"highlight",
		"x",
		"verticalSpacing",
		"width",
		"marginWidth",
		"highlight",
		"DEFAULT",
		"x",
		"width",
		"marginWidth",
		"highlight",
		"x",
		"x",
		"y",
		"y",
		"verticalSpacing",
		"y",
		"y",
		"y",
		"x",
		"x",
		"horizontalSpacing",
		"x",
		"x",
		"horizontalSpacing",
		"x",
		"marginWidth",
		"highlight",
		"width",
		"height",
		"x",
		"marginWidth",
		"highlight",
		"x",
		"verticalSpacing",
		"separator",
		"separator",
		"separator",
		"x",
		"marginWidth",
		"highlight",
		"width",
		"marginWidth",
		"highlight",
		"y",
		"height",
		"marginHeight",
		"highlight",
		"separator",
		"separator",
		"separator",
		"borderLeft",
		"x",
		"borderLeft",
		"borderRight",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"wHint",
		"hHint",
		"flushCache",
		"c",
		"control",
		"composite",
		"flushCache"
	],
	"extendORImplementFiles":[
		"Layout"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"computeSize",
		"computeChildSize",
		"computeTrim",
		"flushCache",
		"layout",
		"computeChildSize",
		"computeChildSize",
		"computeChildSize",
		"max",
		"max",
		"max",
		"max",
		"computeChildSize",
		"max",
		"getLayoutData",
		"setLayoutData",
		"computeSize",
		"computeTrim",
		"getBorderWidth",
		"getLayoutData",
		"flushCache",
		"getClientArea",
		"isDisposed",
		"computeChildSize",
		"isDisposed",
		"computeChildSize",
		"isDisposed",
		"computeChildSize",
		"max",
		"isDisposed",
		"setBounds",
		"isDisposed",
		"computeTrim",
		"computeChildSize",
		"setBounds",
		"isDisposed",
		"computeTrim",
		"computeChildSize",
		"setBounds",
		"max",
		"max",
		"isDisposed",
		"setBounds",
		"isDisposed",
		"setBounds",
		"isDisposed",
		"computeTrim",
		"computeChildSize",
		"setBounds",
		"isDisposed",
		"setBounds",
		"min",
		"max",
		"redraw",
		"getSize",
		"Point",
		"Point",
		"Point",
		"Point",
		"Point",
		"CLayoutData",
		"Point",
		"Point",
		"Point",
		"Rectangle"
	],
	"methodsBody":{
		"int computeTrim(Control c)":{
			"methodBody":"{\n    if (c instanceof Scrollable) {\n        Rectangle rect = ((Scrollable) c).computeTrim(0, 0, 0, 0);\n        return rect.width;\n    }\n    return c.getBorderWidth() * 2;\n}",
			"comments":"",
			"methodName":"int computeTrim(Control c)"
		},
		"protected boolean flushCache(Control control)":{
			"methodBody":"{\n    Object data = control.getLayoutData();\n    if (data != null && data instanceof CLayoutData)\n        ((CLayoutData) data).flushCache();\n    return true;\n}",
			"comments":"",
			"methodName":"protected boolean flushCache(Control control)"
		},
		"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    ViewForm form = (ViewForm) composite;\n    Control left = form.topLeft;\n    Control center = form.topCenter;\n    Control right = form.topRight;\n    Control content = form.content;\n    Point leftSize = new Point(0, 0);\n    if (left != null) {\n        leftSize = computeChildSize(left, SWT.DEFAULT, SWT.DEFAULT, flushCache);\n    }\n    Point centerSize = new Point(0, 0);\n    if (center != null) {\n        centerSize = computeChildSize(center, SWT.DEFAULT, SWT.DEFAULT, flushCache);\n    }\n    Point rightSize = new Point(0, 0);\n    if (right != null) {\n        rightSize = computeChildSize(right, SWT.DEFAULT, SWT.DEFAULT, flushCache);\n    }\n    Point size = new Point(0, 0);\n    \n    if (form.separateTopCenter || (wHint != SWT.DEFAULT && leftSize.x + centerSize.x + rightSize.x > wHint)) {\n        size.x = leftSize.x + rightSize.x;\n        if (leftSize.x > 0 && rightSize.x > 0)\n            size.x += form.horizontalSpacing;\n        size.x = Math.max(centerSize.x, size.x);\n        size.y = Math.max(leftSize.y, rightSize.y);\n        if (center != null) {\n            size.y += centerSize.y;\n            if (left != null || right != null)\n                size.y += form.verticalSpacing;\n        }\n    } else {\n        size.x = leftSize.x + centerSize.x + rightSize.x;\n        int count = -1;\n        if (leftSize.x > 0)\n            count++;\n        if (centerSize.x > 0)\n            count++;\n        if (rightSize.x > 0)\n            count++;\n        if (count > 0)\n            size.x += count * form.horizontalSpacing;\n        size.y = Math.max(leftSize.y, Math.max(centerSize.y, rightSize.y));\n    }\n    if (content != null) {\n        \n        if (left != null || right != null || center != null)\n            size.y += 1;\n        Point contentSize = new Point(0, 0);\n        contentSize = computeChildSize(content, SWT.DEFAULT, SWT.DEFAULT, flushCache);\n        size.x = Math.max(size.x, contentSize.x);\n        size.y += contentSize.y;\n        if (size.y > contentSize.y)\n            size.y += form.verticalSpacing;\n    }\n    size.x += 2 * form.marginWidth;\n    size.y += 2 * form.marginHeight;\n    if (wHint != SWT.DEFAULT)\n        size.x = wHint;\n    if (hHint != SWT.DEFAULT)\n        size.y = hHint;\n    return size;\n}",
			"comments":"// calculate width of title bar\n// allow space for a vertical separator\n",
			"methodName":"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)"
		},
		"protected void layout(Composite composite, boolean flushCache)":{
			"methodBody":"{\n    ViewForm form = (ViewForm) composite;\n    Control left = form.topLeft;\n    Control center = form.topCenter;\n    Control right = form.topRight;\n    Control content = form.content;\n    Rectangle rect = composite.getClientArea();\n    Point leftSize = new Point(0, 0);\n    if (left != null && !left.isDisposed()) {\n        leftSize = computeChildSize(left, SWT.DEFAULT, SWT.DEFAULT, flushCache);\n    }\n    Point centerSize = new Point(0, 0);\n    if (center != null && !center.isDisposed()) {\n        centerSize = computeChildSize(center, SWT.DEFAULT, SWT.DEFAULT, flushCache);\n    }\n    Point rightSize = new Point(0, 0);\n    if (right != null && !right.isDisposed()) {\n        rightSize = computeChildSize(right, SWT.DEFAULT, SWT.DEFAULT, flushCache);\n    }\n    int minTopWidth = leftSize.x + centerSize.x + rightSize.x + 2 * form.marginWidth + 2 * form.highlight;\n    int count = -1;\n    if (leftSize.x > 0)\n        count++;\n    if (centerSize.x > 0)\n        count++;\n    if (rightSize.x > 0)\n        count++;\n    if (count > 0)\n        minTopWidth += count * form.horizontalSpacing;\n    int x = rect.x + rect.width - form.marginWidth - form.highlight;\n    int y = rect.y + form.marginHeight + form.highlight;\n    boolean top = false;\n    if (form.separateTopCenter || minTopWidth > rect.width) {\n        int topHeight = Math.max(rightSize.y, leftSize.y);\n        if (right != null && !right.isDisposed()) {\n            top = true;\n            x -= rightSize.x;\n            right.setBounds(x, y, rightSize.x, topHeight);\n            x -= form.horizontalSpacing;\n        }\n        if (left != null && !left.isDisposed()) {\n            top = true;\n            int trim = computeTrim(left);\n            int leftW = x - rect.x - form.marginWidth - form.highlight - trim;\n            leftSize = computeChildSize(left, leftW, SWT.DEFAULT, false);\n            left.setBounds(rect.x + form.marginWidth + form.highlight, y, leftSize.x, topHeight);\n        }\n        if (top)\n            y += topHeight + form.verticalSpacing;\n        if (center != null && !center.isDisposed()) {\n            top = true;\n            int trim = computeTrim(center);\n            int w = rect.width - 2 * form.marginWidth - 2 * form.highlight - trim;\n            centerSize = computeChildSize(center, w, SWT.DEFAULT, false);\n            center.setBounds(rect.x + rect.width - form.marginWidth - form.highlight - centerSize.x, y, centerSize.x, centerSize.y);\n            y += centerSize.y + form.verticalSpacing;\n        }\n    } else {\n        int topHeight = Math.max(rightSize.y, Math.max(centerSize.y, leftSize.y));\n        if (right != null && !right.isDisposed()) {\n            top = true;\n            x -= rightSize.x;\n            right.setBounds(x, y, rightSize.x, topHeight);\n            x -= form.horizontalSpacing;\n        }\n        if (center != null && !center.isDisposed()) {\n            top = true;\n            x -= centerSize.x;\n            center.setBounds(x, y, centerSize.x, topHeight);\n            x -= form.horizontalSpacing;\n        }\n        if (left != null && !left.isDisposed()) {\n            top = true;\n            Rectangle trim = left instanceof Composite ? ((Composite) left).computeTrim(0, 0, 0, 0) : new Rectangle(0, 0, 0, 0);\n            int w = x - rect.x - form.marginWidth - form.highlight - trim.width;\n            int h = topHeight - trim.height;\n            leftSize = computeChildSize(left, w, h, false);\n            left.setBounds(rect.x + form.marginWidth + form.highlight, y, leftSize.x, topHeight);\n        }\n        if (top)\n            y += topHeight + form.verticalSpacing;\n    }\n    int oldSeperator = form.separator;\n    form.separator = -1;\n    if (content != null && !content.isDisposed()) {\n        if (left != null || right != null || center != null) {\n            form.separator = y;\n            y++;\n        }\n        content.setBounds(rect.x + form.marginWidth + form.highlight, y, rect.width - 2 * form.marginWidth - 2 * form.highlight, rect.y + rect.height - y - form.marginHeight - form.highlight);\n    }\n    if (oldSeperator != -1 && form.separator != -1) {\n        int t = Math.min(form.separator, oldSeperator);\n        int b = Math.max(form.separator, oldSeperator);\n        form.redraw(form.borderLeft, t, form.getSize().x - form.borderLeft - form.borderRight, b - t, false);\n    }\n}",
			"comments":"",
			"methodName":"protected void layout(Composite composite, boolean flushCache)"
		},
		"Point computeChildSize(Control control, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    Object data = control.getLayoutData();\n    if (data == null || !(data instanceof CLayoutData)) {\n        data = new CLayoutData();\n        control.setLayoutData(data);\n    }\n    return ((CLayoutData) data).computeSize(control, wHint, hHint, flushCache);\n}",
			"comments":"",
			"methodName":"Point computeChildSize(Control control, int wHint, int hHint, boolean flushCache)"
		}
	},
	"ClassORInterfaceName":[
		"ViewFormLayout"
	]
}
