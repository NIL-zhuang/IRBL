{
	"variables":[
		"SLEEP",
		"DEFAULT_WIDTH",
		"DEFAULT_HEIGHT",
		"active",
		"showStripes",
		"value",
		"orientation",
		"showBorder",
		"mask",
		"size",
		"gc",
		"disp",
		"rect",
		"rect",
		"color",
		"step",
		"foregroundValue",
		"y",
		"w",
		"h",
		"i",
		"x",
		"x",
		"w",
		"h",
		"i",
		"y",
		"display",
		"timer",
		"gc",
		"SWT",
		"parent",
		"style",
		"style",
		"SWT",
		"orientation",
		"SWT",
		"showBorder",
		"style",
		"SWT",
		"e",
		"SWT",
		"style",
		"mask",
		"active",
		"showStripes",
		"orientation",
		"SWT",
		"size",
		"DEFAULT_WIDTH",
		"DEFAULT_HEIGHT",
		"size",
		"DEFAULT_HEIGHT",
		"DEFAULT_WIDTH",
		"wHint",
		"SWT",
		"size",
		"wHint",
		"hHint",
		"SWT",
		"size",
		"hHint",
		"size",
		"gc",
		"topleft",
		"gc",
		"x",
		"y",
		"x",
		"w",
		"y",
		"gc",
		"x",
		"y",
		"x",
		"y",
		"h",
		"gc",
		"bottomright",
		"gc",
		"x",
		"w",
		"y",
		"x",
		"w",
		"y",
		"h",
		"gc",
		"x",
		"y",
		"h",
		"x",
		"w",
		"y",
		"h",
		"event",
		"gc",
		"rect",
		"showBorder",
		"gc",
		"rect",
		"rect",
		"rect",
		"rect",
		"disp",
		"SWT",
		"disp",
		"SWT",
		"gc",
		"showStripes",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"gc",
		"gc",
		"rect",
		"SWT",
		"gc",
		"color",
		"gc",
		"rect",
		"gc",
		"value",
		"step",
		"value",
		"orientation",
		"SWT",
		"rect",
		"rect",
		"rect",
		"i",
		"w",
		"i",
		"step",
		"i",
		"foregroundValue",
		"gc",
		"x",
		"y",
		"x",
		"h",
		"rect",
		"rect",
		"rect",
		"i",
		"h",
		"i",
		"step",
		"i",
		"foregroundValue",
		"gc",
		"x",
		"y",
		"w",
		"y",
		"active",
		"value",
		"value",
		"step",
		"active",
		"active",
		"showStripes",
		"timer",
		"active",
		"AnimatedProgress",
		"gc",
		"gc",
		"display",
		"SLEEP",
		"timer",
		"display",
		"SLEEP",
		"timer",
		"active",
		"HORIZONTAL",
		"VERTICAL",
		"VERTICAL",
		"BORDER",
		"NONE",
		"HORIZONTAL",
		"DEFAULT",
		"x",
		"DEFAULT",
		"y",
		"gc",
		"x",
		"y",
		"width",
		"height",
		"COLOR_WIDGET_NORMAL_SHADOW",
		"COLOR_WIDGET_HIGHLIGHT_SHADOW",
		"x",
		"y",
		"width",
		"height",
		"COLOR_LIST_SELECTION",
		"HORIZONTAL",
		"y",
		"width",
		"height",
		"x",
		"width",
		"height",
		"parent",
		"style",
		"e",
		"e",
		"e",
		"style",
		"wHint",
		"hHint",
		"changed",
		"gc",
		"x",
		"y",
		"w",
		"h",
		"topleft",
		"bottomright",
		"event",
		"gc"
	],
	"extendORImplementFiles":[
		"Canvas"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.events"
	],
	"methods":[
		"controlResized",
		"paintControl",
		"widgetDisposed",
		"checkStyle",
		"clear",
		"computeSize",
		"drawBevelRect",
		"paint",
		"paintStripes",
		"start",
		"run",
		"stop",
		"checkStyle",
		"addControlListener",
		"redraw",
		"addPaintListener",
		"paint",
		"addDisposeListener",
		"stop",
		"checkWidget",
		"stop",
		"redraw",
		"checkWidget",
		"setForeground",
		"drawLine",
		"drawLine",
		"setForeground",
		"drawLine",
		"drawLine",
		"getDisplay",
		"getClientArea",
		"fillRectangle",
		"drawBevelRect",
		"getSystemColor",
		"getSystemColor",
		"paintStripes",
		"getClientArea",
		"setLineWidth",
		"setClipping",
		"getSystemColor",
		"getDisplay",
		"setBackground",
		"fillRectangle",
		"setForeground",
		"getBackground",
		"drawLine",
		"drawLine",
		"checkWidget",
		"getDisplay",
		"paintStripes",
		"dispose",
		"timerExec",
		"timerExec",
		"ControlAdapter",
		"PaintListener",
		"DisposeListener",
		"Point",
		"Point",
		"Rectangle",
		"Runnable",
		"GC"
	],
	"methodsBody":{
		"private static int checkStyle(int style)":{
			"methodBody":"{\n    int mask = SWT.NONE;\n    return style & mask;\n}",
			"comments":"",
			"methodName":"private static int checkStyle(int style)"
		},
		"void paintStripes(GC gc)":{
			"methodBody":"{\n    if (!showStripes)\n        return;\n    Rectangle rect = getClientArea();\n    \n    rect = new Rectangle(rect.x + 2, rect.y + 2, rect.width - 4, rect.height - 4);\n    gc.setLineWidth(2);\n    gc.setClipping(rect);\n    Color color = getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);\n    gc.setBackground(color);\n    gc.fillRectangle(rect);\n    gc.setForeground(this.getBackground());\n    int step = 12;\n    int foregroundValue = value == 0 ? step - 2 : value - 2;\n    if (orientation == SWT.HORIZONTAL) {\n        int y = rect.y - 1;\n        int w = rect.width;\n        int h = rect.height + 2;\n        for (int i = 0; i < w; i += step) {\n            int x = i + foregroundValue;\n            gc.drawLine(x, y, x, h);\n        }\n    } else {\n        int x = rect.x - 1;\n        int w = rect.width + 2;\n        int h = rect.height;\n        for (int i = 0; i < h; i += step) {\n            int y = i + foregroundValue;\n            gc.drawLine(x, y, w, y);\n        }\n    }\n    if (active) {\n        value = (value + 2) % step;\n    }\n}",
			"comments":"// Subtracted border painted by paint.\n",
			"methodName":"void paintStripes(GC gc)"
		},
		"public void controlResized(ControlEvent e)":{
			"methodBody":"{\n    redraw();\n}",
			"comments":"",
			"methodName":"public void controlResized(ControlEvent e)"
		},
		"public void paintControl(PaintEvent e)":{
			"methodBody":"{\n    paint(e);\n}",
			"comments":"",
			"methodName":"public void paintControl(PaintEvent e)"
		},
		"public void widgetDisposed(DisposeEvent e)":{
			"methodBody":"{\n    stop();\n}",
			"comments":"",
			"methodName":"public void widgetDisposed(DisposeEvent e)"
		},
		"private void drawBevelRect(GC gc, int x, int y, int w, int h, Color topleft, Color bottomright)":{
			"methodBody":"{\n    gc.setForeground(topleft);\n    gc.drawLine(x, y, x + w - 1, y);\n    gc.drawLine(x, y, x, y + h - 1);\n    gc.setForeground(bottomright);\n    gc.drawLine(x + w, y, x + w, y + h);\n    gc.drawLine(x, y + h, x + w, y + h);\n}",
			"comments":"",
			"methodName":"private void drawBevelRect(GC gc, int x, int y, int w, int h, Color topleft, Color bottomright)"
		},
		"public Point computeSize(int wHint, int hHint, boolean changed)":{
			"methodBody":"{\n    checkWidget();\n    Point size = null;\n    if (orientation == SWT.HORIZONTAL) {\n        size = new Point(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    } else {\n        size = new Point(DEFAULT_HEIGHT, DEFAULT_WIDTH);\n    }\n    if (wHint != SWT.DEFAULT)\n        size.x = wHint;\n    if (hHint != SWT.DEFAULT)\n        size.y = hHint;\n    return size;\n}",
			"comments":"",
			"methodName":"public Point computeSize(int wHint, int hHint, boolean changed)"
		},
		"void paint(PaintEvent event)":{
			"methodBody":"{\n    GC gc = event.gc;\n    Display disp = getDisplay();\n    Rectangle rect = getClientArea();\n    gc.fillRectangle(rect);\n    if (showBorder) {\n        drawBevelRect(gc, rect.x, rect.y, rect.width - 1, rect.height - 1, disp.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW), disp.getSystemColor(SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));\n    }\n    paintStripes(gc);\n}",
			"comments":"",
			"methodName":"void paint(PaintEvent event)"
		},
		"public void run()":{
			"methodBody":"{\n    if (!active)\n        return;\n    GC gc = new GC(AnimatedProgress.this);\n    paintStripes(gc);\n    gc.dispose();\n    display.timerExec(SLEEP, timer[0]);\n}",
			"comments":"",
			"methodName":"public void run()"
		},
		"public synchronized void clear()":{
			"methodBody":"{\n    checkWidget();\n    if (active)\n        stop();\n    showStripes = false;\n    redraw();\n}",
			"comments":"/**\n* Stop the animation if it is not already stopped and\n* reset the presentation to a blank appearance.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public synchronized void clear()"
		},
		"public synchronized void stop()":{
			"methodBody":"{\n    \n    active = false;\n}",
			"comments":"/**\n* Stop the animation.   Freeze the presentation at its current appearance.\n*/\n//checkWidget();\n",
			"methodName":"public synchronized void stop()"
		},
		"public synchronized void start()":{
			"methodBody":"{\n    checkWidget();\n    if (active)\n        return;\n    active = true;\n    showStripes = true;\n    final Display display = getDisplay();\n    final Runnable[] timer = new Runnable[1];\n    timer[0] = new Runnable() {\n\n        public void run() {\n            if (!active)\n                return;\n            GC gc = new GC(AnimatedProgress.this);\n            paintStripes(gc);\n            gc.dispose();\n            display.timerExec(SLEEP, timer[0]);\n        }\n    };\n    display.timerExec(SLEEP, timer[0]);\n}",
			"comments":"/**\n* Start the animation.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public synchronized void start()"
		}
	},
	"ClassORInterfaceName":[
		"AnimatedProgress"
	]
}
