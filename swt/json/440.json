{
	"variables":[
		"message",
		"filterPath",
		"directoryPath",
		"buffer",
		"buffer",
		"length",
		"buffer",
		"byteCount",
		"hHeap",
		"hwndOwner",
		"lpszTitle",
		"string",
		"length",
		"buffer",
		"index",
		"i",
		"ch",
		"buffer",
		"byteCount",
		"callback",
		"address",
		"oldModal",
		"display",
		"lpbi",
		"oldErrorMode",
		"oldIgnore",
		"lpItemIdList",
		"success",
		"buffer",
		"ppMalloc",
		"parent",
		"SWT",
		"parent",
		"style",
		"uMsg",
		"OS",
		"filterPath",
		"filterPath",
		"filterPath",
		"OS",
		"hwnd",
		"OS",
		"buffer",
		"title",
		"title",
		"title",
		"OS",
		"hwnd",
		"buffer",
		"OS",
		"OS",
		"OS",
		"OS",
		"lParam",
		"OS",
		"lParam",
		"length",
		"buffer",
		"TCHAR",
		"OS",
		"buffer",
		"lParam",
		"byteCount",
		"directoryPath",
		"buffer",
		"length",
		"filterPath",
		"message",
		"OS",
		"SWT",
		"SWT",
		"OS",
		"parent",
		"hwndOwner",
		"parent",
		"message",
		"message",
		"string",
		"string",
		"length",
		"i",
		"length",
		"i",
		"string",
		"i",
		"ch",
		"buffer",
		"index",
		"buffer",
		"index",
		"ch",
		"string",
		"buffer",
		"index",
		"string",
		"buffer",
		"TCHAR",
		"lpszTitle",
		"OS",
		"hHeap",
		"OS",
		"byteCount",
		"OS",
		"lpszTitle",
		"buffer",
		"byteCount",
		"callback",
		"address",
		"SWT",
		"SWT",
		"parent",
		"style",
		"SWT",
		"SWT",
		"oldModal",
		"display",
		"display",
		"parent",
		"directoryPath",
		"lpbi",
		"hwndOwner",
		"lpbi",
		"lpszTitle",
		"lpbi",
		"OS",
		"OS",
		"OS",
		"OS",
		"lpbi",
		"address",
		"OS",
		"OS",
		"display",
		"OS",
		"display",
		"OS",
		"lpbi",
		"OS",
		"display",
		"oldIgnore",
		"OS",
		"oldErrorMode",
		"style",
		"SWT",
		"SWT",
		"display",
		"oldModal",
		"lpItemIdList",
		"success",
		"OS",
		"OS",
		"lpItemIdList",
		"buffer",
		"directoryPath",
		"buffer",
		"buffer",
		"filterPath",
		"directoryPath",
		"callback",
		"lpszTitle",
		"OS",
		"hHeap",
		"lpszTitle",
		"OS",
		"ppMalloc",
		"OS",
		"OS",
		"ppMalloc",
		"lpItemIdList",
		"success",
		"directoryPath",
		"filterPath",
		"string",
		"string",
		"SWT",
		"message",
		"string",
		"PRIMARY_MODAL",
		"BFFM_INITIALIZED",
		"BFFM_SETSELECTION",
		"BFFM_VALIDATEFAILEDA",
		"BFFM_VALIDATEFAILEDW",
		"IsUnicode",
		"sizeof",
		"IsWinCE",
		"ERROR_NOT_IMPLEMENTED",
		"handle",
		"sizeof",
		"HEAP_ZERO_MEMORY",
		"ERROR_NO_MORE_CALLBACKS",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"hwndOwner",
		"lpszTitle",
		"ulFlags",
		"BIF_NEWDIALOGSTYLE",
		"BIF_RETURNONLYFSDIRS",
		"BIF_EDITBOX",
		"BIF_VALIDATE",
		"lpfn",
		"SEM_FAILCRITICALERRORS",
		"ignoreMsgFilter",
		"COMCTL32_MAJOR",
		"ignoreMsgFilter",
		"COMCTL32_MAJOR",
		"ignoreMsgFilter",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"MAX_PATH",
		"S_OK",
		"ERROR_NULL_ARGUMENT",
		"parent",
		"parent",
		"style",
		"hwnd",
		"uMsg",
		"lParam",
		"lpData",
		"string",
		"string"
	],
	"extendORImplementFiles":[
		"Dialog"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal",
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt"
	],
	"methods":[
		"BrowseCallbackProc",
		"getFilterPath",
		"getMessage",
		"open",
		"setFilterPath",
		"setMessage",
		"checkSubclass",
		"length",
		"replace",
		"SendMessage",
		"length",
		"SetWindowText",
		"wcslen",
		"strlen",
		"length",
		"MoveMemory",
		"toString",
		"error",
		"GetProcessHeap",
		"length",
		"indexOf",
		"length",
		"charAt",
		"length",
		"HeapAlloc",
		"MoveMemory",
		"getAddress",
		"error",
		"getDisplay",
		"getModalDialogShell",
		"setModalDialogShell",
		"SetErrorMode",
		"SHBrowseForFolder",
		"SetErrorMode",
		"setModalDialogShell",
		"SHGetPathFromIDList",
		"toString",
		"strlen",
		"dispose",
		"HeapFree",
		"SHGetMalloc",
		"VtblCall",
		"error",
		"TCHAR",
		"TCHAR",
		"TCHAR",
		"String",
		"TCHAR",
		"Callback",
		"BROWSEINFO",
		"TCHAR"
	],
	"methodsBody":{
		"public String open()":{
			"methodBody":"{\n    if (OS.IsWinCE)\n        SWT.error(SWT.ERROR_NOT_IMPLEMENTED);\n    int hHeap = OS.GetProcessHeap();\n    \n    int hwndOwner = 0;\n    if (parent != null)\n        hwndOwner = parent.handle;\n    \n    int lpszTitle = 0;\n    if (message.length() != 0) {\n        String string = message;\n        if (string.indexOf('&') != -1) {\n            int length = string.length();\n            char[] buffer = new char[length * 2];\n            int index = 0;\n            for (int i = 0; i < length; i++) {\n                char ch = string.charAt(i);\n                if (ch == '&')\n                    buffer[index++] = '&';\n                buffer[index++] = ch;\n            }\n            string = new String(buffer, 0, index);\n        }\n        \n        TCHAR buffer = new TCHAR(0, string, true);\n        int byteCount = buffer.length() * TCHAR.sizeof;\n        lpszTitle = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\n        OS.MoveMemory(lpszTitle, buffer, byteCount);\n    }\n    \n    \n    Callback callback = new Callback(this, \"BrowseCallbackProc\", 4);\n    int address = callback.getAddress();\n    if (address == 0)\n        SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);\n    \n    Shell oldModal = null;\n    Display display = parent.getDisplay();\n    if ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        oldModal = display.getModalDialogShell();\n        display.setModalDialogShell(parent);\n    }\n    directoryPath = null;\n    BROWSEINFO lpbi = new BROWSEINFO();\n    lpbi.hwndOwner = hwndOwner;\n    lpbi.lpszTitle = lpszTitle;\n    lpbi.ulFlags = OS.BIF_NEWDIALOGSTYLE | OS.BIF_RETURNONLYFSDIRS | OS.BIF_EDITBOX | OS.BIF_VALIDATE;\n    lpbi.lpfn = address;\n    \n    int oldErrorMode = OS.SetErrorMode(OS.SEM_FAILCRITICALERRORS);\n    \n    boolean oldIgnore = display.ignoreMsgFilter;\n    if (OS.COMCTL32_MAJOR < 6)\n        display.ignoreMsgFilter = true;\n    int lpItemIdList = OS.SHBrowseForFolder(lpbi);\n    if (OS.COMCTL32_MAJOR < 6)\n        display.ignoreMsgFilter = oldIgnore;\n    OS.SetErrorMode(oldErrorMode);\n    \n    if ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        display.setModalDialogShell(oldModal);\n    }\n    boolean success = lpItemIdList != 0;\n    if (success) {\n        \n        TCHAR buffer = new TCHAR(0, OS.MAX_PATH);\n        if (OS.SHGetPathFromIDList(lpItemIdList, buffer)) {\n            directoryPath = buffer.toString(0, buffer.strlen());\n            filterPath = directoryPath;\n        }\n    }\n    \n    callback.dispose();\n    \n    if (lpszTitle != 0)\n        OS.HeapFree(hHeap, 0, lpszTitle);\n    \n    int[] ppMalloc = new int[1];\n    if (OS.SHGetMalloc(ppMalloc) == OS.S_OK) {\n        \n        OS.VtblCall(5, ppMalloc[0], lpItemIdList);\n    }\n    \n    if (!success)\n        return null;\n    return directoryPath;\n}",
			"comments":"/**\n* Makes the dialog visible and brings it to the front\n* of the display.\n*\n* @return a string describing the absolute path of the selected directory,\n*         or null if the dialog was cancelled or an error occurred\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the dialog has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog</li>\n* </ul>\n*/\n/* Get the owner HWND for the dialog */\n/* Copy the message to OS memory */\n/* Use the character encoding for the default locale */\n/* Create the BrowseCallbackProc */\n//$NON-NLS-1$\n/* Make the parent shell be temporary modal */\n/*\n* Bug in Windows.  On some hardware configurations, SHBrowseForFolder()\n* causes warning dialogs with the message \"There is no disk in the drive\n* Please insert a disk into \\Device\\Harddisk0\\DR0\".  This is possibly\n* caused by SHBrowseForFolder() calling internally GetVolumeInformation().\n* MSDN for GetVolumeInformation() says:\n*\n* \"If you are attempting to obtain information about a floppy drive\n* that does not have a floppy disk or a CD-ROM drive that does not\n* have a compact disc, the system displays a message box asking the\n* user to insert a floppy disk or a compact disc, respectively.\n* To prevent the system from displaying this message box, call the\n* SetErrorMode function with SEM_FAILCRITICALERRORS.\"\n*\n* The fix is to save and restore the error mode using SetErrorMode()\n* with the SEM_FAILCRITICALERRORS flag around SHBrowseForFolder().\n*/\n/*\n* Bug in Windows.  When a WH_MSGFILTER hook is used to run code\n* during the message loop for SHBrowseForFolder(), running code\n* in the hook can cause a GP.  Specifically, SetWindowText()\n* for static controls seemed to make the problem happen.\n* The fix is to ignore the hook while the directory dialog\n* is open.\n*\n* NOTE:  This only happens in versions of the comctl32.dll\n* earlier than 6.0.\n*/\n/* Clear the temporary dialog modal parent */\n/* Use the character encoding for the default locale */\n/* Free the BrowseCallbackProc */\n/* Free the OS memory */\n/* Free the pointer to the ITEMIDLIST */\n/* void Free (struct IMalloc *this, void *pv); */\n/*\n* This code is intentionally commented.  On some\n* platforms, the owner window is repainted right\n* away when a dialog window exits.  This behavior\n* is currently unspecified.\n*/\n//\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);\n/* Return the directory path */\n",
			"methodName":"public String open()"
		},
		"public void setFilterPath(String string)":{
			"methodBody":"{\n    filterPath = string;\n}",
			"comments":"/**\n* Sets the path that the dialog will use to filter\n* the directories it shows to the argument, which may\n* be null. If the string is null, then the operating\n* system's default filter path will be used.\n* <p>\n* Note that the path string is platform dependent.\n* For convenience, either '/' or '\\' can be used\n* as a path separator.\n* </p>\n*\n* @param string the filter path\n*/\n",
			"methodName":"public void setFilterPath(String string)"
		},
		"int BrowseCallbackProc(int hwnd, int uMsg, int lParam, int lpData)":{
			"methodBody":"{\n    switch(uMsg) {\n        case OS.BFFM_INITIALIZED:\n            if (filterPath != null && filterPath.length() != 0) {\n                \n                TCHAR buffer = new TCHAR(0, filterPath.replace('/', '\\\\'), true);\n                OS.SendMessage(hwnd, OS.BFFM_SETSELECTION, 1, buffer);\n            }\n            if (title != null && title.length() != 0) {\n                \n                TCHAR buffer = new TCHAR(0, title, true);\n                OS.SetWindowText(hwnd, buffer);\n            }\n            break;\n        case OS.BFFM_VALIDATEFAILEDA:\n        case OS.BFFM_VALIDATEFAILEDW:\n            \n            int length = OS.IsUnicode ? OS.wcslen(lParam) : OS.strlen(lParam);\n            TCHAR buffer = new TCHAR(0, length);\n            int byteCount = buffer.length() * TCHAR.sizeof;\n            OS.MoveMemory(buffer, lParam, byteCount);\n            directoryPath = buffer.toString(0, length);\n            break;\n    }\n    return 0;\n}",
			"comments":"/* Use the character encoding for the default locale */\n/* Use the character encoding for the default locale */\n/* Use the character encoding for the default locale */\n",
			"methodName":"int BrowseCallbackProc(int hwnd, int uMsg, int lParam, int lpData)"
		},
		"public String getFilterPath()":{
			"methodBody":"{\n    return filterPath;\n}",
			"comments":"/**\n* Returns the path which the dialog will use to filter\n* the directories it shows.\n*\n* @return the filter path\n*\n* @see #setFilterPath\n*/\n",
			"methodName":"public String getFilterPath()"
		},
		"public String getMessage()":{
			"methodBody":"{\n    return message;\n}",
			"comments":"/**\n* Returns the dialog's message, which is a description of\n* the purpose for which it was opened. This message will be\n* visible on the dialog while it is open.\n*\n* @return the message\n*/\n",
			"methodName":"public String getMessage()"
		},
		"public void setMessage(String string)":{
			"methodBody":"{\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    message = string;\n}",
			"comments":"/**\n* Sets the dialog's message, which is a description of\n* the purpose for which it was opened. This message will be\n* visible on the dialog while it is open.\n*\n* @param string the message\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n*/\n",
			"methodName":"public void setMessage(String string)"
		}
	},
	"ClassORInterfaceName":[
		"DirectoryDialog"
	]
}
