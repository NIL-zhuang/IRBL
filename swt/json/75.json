{
	"variables":[
		"table",
		"row",
		"column",
		"tableListener",
		"resizeListener",
		"disposeItemListener",
		"disposeColumnListener",
		"BACKGROUND",
		"FOREGROUND",
		"listener",
		"events",
		"i",
		"hBar",
		"vBar",
		"typedListener",
		"hBar",
		"vBar",
		"rowIndex",
		"columnIndex",
		"columnCount",
		"order",
		"index",
		"leadKey",
		"i",
		"index",
		"rect",
		"item",
		"itemRect",
		"height",
		"page",
		"index",
		"rect",
		"item",
		"itemRect",
		"height",
		"page",
		"end",
		"columnIndex",
		"gc",
		"display",
		"x",
		"size",
		"image",
		"imageSize",
		"imageY",
		"text",
		"bounds",
		"extent",
		"platform",
		"alignmnent",
		"alignmnent",
		"textY",
		"pt",
		"clientRect",
		"columnCount",
		"maxColumnIndex",
		"start",
		"end",
		"i",
		"item",
		"j",
		"rect",
		"item",
		"col",
		"columnIndex",
		"columnIndex",
		"columnCount",
		"maxColumnIndex",
		"columnCount",
		"maxColumnIndex",
		"SWT",
		"SWT",
		"parent",
		"style",
		"table",
		"parent",
		"event",
		"SWT",
		"event",
		"SWT",
		"SWT",
		"SWT",
		"event",
		"SWT",
		"event",
		"SWT",
		"event",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"events",
		"i",
		"events",
		"i",
		"listener",
		"tableListener",
		"event",
		"SWT",
		"event",
		"SWT",
		"event",
		"table",
		"SWT",
		"tableListener",
		"table",
		"SWT",
		"tableListener",
		"disposeItemListener",
		"row",
		"column",
		"disposeColumnListener",
		"row",
		"column",
		"resizeListener",
		"table",
		"hBar",
		"hBar",
		"SWT",
		"resizeListener",
		"table",
		"vBar",
		"vBar",
		"SWT",
		"resizeListener",
		"listener",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"table",
		"SWT",
		"tableListener",
		"table",
		"SWT",
		"tableListener",
		"column",
		"column",
		"SWT",
		"disposeColumnListener",
		"column",
		"SWT",
		"resizeListener",
		"column",
		"SWT",
		"resizeListener",
		"column",
		"row",
		"row",
		"SWT",
		"disposeItemListener",
		"row",
		"table",
		"hBar",
		"hBar",
		"SWT",
		"resizeListener",
		"table",
		"vBar",
		"vBar",
		"SWT",
		"resizeListener",
		"row",
		"event",
		"SWT",
		"SWT",
		"table",
		"row",
		"column",
		"table",
		"column",
		"event",
		"SWT",
		"Math",
		"rowIndex",
		"columnIndex",
		"SWT",
		"Math",
		"rowIndex",
		"table",
		"columnIndex",
		"SWT",
		"SWT",
		"table",
		"columnCount",
		"table",
		"index",
		"order",
		"order",
		"index",
		"columnIndex",
		"index",
		"index",
		"order",
		"index",
		"SWT",
		"SWT",
		"SWT",
		"event",
		"leadKey",
		"rowIndex",
		"order",
		"Math",
		"index",
		"rowIndex",
		"order",
		"Math",
		"columnCount",
		"index",
		"SWT",
		"columnIndex",
		"SWT",
		"table",
		"i",
		"columnIndex",
		"SWT",
		"table",
		"index",
		"rowIndex",
		"table",
		"table",
		"index",
		"item",
		"rect",
		"itemRect",
		"table",
		"Math",
		"rect",
		"height",
		"index",
		"Math",
		"index",
		"page",
		"index",
		"columnIndex",
		"SWT",
		"table",
		"table",
		"table",
		"index",
		"item",
		"rect",
		"itemRect",
		"table",
		"Math",
		"rect",
		"height",
		"table",
		"index",
		"Math",
		"end",
		"index",
		"page",
		"index",
		"rowIndex",
		"index",
		"Math",
		"end",
		"index",
		"page",
		"index",
		"columnIndex",
		"row",
		"column",
		"table",
		"column",
		"event",
		"gc",
		"gc",
		"gc",
		"event",
		"event",
		"event",
		"event",
		"row",
		"columnIndex",
		"image",
		"image",
		"size",
		"imageSize",
		"gc",
		"image",
		"x",
		"imageY",
		"x",
		"imageSize",
		"row",
		"columnIndex",
		"text",
		"row",
		"columnIndex",
		"gc",
		"text",
		"SWT",
		"platform",
		"table",
		"columnIndex",
		"x",
		"column",
		"alignmnent",
		"SWT",
		"x",
		"SWT",
		"x",
		"bounds",
		"extent",
		"SWT",
		"x",
		"bounds",
		"x",
		"extent",
		"table",
		"x",
		"column",
		"alignmnent",
		"SWT",
		"x",
		"SWT",
		"x",
		"bounds",
		"extent",
		"SWT",
		"x",
		"bounds",
		"x",
		"extent",
		"size",
		"extent",
		"gc",
		"text",
		"x",
		"textY",
		"gc",
		"display",
		"SWT",
		"gc",
		"display",
		"SWT",
		"gc",
		"size",
		"size",
		"event",
		"event",
		"table",
		"table",
		"columnCount",
		"columnCount",
		"table",
		"table",
		"start",
		"i",
		"end",
		"i",
		"table",
		"i",
		"j",
		"maxColumnIndex",
		"j",
		"item",
		"j",
		"rect",
		"clientRect",
		"clientRect",
		"rect",
		"pt",
		"i",
		"j",
		"event",
		"SWT",
		"SWT",
		"SWT",
		"event",
		"event",
		"row",
		"table",
		"row",
		"column",
		"table",
		"table",
		"column",
		"item",
		"col",
		"notify",
		"row",
		"column",
		"row",
		"SWT",
		"disposeItemListener",
		"column",
		"SWT",
		"disposeColumnListener",
		"SWT",
		"resizeListener",
		"SWT",
		"resizeListener",
		"row",
		"row",
		"row",
		"row",
		"SWT",
		"disposeItemListener",
		"table",
		"row",
		"column",
		"column",
		"column",
		"column",
		"SWT",
		"disposeColumnListener",
		"column",
		"SWT",
		"resizeListener",
		"column",
		"SWT",
		"resizeListener",
		"table",
		"column",
		"column",
		"table",
		"column",
		"row",
		"columnIndex",
		"notify",
		"SWT",
		"visible",
		"visible",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"listener",
		"row",
		"column",
		"table",
		"column",
		"row",
		"columnIndex",
		"column",
		"table",
		"column",
		"row",
		"color",
		"color",
		"BACKGROUND",
		"color",
		"color",
		"color",
		"FOREGROUND",
		"color",
		"table",
		"columnCount",
		"columnCount",
		"row",
		"row",
		"table",
		"column",
		"column",
		"maxColumnIndex",
		"SWT",
		"SWT",
		"row",
		"column",
		"table",
		"columnCount",
		"columnCount",
		"row",
		"row",
		"column",
		"column",
		"maxColumnIndex",
		"SWT",
		"SWT",
		"table",
		"row",
		"column",
		"COLOR_LIST_SELECTION_TEXT",
		"COLOR_LIST_SELECTION",
		"type",
		"Dispose",
		"FocusIn",
		"FocusOut",
		"KeyDown",
		"Paint",
		"Traverse",
		"Dispose",
		"FocusIn",
		"FocusOut",
		"KeyDown",
		"Paint",
		"Traverse",
		"length",
		"type",
		"MouseDown",
		"FocusIn",
		"FocusIn",
		"MouseDown",
		"Selection",
		"Selection",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"FocusIn",
		"MouseDown",
		"Dispose",
		"Move",
		"Resize",
		"Dispose",
		"Selection",
		"Selection",
		"character",
		"CR",
		"DefaultSelection",
		"keyCode",
		"ARROW_UP",
		"ARROW_DOWN",
		"ARROW_LEFT",
		"ARROW_RIGHT",
		"length",
		"length",
		"RIGHT_TO_LEFT",
		"ARROW_RIGHT",
		"ARROW_LEFT",
		"keyCode",
		"HOME",
		"END",
		"PAGE_UP",
		"height",
		"y",
		"height",
		"PAGE_DOWN",
		"height",
		"y",
		"height",
		"gc",
		"x",
		"y",
		"width",
		"height",
		"y",
		"height",
		"width",
		"LEFT",
		"RIGHT",
		"width",
		"x",
		"CENTER",
		"width",
		"x",
		"LEFT",
		"RIGHT",
		"width",
		"x",
		"CENTER",
		"width",
		"x",
		"y",
		"y",
		"COLOR_BLACK",
		"COLOR_WHITE",
		"x",
		"y",
		"x",
		"y",
		"y",
		"y",
		"height",
		"detail",
		"TRAVERSE_ARROW_NEXT",
		"TRAVERSE_ARROW_PREVIOUS",
		"TRAVERSE_RETURN",
		"doit",
		"doit",
		"row",
		"column",
		"row",
		"row",
		"row",
		"Dispose",
		"row",
		"column",
		"column",
		"column",
		"Dispose",
		"column",
		"Move",
		"column",
		"Resize",
		"column",
		"row",
		"row",
		"Dispose",
		"column",
		"column",
		"Dispose",
		"Move",
		"Resize",
		"Selection",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"parent",
		"style",
		"event",
		"event",
		"event",
		"event",
		"event",
		"listener",
		"event",
		"event",
		"event",
		"event",
		"event",
		"event",
		"row",
		"column",
		"notify",
		"row",
		"column",
		"notify",
		"visible",
		"listener",
		"color",
		"color",
		"row",
		"column",
		"row",
		"column"
	],
	"extendORImplementFiles":[
		"Canvas"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.events"
	],
	"methods":[
		"handleEvent",
		"handleEvent",
		"handleEvent",
		"handleEvent",
		"handleEvent",
		"addSelectionListener",
		"dispose",
		"keyDown",
		"paint",
		"tableFocusIn",
		"tableMouseDown",
		"traverse",
		"setRowColumn",
		"setRowColumn",
		"setVisible",
		"removeSelectionListener",
		"resize",
		"getColumn",
		"getRow",
		"setBackground",
		"setForeground",
		"setSelection",
		"setSelection",
		"setBackground",
		"setForeground",
		"dispose",
		"redraw",
		"keyDown",
		"paint",
		"traverse",
		"addListener",
		"tableMouseDown",
		"tableFocusIn",
		"addListener",
		"addListener",
		"resize",
		"resize",
		"resize",
		"getHorizontalBar",
		"addListener",
		"getVerticalBar",
		"addListener",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"getHorizontalBar",
		"removeListener",
		"getVerticalBar",
		"removeListener",
		"notifyListeners",
		"indexOf",
		"indexOf",
		"setRowColumn",
		"max",
		"setRowColumn",
		"min",
		"getItemCount",
		"getColumnCount",
		"getColumnOrder",
		"getStyle",
		"setRowColumn",
		"max",
		"setRowColumn",
		"min",
		"setRowColumn",
		"getItemCount",
		"setRowColumn",
		"getTopIndex",
		"getClientArea",
		"getItem",
		"getBounds",
		"getItemHeight",
		"max",
		"max",
		"setRowColumn",
		"getTopIndex",
		"getClientArea",
		"getItem",
		"getBounds",
		"getItemHeight",
		"max",
		"getItemCount",
		"min",
		"min",
		"setRowColumn",
		"indexOf",
		"getDisplay",
		"setBackground",
		"getBackground",
		"setForeground",
		"getForeground",
		"fillRectangle",
		"getSize",
		"getImage",
		"getBounds",
		"drawImage",
		"getText",
		"getBounds",
		"stringExtent",
		"getPlatform",
		"equals",
		"getColumnCount",
		"getAlignment",
		"getColumnCount",
		"getAlignment",
		"drawString",
		"isFocusControl",
		"setBackground",
		"getSystemColor",
		"setForeground",
		"getSystemColor",
		"drawFocus",
		"isDisposed",
		"isVisible",
		"setFocus",
		"isDisposed",
		"isVisible",
		"getClientArea",
		"getColumnCount",
		"getTopIndex",
		"getItemCount",
		"getItem",
		"getBounds",
		"contains",
		"setRowColumn",
		"setFocus",
		"getItem",
		"getColumnCount",
		"getColumn",
		"setRowColumn",
		"removeListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"addListener",
		"showItem",
		"addListener",
		"addListener",
		"addListener",
		"showColumn",
		"indexOf",
		"setBounds",
		"getBounds",
		"redraw",
		"notifyListeners",
		"checkWidget",
		"resize",
		"setVisible",
		"checkWidget",
		"error",
		"removeListener",
		"removeListener",
		"setBounds",
		"indexOf",
		"setBounds",
		"getBounds",
		"checkWidget",
		"indexOf",
		"checkWidget",
		"getSystemColor",
		"getDisplay",
		"setBackground",
		"redraw",
		"getSystemColor",
		"getDisplay",
		"setForeground",
		"redraw",
		"checkWidget",
		"getColumnCount",
		"getItemCount",
		"error",
		"setRowColumn",
		"checkWidget",
		"getColumnCount",
		"isDisposed",
		"error",
		"setRowColumn",
		"indexOf",
		"Listener",
		"Listener",
		"Listener",
		"Listener",
		"Listener",
		"TypedListener",
		"Event",
		"Point",
		"Event"
	],
	"methodsBody":{
		"public void setSelection(int row, int column)":{
			"methodBody":"{\n    checkWidget();\n    int columnCount = table.getColumnCount();\n    int maxColumnIndex = columnCount == 0 ? 0 : columnCount - 1;\n    if (row < 0 || row >= table.getItemCount() || column < 0 || column > maxColumnIndex)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    setRowColumn(row, column, false);\n}",
			"comments":"/**\n* Positions the TableCursor over the cell at the given row and column in the parent table.\n*\n* @param row the index of the row for the cell to select\n* @param column the index of column for the cell to select\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n*/\n",
			"methodName":"public void setSelection(int row, int column)"
		},
		"void setRowColumn(TableItem row, TableColumn column, boolean notify)":{
			"methodBody":"{\n    if (this.row == row && this.column == column) {\n        return;\n    }\n    if (this.row != null && this.row != row) {\n        this.row.removeListener(SWT.Dispose, disposeItemListener);\n        this.row = null;\n    }\n    if (this.column != null && this.column != column) {\n        this.column.removeListener(SWT.Dispose, disposeColumnListener);\n        this.column.removeListener(SWT.Move, resizeListener);\n        this.column.removeListener(SWT.Resize, resizeListener);\n        this.column = null;\n    }\n    if (row != null) {\n        if (this.row != row) {\n            this.row = row;\n            row.addListener(SWT.Dispose, disposeItemListener);\n            table.showItem(row);\n        }\n        if (this.column != column && column != null) {\n            this.column = column;\n            column.addListener(SWT.Dispose, disposeColumnListener);\n            column.addListener(SWT.Move, resizeListener);\n            column.addListener(SWT.Resize, resizeListener);\n            table.showColumn(column);\n        }\n        int columnIndex = column == null ? 0 : table.indexOf(column);\n        setBounds(row.getBounds(columnIndex));\n        redraw();\n        if (notify) {\n            notifyListeners(SWT.Selection, new Event());\n        }\n    }\n}",
			"comments":"",
			"methodName":"void setRowColumn(TableItem row, TableColumn column, boolean notify)"
		},
		"void setRowColumn(int row, int column, boolean notify)":{
			"methodBody":"{\n    TableItem item = row == -1 ? null : table.getItem(row);\n    TableColumn col = column == -1 || table.getColumnCount() == 0 ? null : table.getColumn(column);\n    setRowColumn(item, col, notify);\n}",
			"comments":"",
			"methodName":"void setRowColumn(int row, int column, boolean notify)"
		},
		"void paint(Event event)":{
			"methodBody":"{\n    if (row == null)\n        return;\n    int columnIndex = column == null ? 0 : table.indexOf(column);\n    GC gc = event.gc;\n    Display display = getDisplay();\n    gc.setBackground(getBackground());\n    gc.setForeground(getForeground());\n    gc.fillRectangle(event.x, event.y, event.width, event.height);\n    int x = 0;\n    Point size = getSize();\n    Image image = row.getImage(columnIndex);\n    if (image != null) {\n        Rectangle imageSize = image.getBounds();\n        int imageY = (size.y - imageSize.height) / 2;\n        gc.drawImage(image, x, imageY);\n        x += imageSize.width;\n    }\n    String text = row.getText(columnIndex);\n    if (text != \"\") {\n        \n        Rectangle bounds = row.getBounds(columnIndex);\n        Point extent = gc.stringExtent(text);\n        \n        String platform = SWT.getPlatform();\n        if (\"win32\".equals(platform)) {\n            \n            if (table.getColumnCount() == 0 || columnIndex == 0) {\n                x += 2;\n            } else {\n                int alignmnent = column.getAlignment();\n                switch(alignmnent) {\n                    case SWT.LEFT:\n                        x += 6;\n                        break;\n                    case SWT.RIGHT:\n                        x = bounds.width - extent.x - 6;\n                        break;\n                    case SWT.CENTER:\n                        x += (bounds.width - x - extent.x) / 2;\n                        break;\n                }\n            }\n        } else {\n            if (table.getColumnCount() == 0) {\n                x += 5;\n            } else {\n                int alignmnent = column.getAlignment();\n                switch(alignmnent) {\n                    case SWT.LEFT:\n                        x += 5;\n                        break;\n                    case SWT.RIGHT:\n                        x = bounds.width - extent.x - 2;\n                        break;\n                    case SWT.CENTER:\n                        x += (bounds.width - x - extent.x) / 2 + 2;\n                        break;\n                }\n            }\n        }\n        int textY = (size.y - extent.y) / 2;\n        gc.drawString(text, x, textY);\n    }\n    if (isFocusControl()) {\n        gc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));\n        gc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));\n        gc.drawFocus(0, 0, size.x, size.y);\n    }\n}",
			"comments":"//$NON-NLS-1$\n// Temporary code - need a better way to determine table trim\n//$NON-NLS-1$\n",
			"methodName":"void paint(Event event)"
		},
		"void dispose(Event event)":{
			"methodBody":"{\n    table.removeListener(SWT.FocusIn, tableListener);\n    table.removeListener(SWT.MouseDown, tableListener);\n    if (column != null) {\n        column.removeListener(SWT.Dispose, disposeColumnListener);\n        column.removeListener(SWT.Move, resizeListener);\n        column.removeListener(SWT.Resize, resizeListener);\n        column = null;\n    }\n    if (row != null) {\n        row.removeListener(SWT.Dispose, disposeItemListener);\n        row = null;\n    }\n    ScrollBar hBar = table.getHorizontalBar();\n    if (hBar != null) {\n        hBar.removeListener(SWT.Selection, resizeListener);\n    }\n    ScrollBar vBar = table.getVerticalBar();\n    if (vBar != null) {\n        vBar.removeListener(SWT.Selection, resizeListener);\n    }\n}",
			"comments":"",
			"methodName":"void dispose(Event event)"
		},
		"void traverse(Event event)":{
			"methodBody":"{\n    switch(event.detail) {\n        case SWT.TRAVERSE_ARROW_NEXT:\n        case SWT.TRAVERSE_ARROW_PREVIOUS:\n        case SWT.TRAVERSE_RETURN:\n            event.doit = false;\n            return;\n    }\n    event.doit = true;\n}",
			"comments":"",
			"methodName":"void traverse(Event event)"
		},
		"void resize()":{
			"methodBody":"{\n    if (row == null) {\n        setBounds(-200, -200, 0, 0);\n    } else {\n        int columnIndex = column == null ? 0 : table.indexOf(column);\n        setBounds(row.getBounds(columnIndex));\n    }\n}",
			"comments":"",
			"methodName":"void resize()"
		},
		"void keyDown(Event event)":{
			"methodBody":"{\n    if (row == null)\n        return;\n    switch(event.character) {\n        case SWT.CR:\n            notifyListeners(SWT.DefaultSelection, new Event());\n            return;\n    }\n    int rowIndex = table.indexOf(row);\n    int columnIndex = column == null ? 0 : table.indexOf(column);\n    switch(event.keyCode) {\n        case SWT.ARROW_UP:\n            setRowColumn(Math.max(0, rowIndex - 1), columnIndex, true);\n            break;\n        case SWT.ARROW_DOWN:\n            setRowColumn(Math.min(rowIndex + 1, table.getItemCount() - 1), columnIndex, true);\n            break;\n        case SWT.ARROW_LEFT:\n        case SWT.ARROW_RIGHT:\n            {\n                int columnCount = table.getColumnCount();\n                if (columnCount == 0)\n                    break;\n                int[] order = table.getColumnOrder();\n                int index = 0;\n                while (index < order.length) {\n                    if (order[index] == columnIndex)\n                        break;\n                    index++;\n                }\n                if (index == order.length)\n                    index = 0;\n                int leadKey = (getStyle() & SWT.RIGHT_TO_LEFT) != 0 ? SWT.ARROW_RIGHT : SWT.ARROW_LEFT;\n                if (event.keyCode == leadKey) {\n                    setRowColumn(rowIndex, order[Math.max(0, index - 1)], true);\n                } else {\n                    setRowColumn(rowIndex, order[Math.min(columnCount - 1, index + 1)], true);\n                }\n                break;\n            }\n        case SWT.HOME:\n            setRowColumn(0, columnIndex, true);\n            break;\n        case SWT.END:\n            {\n                int i = table.getItemCount() - 1;\n                setRowColumn(i, columnIndex, true);\n                break;\n            }\n        case SWT.PAGE_UP:\n            {\n                int index = table.getTopIndex();\n                if (index == rowIndex) {\n                    Rectangle rect = table.getClientArea();\n                    TableItem item = table.getItem(index);\n                    Rectangle itemRect = item.getBounds(0);\n                    rect.height -= itemRect.y;\n                    int height = table.getItemHeight();\n                    int page = Math.max(1, rect.height / height);\n                    index = Math.max(0, index - page + 1);\n                }\n                setRowColumn(index, columnIndex, true);\n                break;\n            }\n        case SWT.PAGE_DOWN:\n            {\n                int index = table.getTopIndex();\n                Rectangle rect = table.getClientArea();\n                TableItem item = table.getItem(index);\n                Rectangle itemRect = item.getBounds(0);\n                rect.height -= itemRect.y;\n                int height = table.getItemHeight();\n                int page = Math.max(1, rect.height / height);\n                int end = table.getItemCount() - 1;\n                index = Math.min(end, index + page - 1);\n                if (index == rowIndex) {\n                    index = Math.min(end, index + page - 1);\n                }\n                setRowColumn(index, columnIndex, true);\n                break;\n            }\n    }\n}",
			"comments":"",
			"methodName":"void keyDown(Event event)"
		},
		"void tableFocusIn(Event event)":{
			"methodBody":"{\n    if (isDisposed())\n        return;\n    if (isVisible())\n        setFocus();\n}",
			"comments":"",
			"methodName":"void tableFocusIn(Event event)"
		},
		"public int getColumn()":{
			"methodBody":"{\n    checkWidget();\n    return column == null ? 0 : table.indexOf(column);\n}",
			"comments":"/**\n* Returns the column over which the TableCursor is positioned.\n*\n* @return the column for the current position\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getColumn()"
		},
		"public void setSelection(TableItem row, int column)":{
			"methodBody":"{\n    checkWidget();\n    int columnCount = table.getColumnCount();\n    int maxColumnIndex = columnCount == 0 ? 0 : columnCount - 1;\n    if (row == null || row.isDisposed() || column < 0 || column > maxColumnIndex)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    setRowColumn(table.indexOf(row), column, false);\n}",
			"comments":"/**\n* Positions the TableCursor over the cell at the given row and column in the parent table.\n*\n* @param row the TableItem of the row for the cell to select\n* @param column the index of column for the cell to select\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n*/\n",
			"methodName":"public void setSelection(TableItem row, int column)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    if (color == null)\n        color = getDisplay().getSystemColor(FOREGROUND);\n    super.setForeground(color);\n    redraw();\n}",
			"comments":"",
			"methodName":"public void setForeground(Color color)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null) {\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    }\n    removeListener(SWT.Selection, listener);\n    removeListener(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the receiver's selection changes.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener(SelectionListener)\n*\n* @since 3.0\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"public TableItem getRow()":{
			"methodBody":"{\n    checkWidget();\n    return row;\n}",
			"comments":"/**\n* Returns the row over which the TableCursor is positioned.\n*\n* @return the item for the current position\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public TableItem getRow()"
		},
		"void tableMouseDown(Event event)":{
			"methodBody":"{\n    if (isDisposed() || !isVisible())\n        return;\n    Point pt = new Point(event.x, event.y);\n    Rectangle clientRect = table.getClientArea();\n    int columnCount = table.getColumnCount();\n    int maxColumnIndex = columnCount == 0 ? 0 : columnCount - 1;\n    int start = table.getTopIndex();\n    int end = table.getItemCount();\n    for (int i = start; i < end; i++) {\n        TableItem item = table.getItem(i);\n        for (int j = 0; j <= maxColumnIndex; j++) {\n            Rectangle rect = item.getBounds(j);\n            if (rect.y > clientRect.y + clientRect.height)\n                return;\n            if (rect.contains(pt)) {\n                setRowColumn(i, j, true);\n                setFocus();\n                return;\n            }\n        }\n    }\n}",
			"comments":"",
			"methodName":"void tableMouseDown(Event event)"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the receiver's selection changes, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* When <code>widgetSelected</code> is called, the item field of the event object is valid.\n* If the reciever has <code>SWT.CHECK</code> style set and the check selection changes,\n* the event object detail field contains the value <code>SWT.CHECK</code>.\n* <code>widgetDefaultSelected</code> is typically called when an item is double-clicked.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see SelectionEvent\n* @see #removeSelectionListener(SelectionListener)\n*\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    if (color == null)\n        color = getDisplay().getSystemColor(BACKGROUND);\n    super.setBackground(color);\n    redraw();\n}",
			"comments":"",
			"methodName":"public void setBackground(Color color)"
		},
		"public void setVisible(boolean visible)":{
			"methodBody":"{\n    checkWidget();\n    if (visible)\n        resize();\n    super.setVisible(visible);\n}",
			"comments":"",
			"methodName":"public void setVisible(boolean visible)"
		},
		"public void handleEvent(Event event)":{
			"methodBody":"{\n    resize();\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event event)"
		}
	},
	"ClassORInterfaceName":[
		"TableCursor"
	]
}
