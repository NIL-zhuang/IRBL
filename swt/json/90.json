{
	"variables":[
		"CLIPBOARD",
		"SELECTION_CLIPBOARD",
		"DROP_NONE",
		"DROP_COPY",
		"DROP_MOVE",
		"DROP_LINK",
		"DROP_TARGET_MOVE",
		"DROP_DEFAULT",
		"DragEnd",
		"DragSetData",
		"DragEnter",
		"DragLeave",
		"DragOver",
		"DragOperationChanged",
		"Drop",
		"DropAccept",
		"DragStart",
		"FEEDBACK_NONE",
		"FEEDBACK_SELECT",
		"FEEDBACK_INSERT_BEFORE",
		"FEEDBACK_INSERT_AFTER",
		"FEEDBACK_SCROLL",
		"FEEDBACK_EXPAND",
		"ERROR_CANNOT_INIT_DRAG",
		"ERROR_CANNOT_INIT_DROP",
		"ERROR_CANNOT_SET_CLIPBOARD",
		"ERROR_INVALID_DATA",
		"INIT_DRAG_MESSAGE",
		"INIT_DROP_MESSAGE",
		"CANNOT_SET_CLIPBOARD_MESSAGE",
		"INVALID_DATA_MESSAGE",
		"msg",
		"msg",
		"msg",
		"msg",
		"code",
		"code",
		"DND",
		"DND",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"DND",
		"DND",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"DND",
		"DND",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"DND",
		"DND",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"SWT",
		"code",
		"ERROR_CANNOT_INIT_DRAG",
		"INIT_DRAG_MESSAGE",
		"ERROR_CANNOT_INIT_DROP",
		"INIT_DROP_MESSAGE",
		"ERROR_CANNOT_SET_CLIPBOARD",
		"CANNOT_SET_CLIPBOARD_MESSAGE",
		"ERROR_INVALID_DATA",
		"INVALID_DATA_MESSAGE",
		"code",
		"code",
		"hresult"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt"
	],
	"methods":[
		"error",
		"error",
		"error",
		"error",
		"SWTError",
		"SWTError",
		"SWTError",
		"SWTException"
	],
	"methodsBody":{
		"public static void error(int code)":{
			"methodBody":"{\n    error(code, 0);\n}",
			"comments":"/**\n* Throws an appropriate exception based on the passed in error code.\n*\n* @param code the DND error code\n*/\n",
			"methodName":"public static void error(int code)"
		},
		"public static void error(int code, int hresult)":{
			"methodBody":"{\n    switch(code) {\n        \n        case DND.ERROR_CANNOT_INIT_DRAG:\n            {\n                String msg = DND.INIT_DRAG_MESSAGE;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTError(code, msg);\n            }\n        case DND.ERROR_CANNOT_INIT_DROP:\n            {\n                String msg = DND.INIT_DROP_MESSAGE;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTError(code, msg);\n            }\n        case DND.ERROR_CANNOT_SET_CLIPBOARD:\n            {\n                String msg = DND.CANNOT_SET_CLIPBOARD_MESSAGE;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTError(code, msg);\n            }\n        case DND.ERROR_INVALID_DATA:\n            {\n                String msg = DND.INVALID_DATA_MESSAGE;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n    }\n    \n    SWT.error(code);\n}",
			"comments":"/**\n* Throws an appropriate exception based on the passed in error code.\n* The <code>hresult</code> argument should be either 0, or the\n* platform specific error code.\n* <p>\n* In DND, errors are reported by throwing one of three exceptions:\n* <dl>\n* <dd>java.lang.IllegalArgumentException</dd>\n* <dt>thrown whenever one of the API methods is invoked with an illegal argument</dt>\n* <dd>org.eclipse.swt.SWTException (extends java.lang.RuntimeException)</dd>\n* <dt>thrown whenever a recoverable error happens internally in SWT</dt>\n* <dd>org.eclipse.swt.SWTError (extends java.lang.Error)</dd>\n* <dt>thrown whenever a <b>non-recoverable</b> error happens internally in SWT</dt>\n* </dl>\n* This method provides the logic which maps between error codes\n* and one of the above exceptions.\n* </p>\n*\n* @param code the DND error code.\n* @param hresult the platform specific error code.\n*\n* @see SWTError\n* @see SWTException\n* @see IllegalArgumentException\n*/\n/* OS Failure/Limit (fatal, may occur only on some platforms) */\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n/* Unknown/Undefined Error */\n",
			"methodName":"public static void error(int code, int hresult)"
		}
	},
	"ClassORInterfaceName":[
		"DND"
	]
}
