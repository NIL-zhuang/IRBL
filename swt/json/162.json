{
	"variables":[
		"handle",
		"metric",
		"fontMetrics",
		"object",
		"object",
		"object",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"metric",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"handle",
		"fontMetrics",
		"handle",
		"fontMetrics",
		"handle",
		"tmHeight",
		"tmHeight",
		"tmAscent",
		"tmAscent",
		"tmDescent",
		"tmDescent",
		"tmInternalLeading",
		"tmInternalLeading",
		"tmExternalLeading",
		"tmExternalLeading",
		"tmAveCharWidth",
		"tmAveCharWidth",
		"tmMaxCharWidth",
		"tmMaxCharWidth",
		"tmWeight",
		"tmWeight",
		"tmOverhang",
		"tmOverhang",
		"tmDigitizedAspectX",
		"tmDigitizedAspectX",
		"tmDigitizedAspectY",
		"tmDigitizedAspectY",
		"tmItalic",
		"tmItalic",
		"tmUnderlined",
		"tmUnderlined",
		"tmStruckOut",
		"tmStruckOut",
		"tmPitchAndFamily",
		"tmPitchAndFamily",
		"tmCharSet",
		"tmCharSet",
		"tmAscent",
		"tmInternalLeading",
		"tmAveCharWidth",
		"tmDescent",
		"tmHeight",
		"tmInternalLeading",
		"tmHeight",
		"tmAscent",
		"tmDescent",
		"tmInternalLeading",
		"tmExternalLeading",
		"tmAveCharWidth",
		"tmMaxCharWidth",
		"tmWeight",
		"tmOverhang",
		"tmDigitizedAspectX",
		"tmDigitizedAspectY",
		"tmItalic",
		"tmUnderlined",
		"tmStruckOut",
		"tmPitchAndFamily",
		"tmCharSet",
		"handle",
		"object",
		"handle"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"equals",
		"getAscent",
		"getAverageCharWidth",
		"getDescent",
		"getHeight",
		"getLeading",
		"hashCode",
		"win32_new",
		"FontMetrics"
	],
	"methodsBody":{
		"public int getLeading()":{
			"methodBody":"{\n    return handle.tmInternalLeading;\n}",
			"comments":"/**\n* Returns the leading area of the font described by the\n* receiver. A font's <em>leading area</em> is the space\n* above its ascent which may include accents or other marks.\n*\n* @return the leading space of the font\n*/\n",
			"methodName":"public int getLeading()"
		},
		"public int getAscent()":{
			"methodBody":"{\n    return handle.tmAscent - handle.tmInternalLeading;\n}",
			"comments":"/**\n* Returns the ascent of the font described by the receiver. A\n* font's <em>ascent</em> is the distance from the baseline to the\n* top of actual characters, not including any of the leading area,\n* measured in pixels.\n*\n* @return the ascent of the font\n*/\n",
			"methodName":"public int getAscent()"
		},
		"public int hashCode()":{
			"methodBody":"{\n    return handle.tmHeight ^ handle.tmAscent ^ handle.tmDescent ^ handle.tmInternalLeading ^ handle.tmExternalLeading ^ handle.tmAveCharWidth ^ handle.tmMaxCharWidth ^ handle.tmWeight ^ handle.tmOverhang ^ handle.tmDigitizedAspectX ^ handle.tmDigitizedAspectY ^ \n    handle.tmItalic ^ handle.tmUnderlined ^ handle.tmStruckOut ^ handle.tmPitchAndFamily ^ handle.tmCharSet;\n}",
			"comments":"/**\n* Returns an integer hash code for the receiver. Any two\n* objects that return <code>true</code> when passed to\n* <code>equals</code> must return the same value for this\n* method.\n*\n* @return the receiver's hash\n*\n* @see #equals\n*/\n//\t\thandle.tmFirstChar ^ handle.tmLastChar ^ handle.tmDefaultChar ^ handle.tmBreakChar ^\n",
			"methodName":"public int hashCode()"
		},
		"public int getDescent()":{
			"methodBody":"{\n    return handle.tmDescent;\n}",
			"comments":"/**\n* Returns the descent of the font described by the receiver. A\n* font's <em>descent</em> is the distance from the baseline to the\n* bottom of actual characters, not including any of the leading area,\n* measured in pixels.\n*\n* @return the descent of the font\n*/\n",
			"methodName":"public int getDescent()"
		},
		"public int getHeight()":{
			"methodBody":"{\n    return handle.tmHeight;\n}",
			"comments":"/**\n* Returns the height of the font described by the receiver,\n* measured in pixels. A font's <em>height</em> is the sum of\n* its ascent, descent and leading area.\n*\n* @return the height of the font\n*\n* @see #getAscent\n* @see #getDescent\n* @see #getLeading\n*/\n",
			"methodName":"public int getHeight()"
		},
		"public int getAverageCharWidth()":{
			"methodBody":"{\n    return handle.tmAveCharWidth;\n}",
			"comments":"/**\n* Returns the average character width, measured in pixels,\n* of the font described by the receiver.\n*\n* @return the average character width of the font\n*/\n",
			"methodName":"public int getAverageCharWidth()"
		},
		"public boolean equals(Object object)":{
			"methodBody":"{\n    if (object == this)\n        return true;\n    if (!(object instanceof FontMetrics))\n        return false;\n    TEXTMETRIC metric = ((FontMetrics) object).handle;\n    return handle.tmHeight == metric.tmHeight && handle.tmAscent == metric.tmAscent && handle.tmDescent == metric.tmDescent && handle.tmInternalLeading == metric.tmInternalLeading && handle.tmExternalLeading == metric.tmExternalLeading && handle.tmAveCharWidth == metric.tmAveCharWidth && handle.tmMaxCharWidth == metric.tmMaxCharWidth && handle.tmWeight == metric.tmWeight && handle.tmOverhang == metric.tmOverhang && handle.tmDigitizedAspectX == metric.tmDigitizedAspectX && handle.tmDigitizedAspectY == metric.tmDigitizedAspectY && \n    handle.tmItalic == metric.tmItalic && handle.tmUnderlined == metric.tmUnderlined && handle.tmStruckOut == metric.tmStruckOut && handle.tmPitchAndFamily == metric.tmPitchAndFamily && handle.tmCharSet == metric.tmCharSet;\n}",
			"comments":"/**\n* Compares the argument to the receiver, and returns true\n* if they represent the <em>same</em> object using a class\n* specific comparison.\n*\n* @param object the object to compare with this object\n* @return <code>true</code> if the object is the same as this object and <code>false</code> otherwise\n*\n* @see #hashCode\n*/\n//\t\thandle.tmFirstChar == metric.tmFirstChar &&\n//\t\thandle.tmLastChar == metric.tmLastChar &&\n//\t\thandle.tmDefaultChar == metric.tmDefaultChar &&\n//\t\thandle.tmBreakChar == metric.tmBreakChar &&\n",
			"methodName":"public boolean equals(Object object)"
		},
		"public static FontMetrics win32_new(TEXTMETRIC handle)":{
			"methodBody":"{\n    FontMetrics fontMetrics = new FontMetrics();\n    fontMetrics.handle = handle;\n    return fontMetrics;\n}",
			"comments":"/**\n* Invokes platform specific functionality to allocate a new font metrics.\n* <p>\n* <b>IMPORTANT:</b> This method is <em>not</em> part of the public\n* API for <code>FontMetrics</code>. It is marked public only so that\n* it can be shared within the packages provided by SWT. It is not\n* available on all platforms, and should never be called from\n* application code.\n* </p>\n*\n* @param handle the <code>TEXTMETRIC</code> containing information about a font\n* @return a new font metrics object containing the specified <code>TEXTMETRIC</code>\n*/\n",
			"methodName":"public static FontMetrics win32_new(TEXTMETRIC handle)"
		}
	},
	"ClassORInterfaceName":[
		"FontMetrics"
	]
}
