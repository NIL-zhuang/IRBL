{
	"variables":[
		"marginWidth",
		"marginHeight",
		"marginLeft",
		"marginTop",
		"marginRight",
		"marginBottom",
		"spacing",
		"top",
		"bottom",
		"height",
		"divider",
		"size",
		"data",
		"string",
		"index",
		"left",
		"right",
		"width",
		"divider",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"children",
		"i",
		"child",
		"data",
		"flush",
		"bounds",
		"w",
		"h",
		"i",
		"child",
		"data",
		"left",
		"right",
		"x1",
		"x2",
		"trim",
		"rect",
		"currentWidth",
		"i",
		"child",
		"data",
		"y1",
		"y2",
		"i",
		"child",
		"data",
		"i",
		"string",
		"data",
		"control",
		"spacing",
		"flushCache",
		"data",
		"control",
		"spacing",
		"flushCache",
		"bottom",
		"top",
		"height",
		"bottom",
		"bottom",
		"bottom",
		"bottom",
		"top",
		"bottom",
		"top",
		"top",
		"bottom",
		"bottom",
		"bottom",
		"bottom",
		"bottom",
		"divider",
		"height",
		"data",
		"control",
		"flushCache",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"wHint",
		"SWT",
		"size",
		"wHint",
		"hHint",
		"SWT",
		"size",
		"hHint",
		"size",
		"control",
		"data",
		"data",
		"string",
		"index",
		"string",
		"string",
		"index",
		"string",
		"data",
		"control",
		"spacing",
		"flushCache",
		"data",
		"control",
		"spacing",
		"flushCache",
		"right",
		"left",
		"width",
		"right",
		"right",
		"right",
		"right",
		"left",
		"right",
		"left",
		"left",
		"left",
		"right",
		"right",
		"right",
		"right",
		"divider",
		"width",
		"data",
		"control",
		"flushCache",
		"composite",
		"rect",
		"marginLeft",
		"marginWidth",
		"rect",
		"marginTop",
		"marginHeight",
		"Math",
		"rect",
		"marginLeft",
		"marginWidth",
		"marginRight",
		"Math",
		"rect",
		"marginLeft",
		"marginHeight",
		"marginBottom",
		"composite",
		"x",
		"y",
		"width",
		"height",
		"flushCache",
		"composite",
		"i",
		"children",
		"i",
		"children",
		"i",
		"child",
		"data",
		"child",
		"data",
		"flushCache",
		"data",
		"data",
		"data",
		"data",
		"data",
		"i",
		"children",
		"i",
		"children",
		"i",
		"child",
		"width",
		"SWT",
		"data",
		"data",
		"child",
		"spacing",
		"flushCache",
		"data",
		"child",
		"spacing",
		"flushCache",
		"left",
		"width",
		"right",
		"width",
		"data",
		"SWT",
		"data",
		"child",
		"child",
		"trim",
		"rect",
		"trim",
		"child",
		"data",
		"data",
		"Math",
		"x2",
		"x1",
		"trim",
		"data",
		"child",
		"currentWidth",
		"data",
		"flushCache",
		"flush",
		"flush",
		"children",
		"flush",
		"i",
		"w",
		"Math",
		"x2",
		"w",
		"move",
		"bounds",
		"bounds",
		"children",
		"bounds",
		"i",
		"bounds",
		"i",
		"x",
		"x1",
		"bounds",
		"i",
		"x2",
		"x1",
		"w",
		"Math",
		"child",
		"data",
		"flushCache",
		"w",
		"i",
		"children",
		"i",
		"children",
		"i",
		"child",
		"height",
		"SWT",
		"data",
		"child",
		"spacing",
		"flushCache",
		"height",
		"data",
		"child",
		"spacing",
		"flushCache",
		"height",
		"h",
		"Math",
		"y2",
		"h",
		"move",
		"bounds",
		"i",
		"y",
		"y1",
		"bounds",
		"i",
		"y2",
		"y1",
		"h",
		"Math",
		"child",
		"data",
		"flushCache",
		"h",
		"i",
		"children",
		"i",
		"children",
		"i",
		"child",
		"flush",
		"flush",
		"i",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"move",
		"i",
		"children",
		"i",
		"children",
		"i",
		"bounds",
		"i",
		"w",
		"marginLeft",
		"marginWidth",
		"marginRight",
		"h",
		"marginTop",
		"marginHeight",
		"marginBottom",
		"w",
		"h",
		"marginWidth",
		"string",
		"marginWidth",
		"marginHeight",
		"string",
		"marginHeight",
		"marginLeft",
		"string",
		"marginLeft",
		"marginRight",
		"string",
		"marginRight",
		"marginTop",
		"string",
		"marginTop",
		"marginBottom",
		"string",
		"marginBottom",
		"spacing",
		"string",
		"spacing",
		"string",
		"string",
		"string",
		"string",
		"numerator",
		"numerator",
		"offset",
		"numerator",
		"denominator",
		"offset",
		"offset",
		"offset",
		"denominator",
		"numerator",
		"denominator",
		"numerator",
		"denominator",
		"offset",
		"DEFAULT",
		"x",
		"DEFAULT",
		"y",
		"numerator",
		"numerator",
		"offset",
		"numerator",
		"denominator",
		"offset",
		"offset",
		"offset",
		"denominator",
		"numerator",
		"denominator",
		"numerator",
		"denominator",
		"offset",
		"x",
		"y",
		"width",
		"height",
		"length",
		"cacheLeft",
		"cacheRight",
		"cacheTop",
		"cacheBottom",
		"length",
		"DEFAULT",
		"needed",
		"height",
		"DEFAULT",
		"needed",
		"width",
		"cacheWidth",
		"cacheHeight",
		"height",
		"length",
		"length",
		"x",
		"width",
		"length",
		"DEFAULT",
		"y",
		"height",
		"length",
		"cacheWidth",
		"cacheHeight",
		"cacheLeft",
		"cacheRight",
		"cacheTop",
		"cacheBottom",
		"length",
		"control",
		"data",
		"flushCache",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"control",
		"data",
		"flushCache",
		"composite",
		"flushCache",
		"composite",
		"move",
		"x",
		"y",
		"width",
		"height",
		"flushCache"
	],
	"extendORImplementFiles":[
		"Layout"
	],
	"package":[
		"org.eclipse.swt.layout"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"computeHeight",
		"computeSize",
		"flushCache",
		"getName",
		"computeWidth",
		"layout",
		"layout",
		"toString",
		"getTopAttachment",
		"getBottomAttachment",
		"minus",
		"solveY",
		"getHeight",
		"layout",
		"getLayoutData",
		"flushCache",
		"getName",
		"getClass",
		"lastIndexOf",
		"substring",
		"length",
		"getLeftAttachment",
		"getRightAttachment",
		"minus",
		"solveY",
		"getWidth",
		"getClientArea",
		"max",
		"max",
		"layout",
		"getChildren",
		"getLayoutData",
		"setLayoutData",
		"flushCache",
		"getLayoutData",
		"getLeftAttachment",
		"getRightAttachment",
		"solveX",
		"solveX",
		"computeTrim",
		"getBorderWidth",
		"max",
		"computeSize",
		"max",
		"max",
		"computeWidth",
		"getLayoutData",
		"solveX",
		"getTopAttachment",
		"solveX",
		"getBottomAttachment",
		"max",
		"max",
		"computeHeight",
		"getLayoutData",
		"setBounds",
		"getName",
		"trim",
		"FormData",
		"Rectangle",
		"Point"
	],
	"methodsBody":{
		"Point layout(Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)":{
			"methodBody":"{\n    Control[] children = composite.getChildren();\n    for (int i = 0; i < children.length; i++) {\n        Control child = children[i];\n        FormData data = (FormData) child.getLayoutData();\n        if (data == null)\n            child.setLayoutData(data = new FormData());\n        if (flushCache)\n            data.flushCache();\n        data.cacheLeft = data.cacheRight = data.cacheTop = data.cacheBottom = null;\n    }\n    boolean[] flush = null;\n    Rectangle[] bounds = null;\n    int w = 0, h = 0;\n    for (int i = 0; i < children.length; i++) {\n        Control child = children[i];\n        FormData data = (FormData) child.getLayoutData();\n        if (width != SWT.DEFAULT) {\n            data.needed = false;\n            FormAttachment left = data.getLeftAttachment(child, spacing, flushCache);\n            FormAttachment right = data.getRightAttachment(child, spacing, flushCache);\n            int x1 = left.solveX(width), x2 = right.solveX(width);\n            if (data.height == SWT.DEFAULT && !data.needed) {\n                int trim = 0;\n                \n                if (child instanceof Scrollable) {\n                    Rectangle rect = ((Scrollable) child).computeTrim(0, 0, 0, 0);\n                    trim = rect.width;\n                } else {\n                    trim = child.getBorderWidth() * 2;\n                }\n                data.cacheWidth = data.cacheHeight = -1;\n                int currentWidth = Math.max(0, x2 - x1 - trim);\n                data.computeSize(child, currentWidth, data.height, flushCache);\n                if (flush == null)\n                    flush = new boolean[children.length];\n                flush[i] = true;\n            }\n            w = Math.max(x2, w);\n            if (move) {\n                if (bounds == null)\n                    bounds = new Rectangle[children.length];\n                bounds[i] = new Rectangle(0, 0, 0, 0);\n                bounds[i].x = x + x1;\n                bounds[i].width = x2 - x1;\n            }\n        } else {\n            w = Math.max(computeWidth(child, data, flushCache), w);\n        }\n    }\n    for (int i = 0; i < children.length; i++) {\n        Control child = children[i];\n        FormData data = (FormData) child.getLayoutData();\n        if (height != SWT.DEFAULT) {\n            int y1 = data.getTopAttachment(child, spacing, flushCache).solveX(height);\n            int y2 = data.getBottomAttachment(child, spacing, flushCache).solveX(height);\n            h = Math.max(y2, h);\n            if (move) {\n                bounds[i].y = y + y1;\n                bounds[i].height = y2 - y1;\n            }\n        } else {\n            h = Math.max(computeHeight(child, data, flushCache), h);\n        }\n    }\n    for (int i = 0; i < children.length; i++) {\n        Control child = children[i];\n        FormData data = (FormData) child.getLayoutData();\n        if (flush != null && flush[i])\n            data.cacheWidth = data.cacheHeight = -1;\n        data.cacheLeft = data.cacheRight = data.cacheTop = data.cacheBottom = null;\n    }\n    if (move) {\n        for (int i = 0; i < children.length; i++) {\n            children[i].setBounds(bounds[i]);\n        }\n    }\n    w += marginLeft + marginWidth * 2 + marginRight;\n    h += marginTop + marginHeight * 2 + marginBottom;\n    return new Point(w, h);\n}",
			"comments":"//TEMPORARY CODE\n",
			"methodName":"Point layout(Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)"
		},
		"public String toString()":{
			"methodBody":"{\n    String string = getName() + \" {\";\n    if (marginWidth != 0)\n        string += \"marginWidth=\" + marginWidth + \" \";\n    if (marginHeight != 0)\n        string += \"marginHeight=\" + marginHeight + \" \";\n    if (marginLeft != 0)\n        string += \"marginLeft=\" + marginLeft + \" \";\n    if (marginRight != 0)\n        string += \"marginRight=\" + marginRight + \" \";\n    if (marginTop != 0)\n        string += \"marginTop=\" + marginTop + \" \";\n    if (marginBottom != 0)\n        string += \"marginBottom=\" + marginBottom + \" \";\n    if (spacing != 0)\n        string += \"spacing=\" + spacing + \" \";\n    string = string.trim();\n    string += \"}\";\n    return string;\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the event\n*/\n",
			"methodName":"public String toString()"
		},
		"int computeHeight(Control control, FormData data, boolean flushCache)":{
			"methodBody":"{\n    FormAttachment top = data.getTopAttachment(control, spacing, flushCache);\n    FormAttachment bottom = data.getBottomAttachment(control, spacing, flushCache);\n    FormAttachment height = bottom.minus(top);\n    if (height.numerator == 0) {\n        if (bottom.numerator == 0)\n            return bottom.offset;\n        if (bottom.numerator == bottom.denominator)\n            return -top.offset;\n        if (bottom.offset <= 0) {\n            return -top.offset * top.denominator / bottom.numerator;\n        }\n        int divider = bottom.denominator - bottom.numerator;\n        return bottom.denominator * bottom.offset / divider;\n    }\n    return height.solveY(data.getHeight(control, flushCache));\n}",
			"comments":"/*\n* Computes the preferred height of the form with\n* respect to the preferred height of the control.\n*\n* Given that the equations for top (T) and bottom (B)\n* of the control in terms of the height of the form (X)\n* are:\n*\t\tT = AX + B\n*\t\tB = CX + D\n*\n* The equation for the height of the control (H)\n* is bottom (B) minus top (T) or (H = B - T) or:\n*\n*\t\tH = (CX + D) - (AX + B)\n*\n* Solving for (X), the height of the form, we get:\n*\n*\t\tX = (H + B - D) / (C - A)\n*\n* When (A = C), (C - A = 0) and the equation has no\n* solution for X.  This is a special case meaning that\n* the control does not constrain the height of the\n* form.  In this case, we need to arbitrarily define\n* the height of the form (X):\n*\n* Case 1: A = C, A = 0, C = 0\n*\n* \t\tLet X = D, the distance from the top of the form\n* \t\tto the bottom edge of the control.  In this case,\n* \t\tthe control was attatched to the top of the form\n* \t\tand the form needs to be large enough to show the\n* \t\tbottom edge of the control.\n*\n* Case 2: A = C, A = 1, C = 1\n*\n* \t\tLet X = -B, the distance from the bottom of the\n*\t\tform to the top edge of the control.  In this case,\n* \t\tthe control was attached to the bottom of the form\n* \t\tand the only way that the control would be visible\n* \t\tis if the offset is negative.  If the offset is\n* \t\tpositive, there is no possible height for the form\n* \t\tthat will show the control as it will always be\n* \t\tbelow the bottom edge of the form.\n*\n* Case 3: A = C, A != 0, C != 0 and A != 1, C != 0\n*\n* \t\tLet X = D / (1 - C), the distance from the top of the\n* \t\tform to the bottom edge of the control.  In this case,\n* \t\tsince C is not 0 or 1, it must be a fraction, U / V.\n* \t\tThe offset D is the distance from CX to the bottom edge\n* \t\tof the control.  This represents a fraction of the form\n* \t\t(1 - C)X. Since the height of a fraction of the form is\n* \t\tknown, the height of the entire form can be found by setting\n* \t\t(1 - C)X = D.  We solve this equation for X in terms of U\n* \t\tand V, giving us X = (U * D) / (U - V). Similarily, if the\n* \t\toffset D is\tnegative, the control is positioned above CX.\n* \t\tThe offset -B is the distance from the top edge of the control\n* \t\tto CX. We can find the height of the entire form by setting\n* \t\tCX = -B. Solving in terms of U and V gives us X = (-B * V) / U.\n*/\n",
			"methodName":"int computeHeight(Control control, FormData data, boolean flushCache)"
		},
		"protected boolean flushCache(Control control)":{
			"methodBody":"{\n    Object data = control.getLayoutData();\n    if (data != null)\n        ((FormData) data).flushCache();\n    return true;\n}",
			"comments":"",
			"methodName":"protected boolean flushCache(Control control)"
		},
		"String getName()":{
			"methodBody":"{\n    String string = getClass().getName();\n    int index = string.lastIndexOf('.');\n    if (index == -1)\n        return string;\n    return string.substring(index + 1, string.length());\n}",
			"comments":"",
			"methodName":"String getName()"
		},
		"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    Point size = layout(composite, false, 0, 0, wHint, hHint, flushCache);\n    if (wHint != SWT.DEFAULT)\n        size.x = wHint;\n    if (hHint != SWT.DEFAULT)\n        size.y = hHint;\n    return size;\n}",
			"comments":"",
			"methodName":"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)"
		},
		"int computeWidth(Control control, FormData data, boolean flushCache)":{
			"methodBody":"{\n    FormAttachment left = data.getLeftAttachment(control, spacing, flushCache);\n    FormAttachment right = data.getRightAttachment(control, spacing, flushCache);\n    FormAttachment width = right.minus(left);\n    if (width.numerator == 0) {\n        if (right.numerator == 0)\n            return right.offset;\n        if (right.numerator == right.denominator)\n            return -left.offset;\n        if (right.offset <= 0) {\n            return -left.offset * left.denominator / left.numerator;\n        }\n        int divider = right.denominator - right.numerator;\n        return right.denominator * right.offset / divider;\n    }\n    return width.solveY(data.getWidth(control, flushCache));\n}",
			"comments":"/*\n* Computes the preferred height of the form with\n* respect to the preferred height of the control.\n*/\n",
			"methodName":"int computeWidth(Control control, FormData data, boolean flushCache)"
		},
		"protected void layout(Composite composite, boolean flushCache)":{
			"methodBody":"{\n    Rectangle rect = composite.getClientArea();\n    int x = rect.x + marginLeft + marginWidth;\n    int y = rect.y + marginTop + marginHeight;\n    int width = Math.max(0, rect.width - marginLeft - 2 * marginWidth - marginRight);\n    int height = Math.max(0, rect.height - marginLeft - 2 * marginHeight - marginBottom);\n    layout(composite, true, x, y, width, height, flushCache);\n}",
			"comments":"",
			"methodName":"protected void layout(Composite composite, boolean flushCache)"
		}
	},
	"ClassORInterfaceName":[
		"FormLayout"
	]
}
