{
	"variables":[
		"iDocHostUIHandler",
		"iDocHostShowUI",
		"iServiceProvider",
		"iInternetSecurityManager",
		"iOleCommandTarget",
		"OLECMDID_SHOWSCRIPTERROR",
		"result",
		"guid",
		"browser",
		"browser",
		"event",
		"pt",
		"menu",
		"menubar",
		"shell",
		"hwnd",
		"hAccel",
		"msg",
		"auto",
		"rgdispid",
		"pVarResult",
		"result",
		"url",
		"msg",
		"IDS_MESSAGE_BOX_CAPTION",
		"lpLibFileName",
		"hModule",
		"cnt",
		"buffer",
		"text",
		"length",
		"lpBuffer",
		"result",
		"browser",
		"event",
		"shell",
		"control",
		"guid",
		"policy",
		"guid",
		"guid",
		"browser",
		"parent",
		"style",
		"progId",
		"iDocHostUIHandler",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iDocHostShowUI",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iServiceProvider",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iInternetSecurityManager",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iOleCommandTarget",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iDocHostUIHandler",
		"iDocHostUIHandler",
		"iDocHostUIHandler",
		"iDocHostShowUI",
		"iDocHostShowUI",
		"iDocHostShowUI",
		"iServiceProvider",
		"iServiceProvider",
		"iServiceProvider",
		"iInternetSecurityManager",
		"iInternetSecurityManager",
		"iInternetSecurityManager",
		"iOleCommandTarget",
		"iOleCommandTarget",
		"iOleCommandTarget",
		"riid",
		"ppvObject",
		"result",
		"COM",
		"result",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iDocHostUIHandler",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iDocHostShowUI",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iServiceProvider",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iOleCommandTarget",
		"COM",
		"COM",
		"ppvObject",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"OS",
		"pInfo",
		"browser",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"COM",
		"OS",
		"pt",
		"ppt",
		"POINT",
		"event",
		"pt",
		"event",
		"pt",
		"browser",
		"SWT",
		"event",
		"event",
		"COM",
		"browser",
		"menu",
		"menu",
		"pt",
		"event",
		"pt",
		"event",
		"menu",
		"event",
		"event",
		"menu",
		"COM",
		"COM",
		"COM",
		"menubar",
		"menubar",
		"menubar",
		"menubar",
		"shell",
		"OS",
		"hwnd",
		"OS",
		"hAccel",
		"OS",
		"msg",
		"lpMsg",
		"MSG",
		"OS",
		"hwnd",
		"hAccel",
		"msg",
		"COM",
		"auto",
		"auto",
		"rgdispid",
		"auto",
		"COM",
		"pVarResult",
		"pVarResult",
		"OLE",
		"pVarResult",
		"url",
		"Browser",
		"OS",
		"msg",
		"lpMsg",
		"MSG",
		"msg",
		"OS",
		"msg",
		"OS",
		"result",
		"COM",
		"msg",
		"OS",
		"msg",
		"OS",
		"OS",
		"OS",
		"result",
		"COM",
		"pVarResult",
		"result",
		"COM",
		"COM",
		"lpstrText",
		"OS",
		"lpLibFileName",
		"hModule",
		"OS",
		"lpstrText",
		"cnt",
		"OS",
		"buffer",
		"lpstrText",
		"cnt",
		"buffer",
		"OS",
		"cnt",
		"OS",
		"OS",
		"buffer",
		"cnt",
		"length",
		"OS",
		"hModule",
		"IDS_MESSAGE_BOX_CAPTION",
		"lpBuffer",
		"length",
		"OS",
		"hModule",
		"result",
		"text",
		"lpBuffer",
		"result",
		"COM",
		"COM",
		"COM",
		"event",
		"SWT",
		"event",
		"event",
		"browser",
		"browser",
		"browser",
		"control",
		"SWT",
		"control",
		"SWT",
		"event",
		"control",
		"shell",
		"control",
		"control",
		"COM",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iInternetSecurityManager",
		"COM",
		"COM",
		"ppvObject",
		"COM",
		"Browser",
		"Browser",
		"COM",
		"pdwZone",
		"Browser",
		"COM",
		"Browser",
		"Browser",
		"dwAction",
		"Browser",
		"dwAction",
		"Browser",
		"policy",
		"Browser",
		"dwAction",
		"Browser",
		"COM",
		"guid",
		"pContext",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"guid",
		"COM",
		"policy",
		"Browser",
		"cbPolicy",
		"COM",
		"pPolicy",
		"policy",
		"COM",
		"Browser",
		"Browser",
		"COM",
		"COM",
		"pguidCmdGroup",
		"COM",
		"guid",
		"pguidCmdGroup",
		"GUID",
		"COM",
		"guid",
		"COM",
		"nCmdID",
		"OLECMDID_SHOWSCRIPTERROR",
		"COM",
		"nCmdID",
		"COM",
		"guid",
		"COM",
		"nCmdExecOpt",
		"browser",
		"nCmdExecOpt",
		"COM",
		"S_OK",
		"E_INVALIDARG",
		"sizeof",
		"IIDIDocHostUIHandler",
		"S_OK",
		"IIDIDocHostShowUI",
		"S_OK",
		"IIDIServiceProvider",
		"S_OK",
		"IIDIOleCommandTarget",
		"S_OK",
		"E_NOINTERFACE",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"info",
		"S_OK",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"sizeof",
		"x",
		"x",
		"y",
		"y",
		"MenuDetect",
		"doit",
		"S_OK",
		"x",
		"x",
		"y",
		"y",
		"x",
		"y",
		"S_OK",
		"S_FALSE",
		"E_NOTIMPL",
		"handle",
		"WM_APP",
		"sizeof",
		"S_OK",
		"S_FALSE",
		"VT_BSTR",
		"ABOUT_BLANK",
		"sizeof",
		"message",
		"WM_KEYDOWN",
		"wParam",
		"VK_F5",
		"S_OK",
		"message",
		"WM_KEYDOWN",
		"wParam",
		"VK_N",
		"VK_CONTROL",
		"S_OK",
		"E_NOTIMPL",
		"E_NOTIMPL",
		"IsUnicode",
		"CP_ACP",
		"S_OK",
		"S_FALSE",
		"S_FALSE",
		"type",
		"Help",
		"display",
		"widget",
		"Help",
		"Help",
		"S_OK",
		"E_INVALIDARG",
		"sizeof",
		"IIDIInternetSecurityManager",
		"S_OK",
		"E_NOINTERFACE",
		"INET_E_DEFAULT_ACTION",
		"INET_E_DEFAULT_ACTION",
		"URLZONE_INTRANET",
		"S_OK",
		"INET_E_DEFAULT_ACTION",
		"URLPOLICY_ALLOW",
		"URLACTION_JAVA_MIN",
		"URLACTION_JAVA_MAX",
		"URLPOLICY_JAVA_LOW",
		"URLACTION_ACTIVEX_RUN",
		"sizeof",
		"IIDJavaBeansBridge",
		"IIDShockwaveActiveXControl",
		"URLPOLICY_DISALLOW",
		"S_OK",
		"INET_E_DEFAULT_ACTION",
		"INET_E_DEFAULT_ACTION",
		"E_NOTIMPL",
		"E_NOTSUPPORTED",
		"sizeof",
		"CGID_DocHostCommandHandler",
		"S_OK",
		"CGID_Explorer",
		"toolBar",
		"E_NOTSUPPORTED",
		"parent",
		"style",
		"progId",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"riid",
		"ppvObject",
		"EnableModeless",
		"pDO",
		"ppDORet",
		"pDropTarget",
		"ppDropTarget",
		"ppDispatch",
		"pInfo",
		"pchKey",
		"dw",
		"fActivate",
		"fActivate",
		"prcBorder",
		"pUIWindow",
		"fFrameWindow",
		"dwID",
		"ppt",
		"pcmdtReserved",
		"pdispReserved",
		"dwID",
		"pActiveObject",
		"pCommandTarget",
		"pFrame",
		"pDoc",
		"lpMsg",
		"pguidCmdGroup",
		"nCmdID",
		"dwTranslate",
		"pchURLIn",
		"ppchURLOut",
		"hwnd",
		"lpstrText",
		"lpstrCaption",
		"dwType",
		"lpstrHelpFile",
		"dwHelpContext",
		"plResult",
		"hwnd",
		"pszHelpFile",
		"uCommand",
		"dwData",
		"ptMouse_x",
		"ptMouse_y",
		"pDispatchObjectHit",
		"guidService",
		"riid",
		"ppvObject",
		"pSite",
		"ppSite",
		"pwszUrl",
		"pdwZone",
		"dwFlags",
		"pwszUrl",
		"pbSecurityId",
		"pcbSecurityId",
		"dwReserved",
		"pwszUrl",
		"dwAction",
		"pPolicy",
		"cbPolicy",
		"pContext",
		"cbContext",
		"dwFlags",
		"dwReserved",
		"pwszUrl",
		"guidKey",
		"ppPolicy",
		"pcbPolicy",
		"pContext",
		"cbContext",
		"dwReserved",
		"dwZone",
		"lpszPattern",
		"dwFlags",
		"dwZone",
		"ppenumString",
		"dwFlags",
		"pguidCmdGroup",
		"cCmds",
		"prgCmds",
		"pCmdText",
		"pguidCmdGroup",
		"nCmdID",
		"nCmdExecOpt",
		"pvaIn",
		"pvaOut"
	],
	"extendORImplementFiles":[
		"OleControlSite"
	],
	"package":[
		"org.eclipse.swt.browser"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt.ole.win32",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"createCOMInterfaces",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"method5",
		"method6",
		"method7",
		"method8",
		"method9",
		"method10",
		"method11",
		"method12",
		"method13",
		"method14",
		"method15",
		"method16",
		"method17",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"method0",
		"method1",
		"method2",
		"method3",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"method5",
		"method6",
		"method7",
		"method8",
		"method9",
		"method10",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"disposeCOMInterfaces",
		"AddRef",
		"QueryInterface",
		"EnableModeless",
		"FilterDataObject",
		"GetDropTarget",
		"GetExternal",
		"GetHostInfo",
		"GetOptionKeyPath",
		"HideUI",
		"OnDocWindowActivate",
		"OnFrameWindowActivate",
		"Release",
		"ResizeBorder",
		"ShowContextMenu",
		"ShowUI",
		"TranslateAccelerator",
		"TranslateUrl",
		"UpdateUI",
		"ShowMessage",
		"ShowHelp",
		"QueryService",
		"SetSecuritySite",
		"GetSecuritySite",
		"MapUrlToZone",
		"GetSecurityId",
		"ProcessUrlAction",
		"QueryCustomPolicy",
		"SetZoneMapping",
		"GetZoneMappings",
		"QueryStatus",
		"Exec",
		"createCOMInterfaces",
		"QueryInterface",
		"AddRef",
		"Release",
		"ShowContextMenu",
		"GetHostInfo",
		"ShowUI",
		"HideUI",
		"UpdateUI",
		"EnableModeless",
		"OnDocWindowActivate",
		"OnFrameWindowActivate",
		"ResizeBorder",
		"TranslateAccelerator",
		"GetOptionKeyPath",
		"GetDropTarget",
		"GetExternal",
		"TranslateUrl",
		"FilterDataObject",
		"QueryInterface",
		"AddRef",
		"Release",
		"ShowMessage",
		"ShowHelp",
		"QueryInterface",
		"AddRef",
		"Release",
		"QueryService",
		"QueryInterface",
		"AddRef",
		"Release",
		"SetSecuritySite",
		"GetSecuritySite",
		"MapUrlToZone",
		"GetSecurityId",
		"ProcessUrlAction",
		"QueryCustomPolicy",
		"SetZoneMapping",
		"GetZoneMappings",
		"QueryInterface",
		"AddRef",
		"Release",
		"QueryStatus",
		"Exec",
		"disposeCOMInterfaces",
		"dispose",
		"dispose",
		"dispose",
		"dispose",
		"dispose",
		"AddRef",
		"QueryInterface",
		"MoveMemory",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"getParent",
		"getParent",
		"MoveMemory",
		"Release",
		"getParent",
		"getParent",
		"MoveMemory",
		"notifyListeners",
		"getMenu",
		"isDisposed",
		"setLocation",
		"setVisible",
		"getMenuBar",
		"getShell",
		"isDisposed",
		"isEnabled",
		"getShell",
		"SendMessage",
		"MoveMemory",
		"TranslateAccelerator",
		"getIDsOfNames",
		"getProperty",
		"dispose",
		"getType",
		"getString",
		"equals",
		"MoveMemory",
		"GetKeyState",
		"dispose",
		"LoadLibrary",
		"wcslen",
		"MoveMemory",
		"WideCharToMultiByte",
		"LoadString",
		"FreeLibrary",
		"equals",
		"toString",
		"getParent",
		"getParent",
		"getDisplay",
		"getShell",
		"isListening",
		"notifyListeners",
		"getParent",
		"MoveMemory",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"IsEqualGUID",
		"IsEqualGUID",
		"MoveMemory",
		"MoveMemory",
		"IsEqualGUID",
		"IsEqualGUID",
		"getParent",
		"getParent",
		"COMObject",
		"COMObject",
		"COMObject",
		"COMObject",
		"COMObject",
		"GUID",
		"Event",
		"POINT",
		"MSG",
		"OleAutomation",
		"MSG",
		"TCHAR",
		"String",
		"TCHAR",
		"Event",
		"GUID",
		"GUID",
		"GUID"
	],
	"methodsBody":{
		"int SetSecuritySite(int pSite)":{
			"methodBody":"{\n    return Browser.INET_E_DEFAULT_ACTION;\n}",
			"comments":"",
			"methodName":"int SetSecuritySite(int pSite)"
		},
		"int GetOptionKeyPath(int pchKey, int dw)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int GetOptionKeyPath(int pchKey, int dw)"
		},
		"int SetZoneMapping(int dwZone, int lpszPattern, int dwFlags)":{
			"methodBody":"{\n    return Browser.INET_E_DEFAULT_ACTION;\n}",
			"comments":"",
			"methodName":"int SetZoneMapping(int dwZone, int lpszPattern, int dwFlags)"
		},
		"protected void createCOMInterfaces()":{
			"methodBody":"{\n    super.createCOMInterfaces();\n    iDocHostUIHandler = new COMObject(new int[] { 2, 0, 0, 4, 1, 5, 0, 0, 1, 1, 1, 3, 3, 2, 2, 1, 3, 2 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return ShowContextMenu(args[0], args[1], args[2], args[3]);\n        }\n\n        public int method4(int[] args) {\n            return GetHostInfo(args[0]);\n        }\n\n        public int method5(int[] args) {\n            return ShowUI(args[0], args[1], args[2], args[3], args[4]);\n        }\n\n        public int method6(int[] args) {\n            return HideUI();\n        }\n\n        public int method7(int[] args) {\n            return UpdateUI();\n        }\n\n        public int method8(int[] args) {\n            return EnableModeless(args[0]);\n        }\n\n        public int method9(int[] args) {\n            return OnDocWindowActivate(args[0]);\n        }\n\n        public int method10(int[] args) {\n            return OnFrameWindowActivate(args[0]);\n        }\n\n        public int method11(int[] args) {\n            return ResizeBorder(args[0], args[1], args[2]);\n        }\n\n        public int method12(int[] args) {\n            return TranslateAccelerator(args[0], args[1], args[2]);\n        }\n\n        public int method13(int[] args) {\n            return GetOptionKeyPath(args[0], args[1]);\n        }\n\n        public int method14(int[] args) {\n            return GetDropTarget(args[0], args[1]);\n        }\n\n        public int method15(int[] args) {\n            return GetExternal(args[0]);\n        }\n\n        public int method16(int[] args) {\n            return TranslateUrl(args[0], args[1], args[2]);\n        }\n\n        public int method17(int[] args) {\n            return FilterDataObject(args[0], args[1]);\n        }\n    };\n    iDocHostShowUI = new COMObject(new int[] { 2, 0, 0, 7, 7 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return ShowMessage(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n\n        public int method4(int[] args) {\n            return ShowHelp(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n    };\n    iServiceProvider = new COMObject(new int[] { 2, 0, 0, 3 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return QueryService(args[0], args[1], args[2]);\n        }\n    };\n    iInternetSecurityManager = new COMObject(new int[] { 2, 0, 0, 1, 1, 3, 4, 8, 7, 3, 3 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return SetSecuritySite(args[0]);\n        }\n\n        public int method4(int[] args) {\n            return GetSecuritySite(args[0]);\n        }\n\n        public int method5(int[] args) {\n            return MapUrlToZone(args[0], args[1], args[2]);\n        }\n\n        public int method6(int[] args) {\n            return GetSecurityId(args[0], args[1], args[2], args[3]);\n        }\n\n        public int method7(int[] args) {\n            return ProcessUrlAction(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n        }\n\n        public int method8(int[] args) {\n            return QueryCustomPolicy(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n\n        public int method9(int[] args) {\n            return SetZoneMapping(args[0], args[1], args[2]);\n        }\n\n        public int method10(int[] args) {\n            return GetZoneMappings(args[0], args[1], args[2]);\n        }\n    };\n    iOleCommandTarget = new COMObject(new int[] { 2, 0, 0, 4, 5 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return QueryStatus(args[0], args[1], args[2], args[3]);\n        }\n\n        public int method4(int[] args) {\n            return Exec(args[0], args[1], args[2], args[3], args[4]);\n        }\n    };\n}",
			"comments":"",
			"methodName":"protected void createCOMInterfaces()"
		},
		"int GetExternal(int ppDispatch)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int GetExternal(int ppDispatch)"
		},
		"int GetHostInfo(int pInfo)":{
			"methodBody":"{\n    Browser browser = (Browser) getParent().getParent();\n    OS.MoveMemory(pInfo + 4, new int[] { browser.info }, 4);\n    return COM.S_OK;\n}",
			"comments":"",
			"methodName":"int GetHostInfo(int pInfo)"
		},
		"int ShowContextMenu(int dwID, int ppt, int pcmdtReserved, int pdispReserved)":{
			"methodBody":"{\n    Browser browser = (Browser) getParent().getParent();\n    Event event = new Event();\n    POINT pt = new POINT();\n    OS.MoveMemory(pt, ppt, POINT.sizeof);\n    event.x = pt.x;\n    event.y = pt.y;\n    browser.notifyListeners(SWT.MenuDetect, event);\n    if (!event.doit)\n        return COM.S_OK;\n    Menu menu = browser.getMenu();\n    if (menu != null && !menu.isDisposed()) {\n        if (pt.x != event.x || pt.y != event.y) {\n            menu.setLocation(event.x, event.y);\n        }\n        menu.setVisible(true);\n        return COM.S_OK;\n    }\n    \n    return COM.S_FALSE;\n}",
			"comments":"/* Show default IE popup menu */\n",
			"methodName":"int ShowContextMenu(int dwID, int ppt, int pcmdtReserved, int pdispReserved)"
		},
		"int GetSecuritySite(int ppSite)":{
			"methodBody":"{\n    return Browser.INET_E_DEFAULT_ACTION;\n}",
			"comments":"",
			"methodName":"int GetSecuritySite(int ppSite)"
		},
		"int OnDocWindowActivate(int fActivate)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int OnDocWindowActivate(int fActivate)"
		},
		"public int method13(int[] args)":{
			"methodBody":"{\n    return GetOptionKeyPath(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method13(int[] args)"
		},
		"int HideUI()":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int HideUI()"
		},
		"int ResizeBorder(int prcBorder, int pUIWindow, int fFrameWindow)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int ResizeBorder(int prcBorder, int pUIWindow, int fFrameWindow)"
		},
		"public int method14(int[] args)":{
			"methodBody":"{\n    return GetDropTarget(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method14(int[] args)"
		},
		"int QueryCustomPolicy(int pwszUrl, int guidKey, int ppPolicy, int pcbPolicy, int pContext, int cbContext, int dwReserved)":{
			"methodBody":"{\n    return Browser.INET_E_DEFAULT_ACTION;\n}",
			"comments":"",
			"methodName":"int QueryCustomPolicy(int pwszUrl, int guidKey, int ppPolicy, int pcbPolicy, int pContext, int cbContext, int dwReserved)"
		},
		"protected int QueryInterface(int riid, int ppvObject)":{
			"methodBody":"{\n    int result = super.QueryInterface(riid, ppvObject);\n    if (result == COM.S_OK)\n        return result;\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_INVALIDARG;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIDocHostUIHandler)) {\n        COM.MoveMemory(ppvObject, new int[] { iDocHostUIHandler.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    if (COM.IsEqualGUID(guid, COM.IIDIDocHostShowUI)) {\n        COM.MoveMemory(ppvObject, new int[] { iDocHostShowUI.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    if (COM.IsEqualGUID(guid, COM.IIDIServiceProvider)) {\n        COM.MoveMemory(ppvObject, new int[] { iServiceProvider.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    if (COM.IsEqualGUID(guid, COM.IIDIOleCommandTarget)) {\n        COM.MoveMemory(ppvObject, new int[] { iOleCommandTarget.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    COM.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"protected int QueryInterface(int riid, int ppvObject)"
		},
		"public int method12(int[] args)":{
			"methodBody":"{\n    return TranslateAccelerator(args[0], args[1], args[2]);\n}",
			"comments":"",
			"methodName":"public int method12(int[] args)"
		},
		"public int method11(int[] args)":{
			"methodBody":"{\n    return ResizeBorder(args[0], args[1], args[2]);\n}",
			"comments":"",
			"methodName":"public int method11(int[] args)"
		},
		"protected void disposeCOMInterfaces()":{
			"methodBody":"{\n    super.disposeCOMInterfaces();\n    if (iDocHostUIHandler != null) {\n        iDocHostUIHandler.dispose();\n        iDocHostUIHandler = null;\n    }\n    if (iDocHostShowUI != null) {\n        iDocHostShowUI.dispose();\n        iDocHostShowUI = null;\n    }\n    if (iServiceProvider != null) {\n        iServiceProvider.dispose();\n        iServiceProvider = null;\n    }\n    if (iInternetSecurityManager != null) {\n        iInternetSecurityManager.dispose();\n        iInternetSecurityManager = null;\n    }\n    if (iOleCommandTarget != null) {\n        iOleCommandTarget.dispose();\n        iOleCommandTarget = null;\n    }\n}",
			"comments":"",
			"methodName":"protected void disposeCOMInterfaces()"
		},
		"public int method10(int[] args)":{
			"methodBody":"{\n    return GetZoneMappings(args[0], args[1], args[2]);\n}",
			"comments":"",
			"methodName":"public int method10(int[] args)"
		},
		"int MapUrlToZone(int pwszUrl, int pdwZone, int dwFlags)":{
			"methodBody":"{\n    \n    COM.MoveMemory(pdwZone, new int[] { Browser.URLZONE_INTRANET }, 4);\n    return COM.S_OK;\n}",
			"comments":"/*\n* Feature in IE 6 sp1.  HTML rendered in memory\n* does not enable local links but the exact same\n* HTML document loaded through a local file is\n* permitted to follow local links.  The workaround is\n* to return URLZONE_INTRANET instead of the default\n* value URLZONE_LOCAL_MACHINE.\n*/\n",
			"methodName":"int MapUrlToZone(int pwszUrl, int pdwZone, int dwFlags)"
		},
		"int TranslateUrl(int dwTranslate, int pchURLIn, int ppchURLOut)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int TranslateUrl(int dwTranslate, int pchURLIn, int ppchURLOut)"
		},
		"public int method3(int[] args)":{
			"methodBody":"{\n    return QueryStatus(args[0], args[1], args[2], args[3]);\n}",
			"comments":"",
			"methodName":"public int method3(int[] args)"
		},
		"public int method2(int[] args)":{
			"methodBody":"{\n    return Release();\n}",
			"comments":"",
			"methodName":"public int method2(int[] args)"
		},
		"public int method1(int[] args)":{
			"methodBody":"{\n    return AddRef();\n}",
			"comments":"",
			"methodName":"public int method1(int[] args)"
		},
		"public int method0(int[] args)":{
			"methodBody":"{\n    return QueryInterface(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method0(int[] args)"
		},
		"int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID)":{
			"methodBody":"{\n    \n    Menu menubar = getShell().getMenuBar();\n    if (menubar != null && !menubar.isDisposed() && menubar.isEnabled()) {\n        Shell shell = menubar.getShell();\n        int hwnd = shell.handle;\n        int hAccel = OS.SendMessage(hwnd, OS.WM_APP + 1, 0, 0);\n        if (hAccel != 0) {\n            MSG msg = new MSG();\n            OS.MoveMemory(msg, lpMsg, MSG.sizeof);\n            if (OS.TranslateAccelerator(hwnd, hAccel, msg) != 0)\n                return COM.S_OK;\n        }\n    }\n    \n    OleAutomation auto = new OleAutomation(this);\n    \n    int[] rgdispid = auto.getIDsOfNames(new String[] { \"LocationURL\" });\n    Variant pVarResult = auto.getProperty(rgdispid[0]);\n    auto.dispose();\n    int result = COM.S_FALSE;\n    if (pVarResult != null) {\n        if (pVarResult.getType() == OLE.VT_BSTR) {\n            String url = pVarResult.getString();\n            if (url.equals(Browser.ABOUT_BLANK)) {\n                MSG msg = new MSG();\n                OS.MoveMemory(msg, lpMsg, MSG.sizeof);\n                if (msg.message == OS.WM_KEYDOWN && msg.wParam == OS.VK_F5)\n                    result = COM.S_OK;\n                if (msg.message == OS.WM_KEYDOWN && msg.wParam == OS.VK_N && OS.GetKeyState(OS.VK_CONTROL) < 0)\n                    result = COM.S_OK;\n            }\n        }\n        pVarResult.dispose();\n    }\n    return result;\n}",
			"comments":"/*\n* Feature on Internet Explorer.  By default the embedded Internet Explorer control runs\n* the Internet Explorer shortcuts (e.g. F5 for refresh).  This overrides the shortcuts\n* defined by SWT.  The workaround is to forward the accelerator keys to the parent window\n* and have Internet Explorer ignore the ones handled by the parent window.\n*/\n/*\n* Feature on Internet Explorer.  By default the embedded Internet Explorer control runs\n* the Internet Explorer shortcuts.  F5 causes refresh.  CTRL-N opens a standalone Internet\n* Explorer.  These behaviours are undesired when rendering HTML in memory.\n* The workaround is to block the default CTRL-N and F5 handling by IE when the URL is about:blank.\n*/\n//$NON-NLS-1$\n",
			"methodName":"int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID)"
		},
		"int Exec(int pguidCmdGroup, int nCmdID, int nCmdExecOpt, int pvaIn, int pvaOut)":{
			"methodBody":"{\n    if (pguidCmdGroup != 0) {\n        GUID guid = new GUID();\n        COM.MoveMemory(guid, pguidCmdGroup, GUID.sizeof);\n        \n        if (COM.IsEqualGUID(guid, COM.CGID_DocHostCommandHandler)) {\n            if (nCmdID == OLECMDID_SHOWSCRIPTERROR)\n                return COM.S_OK;\n        }\n        \n        if (nCmdID == 1 && COM.IsEqualGUID(guid, COM.CGID_Explorer) && ((nCmdExecOpt & 0xFFFF) == 0xA)) {\n            Browser browser = (Browser) getParent().getParent();\n            browser.toolBar = (nCmdExecOpt & 0xFFFF0000) != 0;\n        }\n    }\n    return COM.E_NOTSUPPORTED;\n}",
			"comments":"/*\n* If a javascript error occurred then suppress IE's default script error dialog.\n*/\n/*\n* Bug in Internet Explorer.  OnToolBar TRUE is also fired when any of the\n* address bar or menu bar are requested but not the tool bar.  A workaround\n* has been posted by a Microsoft developer on the public webbrowser_ctl\n* newsgroup. The workaround is to implement the IOleCommandTarget interface\n* to test the argument of an undocumented command.\n*/\n",
			"methodName":"int Exec(int pguidCmdGroup, int nCmdID, int nCmdExecOpt, int pvaIn, int pvaOut)"
		},
		"int OnFrameWindowActivate(int fActivate)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int OnFrameWindowActivate(int fActivate)"
		},
		"protected int AddRef()":{
			"methodBody":"{\n    \n    return super.AddRef();\n}",
			"comments":"/* Workaround for javac 1.1.8 bug */\n",
			"methodName":"protected int AddRef()"
		},
		"int ShowUI(int dwID, int pActiveObject, int pCommandTarget, int pFrame, int pDoc)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int ShowUI(int dwID, int pActiveObject, int pCommandTarget, int pFrame, int pDoc)"
		},
		"int GetDropTarget(int pDropTarget, int ppDropTarget)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int GetDropTarget(int pDropTarget, int ppDropTarget)"
		},
		"int UpdateUI()":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int UpdateUI()"
		},
		"int ShowMessage(int hwnd, int lpstrText, int lpstrCaption, int dwType, int lpstrHelpFile, int dwHelpContext, int plResult)":{
			"methodBody":"{\n    \n    \n    int IDS_MESSAGE_BOX_CAPTION = 8033;\n    if (lpstrText != 0) {\n        \n        TCHAR lpLibFileName = new TCHAR(0, \"SHDOCLC.DLL\", true);\n        int hModule = OS.LoadLibrary(lpLibFileName);\n        if (hModule != 0) {\n            \n            int cnt = OS.wcslen(lpstrText);\n            char[] buffer = new char[cnt];\n            \n            OS.MoveMemory(buffer, lpstrText, cnt * 2);\n            String text = new String(buffer);\n            \n            int length = (OS.IsUnicode ? cnt : OS.WideCharToMultiByte(OS.CP_ACP, 0, buffer, cnt, 0, 0, null, null)) + 1;\n            TCHAR lpBuffer = new TCHAR(0, length);\n            int result = OS.LoadString(hModule, IDS_MESSAGE_BOX_CAPTION, lpBuffer, length);\n            OS.FreeLibrary(hModule);\n            return result > 0 && text.equals(lpBuffer.toString(0, result)) ? COM.S_OK : COM.S_FALSE;\n        }\n    }\n    return COM.S_FALSE;\n}",
			"comments":"/*\n* Feature on IE.  When IE navigates to a website that contains an ActiveX that is prevented from\n* being executed, IE displays a message \"Your current security settings prohibit running ActiveX\n* controls on this page ...\".  The workaround is to selectively block this alert as indicated\n* in the MSDN article \"WebBrowser customization\".\n*/\n/* resource identifier in shdoclc.dll for window caption \"Your current security settings prohibit\n* running ActiveX controls on this page ...\"\n*/\n//$NON-NLS-1$\n/*\n* Note.  lpstrText is a LPOLESTR, i.e. a null terminated unicode string LPWSTR, i.e. a WCHAR*.\n* It is not a BSTR.  A BSTR is a null terminated unicode string that contains its length\n* at the beginning.\n*/\n/*\n* Note.  lpstrText is unicode on both unicode and ansi platforms.\n* The nbr of chars is multiplied by the constant 2 and not by TCHAR.sizeof since\n* TCHAR.sizeof returns 1 on ansi platforms.\n*/\n/* provide a buffer large enough to hold the string to compare to and a null terminated character */\n",
			"methodName":"int ShowMessage(int hwnd, int lpstrText, int lpstrCaption, int dwType, int lpstrHelpFile, int dwHelpContext, int plResult)"
		},
		"public int method4(int[] args)":{
			"methodBody":"{\n    return Exec(args[0], args[1], args[2], args[3], args[4]);\n}",
			"comments":"",
			"methodName":"public int method4(int[] args)"
		},
		"int GetSecurityId(int pwszUrl, int pbSecurityId, int pcbSecurityId, int dwReserved)":{
			"methodBody":"{\n    return Browser.INET_E_DEFAULT_ACTION;\n}",
			"comments":"",
			"methodName":"int GetSecurityId(int pwszUrl, int pbSecurityId, int pcbSecurityId, int dwReserved)"
		},
		"public int method5(int[] args)":{
			"methodBody":"{\n    return MapUrlToZone(args[0], args[1], args[2]);\n}",
			"comments":"",
			"methodName":"public int method5(int[] args)"
		},
		"public int method7(int[] args)":{
			"methodBody":"{\n    return ProcessUrlAction(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n}",
			"comments":"",
			"methodName":"public int method7(int[] args)"
		},
		"public int method6(int[] args)":{
			"methodBody":"{\n    return GetSecurityId(args[0], args[1], args[2], args[3]);\n}",
			"comments":"",
			"methodName":"public int method6(int[] args)"
		},
		"public int method9(int[] args)":{
			"methodBody":"{\n    return SetZoneMapping(args[0], args[1], args[2]);\n}",
			"comments":"",
			"methodName":"public int method9(int[] args)"
		},
		"int ShowHelp(int hwnd, int pszHelpFile, int uCommand, int dwData, int ptMouse_x, int ptMouse_y, int pDispatchObjectHit)":{
			"methodBody":"{\n    Browser browser = (Browser) getParent().getParent();\n    Event event = new Event();\n    event.type = SWT.Help;\n    event.display = getDisplay();\n    event.widget = browser;\n    Shell shell = browser.getShell();\n    Control control = browser;\n    do {\n        if (control.isListening(SWT.Help)) {\n            control.notifyListeners(SWT.Help, event);\n            break;\n        }\n        if (control == shell)\n            break;\n        control = control.getParent();\n    } while (true);\n    return COM.S_OK;\n}",
			"comments":"/* Note.  One of the arguments of ShowHelp is a POINT struct and not a pointer to a POINT struct. Because\n* of the way Callback gets int parameters from a va_list of C arguments 2 integer arguments must be declared,\n* ptMouse_x and ptMouse_y. Otherwise the Browser crashes when the user presses F1 to invoke\n* the help.\n*/\n",
			"methodName":"int ShowHelp(int hwnd, int pszHelpFile, int uCommand, int dwData, int ptMouse_x, int ptMouse_y, int pDispatchObjectHit)"
		},
		"public int method8(int[] args)":{
			"methodBody":"{\n    return QueryCustomPolicy(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n}",
			"comments":"",
			"methodName":"public int method8(int[] args)"
		},
		"public int method15(int[] args)":{
			"methodBody":"{\n    return GetExternal(args[0]);\n}",
			"comments":"",
			"methodName":"public int method15(int[] args)"
		},
		"int QueryStatus(int pguidCmdGroup, int cCmds, int prgCmds, int pCmdText)":{
			"methodBody":"{\n    return COM.E_NOTSUPPORTED;\n}",
			"comments":"/* IOleCommandTarget */\n",
			"methodName":"int QueryStatus(int pguidCmdGroup, int cCmds, int prgCmds, int pCmdText)"
		},
		"int QueryService(int guidService, int riid, int ppvObject)":{
			"methodBody":"{\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_INVALIDARG;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIInternetSecurityManager)) {\n        COM.MoveMemory(ppvObject, new int[] { iInternetSecurityManager.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    COM.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"int QueryService(int guidService, int riid, int ppvObject)"
		},
		"public int method16(int[] args)":{
			"methodBody":"{\n    return TranslateUrl(args[0], args[1], args[2]);\n}",
			"comments":"",
			"methodName":"public int method16(int[] args)"
		},
		"public int method17(int[] args)":{
			"methodBody":"{\n    return FilterDataObject(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method17(int[] args)"
		},
		"protected int Release()":{
			"methodBody":"{\n    \n    return super.Release();\n}",
			"comments":"/* Workaround for javac 1.1.8 bug */\n",
			"methodName":"protected int Release()"
		},
		"int FilterDataObject(int pDO, int ppDORet)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int FilterDataObject(int pDO, int ppDORet)"
		},
		"int GetZoneMappings(int dwZone, int ppenumString, int dwFlags)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int GetZoneMappings(int dwZone, int ppenumString, int dwFlags)"
		},
		"int ProcessUrlAction(int pwszUrl, int dwAction, int pPolicy, int cbPolicy, int pContext, int cbContext, int dwFlags, int dwReserved)":{
			"methodBody":"{\n    \n    int policy = Browser.URLPOLICY_ALLOW;\n    \n    if (dwAction >= Browser.URLACTION_JAVA_MIN && dwAction <= Browser.URLACTION_JAVA_MAX) {\n        policy = Browser.URLPOLICY_JAVA_LOW;\n    }\n    \n    if (dwAction == Browser.URLACTION_ACTIVEX_RUN) {\n        GUID guid = new GUID();\n        COM.MoveMemory(guid, pContext, GUID.sizeof);\n        if (COM.IsEqualGUID(guid, COM.IIDJavaBeansBridge) || COM.IsEqualGUID(guid, COM.IIDShockwaveActiveXControl)) {\n            policy = Browser.URLPOLICY_DISALLOW;\n        }\n    }\n    if (cbPolicy >= 4)\n        COM.MoveMemory(pPolicy, new int[] { policy }, 4);\n    return COM.S_OK;\n}",
			"comments":"/*\n* Feature in IE 6 sp1.  HTML rendered in memory\n* containing an OBJECT tag referring to a local file\n* brings up a warning dialog asking the user whether\n* it should proceed or not.  The workaround is to\n* set the policy to URLPOLICY_ALLOW in this case (dwAction\n* value of 0x1406).\n*\n* Feature in IE. Security Patches and user settings\n* affect the way the embedded web control behaves.  The current\n* approach is to consider the content trusted and allow\n* all URLs by default.\n*/\n/*\n* Note. The URLACTION_JAVA flags refer to the applet tag that normally resolve to\n* the Microsoft VM, not to the java OBJECT tag that resolves to the\n* Sun plugin. Return URLPOLICY_JAVA_LOW to authorize applets instead of\n* URLPOLICY_ALLOW that is interpreted as URLPOLICY_JAVA_PROHIBIT in this\n* context.\n*/\n/*\n* Note.  Some ActiveX plugins crash when executing\n* inside the embedded explorer itself running into\n* a JVM.  The current workaround is to detect when\n* such ActiveX is about to be started and refuse\n* to execute it.\n*/\n",
			"methodName":"int ProcessUrlAction(int pwszUrl, int dwAction, int pPolicy, int cbPolicy, int pContext, int cbContext, int dwFlags, int dwReserved)"
		},
		"int EnableModeless(int EnableModeless)":{
			"methodBody":"{\n    return COM.E_NOTIMPL;\n}",
			"comments":"",
			"methodName":"int EnableModeless(int EnableModeless)"
		}
	},
	"ClassORInterfaceName":[
		"WebSite"
	]
}
