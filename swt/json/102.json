{
	"variables":[
		"_instance",
		"CF_HDROP",
		"CF_HDROPID",
		"CF_HDROP_SEPARATOR",
		"fileNames",
		"allFiles",
		"i",
		"buffer",
		"dropfiles",
		"byteCount",
		"newPtr",
		"dataObject",
		"formatetc",
		"stgmedium",
		"count",
		"fileNames",
		"i",
		"size",
		"lpszFile",
		"strings",
		"i",
		"COM",
		"_instance",
		"object",
		"transferData",
		"DND",
		"DND",
		"object",
		"i",
		"fileNames",
		"i",
		"allFiles",
		"fileNames",
		"i",
		"allFiles",
		"CF_HDROP_SEPARATOR",
		"allFiles",
		"dropfiles",
		"DROPFILES",
		"dropfiles",
		"dropfiles",
		"dropfiles",
		"dropfiles",
		"OS",
		"buffer",
		"TCHAR",
		"OS",
		"COM",
		"COM",
		"DROPFILES",
		"byteCount",
		"OS",
		"newPtr",
		"dropfiles",
		"DROPFILES",
		"OS",
		"newPtr",
		"DROPFILES",
		"buffer",
		"byteCount",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"newPtr",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"transferData",
		"transferData",
		"dataObject",
		"formatetc",
		"COM",
		"formatetc",
		"formatetc",
		"COM",
		"formatetc",
		"formatetc",
		"COM",
		"stgmedium",
		"COM",
		"transferData",
		"dataObject",
		"formatetc",
		"stgmedium",
		"dataObject",
		"transferData",
		"COM",
		"OS",
		"stgmedium",
		"count",
		"i",
		"count",
		"i",
		"OS",
		"stgmedium",
		"i",
		"size",
		"OS",
		"stgmedium",
		"i",
		"lpszFile",
		"size",
		"fileNames",
		"i",
		"lpszFile",
		"lpszFile",
		"OS",
		"stgmedium",
		"fileNames",
		"CF_HDROPID",
		"CF_HDROP",
		"object",
		"object",
		"object",
		"object",
		"i",
		"strings",
		"i",
		"strings",
		"i",
		"strings",
		"i",
		"object",
		"CF_HDROP",
		"ERROR_INVALID_DATA",
		"length",
		"pFiles",
		"sizeof",
		"pt_x",
		"pt_y",
		"fNC",
		"fWide",
		"IsUnicode",
		"sizeof",
		"GMEM_FIXED",
		"GMEM_ZEROINIT",
		"sizeof",
		"sizeof",
		"sizeof",
		"stgmedium",
		"tymed",
		"stgmedium",
		"TYMED_HGLOBAL",
		"unionField",
		"stgmedium",
		"pUnkForRelease",
		"stgmedium",
		"result",
		"S_OK",
		"pIDataObject",
		"pIDataObject",
		"cfFormat",
		"CF_HDROP",
		"ptd",
		"dwAspect",
		"DVASPECT_CONTENT",
		"lindex",
		"tymed",
		"TYMED_HGLOBAL",
		"tymed",
		"TYMED_HGLOBAL",
		"result",
		"result",
		"S_OK",
		"unionField",
		"unionField",
		"unionField",
		"unionField",
		"length",
		"length",
		"object",
		"transferData",
		"transferData",
		"object",
		"object"
	],
	"extendORImplementFiles":[
		"ByteArrayTransfer"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"getInstance",
		"javaToNative",
		"nativeToJava",
		"getTypeIds",
		"getTypeNames",
		"checkFile",
		"validate",
		"checkFile",
		"isSupportedType",
		"error",
		"append",
		"append",
		"toString",
		"length",
		"GlobalAlloc",
		"MoveMemory",
		"MoveMemory",
		"isSupportedType",
		"AddRef",
		"GetData",
		"Release",
		"DragQueryFile",
		"DragQueryFile",
		"DragQueryFile",
		"toString",
		"strlen",
		"DragFinish",
		"length",
		"checkFile",
		"FileTransfer",
		"StringBuffer",
		"TCHAR",
		"DROPFILES",
		"STGMEDIUM",
		"IDataObject",
		"FORMATETC",
		"STGMEDIUM",
		"TCHAR"
	],
	"methodsBody":{
		"public Object nativeToJava(TransferData transferData)":{
			"methodBody":"{\n    if (!isSupportedType(transferData) || transferData.pIDataObject == 0)\n        return null;\n    \n    IDataObject dataObject = new IDataObject(transferData.pIDataObject);\n    dataObject.AddRef();\n    FORMATETC formatetc = new FORMATETC();\n    formatetc.cfFormat = COM.CF_HDROP;\n    formatetc.ptd = 0;\n    formatetc.dwAspect = COM.DVASPECT_CONTENT;\n    formatetc.lindex = -1;\n    formatetc.tymed = COM.TYMED_HGLOBAL;\n    STGMEDIUM stgmedium = new STGMEDIUM();\n    stgmedium.tymed = COM.TYMED_HGLOBAL;\n    transferData.result = dataObject.GetData(formatetc, stgmedium);\n    dataObject.Release();\n    if (transferData.result != COM.S_OK)\n        return null;\n    \n    int count = OS.DragQueryFile(stgmedium.unionField, 0xFFFFFFFF, null, 0);\n    String[] fileNames = new String[count];\n    for (int i = 0; i < count; i++) {\n        \n        int size = OS.DragQueryFile(stgmedium.unionField, i, null, 0) + 1;\n        TCHAR lpszFile = new TCHAR(0, size);\n        \n        OS.DragQueryFile(stgmedium.unionField, i, lpszFile, size);\n        fileNames[i] = lpszFile.toString(0, lpszFile.strlen());\n    }\n    \n    OS.DragFinish(stgmedium.unionField);\n    return fileNames;\n}",
			"comments":"/**\n* This implementation of <code>nativeToJava</code> converts a platform specific\n* representation of a list of file names to a java <code>String[]</code>.\n* Each String in the array contains the absolute path for a single file or directory.\n* For additional information see <code>Transfer#nativeToJava</code>.\n*\n* @param transferData the platform specific representation of the data to be\n* been converted\n* @return a java <code>String[]</code> containing a list of file names if the\n* conversion was successful; otherwise null\n*/\n// get file names from IDataObject\n// How many files are there?\n// How long is the name ?\n// Get file name and append it to string\n// frees data associated with HDROP data\n",
			"methodName":"public Object nativeToJava(TransferData transferData)"
		},
		"protected int[] getTypeIds()":{
			"methodBody":"{\n    return new int[] { CF_HDROPID };\n}",
			"comments":"",
			"methodName":"protected int[] getTypeIds()"
		},
		"protected String[] getTypeNames()":{
			"methodBody":"{\n    return new String[] { CF_HDROP };\n}",
			"comments":"",
			"methodName":"protected String[] getTypeNames()"
		},
		"public static FileTransfer getInstance()":{
			"methodBody":"{\n    return _instance;\n}",
			"comments":"/**\n* Returns the singleton instance of the FileTransfer class.\n*\n* @return the singleton instance of the FileTransfer class\n*/\n",
			"methodName":"public static FileTransfer getInstance()"
		},
		"boolean checkFile(Object object)":{
			"methodBody":"{\n    if (object == null || !(object instanceof String[]) || ((String[]) object).length == 0)\n        return false;\n    String[] strings = (String[]) object;\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i] == null || strings[i].length() == 0)\n            return false;\n    }\n    return true;\n}",
			"comments":"",
			"methodName":"boolean checkFile(Object object)"
		},
		"protected boolean validate(Object object)":{
			"methodBody":"{\n    return checkFile(object);\n}",
			"comments":"",
			"methodName":"protected boolean validate(Object object)"
		},
		"public void javaToNative(Object object, TransferData transferData)":{
			"methodBody":"{\n    if (!checkFile(object) || !isSupportedType(transferData)) {\n        DND.error(DND.ERROR_INVALID_DATA);\n    }\n    String[] fileNames = (String[]) object;\n    StringBuffer allFiles = new StringBuffer();\n    for (int i = 0; i < fileNames.length; i++) {\n        allFiles.append(fileNames[i]);\n        \n        allFiles.append(CF_HDROP_SEPARATOR);\n    }\n    \n    TCHAR buffer = new TCHAR(0, allFiles.toString(), true);\n    DROPFILES dropfiles = new DROPFILES();\n    dropfiles.pFiles = DROPFILES.sizeof;\n    dropfiles.pt_x = dropfiles.pt_y = 0;\n    dropfiles.fNC = 0;\n    dropfiles.fWide = OS.IsUnicode ? 1 : 0;\n    \n    \n    int byteCount = buffer.length() * TCHAR.sizeof;\n    int newPtr = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);\n    OS.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);\n    OS.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);\n    transferData.stgmedium = new STGMEDIUM();\n    transferData.stgmedium.tymed = COM.TYMED_HGLOBAL;\n    transferData.stgmedium.unionField = newPtr;\n    transferData.stgmedium.pUnkForRelease = 0;\n    transferData.result = COM.S_OK;\n}",
			"comments":"/**\n* This implementation of <code>javaToNative</code> converts a list of file names\n* represented by a java <code>String[]</code> to a platform specific representation.\n* Each <code>String</code> in the array contains the absolute path for a single\n* file or directory.  For additional information see\n* <code>Transfer#javaToNative</code>.\n*\n* @param object a java <code>String[]</code> containing the file names to be\n* converted\n* @param transferData an empty <code>TransferData</code> object; this\n*  object will be filled in on return with the platform specific format of the data\n*/\n// each name is null terminated\n// there is an extra null terminator at the very end\n// Allocate the memory because the caller (DropTarget) has not handed it in\n// The caller of this method must release the data when it is done with it.\n",
			"methodName":"public void javaToNative(Object object, TransferData transferData)"
		}
	},
	"ClassORInterfaceName":[
		"FileTransfer"
	]
}
