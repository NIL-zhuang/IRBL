{
	"variables":[
		"widget",
		"iDispatch",
		"refCount",
		"objIUnknown",
		"eventCookie",
		"eventGuid",
		"eventTable",
		"ppvObject",
		"cpc",
		"ppCP",
		"cp",
		"pCookie",
		"ppvObject",
		"cpc",
		"cp",
		"eventInfo",
		"dispParams",
		"size",
		"offset",
		"j",
		"event",
		"guid",
		"widget",
		"riid",
		"iUnknown",
		"objIUnknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"cpc",
		"eventGuid",
		"ppCP",
		"COM",
		"ppCP",
		"cp",
		"iDispatch",
		"pCookie",
		"COM",
		"eventCookie",
		"pCookie",
		"cp",
		"cpc",
		"listener",
		"OLE",
		"SWT",
		"eventTable",
		"eventTable",
		"eventTable",
		"eventID",
		"listener",
		"refCount",
		"refCount",
		"iDispatch",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"eventCookie",
		"objIUnknown",
		"objIUnknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"cpc",
		"eventGuid",
		"ppvObject",
		"COM",
		"ppvObject",
		"cp",
		"eventCookie",
		"COM",
		"eventCookie",
		"cp",
		"cpc",
		"iDispatch",
		"iDispatch",
		"iDispatch",
		"eventTable",
		"eventTable",
		"dispIdMember",
		"COM",
		"pDispParams",
		"COM",
		"dispParams",
		"pDispParams",
		"DISPPARAMS",
		"eventInfo",
		"dispParams",
		"Variant",
		"dispParams",
		"size",
		"j",
		"dispParams",
		"j",
		"eventInfo",
		"j",
		"eventInfo",
		"j",
		"dispParams",
		"offset",
		"offset",
		"offset",
		"size",
		"event",
		"eventInfo",
		"dispIdMember",
		"event",
		"COM",
		"event",
		"OLE",
		"SWT",
		"eventTable",
		"event",
		"eventType",
		"event",
		"widget",
		"eventTable",
		"event",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"guid",
		"eventGuid",
		"COM",
		"ppvObject",
		"iDispatch",
		"OLE",
		"COM",
		"ppvObject",
		"COM",
		"refCount",
		"refCount",
		"refCount",
		"listener",
		"OLE",
		"SWT",
		"eventTable",
		"eventTable",
		"eventID",
		"listener",
		"eventTable",
		"widget",
		"eventGuid",
		"objIUnknown",
		"IIDIConnectionPointContainer",
		"S_OK",
		"S_OK",
		"S_OK",
		"ERROR_NULL_ARGUMENT",
		"IIDIConnectionPointContainer",
		"S_OK",
		"S_OK",
		"S_OK",
		"S_OK",
		"sizeof",
		"cArgs",
		"sizeof",
		"cArgs",
		"cArgs",
		"rgvarg",
		"arguments",
		"S_OK",
		"ERROR_NULL_ARGUMENT",
		"type",
		"widget",
		"E_INVALIDARG",
		"sizeof",
		"IIDIUnknown",
		"IIDIDispatch",
		"S_OK",
		"E_NOINTERFACE",
		"ERROR_NULL_ARGUMENT",
		"widget",
		"iUnknown",
		"riid",
		"eventID",
		"listener",
		"args",
		"args",
		"args",
		"args",
		"dispIdMember",
		"riid",
		"lcid",
		"dwFlags",
		"pDispParams",
		"pVarResult",
		"pExcepInfo",
		"pArgErr",
		"eventType",
		"event",
		"riid",
		"ppvObject",
		"eventID",
		"listener"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.ole.win32"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.internal.ole.win32"
	],
	"methods":[
		"connect",
		"addListener",
		"AddRef",
		"createCOMInterfaces",
		"method0",
		"method1",
		"method2",
		"method6",
		"disconnect",
		"disposeCOMInterfaces",
		"Invoke",
		"notifyListener",
		"QueryInterface",
		"Release",
		"removeListener",
		"hasListeners",
		"createCOMInterfaces",
		"QueryInterface",
		"FindConnectionPoint",
		"Advise",
		"getAddress",
		"Release",
		"Release",
		"error",
		"hook",
		"QueryInterface",
		"AddRef",
		"Release",
		"Invoke",
		"QueryInterface",
		"FindConnectionPoint",
		"Unadvise",
		"Release",
		"Release",
		"dispose",
		"hooks",
		"MoveMemory",
		"setData",
		"notifyListener",
		"error",
		"sendEvent",
		"MoveMemory",
		"IsEqualGUID",
		"IsEqualGUID",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"disposeCOMInterfaces",
		"error",
		"unhook",
		"hasEntries",
		"IUnknown",
		"IConnectionPointContainer",
		"IConnectionPoint",
		"OleEventTable",
		"COMObject",
		"IConnectionPointContainer",
		"IConnectionPoint",
		"DISPPARAMS",
		"Variant",
		"OleEvent",
		"GUID"
	],
	"methodsBody":{
		"boolean hasListeners()":{
			"methodBody":"{\n    return eventTable.hasEntries();\n}",
			"comments":"",
			"methodName":"boolean hasListeners()"
		},
		"int AddRef()":{
			"methodBody":"{\n    refCount++;\n    return refCount;\n}",
			"comments":"",
			"methodName":"int AddRef()"
		},
		"private int Invoke(int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)":{
			"methodBody":"{\n    if (eventTable == null || !eventTable.hooks(dispIdMember))\n        return COM.S_OK;\n    \n    \n    Variant[] eventInfo = null;\n    if (pDispParams != 0) {\n        DISPPARAMS dispParams = new DISPPARAMS();\n        COM.MoveMemory(dispParams, pDispParams, DISPPARAMS.sizeof);\n        eventInfo = new Variant[dispParams.cArgs];\n        int size = Variant.sizeof;\n        int offset = (dispParams.cArgs - 1) * size;\n        for (int j = 0; j < dispParams.cArgs; j++) {\n            eventInfo[j] = new Variant();\n            eventInfo[j].setData(dispParams.rgvarg + offset);\n            offset = offset - size;\n        }\n    }\n    OleEvent event = new OleEvent();\n    event.arguments = eventInfo;\n    notifyListener(dispIdMember, event);\n    return COM.S_OK;\n}",
			"comments":"// Construct an array of the parameters that are passed in\n// Note: parameters are passed in reverse order - here we will correct the order\n",
			"methodName":"private int Invoke(int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)"
		},
		"private int QueryInterface(int riid, int ppvObject)":{
			"methodBody":"{\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_INVALIDARG;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIUnknown) || COM.IsEqualGUID(guid, COM.IIDIDispatch) || COM.IsEqualGUID(guid, eventGuid)) {\n        COM.MoveMemory(ppvObject, new int[] { iDispatch.getAddress() }, 4);\n        AddRef();\n        return OLE.S_OK;\n    }\n    COM.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"private int QueryInterface(int riid, int ppvObject)"
		},
		"private void notifyListener(int eventType, OleEvent event)":{
			"methodBody":"{\n    if (event == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    event.type = eventType;\n    event.widget = widget;\n    eventTable.sendEvent(event);\n}",
			"comments":"/**\n* Notify listeners of an event.\n* <p>\n*\tThis method notifies all listeners that an event\n* has occurred.\n*\n* @param eventType the desired SWT event\n* @param event the event data\n*\n* @exception IllegalArgumentException <ul>\n* \t\t<li>ERROR_NULL_ARGUMENT when handler is null</li>\n* </ul>\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"private void notifyListener(int eventType, OleEvent event)"
		},
		"void addListener(int eventID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        eventTable = new OleEventTable();\n    eventTable.hook(eventID, listener);\n}",
			"comments":"",
			"methodName":"void addListener(int eventID, OleListener listener)"
		},
		"private void createCOMInterfaces()":{
			"methodBody":"{\n    iDispatch = new COMObject(new int[] { 2, 0, 0, 1, 3, 4, 8 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        \n        \n        \n        public int method6(int[] args) {\n            return Invoke(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n        }\n    };\n}",
			"comments":"// method3 GetTypeInfoCount - not implemented\n// method4 GetTypeInfo - not implemented\n// method5 GetIDsOfNames - not implemented\n",
			"methodName":"private void createCOMInterfaces()"
		},
		"public int method2(int[] args)":{
			"methodBody":"{\n    return Release();\n}",
			"comments":"",
			"methodName":"public int method2(int[] args)"
		},
		"public int method6(int[] args)":{
			"methodBody":"{\n    return Invoke(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n}",
			"comments":"// method3 GetTypeInfoCount - not implemented\n// method4 GetTypeInfo - not implemented\n// method5 GetIDsOfNames - not implemented\n",
			"methodName":"public int method6(int[] args)"
		},
		"private void disposeCOMInterfaces()":{
			"methodBody":"{\n    if (iDispatch != null)\n        iDispatch.dispose();\n    iDispatch = null;\n}",
			"comments":"",
			"methodName":"private void disposeCOMInterfaces()"
		},
		"public int method1(int[] args)":{
			"methodBody":"{\n    return AddRef();\n}",
			"comments":"",
			"methodName":"public int method1(int[] args)"
		},
		"void connect()":{
			"methodBody":"{\n    int[] ppvObject = new int[1];\n    if (objIUnknown.QueryInterface(COM.IIDIConnectionPointContainer, ppvObject) == COM.S_OK) {\n        IConnectionPointContainer cpc = new IConnectionPointContainer(ppvObject[0]);\n        int[] ppCP = new int[1];\n        if (cpc.FindConnectionPoint(eventGuid, ppCP) == COM.S_OK) {\n            IConnectionPoint cp = new IConnectionPoint(ppCP[0]);\n            int[] pCookie = new int[1];\n            if (cp.Advise(iDispatch.getAddress(), pCookie) == COM.S_OK)\n                eventCookie = pCookie[0];\n            cp.Release();\n        }\n        cpc.Release();\n    }\n}",
			"comments":"",
			"methodName":"void connect()"
		},
		"int Release()":{
			"methodBody":"{\n    refCount--;\n    if (refCount == 0) {\n        disposeCOMInterfaces();\n    }\n    return refCount;\n}",
			"comments":"",
			"methodName":"int Release()"
		},
		"void removeListener(int eventID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(eventID, listener);\n}",
			"comments":"",
			"methodName":"void removeListener(int eventID, OleListener listener)"
		},
		"public int method0(int[] args)":{
			"methodBody":"{\n    return QueryInterface(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method0(int[] args)"
		},
		"void disconnect()":{
			"methodBody":"{\n    \n    if (eventCookie != 0 && objIUnknown != null) {\n        int[] ppvObject = new int[1];\n        if (objIUnknown.QueryInterface(COM.IIDIConnectionPointContainer, ppvObject) == COM.S_OK) {\n            IConnectionPointContainer cpc = new IConnectionPointContainer(ppvObject[0]);\n            if (cpc.FindConnectionPoint(eventGuid, ppvObject) == COM.S_OK) {\n                IConnectionPoint cp = new IConnectionPoint(ppvObject[0]);\n                if (cp.Unadvise(eventCookie) == COM.S_OK) {\n                    eventCookie = 0;\n                }\n                cp.Release();\n            }\n            cpc.Release();\n        }\n    }\n}",
			"comments":"// disconnect event sink\n",
			"methodName":"void disconnect()"
		}
	},
	"ClassORInterfaceName":[
		"OleEventSink"
	]
}
