{
	"variables":[
		"header",
		"header",
		"isLittleEndian",
		"images",
		"file",
		"offset",
		"directory",
		"image",
		"directory",
		"stream",
		"header",
		"stream",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"inputStream",
		"file",
		"header",
		"header",
		"header",
		"SWT",
		"SWT",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"SWT",
		"SWT",
		"isLittleEndian",
		"header",
		"isLittleEndian",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"header",
		"file",
		"offset",
		"file",
		"isLittleEndian",
		"loader",
		"directory",
		"images",
		"image",
		"SWT",
		"SWT",
		"e",
		"images",
		"image",
		"directory",
		"outputStream",
		"SWT",
		"SWT",
		"e",
		"ERROR_INVALID_IMAGE",
		"ERROR_INVALID_IMAGE",
		"ERROR_IO",
		"ERROR_IO",
		"stream",
		"e",
		"e",
		"image",
		"e"
	],
	"extendORImplementFiles":[
		"FileFormat"
	],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"java.io"
	],
	"methods":[
		"isFileFormat",
		"loadFromByteStream",
		"unloadIntoByteStream",
		"read",
		"unread",
		"read",
		"error",
		"error",
		"seek",
		"read",
		"error",
		"writeToStream",
		"error",
		"TIFFRandomFileAccess",
		"TIFFDirectory",
		"TIFFDirectory"
	],
	"methodsBody":{
		"ImageData[] loadFromByteStream()":{
			"methodBody":"{\n    byte[] header = new byte[8];\n    boolean isLittleEndian;\n    ImageData[] images = new ImageData[0];\n    TIFFRandomFileAccess file = new TIFFRandomFileAccess(inputStream);\n    try {\n        file.read(header);\n        if (header[0] != header[1])\n            SWT.error(SWT.ERROR_INVALID_IMAGE);\n        if (!(header[0] == 0x49 && header[2] == 42 && header[3] == 0) && !(header[0] == 0x4d && header[2] == 0 && header[3] == 42)) {\n            SWT.error(SWT.ERROR_INVALID_IMAGE);\n        }\n        isLittleEndian = header[0] == 0x49;\n        int offset = isLittleEndian ? (header[4] & 0xFF) | ((header[5] & 0xFF) << 8) | ((header[6] & 0xFF) << 16) | ((header[7] & 0xFF) << 24) : (header[7] & 0xFF) | ((header[6] & 0xFF) << 8) | ((header[5] & 0xFF) << 16) | ((header[4] & 0xFF) << 24);\n        file.seek(offset);\n        TIFFDirectory directory = new TIFFDirectory(file, isLittleEndian, loader);\n        ImageData image = directory.read();\n        \n        images = new ImageData[] { image };\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    return images;\n}",
			"comments":"/* A baseline reader is only expected to read the first directory */\n",
			"methodName":"ImageData[] loadFromByteStream()"
		},
		"boolean isFileFormat(LEDataInputStream stream)":{
			"methodBody":"{\n    try {\n        byte[] header = new byte[4];\n        stream.read(header);\n        stream.unread(header);\n        if (header[0] != header[1])\n            return false;\n        if (!(header[0] == 0x49 && header[2] == 42 && header[3] == 0) && !(header[0] == 0x4d && header[2] == 0 && header[3] == 42)) {\n            return false;\n        }\n        return true;\n    } catch (Exception e) {\n        return false;\n    }\n}",
			"comments":"",
			"methodName":"boolean isFileFormat(LEDataInputStream stream)"
		},
		"void unloadIntoByteStream(ImageData image)":{
			"methodBody":"{\n    TIFFDirectory directory = new TIFFDirectory(image);\n    try {\n        directory.writeToStream(outputStream);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n}",
			"comments":"",
			"methodName":"void unloadIntoByteStream(ImageData image)"
		}
	},
	"ClassORInterfaceName":[
		"TIFFFileFormat"
	]
}
