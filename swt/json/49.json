{
	"variables":[
		"horizontalAlignment",
		"grabHorizontal",
		"minimumWidth",
		"verticalAlignment",
		"grabVertical",
		"minimumHeight",
		"parent",
		"editor",
		"hadFocus",
		"tableListener",
		"scrollbarListener",
		"hBar",
		"vBar",
		"clientArea",
		"editorRect",
		"hBar",
		"vBar",
		"SWT",
		"SWT",
		"parent",
		"tableListener",
		"parent",
		"SWT",
		"tableListener",
		"scrollbarListener",
		"e",
		"parent",
		"hBar",
		"hBar",
		"SWT",
		"scrollbarListener",
		"parent",
		"vBar",
		"vBar",
		"SWT",
		"scrollbarListener",
		"parent",
		"clientArea",
		"clientArea",
		"minimumWidth",
		"minimumHeight",
		"grabHorizontal",
		"editorRect",
		"Math",
		"clientArea",
		"minimumWidth",
		"grabVertical",
		"editorRect",
		"Math",
		"clientArea",
		"minimumHeight",
		"horizontalAlignment",
		"SWT",
		"editorRect",
		"clientArea",
		"editorRect",
		"SWT",
		"editorRect",
		"clientArea",
		"editorRect",
		"verticalAlignment",
		"SWT",
		"editorRect",
		"clientArea",
		"editorRect",
		"SWT",
		"editorRect",
		"clientArea",
		"editorRect",
		"editorRect",
		"parent",
		"parent",
		"SWT",
		"tableListener",
		"parent",
		"hBar",
		"hBar",
		"SWT",
		"scrollbarListener",
		"parent",
		"vBar",
		"vBar",
		"SWT",
		"scrollbarListener",
		"parent",
		"editor",
		"hadFocus",
		"tableListener",
		"scrollbarListener",
		"editor",
		"editor",
		"editor",
		"editor",
		"hadFocus",
		"editor",
		"editor",
		"hadFocus",
		"editor",
		"editor",
		"editor",
		"editor",
		"editor",
		"editor",
		"editor",
		"editor",
		"editor",
		"editor",
		"editor",
		"CENTER",
		"CENTER",
		"parent",
		"Resize",
		"Selection",
		"Selection",
		"x",
		"y",
		"width",
		"width",
		"height",
		"height",
		"RIGHT",
		"x",
		"width",
		"width",
		"LEFT",
		"x",
		"width",
		"width",
		"BOTTOM",
		"y",
		"height",
		"height",
		"TOP",
		"y",
		"height",
		"height",
		"Resize",
		"Selection",
		"Selection",
		"editor",
		"editor",
		"parent",
		"e",
		"e",
		"e",
		"editor"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"handleEvent",
		"handleEvent",
		"computeBounds",
		"dispose",
		"getEditor",
		"layout",
		"resize",
		"scroll",
		"setEditor",
		"resize",
		"addListener",
		"scroll",
		"getHorizontalBar",
		"addListener",
		"getVerticalBar",
		"addListener",
		"getClientArea",
		"max",
		"max",
		"isDisposed",
		"removeListener",
		"getHorizontalBar",
		"removeListener",
		"getVerticalBar",
		"removeListener",
		"resize",
		"isDisposed",
		"getVisible",
		"isFocusControl",
		"setBounds",
		"computeBounds",
		"isDisposed",
		"setFocus",
		"isDisposed",
		"setBounds",
		"computeBounds",
		"resize",
		"isDisposed",
		"setVisible",
		"Listener",
		"Listener",
		"Rectangle"
	],
	"methodsBody":{
		"Rectangle computeBounds()":{
			"methodBody":"{\n    Rectangle clientArea = parent.getClientArea();\n    Rectangle editorRect = new Rectangle(clientArea.x, clientArea.y, minimumWidth, minimumHeight);\n    if (grabHorizontal)\n        editorRect.width = Math.max(clientArea.width, minimumWidth);\n    if (grabVertical)\n        editorRect.height = Math.max(clientArea.height, minimumHeight);\n    switch(horizontalAlignment) {\n        case SWT.RIGHT:\n            editorRect.x += clientArea.width - editorRect.width;\n            break;\n        case SWT.LEFT:\n            \n            break;\n        default:\n            \n            editorRect.x += (clientArea.width - editorRect.width) / 2;\n    }\n    switch(verticalAlignment) {\n        case SWT.BOTTOM:\n            editorRect.y += clientArea.height - editorRect.height;\n            break;\n        case SWT.TOP:\n            \n            break;\n        default:\n            \n            editorRect.y += (clientArea.height - editorRect.height) / 2;\n    }\n    return editorRect;\n}",
			"comments":"// do nothing - clientArea.x is the right answer\n// default is CENTER\n// do nothing - clientArea.y is the right answer\n// default is CENTER\n",
			"methodName":"Rectangle computeBounds()"
		},
		"void resize()":{
			"methodBody":"{\n    if (editor == null || editor.isDisposed())\n        return;\n    if (editor.getVisible()) {\n        hadFocus = editor.isFocusControl();\n    }\n    \n    \n    \n    editor.setBounds(computeBounds());\n    if (hadFocus) {\n        if (editor == null || editor.isDisposed())\n            return;\n        editor.setFocus();\n    }\n}",
			"comments":"// this doesn't work because\n// resizing the column takes the focus away\n// before we get here\n",
			"methodName":"void resize()"
		},
		"public void dispose()":{
			"methodBody":"{\n    if (!parent.isDisposed()) {\n        parent.removeListener(SWT.Resize, tableListener);\n        ScrollBar hBar = parent.getHorizontalBar();\n        if (hBar != null)\n            hBar.removeListener(SWT.Selection, scrollbarListener);\n        ScrollBar vBar = parent.getVerticalBar();\n        if (vBar != null)\n            vBar.removeListener(SWT.Selection, scrollbarListener);\n    }\n    parent = null;\n    editor = null;\n    hadFocus = false;\n    tableListener = null;\n    scrollbarListener = null;\n}",
			"comments":"/**\n* Removes all associations between the Editor and the underlying composite.  The\n* composite and the editor Control are <b>not</b> disposed.\n*/\n",
			"methodName":"public void dispose()"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    scroll(e);\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"public void layout()":{
			"methodBody":"{\n    resize();\n}",
			"comments":"/**\n* Lays out the control within the underlying composite.  This\n* method should be called after changing one or more fields to\n* force the Editor to resize.\n*\n* @since 2.1\n*/\n",
			"methodName":"public void layout()"
		},
		"void scroll(Event e)":{
			"methodBody":"{\n    if (editor == null || editor.isDisposed())\n        return;\n    editor.setBounds(computeBounds());\n}",
			"comments":"",
			"methodName":"void scroll(Event e)"
		},
		"public Control getEditor()":{
			"methodBody":"{\n    return editor;\n}",
			"comments":"/**\n* Returns the Control that is displayed above the composite being edited.\n*\n* @return the Control that is displayed above the composite being edited\n*/\n",
			"methodName":"public Control getEditor()"
		},
		"public void setEditor(Control editor)":{
			"methodBody":"{\n    if (editor == null) {\n        \n        \n        this.editor = null;\n        return;\n    }\n    this.editor = editor;\n    resize();\n    if (editor == null || editor.isDisposed())\n        return;\n    editor.setVisible(true);\n}",
			"comments":"/**\n* Specify the Control that is to be displayed.\n*\n* <p>Note: The Control provided as the editor <b>must</b> be created with its parent\n* being the Composite specified in the ControlEditor constructor.\n*\n* @param editor the Control that is displayed above the composite being edited\n*/\n// this is the case where the caller is setting the editor to be blank\n// set all the values accordingly\n",
			"methodName":"public void setEditor(Control editor)"
		}
	},
	"ClassORInterfaceName":[
		"ControlEditor"
	]
}
