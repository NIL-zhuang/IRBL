{
	"variables":[
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"composite",
		"flushCache"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"computeSize",
		"flushCache",
		"layout"
	],
	"methodsBody":{
		"protected abstract Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"",
			"comments":"/**\n* Computes and returns the size of the specified\n* composite's client area according to this layout.\n* <p>\n* This method computes the size that the client area\n* of the composite must be in order to position all\n* children at their preferred size inside the\n* composite according to the layout algorithm\n* encoded by this layout.\n* </p>\n* <p>\n* When a width or height hint is supplied, it is\n* used to constrain the result. For example, if a\n* width hint is provided that is less than the\n* width of the client area, the layout may choose\n* to wrap and increase height, clip, overlap, or\n* otherwise constrain the children.\n* </p>\n*\n* @param composite a composite widget using this layout\n* @param wHint width (<code>SWT.DEFAULT</code> for preferred size)\n* @param hHint height (<code>SWT.DEFAULT</code> for preferred size)\n* @param flushCache <code>true</code> means flush cached layout values\n* @return a point containing the computed size (width, height)\n*\n* @see #layout\n* @see Control#getBorderWidth\n* @see Control#getBounds\n* @see Control#getSize\n* @see Control#pack(boolean)\n* @see \"computeTrim, getClientArea for controls that implement them\"\n*/\n",
			"methodName":"protected abstract Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)"
		},
		"protected boolean flushCache(Control control)":{
			"methodBody":"{\n    return false;\n}",
			"comments":"/**\n* Instruct the layout to flush any cached values\n* associated with the control specified in the argument\n* <code>control</code>.\n*\n* @param control a control managed by this layout\n* @return true if the Layout has flushed all cached information associated with control\n*\n* @since 3.1\n*/\n",
			"methodName":"protected boolean flushCache(Control control)"
		},
		"protected abstract void layout(Composite composite, boolean flushCache)":{
			"methodBody":"",
			"comments":"/**\n* Lays out the children of the specified composite\n* according to this layout.\n* <p>\n* This method positions and sizes the children of a\n* composite using the layout algorithm encoded by this\n* layout. Children of the composite are positioned in\n* the client area of the composite. The position of\n* the composite is not altered by this method.\n* </p>\n* <p>\n* When the flush cache hint is true, the layout is\n* instructed to flush any cached values associated\n* with the children. Typically, a layout will cache\n* the preferred sizes of the children to avoid the\n* expense of computing these values each time the\n* widget is laid out.\n* </p>\n* <p>\n* When layout is triggered explicitly by the programmer\n* the flush cache hint is true. When layout is triggered\n* by a resize, either caused by the programmer or by the\n* user, the hint is false.\n* </p>\n*\n* @param composite a composite widget using this layout\n* @param flushCache <code>true</code> means flush cached layout values\n*/\n",
			"methodName":"protected abstract void layout(Composite composite, boolean flushCache)"
		}
	},
	"ClassORInterfaceName":[
		"Layout"
	]
}
