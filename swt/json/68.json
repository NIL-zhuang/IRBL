{
	"variables":[
		"start",
		"length",
		"foreground",
		"background",
		"fontStyle",
		"underline",
		"strikeout",
		"style",
		"code",
		"style",
		"buf",
		"SWT",
		"start",
		"length",
		"foreground",
		"background",
		"start",
		"length",
		"foreground",
		"background",
		"fontStyle",
		"object",
		"object",
		"style",
		"object",
		"style",
		"style",
		"style",
		"start",
		"length",
		"foreground",
		"code",
		"foreground",
		"background",
		"code",
		"background",
		"code",
		"fontStyle",
		"SWT",
		"style",
		"style",
		"style",
		"style",
		"style",
		"style",
		"style",
		"start",
		"length",
		"foreground",
		"background",
		"fontStyle",
		"style",
		"style",
		"style",
		"buf",
		"start",
		"length",
		"foreground",
		"background",
		"fontStyle",
		"SWT",
		"buf",
		"SWT",
		"buf",
		"SWT",
		"SWT",
		"buf",
		"buf",
		"underline",
		"buf",
		"strikeout",
		"buf",
		"buf",
		"NORMAL",
		"start",
		"length",
		"foreground",
		"background",
		"start",
		"length",
		"foreground",
		"background",
		"fontStyle",
		"start",
		"start",
		"length",
		"length",
		"foreground",
		"background",
		"fontStyle",
		"NORMAL",
		"underline",
		"strikeout",
		"foreground",
		"foreground",
		"foreground",
		"foreground",
		"background",
		"background",
		"background",
		"background",
		"fontStyle",
		"fontStyle",
		"underline",
		"underline",
		"strikeout",
		"strikeout",
		"underline",
		"underline",
		"strikeout",
		"strikeout",
		"BOLD",
		"ITALIC",
		"BOLD",
		"ITALIC",
		"start",
		"length",
		"foreground",
		"background",
		"start",
		"length",
		"foreground",
		"background",
		"fontStyle",
		"object",
		"style"
	],
	"extendORImplementFiles":[
		"CloneableCompatibility"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.internal.CloneableCompatibility"
	],
	"methods":[
		"equals",
		"hashCode",
		"isUnstyled",
		"similarTo",
		"clone",
		"toString",
		"similarTo",
		"hashCode",
		"hashCode",
		"equals",
		"equals",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"toString",
		"StyleRange",
		"StringBuffer"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    StringBuffer buf = new StringBuffer();\n    buf.append(start + \",\" + length + \" fg:\" + foreground + \" bg:\" + background + \" fStyle:\");\n    switch(fontStyle) {\n        case SWT.BOLD:\n            buf.append(\"bold\");\n            break;\n        case SWT.ITALIC:\n            buf.append(\"italic\");\n            break;\n        case SWT.BOLD | SWT.ITALIC:\n            buf.append(\"bold-italic\");\n            break;\n        default:\n            buf.append(\"normal\");\n    }\n    if (underline)\n        buf.append(\" underline\");\n    if (strikeout)\n        buf.append(\" strikeout\");\n    return buf.toString();\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the event\n*/\n",
			"methodName":"public String toString()"
		},
		"public int hashCode()":{
			"methodBody":"{\n    int code = start + length;\n    if (foreground != null)\n        code += foreground.hashCode();\n    if (background != null)\n        code += background.hashCode();\n    return code + fontStyle;\n}",
			"comments":"/**\n* Returns an integer hash code for the receiver. Any two\n* objects that return <code>true</code> when passed to\n* <code>equals</code> must return the same value for this\n* method.\n*\n* @return the receiver's hash\n*\n* @see #equals(Object)\n*/\n",
			"methodName":"public int hashCode()"
		},
		"public boolean isUnstyled()":{
			"methodBody":"{\n    if (this.foreground != null)\n        return false;\n    if (this.background != null)\n        return false;\n    if (this.fontStyle != SWT.NORMAL)\n        return false;\n    if (this.underline)\n        return false;\n    if (this.strikeout)\n        return false;\n    return true;\n}",
			"comments":"/**\n* Returns whether or not the receiver is unstyled (i.e., does not have any\n* style attributes specified).\n* <p>\n*\n* @return true if the receiver is unstyled, false otherwise.\n*/\n",
			"methodName":"public boolean isUnstyled()"
		},
		"public Object clone()":{
			"methodBody":"{\n    StyleRange style = new StyleRange(start, length, foreground, background, fontStyle);\n    style.underline = this.underline;\n    style.strikeout = this.strikeout;\n    return style;\n}",
			"comments":"/**\n* Answers a new StyleRange with the same values as this StyleRange.\n* <p>\n*\n* @return a shallow copy of this StyleRange\n*/\n",
			"methodName":"public Object clone()"
		},
		"public boolean equals(Object object)":{
			"methodBody":"{\n    StyleRange style;\n    if (object == this)\n        return true;\n    if (object instanceof StyleRange)\n        style = (StyleRange) object;\n    else\n        return false;\n    if (this.start != style.start)\n        return false;\n    if (this.length != style.length)\n        return false;\n    return similarTo(style);\n}",
			"comments":"/**\n* Compares the argument to the receiver, and returns true\n* if they represent the <em>same</em> object using a class\n* specific comparison.\n*\n* @param object the object to compare with this object\n* @return <code>true</code> if the object is the same as this object and <code>false</code> otherwise\n*\n* @see #hashCode()\n*/\n",
			"methodName":"public boolean equals(Object object)"
		},
		"public boolean similarTo(StyleRange style)":{
			"methodBody":"{\n    if (this.foreground != null) {\n        if (!this.foreground.equals(style.foreground))\n            return false;\n    } else if (style.foreground != null)\n        return false;\n    if (this.background != null) {\n        if (!this.background.equals(style.background))\n            return false;\n    } else if (style.background != null)\n        return false;\n    if (this.fontStyle != style.fontStyle)\n        return false;\n    if (this.underline != style.underline)\n        return false;\n    if (this.strikeout != style.strikeout)\n        return false;\n    return true;\n}",
			"comments":"/**\n* Compares the specified object to this StyleRange and answer if the two\n* are similar. The object must be an instance of StyleRange and have the\n* same field values for except for start and length.\n* <p>\n*\n* @param style the object to compare with this object\n* @return true if the objects are similar, false otherwise\n*/\n",
			"methodName":"public boolean similarTo(StyleRange style)"
		}
	},
	"ClassORInterfaceName":[
		"StyleRange"
	]
}
