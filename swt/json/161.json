{
	"variables":[
		"data",
		"height",
		"lang",
		"country",
		"variant",
		"start",
		"end",
		"version1",
		"name",
		"height",
		"style",
		"platform",
		"version2",
		"newData",
		"buffer",
		"length",
		"lfFaceName",
		"lfFaceName",
		"fd",
		"lf",
		"length",
		"buffer",
		"byteCount",
		"lcid",
		"size",
		"cp",
		"lpCs",
		"buffer",
		"sep",
		"result",
		"length",
		"chars",
		"bytes",
		"index",
		"style",
		"sep",
		"length",
		"firstSep",
		"secondSep",
		"callback",
		"lpEnumLocalesProc",
		"buffer",
		"length",
		"lfFaceName",
		"i",
		"lfFaceName",
		"i",
		"buffer",
		"data",
		"OS",
		"data",
		"OS",
		"height",
		"data",
		"height",
		"string",
		"SWT",
		"SWT",
		"string",
		"end",
		"SWT",
		"SWT",
		"string",
		"start",
		"end",
		"Integer",
		"version1",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"SWT",
		"SWT",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"SWT",
		"SWT",
		"height",
		"Integer",
		"string",
		"start",
		"end",
		"SWT",
		"SWT",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"SWT",
		"SWT",
		"style",
		"Integer",
		"string",
		"start",
		"end",
		"SWT",
		"SWT",
		"start",
		"end",
		"end",
		"string",
		"start",
		"data",
		"OS",
		"data",
		"OS",
		"name",
		"height",
		"style",
		"end",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"string",
		"start",
		"end",
		"platform",
		"version2",
		"OS",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Integer",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Integer",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Integer",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Integer",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Integer",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"end",
		"string",
		"start",
		"end",
		"newData",
		"Byte",
		"string",
		"start",
		"end",
		"start",
		"end",
		"name",
		"height",
		"style",
		"string",
		"start",
		"Math",
		"OS",
		"buffer",
		"OS",
		"newData",
		"System",
		"buffer",
		"lfFaceName",
		"length",
		"newData",
		"System",
		"buffer",
		"lfFaceName",
		"length",
		"data",
		"newData",
		"name",
		"SWT",
		"SWT",
		"data",
		"OS",
		"name",
		"height",
		"style",
		"data",
		"OS",
		"object",
		"object",
		"object",
		"fd",
		"data",
		"lf",
		"height",
		"fd",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"data",
		"lf",
		"fd",
		"length",
		"length",
		"TCHAR",
		"OS",
		"buffer",
		"lpLocaleString",
		"byteCount",
		"Integer",
		"buffer",
		"buffer",
		"OS",
		"lcid",
		"OS",
		"buffer",
		"length",
		"size",
		"lang",
		"buffer",
		"size",
		"country",
		"size",
		"OS",
		"lcid",
		"OS",
		"buffer",
		"length",
		"size",
		"country",
		"buffer",
		"size",
		"size",
		"OS",
		"lcid",
		"OS",
		"buffer",
		"length",
		"size",
		"Integer",
		"buffer",
		"size",
		"OS",
		"cp",
		"lpCs",
		"OS",
		"data",
		"lpCs",
		"height",
		"lang",
		"buffer",
		"lang",
		"buffer",
		"sep",
		"country",
		"buffer",
		"country",
		"buffer",
		"sep",
		"variant",
		"buffer",
		"variant",
		"buffer",
		"result",
		"length",
		"result",
		"length",
		"sep",
		"result",
		"result",
		"length",
		"result",
		"OS",
		"chars",
		"data",
		"chars",
		"OS",
		"data",
		"OS",
		"OS",
		"OS",
		"bytes",
		"bytes",
		"chars",
		"chars",
		"index",
		"chars",
		"chars",
		"index",
		"index",
		"chars",
		"index",
		"SWT",
		"data",
		"style",
		"SWT",
		"data",
		"style",
		"SWT",
		"style",
		"data",
		"height",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"data",
		"height",
		"SWT",
		"SWT",
		"height",
		"lang",
		"country",
		"variant",
		"locale",
		"locale",
		"firstSep",
		"locale",
		"sep",
		"firstSep",
		"firstSep",
		"secondSep",
		"length",
		"secondSep",
		"locale",
		"sep",
		"firstSep",
		"secondSep",
		"secondSep",
		"length",
		"firstSep",
		"lang",
		"locale",
		"firstSep",
		"secondSep",
		"firstSep",
		"country",
		"locale",
		"firstSep",
		"secondSep",
		"length",
		"secondSep",
		"variant",
		"locale",
		"secondSep",
		"lang",
		"data",
		"OS",
		"callback",
		"lpEnumLocalesProc",
		"SWT",
		"SWT",
		"OS",
		"lpEnumLocalesProc",
		"OS",
		"callback",
		"name",
		"SWT",
		"SWT",
		"name",
		"Math",
		"OS",
		"buffer",
		"OS",
		"data",
		"i",
		"lfFaceName",
		"i",
		"lfFaceName",
		"i",
		"System",
		"buffer",
		"lfFaceName",
		"length",
		"data",
		"i",
		"lfFaceName",
		"i",
		"lfFaceName",
		"i",
		"System",
		"buffer",
		"lfFaceName",
		"length",
		"style",
		"SWT",
		"SWT",
		"data",
		"data",
		"style",
		"SWT",
		"SWT",
		"data",
		"data",
		"buffer",
		"buffer",
		"buffer",
		"buffer",
		"buffer",
		"buffer",
		"buffer",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"data",
		"buffer",
		"buffer",
		"buffer",
		"data",
		"height",
		"IsUnicode",
		"lfCharSet",
		"DEFAULT_CHARSET",
		"data",
		"height",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"IsUnicode",
		"lfCharSet",
		"DEFAULT_CHARSET",
		"IsUnicode",
		"lfHeight",
		"lfWidth",
		"lfEscapement",
		"lfOrientation",
		"lfWeight",
		"lfItalic",
		"lfUnderline",
		"lfStrikeOut",
		"lfCharSet",
		"lfOutPrecision",
		"lfClipPrecision",
		"lfQuality",
		"lfPitchAndFamily",
		"LF_FACESIZE",
		"IsUnicode",
		"lfFaceName",
		"chars",
		"lfFaceName",
		"bytes",
		"ERROR_NULL_ARGUMENT",
		"IsUnicode",
		"lfCharSet",
		"DEFAULT_CHARSET",
		"data",
		"lfCharSet",
		"lfCharSet",
		"height",
		"lfWidth",
		"lfWidth",
		"lfEscapement",
		"lfEscapement",
		"lfOrientation",
		"lfOrientation",
		"lfWeight",
		"lfWeight",
		"lfItalic",
		"lfItalic",
		"lfUnderline",
		"lfUnderline",
		"lfStrikeOut",
		"lfStrikeOut",
		"lfCharSet",
		"lfCharSet",
		"lfOutPrecision",
		"lfOutPrecision",
		"lfClipPrecision",
		"lfClipPrecision",
		"lfQuality",
		"lfQuality",
		"lfPitchAndFamily",
		"lfPitchAndFamily",
		"sizeof",
		"LOCALE_SISO639LANGNAME",
		"LOCALE_SISO3166CTRYNAME",
		"LOCALE_IDEFAULTANSICODEPAGE",
		"TCI_SRCCODEPAGE",
		"lfCharSet",
		"IsUnicode",
		"lfFaceName",
		"LF_FACESIZE",
		"lfFaceName",
		"CP_ACP",
		"MB_PRECOMPOSED",
		"length",
		"length",
		"length",
		"NORMAL",
		"lfWeight",
		"BOLD",
		"lfItalic",
		"ITALIC",
		"lfCharSet",
		"lfWidth",
		"lfEscapement",
		"lfOrientation",
		"lfWeight",
		"lfItalic",
		"lfUnderline",
		"lfStrikeOut",
		"lfCharSet",
		"lfOutPrecision",
		"lfClipPrecision",
		"lfQuality",
		"lfPitchAndFamily",
		"ERROR_INVALID_ARGUMENT",
		"height",
		"lfCharSet",
		"DEFAULT_CHARSET",
		"ERROR_NO_MORE_CALLBACKS",
		"LCID_SUPPORTED",
		"ERROR_NULL_ARGUMENT",
		"LF_FACESIZE",
		"IsUnicode",
		"lfFaceName",
		"length",
		"chars",
		"lfFaceName",
		"length",
		"bytes",
		"BOLD",
		"BOLD",
		"lfWeight",
		"lfWeight",
		"ITALIC",
		"ITALIC",
		"lfItalic",
		"lfItalic",
		"lfHeight",
		"lfWidth",
		"lfEscapement",
		"lfOrientation",
		"lfWeight",
		"lfItalic",
		"lfUnderline",
		"lfStrikeOut",
		"lfCharSet",
		"lfOutPrecision",
		"lfClipPrecision",
		"lfQuality",
		"lfPitchAndFamily",
		"data",
		"height",
		"string",
		"e",
		"e",
		"e",
		"e",
		"name",
		"height",
		"style",
		"object",
		"lpLocaleString",
		"height",
		"locale",
		"name",
		"style",
		"data",
		"height"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt.internal",
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt"
	],
	"methods":[
		"equals",
		"EnumLocalesProc",
		"getHeight",
		"getLocale",
		"getName",
		"getStyle",
		"hashCode",
		"setHeight",
		"setLocale",
		"setName",
		"setStyle",
		"toString",
		"win32_new",
		"error",
		"indexOf",
		"error",
		"substring",
		"parseInt",
		"error",
		"error",
		"indexOf",
		"error",
		"substring",
		"indexOf",
		"error",
		"parseInt",
		"substring",
		"error",
		"indexOf",
		"error",
		"parseInt",
		"substring",
		"error",
		"indexOf",
		"setName",
		"setHeight",
		"setStyle",
		"substring",
		"indexOf",
		"substring",
		"equals",
		"equals",
		"indexOf",
		"parseInt",
		"substring",
		"indexOf",
		"parseInt",
		"substring",
		"indexOf",
		"parseInt",
		"substring",
		"indexOf",
		"parseInt",
		"substring",
		"indexOf",
		"parseInt",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"indexOf",
		"parseByte",
		"substring",
		"setName",
		"setHeight",
		"setStyle",
		"substring",
		"min",
		"length",
		"arraycopy",
		"arraycopy",
		"error",
		"setName",
		"setHeight",
		"setStyle",
		"equals",
		"getName",
		"getName",
		"MoveMemory",
		"parseInt",
		"toString",
		"strlen",
		"GetLocaleInfo",
		"equals",
		"toString",
		"GetLocaleInfo",
		"equals",
		"toString",
		"GetLocaleInfo",
		"parseInt",
		"toString",
		"TranslateCharsetInfo",
		"append",
		"append",
		"append",
		"append",
		"append",
		"toString",
		"length",
		"charAt",
		"substring",
		"MultiByteToWideChar",
		"hashCode",
		"getName",
		"error",
		"length",
		"indexOf",
		"indexOf",
		"substring",
		"substring",
		"substring",
		"getAddress",
		"error",
		"EnumSystemLocales",
		"dispose",
		"error",
		"min",
		"length",
		"arraycopy",
		"arraycopy",
		"append",
		"append",
		"getName",
		"append",
		"append",
		"getHeight",
		"append",
		"append",
		"getStyle",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"append",
		"getName",
		"toString",
		"LOGFONTW",
		"LOGFONTA",
		"LOGFONTW",
		"LOGFONTA",
		"LOGFONTW",
		"LOGFONTA",
		"TCHAR",
		"LOGFONTW",
		"LOGFONTA",
		"TCHAR",
		"StringBuffer",
		"String",
		"Callback",
		"TCHAR",
		"StringBuffer",
		"FontData"
	],
	"methodsBody":{
		"public void setHeight(int height)":{
			"methodBody":"{\n    if (height < 0)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    this.height = height;\n}",
			"comments":"/**\n* Sets the height of the receiver. The parameter is\n* specified in terms of points, where a point is one\n* seventy-second of an inch.\n*\n* @param height the height of the <code>FontData</code>\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the height is negative</li>\n* </ul>\n*\n* @see #getHeight\n*/\n",
			"methodName":"public void setHeight(int height)"
		},
		"public void setLocale(String locale)":{
			"methodBody":"{\n    lang = country = variant = null;\n    if (locale != null) {\n        char sep = '_';\n        int length = locale.length();\n        int firstSep, secondSep;\n        firstSep = locale.indexOf(sep);\n        if (firstSep == -1) {\n            firstSep = secondSep = length;\n        } else {\n            secondSep = locale.indexOf(sep, firstSep + 1);\n            if (secondSep == -1)\n                secondSep = length;\n        }\n        if (firstSep > 0)\n            lang = locale.substring(0, firstSep);\n        if (secondSep > firstSep + 1)\n            country = locale.substring(firstSep + 1, secondSep);\n        if (length > secondSep + 1)\n            variant = locale.substring(secondSep + 1);\n    }\n    if (lang == null) {\n        data.lfCharSet = (byte) OS.DEFAULT_CHARSET;\n    } else {\n        \n        Callback callback = new Callback(this, \"EnumLocalesProc\", 1);\n        int lpEnumLocalesProc = callback.getAddress();\n        if (lpEnumLocalesProc == 0)\n            SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);\n        OS.EnumSystemLocales(lpEnumLocalesProc, OS.LCID_SUPPORTED);\n        callback.dispose();\n    }\n}",
			"comments":"/**\n* Sets the locale of the receiver.\n* <p>\n* The locale determines which platform character set this\n* font is going to use. Widgets and graphics operations that\n* use this font will convert UNICODE strings to the platform\n* character set of the specified locale.\n* </p>\n* <p>\n* On platforms where there are multiple character sets for a\n* given language/country locale, the variant portion of the\n* locale will determine the character set.\n* </p>\n*\n* @param locale the <code>String</code> representing a Locale object\n* @see java.util.Locale#toString\n*/\n//$NON-NLS-1$\n",
			"methodName":"public void setLocale(String locale)"
		},
		"public void setStyle(int style)":{
			"methodBody":"{\n    if ((style & SWT.BOLD) == SWT.BOLD) {\n        data.lfWeight = 700;\n    } else {\n        data.lfWeight = 0;\n    }\n    if ((style & SWT.ITALIC) == SWT.ITALIC) {\n        data.lfItalic = 1;\n    } else {\n        data.lfItalic = 0;\n    }\n}",
			"comments":"/**\n* Sets the style of the receiver to the argument which must\n* be a bitwise OR of one or more of the <code>SWT</code>\n* constants NORMAL, BOLD and ITALIC.  All other style bits are\n* ignored.\n*\n* @param style the new style for this <code>FontData</code>\n*\n* @see #getStyle\n*/\n",
			"methodName":"public void setStyle(int style)"
		},
		"public void setName(String name)":{
			"methodBody":"{\n    if (name == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    \n    TCHAR buffer = new TCHAR(0, name, true);\n    int length = Math.min(OS.LF_FACESIZE - 1, buffer.length());\n    if (OS.IsUnicode) {\n        char[] lfFaceName = ((LOGFONTW) data).lfFaceName;\n        for (int i = 0; i < lfFaceName.length; i++) lfFaceName[i] = 0;\n        System.arraycopy(buffer.chars, 0, lfFaceName, 0, length);\n    } else {\n        byte[] lfFaceName = ((LOGFONTA) data).lfFaceName;\n        for (int i = 0; i < lfFaceName.length; i++) lfFaceName[i] = 0;\n        System.arraycopy(buffer.bytes, 0, lfFaceName, 0, length);\n    }\n}",
			"comments":"/**\n* Sets the name of the receiver.\n* <p>\n* Some platforms support font foundries. On these platforms, the name\n* of the font specified in setName() may have one of the following forms:\n* <ol>\n* <li>a face name (for example, \"courier\")</li>\n* <li>a foundry followed by a dash (\"-\") followed by a face name (for example, \"adobe-courier\")</li>\n* </ol>\n* In either case, the name returned from getName() will include the\n* foundry.\n* </p>\n* <p>\n* On platforms that do not support font foundries, only the face name\n* (for example, \"courier\") is used in <code>setName()</code> and\n* <code>getName()</code>.\n* </p>\n*\n* @param name the name of the font data (must not be null)\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - when the font name is null</li>\n* </ul>\n*\n* @see #getName\n*/\n/* The field lfFaceName must be NULL terminated */\n",
			"methodName":"public void setName(String name)"
		},
		"public static FontData win32_new(LOGFONT data, int height)":{
			"methodBody":"{\n    return new FontData(data, height);\n}",
			"comments":"/**\n* Invokes platform specific functionality to allocate a new font data.\n* <p>\n* <b>IMPORTANT:</b> This method is <em>not</em> part of the public\n* API for <code>FontData</code>. It is marked public only so that\n* it can be shared within the packages provided by SWT. It is not\n* available on all platforms, and should never be called from\n* application code.\n* </p>\n*\n* @param data the <code>LOGFONT</code> for the font data\n* @param height the height of the font data\n* @return a new font data object containing the specified <code>LOGFONT</code> and height\n*/\n",
			"methodName":"public static FontData win32_new(LOGFONT data, int height)"
		},
		"public int getHeight()":{
			"methodBody":"{\n    return height;\n}",
			"comments":"/**\n* Returns the height of the receiver in points.\n*\n* @return the height of this FontData\n*\n* @see #setHeight\n*/\n",
			"methodName":"public int getHeight()"
		},
		"int EnumLocalesProc(int lpLocaleString)":{
			"methodBody":"{\n    \n    int length = 8;\n    TCHAR buffer = new TCHAR(0, length);\n    int byteCount = length * TCHAR.sizeof;\n    OS.MoveMemory(buffer, lpLocaleString, byteCount);\n    int lcid = Integer.parseInt(buffer.toString(0, buffer.strlen()), 16);\n    \n    int size = OS.GetLocaleInfo(lcid, OS.LOCALE_SISO639LANGNAME, buffer, length);\n    if (size <= 0 || !lang.equals(buffer.toString(0, size - 1)))\n        return 1;\n    \n    if (country != null) {\n        size = OS.GetLocaleInfo(lcid, OS.LOCALE_SISO3166CTRYNAME, buffer, length);\n        if (size <= 0 || !country.equals(buffer.toString(0, size - 1)))\n            return 1;\n    }\n    \n    size = OS.GetLocaleInfo(lcid, OS.LOCALE_IDEFAULTANSICODEPAGE, buffer, length);\n    if (size <= 0)\n        return 1;\n    int cp = Integer.parseInt(buffer.toString(0, size - 1));\n    int[] lpCs = new int[8];\n    OS.TranslateCharsetInfo(cp, lpCs, OS.TCI_SRCCODEPAGE);\n    data.lfCharSet = (byte) lpCs[0];\n    return 0;\n}",
			"comments":"/* Get the locale ID */\n/* Check the language */\n/* Check the country */\n/* Get the charset */\n",
			"methodName":"int EnumLocalesProc(int lpLocaleString)"
		},
		"public String getName()":{
			"methodBody":"{\n    char[] chars;\n    if (OS.IsUnicode) {\n        chars = ((LOGFONTW) data).lfFaceName;\n    } else {\n        chars = new char[OS.LF_FACESIZE];\n        byte[] bytes = ((LOGFONTA) data).lfFaceName;\n        OS.MultiByteToWideChar(OS.CP_ACP, OS.MB_PRECOMPOSED, bytes, bytes.length, chars, chars.length);\n    }\n    int index = 0;\n    while (index < chars.length) {\n        if (chars[index] == 0)\n            break;\n        index++;\n    }\n    return new String(chars, 0, index);\n}",
			"comments":"/**\n* Returns the name of the receiver.\n* On platforms that support font foundries, the return value will\n* be the foundry followed by a dash (\"-\") followed by the face name.\n*\n* @return the name of this <code>FontData</code>\n*\n* @see #setName\n*/\n",
			"methodName":"public String getName()"
		},
		"public boolean equals(Object object)":{
			"methodBody":"{\n    if (object == this)\n        return true;\n    if (!(object instanceof FontData))\n        return false;\n    FontData fd = (FontData) object;\n    LOGFONT lf = fd.data;\n    return data.lfCharSet == lf.lfCharSet && \n    height == fd.height && data.lfWidth == lf.lfWidth && data.lfEscapement == lf.lfEscapement && data.lfOrientation == lf.lfOrientation && data.lfWeight == lf.lfWeight && data.lfItalic == lf.lfItalic && data.lfUnderline == lf.lfUnderline && data.lfStrikeOut == lf.lfStrikeOut && data.lfCharSet == lf.lfCharSet && data.lfOutPrecision == lf.lfOutPrecision && data.lfClipPrecision == lf.lfClipPrecision && data.lfQuality == lf.lfQuality && data.lfPitchAndFamily == lf.lfPitchAndFamily && getName().equals(fd.getName());\n}",
			"comments":"/**\n* Compares the argument to the receiver, and returns true\n* if they represent the <em>same</em> object using a class\n* specific comparison.\n*\n* @param object the object to compare with this object\n* @return <code>true</code> if the object is the same as this object and <code>false</code> otherwise\n*\n* @see #hashCode\n*/\n/*\n* This code is intentionally commented.  When creating\n* a FontData, lfHeight is not necessarily set.  Instead\n* we check the height field which is always set.\n*/\n//\t\tdata.lfHeight == lf.lfHeight &&\n",
			"methodName":"public boolean equals(Object object)"
		},
		"public String getLocale()":{
			"methodBody":"{\n    StringBuffer buffer = new StringBuffer();\n    char sep = '_';\n    if (lang != null) {\n        buffer.append(lang);\n        buffer.append(sep);\n    }\n    if (country != null) {\n        buffer.append(country);\n        buffer.append(sep);\n    }\n    if (variant != null) {\n        buffer.append(variant);\n    }\n    String result = buffer.toString();\n    int length = result.length();\n    if (length > 0) {\n        if (result.charAt(length - 1) == sep) {\n            result = result.substring(0, length - 1);\n        }\n    }\n    return result;\n}",
			"comments":"/**\n* Returns the locale of the receiver.\n* <p>\n* The locale determines which platform character set this\n* font is going to use. Widgets and graphics operations that\n* use this font will convert UNICODE strings to the platform\n* character set of the specified locale.\n* </p>\n* <p>\n* On platforms where there are multiple character sets for a\n* given language/country locale, the variant portion of the\n* locale will determine the character set.\n* </p>\n*\n* @return the <code>String</code> representing a Locale object\n* @since 3.0\n*/\n",
			"methodName":"public String getLocale()"
		},
		"public int getStyle()":{
			"methodBody":"{\n    int style = SWT.NORMAL;\n    if (data.lfWeight == 700)\n        style |= SWT.BOLD;\n    if (data.lfItalic != 0)\n        style |= SWT.ITALIC;\n    return style;\n}",
			"comments":"/**\n* Returns the style of the receiver which is a bitwise OR of\n* one or more of the <code>SWT</code> constants NORMAL, BOLD\n* and ITALIC.\n*\n* @return the style of this <code>FontData</code>\n*\n* @see #setStyle\n*/\n",
			"methodName":"public int getStyle()"
		},
		"public String toString()":{
			"methodBody":"{\n    StringBuffer buffer = new StringBuffer();\n    \n    buffer.append(\"1|\");\n    buffer.append(getName());\n    \n    buffer.append(\"|\");\n    buffer.append(getHeight());\n    \n    buffer.append(\"|\");\n    buffer.append(getStyle());\n    \n    buffer.append(\"|\");\n    \n    buffer.append(\"WINDOWS|1|\");\n    buffer.append(data.lfHeight);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfWidth);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfEscapement);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfOrientation);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfWeight);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfItalic);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfUnderline);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfStrikeOut);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfCharSet);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfOutPrecision);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfClipPrecision);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfQuality);\n    \n    buffer.append(\"|\");\n    buffer.append(data.lfPitchAndFamily);\n    \n    buffer.append(\"|\");\n    buffer.append(getName());\n    return buffer.toString();\n}",
			"comments":"/**\n* Returns a string representation of the receiver which is suitable\n* for constructing an equivalent instance using the\n* <code>FontData(String)</code> constructor.\n*\n* @return a string representation of the FontData\n*\n* @see FontData\n*/\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n",
			"methodName":"public String toString()"
		},
		"public int hashCode()":{
			"methodBody":"{\n    return data.lfCharSet ^ height ^ data.lfWidth ^ data.lfEscapement ^ data.lfOrientation ^ data.lfWeight ^ data.lfItalic ^ data.lfUnderline ^ data.lfStrikeOut ^ data.lfCharSet ^ data.lfOutPrecision ^ data.lfClipPrecision ^ data.lfQuality ^ data.lfPitchAndFamily ^ getName().hashCode();\n}",
			"comments":"/**\n* Returns an integer hash code for the receiver. Any two\n* objects that return <code>true</code> when passed to\n* <code>equals</code> must return the same value for this\n* method.\n*\n* @return the receiver's hash\n*\n* @see #equals\n*/\n",
			"methodName":"public int hashCode()"
		}
	},
	"ClassORInterfaceName":[
		"FontData"
	]
}
