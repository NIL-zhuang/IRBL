{
	"variables":[
		"tree",
		"dropIndex",
		"scrollIndex",
		"scrollBeginTime",
		"expandIndex",
		"expandBeginTime",
		"clearInsert",
		"SCROLL_HYSTERESIS",
		"EXPAND_HYSTERESIS",
		"handle",
		"coordinates",
		"lpht",
		"hItem",
		"topItem",
		"nextItem",
		"tvItem",
		"tvItem",
		"before",
		"insertItem",
		"tree",
		"effect",
		"DND",
		"effect",
		"effect",
		"DND",
		"DND",
		"effect",
		"DND",
		"effect",
		"effect",
		"DND",
		"effect",
		"effect",
		"effect",
		"tree",
		"x",
		"y",
		"coordinates",
		"tree",
		"coordinates",
		"lpht",
		"coordinates",
		"lpht",
		"coordinates",
		"OS",
		"handle",
		"OS",
		"lpht",
		"lpht",
		"effect",
		"DND",
		"scrollBeginTime",
		"scrollIndex",
		"hItem",
		"scrollIndex",
		"hItem",
		"scrollBeginTime",
		"System",
		"scrollBeginTime",
		"OS",
		"handle",
		"OS",
		"OS",
		"OS",
		"handle",
		"OS",
		"hItem",
		"topItem",
		"OS",
		"OS",
		"hItem",
		"OS",
		"handle",
		"OS",
		"nextItem",
		"scrollBeginTime",
		"scrollIndex",
		"scrollBeginTime",
		"System",
		"SCROLL_HYSTERESIS",
		"scrollIndex",
		"hItem",
		"effect",
		"DND",
		"expandBeginTime",
		"expandIndex",
		"hItem",
		"expandIndex",
		"hItem",
		"expandBeginTime",
		"System",
		"expandBeginTime",
		"OS",
		"handle",
		"OS",
		"OS",
		"hItem",
		"expandBeginTime",
		"expandIndex",
		"expandBeginTime",
		"System",
		"EXPAND_HYSTERESIS",
		"expandIndex",
		"hItem",
		"dropIndex",
		"dropIndex",
		"hItem",
		"effect",
		"DND",
		"tvItem",
		"dropIndex",
		"tvItem",
		"OS",
		"tvItem",
		"OS",
		"tvItem",
		"OS",
		"handle",
		"OS",
		"tvItem",
		"dropIndex",
		"hItem",
		"hItem",
		"dropIndex",
		"effect",
		"DND",
		"tvItem",
		"hItem",
		"tvItem",
		"OS",
		"tvItem",
		"OS",
		"tvItem",
		"OS",
		"OS",
		"handle",
		"OS",
		"tvItem",
		"dropIndex",
		"hItem",
		"effect",
		"DND",
		"effect",
		"DND",
		"effect",
		"DND",
		"tree",
		"tree",
		"hItem",
		"insertItem",
		"tree",
		"insertItem",
		"before",
		"clearInsert",
		"clearInsert",
		"tree",
		"clearInsert",
		"tree",
		"FEEDBACK_SELECT",
		"FEEDBACK_INSERT_AFTER",
		"FEEDBACK_INSERT_BEFORE",
		"FEEDBACK_INSERT_BEFORE",
		"FEEDBACK_INSERT_AFTER",
		"handle",
		"x",
		"x",
		"y",
		"y",
		"TVM_HITTEST",
		"hItem",
		"FEEDBACK_SCROLL",
		"TVM_GETNEXTITEM",
		"TVGN_FIRSTVISIBLE",
		"TVM_GETNEXTITEM",
		"TVGN_PREVIOUSVISIBLE",
		"TVGN_NEXTVISIBLE",
		"TVM_ENSUREVISIBLE",
		"FEEDBACK_EXPAND",
		"TVM_EXPAND",
		"TVE_EXPAND",
		"FEEDBACK_SELECT",
		"hItem",
		"mask",
		"TVIF_STATE",
		"stateMask",
		"TVIS_DROPHILITED",
		"state",
		"TVM_SETITEM",
		"FEEDBACK_SELECT",
		"hItem",
		"mask",
		"TVIF_STATE",
		"stateMask",
		"TVIS_DROPHILITED",
		"state",
		"TVIS_DROPHILITED",
		"TVM_SETITEM",
		"FEEDBACK_INSERT_BEFORE",
		"FEEDBACK_INSERT_AFTER",
		"FEEDBACK_INSERT_BEFORE",
		"handle",
		"tree",
		"effect",
		"effect",
		"x",
		"y"
	],
	"extendORImplementFiles":[
		"DragUnderEffect"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"checkEffect",
		"show",
		"checkEffect",
		"toControl",
		"SendMessage",
		"currentTimeMillis",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"currentTimeMillis",
		"currentTimeMillis",
		"SendMessage",
		"currentTimeMillis",
		"SendMessage",
		"SendMessage",
		"findWidget",
		"getDisplay",
		"setInsertMark",
		"setInsertMark",
		"Point",
		"TVHITTESTINFO",
		"TVITEM",
		"TVITEM"
	],
	"methodsBody":{
		"void show(int effect, int x, int y)":{
			"methodBody":"{\n    effect = checkEffect(effect);\n    int handle = tree.handle;\n    Point coordinates = new Point(x, y);\n    coordinates = tree.toControl(coordinates);\n    TVHITTESTINFO lpht = new TVHITTESTINFO();\n    lpht.x = coordinates.x;\n    lpht.y = coordinates.y;\n    OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht);\n    int hItem = lpht.hItem;\n    if ((effect & DND.FEEDBACK_SCROLL) == 0) {\n        scrollBeginTime = 0;\n        scrollIndex = -1;\n    } else {\n        if (hItem != -1 && scrollIndex == hItem && scrollBeginTime != 0) {\n            if (System.currentTimeMillis() >= scrollBeginTime) {\n                int topItem = OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);\n                int nextItem = OS.SendMessage(handle, OS.TVM_GETNEXTITEM, hItem == topItem ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE, hItem);\n                OS.SendMessage(handle, OS.TVM_ENSUREVISIBLE, 0, nextItem);\n                scrollBeginTime = 0;\n                scrollIndex = -1;\n            }\n        } else {\n            scrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;\n            scrollIndex = hItem;\n        }\n    }\n    if ((effect & DND.FEEDBACK_EXPAND) == 0) {\n        expandBeginTime = 0;\n        expandIndex = -1;\n    } else {\n        if (hItem != -1 && expandIndex == hItem && expandBeginTime != 0) {\n            if (System.currentTimeMillis() >= expandBeginTime) {\n                OS.SendMessage(handle, OS.TVM_EXPAND, OS.TVE_EXPAND, hItem);\n                expandBeginTime = 0;\n                expandIndex = -1;\n            }\n        } else {\n            expandBeginTime = System.currentTimeMillis() + EXPAND_HYSTERESIS;\n            expandIndex = hItem;\n        }\n    }\n    if (dropIndex != -1 && (dropIndex != hItem || (effect & DND.FEEDBACK_SELECT) == 0)) {\n        TVITEM tvItem = new TVITEM();\n        tvItem.hItem = dropIndex;\n        tvItem.mask = OS.TVIF_STATE;\n        tvItem.stateMask = OS.TVIS_DROPHILITED;\n        tvItem.state = 0;\n        OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem);\n        dropIndex = -1;\n    }\n    if (hItem != -1 && hItem != dropIndex && (effect & DND.FEEDBACK_SELECT) != 0) {\n        TVITEM tvItem = new TVITEM();\n        tvItem.hItem = hItem;\n        tvItem.mask = OS.TVIF_STATE;\n        tvItem.stateMask = OS.TVIS_DROPHILITED;\n        tvItem.state = OS.TVIS_DROPHILITED;\n        OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem);\n        dropIndex = hItem;\n    }\n    if ((effect & DND.FEEDBACK_INSERT_BEFORE) != 0 || (effect & DND.FEEDBACK_INSERT_AFTER) != 0) {\n        boolean before = (effect & DND.FEEDBACK_INSERT_BEFORE) != 0;\n        \n        TreeItem insertItem = (TreeItem) tree.getDisplay().findWidget(tree.handle, hItem);\n        if (insertItem != null) {\n            tree.setInsertMark(insertItem, before);\n            clearInsert = true;\n        }\n    } else {\n        if (clearInsert)\n            tree.setInsertMark(null, false);\n        clearInsert = false;\n    }\n    return;\n}",
			"comments":"/*\n* Bug in Windows.  When TVM_SETINSERTMARK is used to set\n* an insert mark for a tree and an item is expanded or\n* collapsed near the insert mark, the tree does not redraw\n* the insert mark properly.  The fix is to hide and show\n* the insert mark whenever an item is expanded or collapsed.\n* Since the insert mark can not be queried from the tree,\n* use the Tree API rather than calling the OS directly.\n*/\n",
			"methodName":"void show(int effect, int x, int y)"
		},
		"private int checkEffect(int effect)":{
			"methodBody":"{\n    \n    if ((effect & DND.FEEDBACK_SELECT) != 0)\n        effect = effect & ~DND.FEEDBACK_INSERT_AFTER & ~DND.FEEDBACK_INSERT_BEFORE;\n    if ((effect & DND.FEEDBACK_INSERT_BEFORE) != 0)\n        effect = effect & ~DND.FEEDBACK_INSERT_AFTER;\n    return effect;\n}",
			"comments":"// Some effects are mutually exclusive.  Make sure that only one of the mutually exclusive effects has been specified.\n",
			"methodName":"private int checkEffect(int effect)"
		}
	},
	"ClassORInterfaceName":[
		"TreeDragUnderEffect"
	]
}
