{
	"variables":[
		"fontData",
		"rgb",
		"result",
		"hwndOwner",
		"hHeap",
		"lpcf",
		"lpLogFont",
		"logFont",
		"lfHeight",
		"hDC",
		"pixels",
		"red",
		"green",
		"blue",
		"oldModal",
		"display",
		"success",
		"logFont",
		"hDC",
		"logPixelsY",
		"pixels",
		"hFont",
		"oldFont",
		"lptm",
		"points",
		"red",
		"green",
		"blue",
		"parent",
		"SWT",
		"parent",
		"style",
		"fontData",
		"fontData",
		"result",
		"fontData",
		"result",
		"rgb",
		"OS",
		"SWT",
		"SWT",
		"parent",
		"hwndOwner",
		"parent",
		"OS",
		"lpcf",
		"CHOOSEFONT",
		"lpcf",
		"hwndOwner",
		"lpcf",
		"OS",
		"OS",
		"OS",
		"hHeap",
		"OS",
		"LOGFONT",
		"fontData",
		"fontData",
		"fontData",
		"logFont",
		"OS",
		"Compatibility",
		"fontData",
		"OS",
		"hDC",
		"OS",
		"OS",
		"hDC",
		"logFont",
		"pixels",
		"lpcf",
		"OS",
		"OS",
		"lpLogFont",
		"logFont",
		"LOGFONT",
		"logFont",
		"lfHeight",
		"lpcf",
		"lpLogFont",
		"rgb",
		"rgb",
		"rgb",
		"rgb",
		"lpcf",
		"red",
		"green",
		"blue",
		"style",
		"SWT",
		"SWT",
		"display",
		"parent",
		"oldModal",
		"display",
		"display",
		"parent",
		"OS",
		"lpcf",
		"style",
		"SWT",
		"SWT",
		"display",
		"oldModal",
		"success",
		"OS",
		"OS",
		"logFont",
		"lpLogFont",
		"LOGFONT",
		"OS",
		"OS",
		"hDC",
		"OS",
		"logFont",
		"OS",
		"logFont",
		"OS",
		"hDC",
		"hFont",
		"OS",
		"OS",
		"hDC",
		"lptm",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"hFont",
		"pixels",
		"logFont",
		"lptm",
		"pixels",
		"logFont",
		"OS",
		"hDC",
		"Compatibility",
		"pixels",
		"logPixelsY",
		"fontData",
		"FontData",
		"logFont",
		"points",
		"lpcf",
		"lpcf",
		"lpcf",
		"rgb",
		"red",
		"green",
		"blue",
		"lpLogFont",
		"OS",
		"hHeap",
		"lpLogFont",
		"success",
		"fontData",
		"fontData",
		"fontData",
		"fontData",
		"fontData",
		"rgb",
		"PRIMARY_MODAL",
		"IsWinCE",
		"ERROR_NOT_IMPLEMENTED",
		"handle",
		"lStructSize",
		"sizeof",
		"hwndOwner",
		"Flags",
		"CF_SCREENFONTS",
		"CF_EFFECTS",
		"HEAP_ZERO_MEMORY",
		"sizeof",
		"data",
		"data",
		"lfHeight",
		"height",
		"LOGPIXELSY",
		"lfHeight",
		"Flags",
		"CF_INITTOLOGFONTSTRUCT",
		"sizeof",
		"lfHeight",
		"lpLogFont",
		"red",
		"green",
		"blue",
		"rgbColors",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"IsUnicode",
		"sizeof",
		"LOGPIXELSY",
		"lfHeight",
		"IsUnicode",
		"lfHeight",
		"tmInternalLeading",
		"lfHeight",
		"rgbColors",
		"rgbColors",
		"rgbColors",
		"fontData",
		"length",
		"fontData",
		"fontData",
		"rgb",
		"parent",
		"parent",
		"style",
		"fontData",
		"fontData",
		"rgb"
	],
	"extendORImplementFiles":[
		"Dialog"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.internal.Compatibility"
	],
	"methods":[
		"getFontData",
		"getFontList",
		"getRGB",
		"open",
		"setFontData",
		"setFontList",
		"setRGB",
		"checkSubclass",
		"error",
		"GetProcessHeap",
		"HeapAlloc",
		"GetDC",
		"round",
		"GetDeviceCaps",
		"ReleaseDC",
		"MoveMemory",
		"getDisplay",
		"getModalDialogShell",
		"setModalDialogShell",
		"ChooseFont",
		"setModalDialogShell",
		"MoveMemory",
		"GetDC",
		"GetDeviceCaps",
		"CreateFontIndirect",
		"SelectObject",
		"GetTextMetrics",
		"SelectObject",
		"DeleteObject",
		"ReleaseDC",
		"round",
		"win32_new",
		"HeapFree",
		"CHOOSEFONT",
		"LOGFONTW",
		"LOGFONTA",
		"TEXTMETRICW",
		"TEXTMETRICA",
		"RGB"
	],
	"methodsBody":{
		"public RGB getRGB()":{
			"methodBody":"{\n    return rgb;\n}",
			"comments":"/**\n* Returns the currently selected color in the receiver.\n*\n* @return the RGB value for the selected color, may be null\n*\n* @see PaletteData#getRGBs\n*\n* @since 2.1\n*/\n",
			"methodName":"public RGB getRGB()"
		},
		"public FontData open()":{
			"methodBody":"{\n    if (OS.IsWinCE)\n        SWT.error(SWT.ERROR_NOT_IMPLEMENTED);\n    \n    int hwndOwner = 0;\n    if (parent != null)\n        hwndOwner = parent.handle;\n    \n    int hHeap = OS.GetProcessHeap();\n    CHOOSEFONT lpcf = new CHOOSEFONT();\n    lpcf.lStructSize = CHOOSEFONT.sizeof;\n    lpcf.hwndOwner = hwndOwner;\n    lpcf.Flags = OS.CF_SCREENFONTS | OS.CF_EFFECTS;\n    int lpLogFont = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, LOGFONT.sizeof);\n    if (fontData != null && fontData.data != null) {\n        LOGFONT logFont = fontData.data;\n        int lfHeight = logFont.lfHeight;\n        int hDC = OS.GetDC(0);\n        int pixels = -Compatibility.round(fontData.height * OS.GetDeviceCaps(hDC, OS.LOGPIXELSY), 72);\n        OS.ReleaseDC(0, hDC);\n        logFont.lfHeight = pixels;\n        lpcf.Flags |= OS.CF_INITTOLOGFONTSTRUCT;\n        OS.MoveMemory(lpLogFont, logFont, LOGFONT.sizeof);\n        logFont.lfHeight = lfHeight;\n    }\n    lpcf.lpLogFont = lpLogFont;\n    if (rgb != null) {\n        int red = rgb.red & 0xFF;\n        int green = (rgb.green << 8) & 0xFF00;\n        int blue = (rgb.blue << 16) & 0xFF0000;\n        lpcf.rgbColors = red | green | blue;\n    }\n    \n    Shell oldModal = null;\n    Display display = null;\n    if ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        display = parent.getDisplay();\n        oldModal = display.getModalDialogShell();\n        display.setModalDialogShell(parent);\n    }\n    \n    boolean success = OS.ChooseFont(lpcf);\n    \n    if ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        display.setModalDialogShell(oldModal);\n    }\n    \n    if (success) {\n        LOGFONT logFont = OS.IsUnicode ? (LOGFONT) new LOGFONTW() : new LOGFONTA();\n        OS.MoveMemory(logFont, lpLogFont, LOGFONT.sizeof);\n        \n        int hDC = OS.GetDC(0);\n        int logPixelsY = OS.GetDeviceCaps(hDC, OS.LOGPIXELSY);\n        int pixels = 0;\n        if (logFont.lfHeight > 0) {\n            \n            int hFont = OS.CreateFontIndirect(logFont);\n            int oldFont = OS.SelectObject(hDC, hFont);\n            TEXTMETRIC lptm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW() : new TEXTMETRICA();\n            OS.GetTextMetrics(hDC, lptm);\n            OS.SelectObject(hDC, oldFont);\n            OS.DeleteObject(hFont);\n            pixels = logFont.lfHeight - lptm.tmInternalLeading;\n        } else {\n            pixels = -logFont.lfHeight;\n        }\n        OS.ReleaseDC(0, hDC);\n        int points = Compatibility.round(pixels * 72, logPixelsY);\n        fontData = FontData.win32_new(logFont, points);\n        int red = lpcf.rgbColors & 0xFF;\n        int green = (lpcf.rgbColors >> 8) & 0xFF;\n        int blue = (lpcf.rgbColors >> 16) & 0xFF;\n        rgb = new RGB(red, green, blue);\n    }\n    \n    if (lpLogFont != 0)\n        OS.HeapFree(hHeap, 0, lpLogFont);\n    if (!success)\n        return null;\n    return fontData;\n}",
			"comments":"/**\n* Makes the dialog visible and brings it to the front\n* of the display.\n*\n* @return a FontData object describing the font that was selected,\n*         or null if the dialog was cancelled or an error occurred\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the dialog has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog</li>\n* </ul>\n*/\n/* Get the owner HWND for the dialog */\n/* Open the dialog */\n/* Make the parent shell be temporary modal */\n/* Open the dialog */\n/* Clear the temporary dialog modal parent */\n/* Compute the result */\n/*\n* This will not work on multiple screens or\n* for printing. Should use DC for the proper device.\n*/\n/*\n* Feature in Windows. If the lfHeight of the LOGFONT structure\n* is positive, the lfHeight measures the height of the entire\n* cell, including internal leading, in logical units. Since the\n* height of a font in points does not include the internal leading,\n* we must subtract the internal leading, which requires a TEXTMETRIC,\n* which in turn requires font creation.\n*/\n/* Free the OS memory */\n/*\n* This code is intentionally commented.  On some\n* platforms, the owner window is repainted right\n* away when a dialog window exits.  This behavior\n* is currently unspecified.\n*/\n//\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);\n",
			"methodName":"public FontData open()"
		},
		"public void setFontData(FontData fontData)":{
			"methodBody":"{\n    this.fontData = fontData;\n}",
			"comments":"/**\n* Sets a FontData object describing the font to be\n* selected by default in the dialog, or null to let\n* the platform choose one.\n*\n* @param fontData the FontData to use initially, or null\n* @deprecated use #setFontList (FontData [])\n*/\n",
			"methodName":"public void setFontData(FontData fontData)"
		},
		"public FontData[] getFontList()":{
			"methodBody":"{\n    if (fontData == null)\n        return null;\n    FontData[] result = new FontData[1];\n    result[0] = fontData;\n    return result;\n}",
			"comments":"/**\n* Returns a FontData set describing the font that was\n* selected in the dialog, or null if none is available.\n*\n* @return the FontData for the selected font, or null\n* @since 2.1.1\n*/\n",
			"methodName":"public FontData[] getFontList()"
		},
		"public void setRGB(RGB rgb)":{
			"methodBody":"{\n    this.rgb = rgb;\n}",
			"comments":"/**\n* Sets the receiver's selected color to be the argument.\n*\n* @param rgb the new RGB value for the selected color, may be\n*        null to let the platform to select a default when\n*        open() is called\n*\n* @see PaletteData#getRGBs\n*\n* @since 2.1\n*/\n",
			"methodName":"public void setRGB(RGB rgb)"
		},
		"public void setFontList(FontData[] fontData)":{
			"methodBody":"{\n    if (fontData != null && fontData.length > 0) {\n        this.fontData = fontData[0];\n    } else {\n        this.fontData = null;\n    }\n}",
			"comments":"/**\n* Sets a set of FontData objects describing the font to\n* be selected by default in the dialog, or null to let\n* the platform choose one.\n*\n* @param fontData the set of FontData objects to use initially, or null\n* @since 2.1.1\n*/\n",
			"methodName":"public void setFontList(FontData[] fontData)"
		},
		"public FontData getFontData()":{
			"methodBody":"{\n    return fontData;\n}",
			"comments":"/**\n* Returns a FontData object describing the font that was\n* selected in the dialog, or null if none is available.\n*\n* @return the FontData for the selected font, or null\n* @deprecated use #getFontList ()\n*/\n",
			"methodName":"public FontData getFontData()"
		}
	},
	"ClassORInterfaceName":[
		"FontDialog"
	]
}
