{
	"variables":[
		"handle",
		"parent",
		"strings",
		"images",
		"background",
		"foreground",
		"font",
		"cellBackground",
		"cellForeground",
		"cellFont",
		"hItem",
		"count",
		"hwnd",
		"hItem",
		"hItem",
		"hParent",
		"count",
		"hwnd",
		"pixel",
		"count",
		"pixel",
		"rect",
		"width",
		"height",
		"rect",
		"width",
		"height",
		"count",
		"hwndHeader",
		"rect",
		"hwnd",
		"size",
		"headerRect",
		"headerRect",
		"hwnd",
		"size",
		"gridWidth",
		"hwnd",
		"tvItem",
		"result",
		"hwnd",
		"tvItem",
		"count",
		"hFont",
		"pixel",
		"count",
		"pixel",
		"hwnd",
		"tvItem",
		"result",
		"hwnd",
		"hItem",
		"tvItem",
		"hwnd",
		"hItem",
		"hwnd",
		"hItem",
		"rect",
		"width",
		"height",
		"hwnd",
		"tvItem",
		"string",
		"hwnd",
		"hItem",
		"hwnd",
		"rect",
		"full",
		"hwndHeader",
		"hwnd",
		"rect",
		"hwnd",
		"tvItem",
		"item",
		"pixel",
		"count",
		"pixel",
		"i",
		"hwnd",
		"tvItem",
		"state",
		"hwnd",
		"hOldItem",
		"hNewItem",
		"event",
		"tvItem",
		"hFont",
		"hwnd",
		"tvItem",
		"count",
		"hFont",
		"i",
		"hwnd",
		"tvItem",
		"pixel",
		"count",
		"pixel",
		"i",
		"hwnd",
		"tvItem",
		"state",
		"i",
		"count",
		"hwnd",
		"tvItem",
		"i",
		"string",
		"count",
		"hwnd",
		"tvItem",
		"parent",
		"style",
		"parent",
		"parent",
		"OS",
		"parent",
		"style",
		"index",
		"SWT",
		"parent",
		"OS",
		"index",
		"parent",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hItem",
		"count",
		"index",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hItem",
		"count",
		"hItem",
		"SWT",
		"parent",
		"hItem",
		"parentItem",
		"style",
		"parent",
		"parentItem",
		"parentItem",
		"parent",
		"hItem",
		"OS",
		"parentItem",
		"style",
		"index",
		"SWT",
		"parent",
		"parentItem",
		"OS",
		"parentItem",
		"index",
		"parent",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hParent",
		"hItem",
		"count",
		"index",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hItem",
		"count",
		"hItem",
		"SWT",
		"parent",
		"hParent",
		"hItem",
		"item",
		"SWT",
		"SWT",
		"item",
		"SWT",
		"background",
		"parent",
		"background",
		"Color",
		"display",
		"pixel",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"cellBackground",
		"cellBackground",
		"index",
		"pixel",
		"Color",
		"display",
		"pixel",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"index",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"getText",
		"getImage",
		"parent",
		"hwndHeader",
		"count",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"parent",
		"rect",
		"handle",
		"OS",
		"hwnd",
		"OS",
		"rect",
		"getImage",
		"parent",
		"rect",
		"size",
		"Tree",
		"getText",
		"rect",
		"rect",
		"size",
		"getText",
		"full",
		"hwndHeader",
		"count",
		"OS",
		"hwndHeader",
		"OS",
		"headerRect",
		"rect",
		"headerRect",
		"index",
		"index",
		"count",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"headerRect",
		"parent",
		"rect",
		"handle",
		"OS",
		"hwnd",
		"OS",
		"rect",
		"rect",
		"headerRect",
		"rect",
		"headerRect",
		"getText",
		"getImage",
		"images",
		"images",
		"index",
		"parent",
		"getImage",
		"rect",
		"Math",
		"rect",
		"size",
		"rect",
		"rect",
		"Math",
		"rect",
		"size",
		"rect",
		"getImage",
		"rect",
		"rect",
		"parent",
		"Tree",
		"getText",
		"getImage",
		"rect",
		"Math",
		"rect",
		"rect",
		"gridWidth",
		"rect",
		"Math",
		"rect",
		"rect",
		"gridWidth",
		"rect",
		"parent",
		"SWT",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"OS",
		"tvItem",
		"handle",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"result",
		"tvItem",
		"parent",
		"tvItem",
		"handle",
		"tvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"tvItem",
		"OS",
		"font",
		"parent",
		"Font",
		"display",
		"font",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"cellFont",
		"cellFont",
		"index",
		"font",
		"hFont",
		"Font",
		"display",
		"hFont",
		"foreground",
		"parent",
		"foreground",
		"Color",
		"display",
		"pixel",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"cellForeground",
		"cellForeground",
		"index",
		"pixel",
		"Color",
		"display",
		"pixel",
		"parent",
		"SWT",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"OS",
		"tvItem",
		"handle",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"result",
		"tvItem",
		"index",
		"SWT",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"handle",
		"index",
		"hItem",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hItem",
		"hItem",
		"SWT",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"parent",
		"tvItem",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"handle",
		"hItem",
		"parent",
		"hItem",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"handle",
		"hItem",
		"parent",
		"hItem",
		"index",
		"images",
		"index",
		"index",
		"images",
		"images",
		"index",
		"index",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"parent",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"handle",
		"tvItem",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"parent",
		"tvItem",
		"index",
		"strings",
		"index",
		"index",
		"strings",
		"strings",
		"index",
		"string",
		"string",
		"item",
		"SWT",
		"item",
		"SWT",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"handle",
		"hItem",
		"parent",
		"hItem",
		"item",
		"parent",
		"parent",
		"OS",
		"hwnd",
		"rect",
		"handle",
		"parent",
		"SWT",
		"full",
		"parent",
		"hwndHeader",
		"full",
		"OS",
		"hwndHeader",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"full",
		"rect",
		"OS",
		"hwnd",
		"rect",
		"parent",
		"parent",
		"OS",
		"hwnd",
		"column",
		"drawText",
		"drawImage",
		"OS",
		"hwnd",
		"rect",
		"parent",
		"handle",
		"parent",
		"strings",
		"images",
		"cellBackground",
		"cellForeground",
		"cellFont",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"handle",
		"tvItem",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"parent",
		"tvItem",
		"item",
		"item",
		"item",
		"tvItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"handle",
		"color",
		"color",
		"SWT",
		"SWT",
		"color",
		"parent",
		"pixel",
		"color",
		"background",
		"pixel",
		"background",
		"pixel",
		"color",
		"color",
		"SWT",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"color",
		"parent",
		"pixel",
		"color",
		"cellBackground",
		"cellBackground",
		"count",
		"i",
		"count",
		"i",
		"cellBackground",
		"i",
		"cellBackground",
		"index",
		"pixel",
		"cellBackground",
		"index",
		"pixel",
		"index",
		"parent",
		"SWT",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"OS",
		"tvItem",
		"handle",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"tvItem",
		"checked",
		"state",
		"state",
		"state",
		"state",
		"tvItem",
		"state",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"expanded",
		"OS",
		"OS",
		"handle",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hNewItem",
		"hOldItem",
		"hNewItem",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"hNewItem",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"event",
		"parent",
		"tvItem",
		"parent",
		"hNewItem",
		"parent",
		"SWT",
		"event",
		"font",
		"font",
		"SWT",
		"SWT",
		"font",
		"parent",
		"hFont",
		"font",
		"hFont",
		"hFont",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"handle",
		"tvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"font",
		"font",
		"SWT",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"font",
		"parent",
		"hFont",
		"font",
		"cellFont",
		"cellFont",
		"count",
		"i",
		"count",
		"i",
		"cellFont",
		"i",
		"cellFont",
		"index",
		"hFont",
		"cellFont",
		"index",
		"hFont",
		"index",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"handle",
		"tvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"index",
		"color",
		"color",
		"SWT",
		"SWT",
		"color",
		"parent",
		"pixel",
		"color",
		"foreground",
		"pixel",
		"foreground",
		"pixel",
		"color",
		"color",
		"SWT",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"color",
		"parent",
		"pixel",
		"color",
		"cellForeground",
		"cellForeground",
		"count",
		"i",
		"count",
		"i",
		"cellForeground",
		"i",
		"cellForeground",
		"index",
		"pixel",
		"cellForeground",
		"index",
		"pixel",
		"index",
		"parent",
		"SWT",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"OS",
		"tvItem",
		"handle",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"tvItem",
		"grayed",
		"state",
		"state",
		"state",
		"state",
		"tvItem",
		"state",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"images",
		"SWT",
		"i",
		"images",
		"i",
		"i",
		"images",
		"i",
		"image",
		"image",
		"SWT",
		"index",
		"image",
		"image",
		"SWT",
		"image",
		"image",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"images",
		"index",
		"images",
		"count",
		"images",
		"image",
		"image",
		"SWT",
		"image",
		"images",
		"index",
		"images",
		"index",
		"image",
		"parent",
		"image",
		"index",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"OS",
		"tvItem",
		"handle",
		"tvItem",
		"tvItem",
		"OS",
		"tvItem",
		"OS",
		"tvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"index",
		"image",
		"strings",
		"SWT",
		"i",
		"strings",
		"i",
		"strings",
		"i",
		"string",
		"i",
		"string",
		"string",
		"SWT",
		"index",
		"string",
		"text",
		"string",
		"Math",
		"parent",
		"index",
		"index",
		"count",
		"strings",
		"index",
		"strings",
		"count",
		"strings",
		"string",
		"strings",
		"index",
		"strings",
		"index",
		"string",
		"index",
		"parent",
		"tvItem",
		"OS",
		"OS",
		"tvItem",
		"handle",
		"tvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"index",
		"string",
		"parent",
		"TVI_LAST",
		"ERROR_INVALID_RANGE",
		"parent",
		"TVI_FIRST",
		"handle",
		"TVM_GETNEXTITEM",
		"TVGN_ROOT",
		"TVM_GETNEXTITEM",
		"TVGN_NEXT",
		"ERROR_INVALID_RANGE",
		"parent",
		"parent",
		"handle",
		"TVI_LAST",
		"parent",
		"ERROR_INVALID_RANGE",
		"parent",
		"TVI_FIRST",
		"handle",
		"handle",
		"TVM_GETNEXTITEM",
		"TVGN_CHILD",
		"TVM_GETNEXTITEM",
		"TVGN_NEXT",
		"ERROR_INVALID_RANGE",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_SUBCLASS",
		"right",
		"left",
		"bottom",
		"top",
		"left",
		"top",
		"right",
		"left",
		"bottom",
		"top",
		"left",
		"top",
		"hwndHeader",
		"HDM_GETITEMCOUNT",
		"handle",
		"left",
		"TVM_GETITEMRECT",
		"left",
		"x",
		"INSET",
		"right",
		"left",
		"x",
		"HDM_GETITEMRECT",
		"right",
		"right",
		"HDM_GETITEMRECT",
		"handle",
		"left",
		"TVM_GETITEMRECT",
		"left",
		"left",
		"right",
		"right",
		"right",
		"left",
		"x",
		"right",
		"left",
		"left",
		"x",
		"right",
		"right",
		"left",
		"GRID_WIDTH",
		"right",
		"left",
		"right",
		"bottom",
		"top",
		"bottom",
		"style",
		"CHECK",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_STATE",
		"stateMask",
		"TVIS_STATEIMAGEMASK",
		"hItem",
		"TVM_GETITEM",
		"state",
		"handle",
		"hItem",
		"mask",
		"TVIF_STATE",
		"TVM_GETITEM",
		"state",
		"TVIS_EXPANDED",
		"style",
		"CHECK",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_STATE",
		"stateMask",
		"TVIS_STATEIMAGEMASK",
		"hItem",
		"TVM_GETITEM",
		"state",
		"ERROR_INVALID_RANGE",
		"handle",
		"TVM_GETNEXTITEM",
		"TVGN_CHILD",
		"TVM_GETNEXTITEM",
		"TVGN_NEXT",
		"ERROR_INVALID_RANGE",
		"mask",
		"TVIF_HANDLE",
		"TVIF_PARAM",
		"hItem",
		"TVM_GETITEM",
		"items",
		"lParam",
		"handle",
		"TVM_GETNEXTITEM",
		"TVGN_CHILD",
		"handle",
		"TVM_GETNEXTITEM",
		"TVGN_CHILD",
		"length",
		"right",
		"left",
		"bottom",
		"top",
		"left",
		"top",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_PARAM",
		"hItem",
		"TVM_GETNEXTITEM",
		"TVGN_PARENT",
		"hItem",
		"TVM_GETITEM",
		"items",
		"lParam",
		"length",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"handle",
		"TVM_GETNEXTITEM",
		"TVGN_CHILD",
		"handle",
		"drawCount",
		"handle",
		"left",
		"style",
		"FULL_SELECTION",
		"hwndHeader",
		"HDM_GETITEMCOUNT",
		"TVM_GETITEMRECT",
		"drawCount",
		"handle",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_PARAM",
		"hItem",
		"TVM_GETNEXTITEM",
		"TVGN_CHILD",
		"hItem",
		"TVM_GETITEM",
		"items",
		"lParam",
		"hItem",
		"TVM_GETNEXTITEM",
		"TVGN_CHILD",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"style",
		"CHECK",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_STATE",
		"stateMask",
		"TVIS_STATEIMAGEMASK",
		"hItem",
		"TVM_GETITEM",
		"state",
		"state",
		"TVM_SETITEM",
		"handle",
		"TVM_GETNEXTITEM",
		"TVGN_CARET",
		"ignoreExpand",
		"TVM_EXPAND",
		"TVE_EXPAND",
		"TVE_COLLAPSE",
		"ignoreExpand",
		"TVM_GETNEXTITEM",
		"TVGN_CARET",
		"mask",
		"TVIF_HANDLE",
		"TVIF_PARAM",
		"hItem",
		"TVM_GETITEM",
		"item",
		"items",
		"lParam",
		"hAnchor",
		"Selection",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"font",
		"font",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_TEXT",
		"hItem",
		"pszText",
		"LPSTR_TEXTCALLBACK",
		"TVM_SETITEM",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_TEXT",
		"hItem",
		"pszText",
		"LPSTR_TEXTCALLBACK",
		"TVM_SETITEM",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"ERROR_INVALID_ARGUMENT",
		"customDraw",
		"handle",
		"style",
		"CHECK",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_STATE",
		"stateMask",
		"TVIS_STATEIMAGEMASK",
		"hItem",
		"TVM_GETITEM",
		"state",
		"state",
		"TVM_SETITEM",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"type",
		"ICON",
		"image",
		"type",
		"ICON",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_IMAGE",
		"TVIF_SELECTEDIMAGE",
		"hItem",
		"iImage",
		"iSelectedImage",
		"I_IMAGECALLBACK",
		"mask",
		"TVIF_TEXT",
		"pszText",
		"LPSTR_TEXTCALLBACK",
		"TVM_SETITEM",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_NULL_ARGUMENT",
		"handle",
		"mask",
		"TVIF_HANDLE",
		"TVIF_TEXT",
		"hItem",
		"pszText",
		"LPSTR_TEXTCALLBACK",
		"TVM_SETITEM",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"parentItem",
		"style",
		"parentItem",
		"style",
		"index",
		"item",
		"index",
		"index",
		"index",
		"getText",
		"getImage",
		"full",
		"index",
		"index",
		"index",
		"index",
		"index",
		"index",
		"item",
		"column",
		"drawText",
		"drawImage",
		"color",
		"index",
		"color",
		"checked",
		"expanded",
		"font",
		"index",
		"font",
		"color",
		"index",
		"color",
		"grayed",
		"images",
		"index",
		"image",
		"image",
		"strings",
		"index",
		"string",
		"string"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"checkNull",
		"checkSubclass",
		"getBackground",
		"getBackground",
		"getBounds",
		"getBounds",
		"getBounds",
		"getChecked",
		"getExpanded",
		"getFont",
		"getFont",
		"getForeground",
		"getForeground",
		"getGrayed",
		"getItem",
		"getItemCount",
		"getItems",
		"getImage",
		"getImageBounds",
		"getParent",
		"getParentItem",
		"getText",
		"indexOf",
		"redraw",
		"redraw",
		"releaseChild",
		"releaseHandle",
		"releaseWidget",
		"removeAll",
		"setBackground",
		"setBackground",
		"setChecked",
		"setExpanded",
		"setFont",
		"setFont",
		"setForeground",
		"setForeground",
		"setGrayed",
		"setImage",
		"setImage",
		"setImage",
		"setText",
		"setText",
		"setText",
		"createItem",
		"error",
		"SendMessage",
		"SendMessage",
		"error",
		"createItem",
		"checkNull",
		"createItem",
		"checkNull",
		"error",
		"SendMessage",
		"SendMessage",
		"error",
		"createItem",
		"error",
		"isValidSubclass",
		"error",
		"checkWidget",
		"getBackgroundPixel",
		"win32_new",
		"checkWidget",
		"max",
		"getColumnCount",
		"getBackground",
		"getBackground",
		"win32_new",
		"checkWidget",
		"getBounds",
		"checkWidget",
		"getBounds",
		"SendMessage",
		"SendMessage",
		"getImageSize",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"getImageSize",
		"min",
		"min",
		"getLinesVisible",
		"max",
		"max",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"getFont",
		"win32_new",
		"checkWidget",
		"max",
		"getColumnCount",
		"getFont",
		"getFont",
		"win32_new",
		"checkWidget",
		"getForegroundPixel",
		"win32_new",
		"checkWidget",
		"max",
		"getColumnCount",
		"getForeground",
		"getForeground",
		"win32_new",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"error",
		"SendMessage",
		"SendMessage",
		"error",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"getItemCount",
		"checkWidget",
		"SendMessage",
		"getItems",
		"checkWidget",
		"getImage",
		"checkWidget",
		"getBounds",
		"checkWidget",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"getText",
		"checkWidget",
		"error",
		"isDisposed",
		"error",
		"SendMessage",
		"indexOf",
		"IsWindowVisible",
		"SendMessage",
		"SendMessage",
		"InvalidateRect",
		"IsWindowVisible",
		"getBounds",
		"InvalidateRect",
		"releaseChild",
		"destroyItem",
		"releaseHandle",
		"releaseWidget",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"isDisposed",
		"dispose",
		"SendMessage",
		"checkWidget",
		"isDisposed",
		"error",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"max",
		"getColumnCount",
		"redraw",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"sendEvent",
		"checkWidget",
		"isDisposed",
		"error",
		"SendMessage",
		"checkWidget",
		"isDisposed",
		"error",
		"max",
		"getColumnCount",
		"SendMessage",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"redraw",
		"checkWidget",
		"isDisposed",
		"error",
		"max",
		"getColumnCount",
		"redraw",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"error",
		"setImage",
		"checkWidget",
		"isDisposed",
		"error",
		"equals",
		"setImage",
		"max",
		"getColumnCount",
		"equals",
		"imageIndex",
		"SendMessage",
		"redraw",
		"checkWidget",
		"setImage",
		"checkWidget",
		"error",
		"setText",
		"checkWidget",
		"error",
		"equals",
		"setText",
		"max",
		"getColumnCount",
		"equals",
		"SendMessage",
		"redraw",
		"checkWidget",
		"setText",
		"Rectangle",
		"Rectangle",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"RECT",
		"TVITEM",
		"TVITEM",
		"TVITEM",
		"TVITEM",
		"Rectangle",
		"TVITEM",
		"RECT",
		"TVITEM",
		"TVITEM",
		"Event",
		"TVITEM",
		"TVITEM",
		"TVITEM",
		"TVITEM",
		"TVITEM",
		"TVITEM"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    checkWidget();\n    setText(0, string);\n}",
			"comments":"",
			"methodName":"public void setText(String string)"
		},
		"public void setBackground(int index, Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (cellBackground == null) {\n        cellBackground = new int[count];\n        for (int i = 0; i < count; i++) {\n            cellBackground[i] = -1;\n        }\n    }\n    if (cellBackground[index] == pixel)\n        return;\n    cellBackground[index] = pixel;\n    redraw(index, true, true);\n}",
			"comments":"/**\n* Sets the background color at the given column index in the receiver\n* to the color specified by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param index the column index\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*\n*/\n",
			"methodName":"public void setBackground(int index, Color color)"
		},
		"static TreeItem checkNull(TreeItem item)":{
			"methodBody":"{\n    if (item == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return item;\n}",
			"comments":"",
			"methodName":"static TreeItem checkNull(TreeItem item)"
		},
		"RECT getBounds(int index, boolean getText, boolean getImage, boolean full)":{
			"methodBody":"{\n    \n    if (!getText && !getImage)\n        return new RECT();\n    int count = 0, hwndHeader = parent.hwndHeader;\n    if (hwndHeader != 0) {\n        count = OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);\n    }\n    RECT rect = new RECT();\n    if (index == 0) {\n        int hwnd = parent.handle;\n        rect.left = handle;\n        if (OS.SendMessage(hwnd, OS.TVM_GETITEMRECT, 1, rect) == 0) {\n            return new RECT();\n        }\n        if (getImage) {\n            Point size = parent.getImageSize();\n            rect.left -= size.x + Tree.INSET;\n            if (!getText)\n                rect.right = rect.left + size.x;\n        }\n        if (getText && full && hwndHeader != 0 && count != 0) {\n            RECT headerRect = new RECT();\n            if (OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, 0, headerRect) == 0) {\n                return new RECT();\n            }\n            rect.right = headerRect.right;\n        }\n    } else {\n        if (!(0 <= index && index < count))\n            return new RECT();\n        RECT headerRect = new RECT();\n        if (OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect) == 0) {\n            return new RECT();\n        }\n        int hwnd = parent.handle;\n        rect.left = handle;\n        if (OS.SendMessage(hwnd, OS.TVM_GETITEMRECT, 0, rect) == 0) {\n            return new RECT();\n        }\n        rect.left = headerRect.left;\n        rect.right = headerRect.right;\n        if (!getText || !getImage) {\n            if (images != null && images[index] != null) {\n                Point size = parent.getImageSize();\n                if (getImage) {\n                    rect.right = Math.min(rect.left + size.x, rect.right);\n                } else {\n                    rect.left = Math.min(rect.left + size.x, rect.right);\n                }\n            } else {\n                if (getImage)\n                    rect.right = rect.left;\n            }\n        }\n    }\n    int gridWidth = parent.getLinesVisible() ? Tree.GRID_WIDTH : 0;\n    if (getText || !getImage) {\n        rect.right = Math.max(rect.left, rect.right - gridWidth);\n    }\n    rect.bottom = Math.max(rect.top, rect.bottom - gridWidth);\n    return rect;\n}",
			"comments":"//\tTODO - take into account grid (add boolean arg) to damage less during redraw\n",
			"methodName":"RECT getBounds(int index, boolean getText, boolean getImage, boolean full)"
		},
		"public Color getBackground()":{
			"methodBody":"{\n    checkWidget();\n    int pixel = (background == -1) ? parent.getBackgroundPixel() : background;\n    return Color.win32_new(display, pixel);\n}",
			"comments":"/**\n* Returns the receiver's background color.\n*\n* @return the background color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public Color getBackground()"
		},
		"public boolean getGrayed()":{
			"methodBody":"{\n    checkWidget();\n    if ((parent.style & SWT.CHECK) == 0)\n        return false;\n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE;\n    tvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\n    tvItem.hItem = handle;\n    int result = OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n    return (result != 0) && ((tvItem.state >> 12) > 2);\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is grayed,\n* and false otherwise. When the parent does not have\n* the <code>CHECK style, return false.\n* <p>\n*\n* @return the grayed state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getGrayed()"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    if (!isValidSubclass())\n        error(SWT.ERROR_INVALID_SUBCLASS);\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"public TreeItem[] getItems()":{
			"methodBody":"{\n    checkWidget();\n    int hwnd = parent.handle;\n    int hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, handle);\n    if (hItem == 0)\n        return new TreeItem[0];\n    return parent.getItems(hItem);\n}",
			"comments":"/**\n* Returns a (possibly empty) array of <code>TreeItem</code>s which\n* are the direct item children of the receiver.\n* <p>\n* Note: This is not the actual structure used by the receiver\n* to maintain its list of items, so modifying the array will\n* not affect the receiver.\n* </p>\n*\n* @return the receiver's items\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public TreeItem[] getItems()"
		},
		"public Color getBackground(int index)":{
			"methodBody":"{\n    checkWidget();\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return getBackground();\n    int pixel = cellBackground != null ? cellBackground[index] : -1;\n    return pixel == -1 ? getBackground() : Color.win32_new(display, pixel);\n}",
			"comments":"/**\n* Returns the background color at the given column index in the receiver.\n*\n* @param index the column index\n* @return the background color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public Color getBackground(int index)"
		},
		"public int indexOf(TreeItem item)":{
			"methodBody":"{\n    checkWidget();\n    if (item == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (item.isDisposed())\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    int hwnd = parent.handle;\n    int hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, handle);\n    return hItem == 0 ? -1 : parent.indexOf(hItem, item.handle);\n}",
			"comments":"/**\n* Searches the receiver's list starting at the first item\n* (index 0) until an item is found that is equal to the\n* argument, and returns the index of that item. If no item\n* is found, returns -1.\n*\n* @param item the search item\n* @return the index of the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the tool item is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the tool item has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public int indexOf(TreeItem item)"
		},
		"public void setGrayed(boolean grayed)":{
			"methodBody":"{\n    checkWidget();\n    if ((parent.style & SWT.CHECK) == 0)\n        return;\n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE;\n    tvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\n    tvItem.hItem = handle;\n    OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n    int state = tvItem.state >> 12;\n    if (grayed) {\n        if (state <= 2)\n            state += 2;\n    } else {\n        if (state > 2)\n            state -= 2;\n    }\n    tvItem.state = state << 12;\n    OS.SendMessage(hwnd, OS.TVM_SETITEM, 0, tvItem);\n}",
			"comments":"/**\n* Sets the grayed state of the receiver.\n* <p>\n*\n* @param grayed the new grayed state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setGrayed(boolean grayed)"
		},
		"void releaseHandle()":{
			"methodBody":"{\n    super.releaseHandle();\n    handle = 0;\n}",
			"comments":"",
			"methodName":"void releaseHandle()"
		},
		"void redraw(int column, boolean drawText, boolean drawImage)":{
			"methodBody":"{\n    if (parent.drawCount > 0)\n        return;\n    int hwnd = parent.handle;\n    if (!OS.IsWindowVisible(hwnd))\n        return;\n    RECT rect = getBounds(column, drawText, drawImage, true);\n    OS.InvalidateRect(hwnd, rect, true);\n}",
			"comments":"",
			"methodName":"void redraw(int column, boolean drawText, boolean drawImage)"
		},
		"public void setChecked(boolean checked)":{
			"methodBody":"{\n    checkWidget();\n    if ((parent.style & SWT.CHECK) == 0)\n        return;\n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE;\n    tvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\n    tvItem.hItem = handle;\n    OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n    int state = tvItem.state >> 12;\n    if (checked) {\n        if ((state & 0x1) != 0)\n            state++;\n    } else {\n        if ((state & 0x1) == 0)\n            --state;\n    }\n    tvItem.state = state << 12;\n    OS.SendMessage(hwnd, OS.TVM_SETITEM, 0, tvItem);\n}",
			"comments":"/**\n* Sets the checked state of the receiver.\n* <p>\n*\n* @param checked the new checked state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setChecked(boolean checked)"
		},
		"public Color getForeground(int index)":{
			"methodBody":"{\n    checkWidget();\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return getForeground();\n    int pixel = cellForeground != null ? cellForeground[index] : -1;\n    return pixel == -1 ? getForeground() : Color.win32_new(display, pixel);\n}",
			"comments":"/**\n*\n* Returns the foreground color at the given column index in the receiver.\n*\n* @param index the column index\n* @return the foreground color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public Color getForeground(int index)"
		},
		"public String getText(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (index == 0)\n        return getText();\n    if (strings != null) {\n        if (0 <= index && index < strings.length) {\n            String string = strings[index];\n            return string != null ? string : \"\";\n        }\n    }\n    return \"\";\n}",
			"comments":"/**\n* Returns the text stored at the given column index in the receiver,\n* or empty string if the text has not been set.\n*\n* @param index the column index\n* @return the text stored at the given column index in the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public String getText(int index)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (foreground == pixel)\n        return;\n    foreground = pixel;\n    redraw();\n}",
			"comments":"/**\n* Sets the receiver's foreground color to the color specified\n* by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param color the new color (or null)\n*\n* @since 2.0\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public void setForeground(Color color)"
		},
		"public void setText(int index, String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (index == 0) {\n        if (string.equals(text))\n            return;\n        super.setText(string);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    if (strings == null && index != 0)\n        strings = new String[count];\n    if (strings != null) {\n        if (string.equals(strings[index]))\n            return;\n        strings[index] = string;\n    }\n    if (index == 0) {\n        int hwnd = parent.handle;\n        TVITEM tvItem = new TVITEM();\n        tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_TEXT;\n        tvItem.hItem = handle;\n        tvItem.pszText = OS.LPSTR_TEXTCALLBACK;\n        OS.SendMessage(hwnd, OS.TVM_SETITEM, 0, tvItem);\n    } else {\n        redraw(index, true, false);\n    }\n}",
			"comments":"/**\n* Sets the receiver's text at a column\n*\n* @param index the column index\n* @param string the new text\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the text is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void setText(int index, String string)"
		},
		"public void setText(String[] strings)":{
			"methodBody":"{\n    checkWidget();\n    if (strings == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    for (int i = 0; i < strings.length; i++) {\n        String string = strings[i];\n        if (string != null)\n            setText(i, string);\n    }\n}",
			"comments":"/**\n* Sets the text for multiple columns in the tree.\n*\n* @param strings the array of new strings\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the text is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void setText(String[] strings)"
		},
		"public Tree getParent()":{
			"methodBody":"{\n    checkWidget();\n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>Tree</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Tree getParent()"
		},
		"public void setForeground(int index, Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (cellForeground == null) {\n        cellForeground = new int[count];\n        for (int i = 0; i < count; i++) {\n            cellForeground[i] = -1;\n        }\n    }\n    if (cellForeground[index] == pixel)\n        return;\n    cellForeground[index] = pixel;\n    redraw(index, true, false);\n}",
			"comments":"/**\n* Sets the foreground color at the given column index in the receiver\n* to the color specified by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param index the column index\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*\n*/\n",
			"methodName":"public void setForeground(int index, Color color)"
		},
		"public Font getFont()":{
			"methodBody":"{\n    checkWidget();\n    return font == -1 ? parent.getFont() : Font.win32_new(display, font);\n}",
			"comments":"/**\n* Returns the font that the receiver will use to paint textual information for this item.\n*\n* @return the receiver's font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Font getFont()"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int pixel = -1;\n    if (color != null) {\n        parent.customDraw = true;\n        pixel = color.handle;\n    }\n    if (background == pixel)\n        return;\n    background = pixel;\n    redraw();\n}",
			"comments":"/**\n* Sets the receiver's background color to the color specified\n* by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public void setBackground(Color color)"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    setImage(0, image);\n}",
			"comments":"",
			"methodName":"public void setImage(Image image)"
		},
		"public Rectangle getBounds()":{
			"methodBody":"{\n    checkWidget();\n    RECT rect = getBounds(0, true, false, false);\n    int width = rect.right - rect.left, height = rect.bottom - rect.top;\n    return new Rectangle(rect.left, rect.top, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent.\n*\n* @return the receiver's bounding rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle getBounds()"
		},
		"public Rectangle getBounds(int index)":{
			"methodBody":"{\n    checkWidget();\n    RECT rect = getBounds(index, true, true, true);\n    int width = rect.right - rect.left, height = rect.bottom - rect.top;\n    return new Rectangle(rect.left, rect.top, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent at a column in the tree.\n*\n* @param index the index that specifies the column\n* @return the receiver's bounding column rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public Rectangle getBounds(int index)"
		},
		"void redraw()":{
			"methodBody":"{\n    if (parent.drawCount > 0)\n        return;\n    int hwnd = parent.handle;\n    if (!OS.IsWindowVisible(hwnd))\n        return;\n    RECT rect = new RECT();\n    rect.left = handle;\n    \n    boolean full = (parent.style & SWT.FULL_SELECTION) != 0;\n    if (!full) {\n        int hwndHeader = parent.hwndHeader;\n        if (hwndHeader != 0) {\n            full = OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0) != 0;\n        }\n    }\n    if (OS.SendMessage(hwnd, OS.TVM_GETITEMRECT, full ? 0 : 1, rect) != 0) {\n        OS.InvalidateRect(hwnd, rect, true);\n    }\n}",
			"comments":"/*\n* When there are no columns and the tree is not\n* full selection, redraw only the text.  This is\n* an optimization to reduce flashing.\n*/\n",
			"methodName":"void redraw()"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    checkWidget();\n    if (font != null && font.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int hFont = -1;\n    if (font != null) {\n        parent.customDraw = true;\n        hFont = font.handle;\n    }\n    if (this.font == hFont)\n        return;\n    this.font = hFont;\n    \n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_TEXT;\n    tvItem.hItem = handle;\n    tvItem.pszText = OS.LPSTR_TEXTCALLBACK;\n    OS.SendMessage(hwnd, OS.TVM_SETITEM, 0, tvItem);\n}",
			"comments":"/**\n* Sets the font that the receiver will use to paint textual information\n* for this item to the font specified by the argument, or to the default font\n* for that kind of control if the argument is null.\n*\n* @param font the new font (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n/*\n* Bug in Windows.  When the font is changed for an item,\n* the bounds for the item are not updated, causing the text\n* to be clipped.  The fix is to reset the text, causing\n* Windows to compute the new bounds using the new font.\n*/\n",
			"methodName":"public void setFont(Font font)"
		},
		"public boolean getChecked()":{
			"methodBody":"{\n    checkWidget();\n    if ((parent.style & SWT.CHECK) == 0)\n        return false;\n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE;\n    tvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\n    tvItem.hItem = handle;\n    int result = OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n    return (result != 0) && (((tvItem.state >> 12) & 1) == 0);\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is checked,\n* and false otherwise.  When the parent does not have\n* the <code>CHECK style, return false.\n* <p>\n*\n* @return the checked state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getChecked()"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    parent = null;\n    strings = null;\n    images = null;\n    cellBackground = cellForeground = cellFont = null;\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public TreeItem getItem(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (index < 0)\n        error(SWT.ERROR_INVALID_RANGE);\n    int hwnd = parent.handle;\n    int hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, handle);\n    while (index-- > 0 && hItem != 0) {\n        hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hItem);\n    }\n    if (hItem == 0)\n        error(SWT.ERROR_INVALID_RANGE);\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_PARAM;\n    tvItem.hItem = hItem;\n    OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n    return parent.items[tvItem.lParam];\n}",
			"comments":"/**\n* Returns the item at the given, zero-relative index in the\n* receiver. Throws an exception if the index is out of range.\n*\n* @param index the index of the item to return\n* @return the item at the given index\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public TreeItem getItem(int index)"
		},
		"public Font getFont(int index)":{
			"methodBody":"{\n    checkWidget();\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return getFont();\n    int hFont = (cellFont != null) ? cellFont[index] : font;\n    return hFont == -1 ? getFont() : Font.win32_new(display, hFont);\n}",
			"comments":"/**\n* Returns the font that the receiver will use to paint textual information\n* for the specified cell in this item.\n*\n* @param index the column index\n* @return the receiver's font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public Font getFont(int index)"
		},
		"public void removeAll()":{
			"methodBody":"{\n    checkWidget();\n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_PARAM;\n    tvItem.hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, handle);\n    while (tvItem.hItem != 0) {\n        OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n        TreeItem item = parent.items[tvItem.lParam];\n        if (item != null && !item.isDisposed()) {\n            item.dispose();\n        }\n        tvItem.hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, handle);\n    }\n}",
			"comments":"/**\n* Removes all of the items from the receiver.\n* <p>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void removeAll()"
		},
		"public void setExpanded(boolean expanded)":{
			"methodBody":"{\n    checkWidget();\n    \n    int hwnd = parent.handle;\n    int hOldItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\n    parent.ignoreExpand = true;\n    OS.SendMessage(hwnd, OS.TVM_EXPAND, expanded ? OS.TVE_EXPAND : OS.TVE_COLLAPSE, handle);\n    parent.ignoreExpand = false;\n    int hNewItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\n    if (hNewItem != hOldItem) {\n        Event event = new Event();\n        if (hNewItem != 0) {\n            TVITEM tvItem = new TVITEM();\n            tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_PARAM;\n            tvItem.hItem = hNewItem;\n            if (OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem) != 0) {\n                event.item = parent.items[tvItem.lParam];\n            }\n            parent.hAnchor = hNewItem;\n        }\n        parent.sendEvent(SWT.Selection, event);\n    }\n}",
			"comments":"/**\n* Sets the expanded state of the receiver.\n* <p>\n*\n* @param expanded the new expanded state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* Feature in Windows.  When the user collapses the root\n* of a subtree that has the focus item, Windows moves\n* the selection to the root of the subtree and issues\n* a TVN_SELCHANGED to inform the programmer that the\n* seletion has changed.  When the programmer collapses\n* the same subtree using TVM_EXPAND, Windows does not\n* send the selection changed notification.  This is not\n* strictly wrong but is inconsistent.  The fix is to notice\n* that the selection has changed and issue the event.\n*/\n",
			"methodName":"public void setExpanded(boolean expanded)"
		},
		"public Image getImage(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (index == 0)\n        return getImage();\n    if (images != null) {\n        if (0 <= index && index < images.length)\n            return images[index];\n    }\n    return null;\n}",
			"comments":"/**\n* Returns the image stored at the given column index in the receiver,\n* or null if the image has not been set or if the column does not exist.\n*\n* @param index the column index\n* @return the image stored at the given column index in the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public Image getImage(int index)"
		},
		"public Rectangle getImageBounds(int index)":{
			"methodBody":"{\n    checkWidget();\n    RECT rect = getBounds(index, false, true, false);\n    int width = rect.right - rect.left, height = rect.bottom - rect.top;\n    return new Rectangle(rect.left, rect.top, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the size and location\n* relative to its parent of an image at a column in the\n* table.\n*\n* @param index the index that specifies the column\n* @return the receiver's bounding image rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public Rectangle getImageBounds(int index)"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    parent.destroyItem(this);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"public void setImage(Image[] images)":{
			"methodBody":"{\n    checkWidget();\n    if (images == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    for (int i = 0; i < images.length; i++) {\n        setImage(i, images[i]);\n    }\n}",
			"comments":"/**\n* Sets the image for multiple columns in the tree.\n*\n* @param images the array of new images\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the array of images is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if one of the images has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void setImage(Image[] images)"
		},
		"public TreeItem getParentItem()":{
			"methodBody":"{\n    checkWidget();\n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_PARAM;\n    tvItem.hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, handle);\n    if (tvItem.hItem == 0)\n        return null;\n    OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n    return parent.items[tvItem.lParam];\n}",
			"comments":"/**\n* Returns the receiver's parent item, which must be a\n* <code>TreeItem</code> or null when the receiver is a\n* root.\n*\n* @return the receiver's parent item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public TreeItem getParentItem()"
		},
		"public void setFont(int index, Font font)":{
			"methodBody":"{\n    checkWidget();\n    if (font != null && font.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    int hFont = -1;\n    if (font != null) {\n        parent.customDraw = true;\n        hFont = font.handle;\n    }\n    if (cellFont == null) {\n        cellFont = new int[count];\n        for (int i = 0; i < count; i++) {\n            cellFont[i] = -1;\n        }\n    }\n    if (cellFont[index] == hFont)\n        return;\n    cellFont[index] = hFont;\n    \n    if (index == 0) {\n        int hwnd = parent.handle;\n        TVITEM tvItem = new TVITEM();\n        tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_TEXT;\n        tvItem.hItem = handle;\n        tvItem.pszText = OS.LPSTR_TEXTCALLBACK;\n        OS.SendMessage(hwnd, OS.TVM_SETITEM, 0, tvItem);\n    } else {\n        redraw(index, true, false);\n    }\n}",
			"comments":"/**\n* Sets the font that the receiver will use to paint textual information\n* for the specified cell in this item to the font specified by the\n* argument, or to the default font for that kind of control if the\n* argument is null.\n*\n* @param index the column index\n* @param font the new font (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n/*\n* Bug in Windows.  When the font is changed for an item,\n* the bounds for the item are not updated, causing the text\n* to be clipped.  The fix is to reset the text, causing\n* Windows to compute the new bounds using the new font.\n*/\n",
			"methodName":"public void setFont(int index, Font font)"
		},
		"public void setImage(int index, Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed()) {\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (index == 0) {\n        if (image != null && image.type == SWT.ICON) {\n            if (image.equals(this.image))\n                return;\n        }\n        super.setImage(image);\n    }\n    int count = Math.max(1, parent.getColumnCount());\n    if (0 > index || index > count - 1)\n        return;\n    if (images == null && index != 0)\n        images = new Image[count];\n    if (images != null) {\n        if (image != null && image.type == SWT.ICON) {\n            if (image.equals(images[index]))\n                return;\n        }\n        images[index] = image;\n    }\n    \n    \n    parent.imageIndex(image);\n    if (index == 0) {\n        int hwnd = parent.handle;\n        TVITEM tvItem = new TVITEM();\n        tvItem.mask = OS.TVIF_HANDLE | OS.TVIF_IMAGE | OS.TVIF_SELECTEDIMAGE;\n        tvItem.hItem = handle;\n        tvItem.iImage = tvItem.iSelectedImage = OS.I_IMAGECALLBACK;\n        \n        tvItem.mask |= OS.TVIF_TEXT;\n        tvItem.pszText = OS.LPSTR_TEXTCALLBACK;\n        OS.SendMessage(hwnd, OS.TVM_SETITEM, 0, tvItem);\n    } else {\n        redraw(index, false, true);\n    }\n}",
			"comments":"/**\n* Sets the receiver's image at a column.\n*\n* @param index the column index\n* @param image the new image\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n/* Ensure that the image list is created */\n//TODO - items that are not in column zero don't need to be in the image list\n/*\n* Bug in Windows.  When I_IMAGECALLBACK is used with TVM_SETITEM\n* to indicate that an image has changed, Windows does not draw\n* the new image.  The fix is to use LPSTR_TEXTCALLBACK to force\n* Windows to ask for the text, causing Windows to ask for both.\n*/\n",
			"methodName":"public void setImage(int index, Image image)"
		},
		"public boolean getExpanded()":{
			"methodBody":"{\n    checkWidget();\n    int hwnd = parent.handle;\n    TVITEM tvItem = new TVITEM();\n    tvItem.hItem = handle;\n    tvItem.mask = OS.TVIF_STATE;\n    OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n    return (tvItem.state & OS.TVIS_EXPANDED) != 0;\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is expanded,\n* and false otherwise.\n* <p>\n*\n* @return the expanded state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getExpanded()"
		},
		"public Color getForeground()":{
			"methodBody":"{\n    checkWidget();\n    int pixel = (foreground == -1) ? parent.getForegroundPixel() : foreground;\n    return Color.win32_new(display, pixel);\n}",
			"comments":"/**\n* Returns the foreground color that the receiver will use to draw.\n*\n* @return the receiver's foreground color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public Color getForeground()"
		},
		"public int getItemCount()":{
			"methodBody":"{\n    checkWidget();\n    int hwnd = parent.handle;\n    int hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, handle);\n    if (hItem == 0)\n        return 0;\n    return parent.getItemCount(hItem);\n}",
			"comments":"/**\n* Returns the number of items contained in the receiver\n* that are direct item children of the receiver.\n*\n* @return the number of items\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getItemCount()"
		}
	},
	"ClassORInterfaceName":[
		"TreeItem"
	]
}
