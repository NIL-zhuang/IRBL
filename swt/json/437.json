{
	"variables":[
		"parent",
		"control",
		"id",
		"ideal",
		"minimum",
		"typedListener",
		"index",
		"width",
		"height",
		"index",
		"hwnd",
		"rect",
		"margins",
		"width",
		"height",
		"index",
		"hwnd",
		"insetRect",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"rbBand",
		"index",
		"oldControl",
		"newControl",
		"hwnd",
		"hwndChild",
		"rbBand",
		"hwndAbove",
		"hideNew",
		"showOld",
		"flags",
		"index",
		"hwnd",
		"rbBand",
		"width",
		"index",
		"hwnd",
		"rbBand",
		"index",
		"hwnd",
		"rect",
		"margins",
		"width",
		"height",
		"index",
		"hwnd",
		"rbBand",
		"margins",
		"separator",
		"index",
		"hwnd",
		"rbBand",
		"index",
		"hwnd",
		"rbBand",
		"index",
		"hwnd",
		"rbBand",
		"index",
		"hwnd",
		"rbBand",
		"parent",
		"style",
		"parent",
		"parent",
		"parent",
		"parent",
		"style",
		"parent",
		"parent",
		"index",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"SWT",
		"parent",
		"index",
		"wHint",
		"hHint",
		"wHint",
		"SWT",
		"width",
		"hHint",
		"SWT",
		"height",
		"width",
		"parent",
		"index",
		"width",
		"height",
		"parent",
		"index",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rect",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"margins",
		"rect",
		"margins",
		"rect",
		"margins",
		"parent",
		"index",
		"rect",
		"parent",
		"SWT",
		"CoolBar",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"parent",
		"index",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"insetRect",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rect",
		"rect",
		"insetRect",
		"rect",
		"rect",
		"rect",
		"insetRect",
		"rect",
		"rect",
		"parent",
		"SWT",
		"y",
		"insetRect",
		"width",
		"insetRect",
		"height",
		"insetRect",
		"insetRect",
		"index",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"width",
		"width",
		"rbBand",
		"x",
		"y",
		"width",
		"height",
		"control",
		"parent",
		"parent",
		"control",
		"parent",
		"control",
		"control",
		"SWT",
		"control",
		"parent",
		"SWT",
		"parent",
		"index",
		"control",
		"parent",
		"newControl",
		"control",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"rbBand",
		"hwndChild",
		"newControl",
		"newControl",
		"hwndAbove",
		"OS",
		"hwndChild",
		"OS",
		"newControl",
		"newControl",
		"oldControl",
		"oldControl",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"hideNew",
		"newControl",
		"showOld",
		"oldControl",
		"hwndAbove",
		"hwndAbove",
		"hwndChild",
		"OS",
		"OS",
		"OS",
		"hwndChild",
		"hwndAbove",
		"flags",
		"parent",
		"index",
		"parent",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"rbBand",
		"parent",
		"index",
		"width",
		"rbBand",
		"parent",
		"index",
		"width",
		"Math",
		"width",
		"height",
		"Math",
		"height",
		"ideal",
		"parent",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"rbBand",
		"OS",
		"OS",
		"rbBand",
		"Math",
		"width",
		"parent",
		"index",
		"rbBand",
		"height",
		"minimum",
		"rbBand",
		"height",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"size",
		"SWT",
		"size",
		"size",
		"parent",
		"index",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rect",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"margins",
		"rect",
		"margins",
		"rect",
		"margins",
		"parent",
		"index",
		"rect",
		"parent",
		"SWT",
		"CoolBar",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"parent",
		"index",
		"width",
		"Math",
		"width",
		"height",
		"Math",
		"height",
		"parent",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"ideal",
		"rbBand",
		"Math",
		"width",
		"parent",
		"index",
		"minimum",
		"rbBand",
		"height",
		"rbBand",
		"rbBand",
		"height",
		"parent",
		"index",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"margins",
		"width",
		"margins",
		"width",
		"margins",
		"parent",
		"SWT",
		"CoolBar",
		"rbBand",
		"width",
		"separator",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"size",
		"SWT",
		"size",
		"size",
		"parent",
		"index",
		"parent",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"rbBand",
		"rbBand",
		"parent",
		"index",
		"width",
		"Math",
		"width",
		"height",
		"Math",
		"height",
		"minimum",
		"parent",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"rbBand",
		"width",
		"rbBand",
		"height",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"size",
		"SWT",
		"size",
		"size",
		"parent",
		"parent",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"rbBand",
		"OS",
		"parent",
		"parent",
		"rbBand",
		"REBARBANDINFO",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"wrap",
		"rbBand",
		"OS",
		"rbBand",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"rbBand",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"parent",
		"parent",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"ERROR_INVALID_SUBCLASS",
		"DEFAULT",
		"DEFAULT",
		"handle",
		"RB_GETRECT",
		"COMCTL32_MAJOR",
		"RB_GETBANDMARGINS",
		"left",
		"cxLeftWidth",
		"right",
		"cxRightWidth",
		"right",
		"style",
		"FLAT",
		"SEPARATOR_WIDTH",
		"right",
		"left",
		"bottom",
		"top",
		"left",
		"top",
		"handle",
		"RB_GETBANDBORDERS",
		"RB_GETRECT",
		"left",
		"left",
		"top",
		"right",
		"left",
		"left",
		"bottom",
		"top",
		"style",
		"FLAT",
		"top",
		"right",
		"top",
		"bottom",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_HEADERSIZE",
		"RB_GETBANDINFO",
		"cxHeader",
		"ERROR_INVALID_ARGUMENT",
		"parent",
		"ERROR_INVALID_PARENT",
		"control",
		"control",
		"control",
		"control",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_CHILD",
		"hwndChild",
		"control",
		"GW_HWNDPREV",
		"RB_SETBANDINFO",
		"SWP_NOSIZE",
		"SWP_NOMOVE",
		"SWP_NOACTIVATE",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_CHILDSIZE",
		"RBBIM_IDEALSIZE",
		"RB_GETBANDINFO",
		"cxIdeal",
		"cyMinChild",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_CHILDSIZE",
		"RB_GETBANDINFO",
		"fMask",
		"RBBIM_CHILDSIZE",
		"RBBIM_IDEALSIZE",
		"cxIdeal",
		"cyMaxChild",
		"cyMinChild",
		"RB_SETBANDINFO",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"handle",
		"RB_GETRECT",
		"COMCTL32_MAJOR",
		"RB_GETBANDMARGINS",
		"left",
		"cxLeftWidth",
		"right",
		"cxRightWidth",
		"right",
		"style",
		"FLAT",
		"SEPARATOR_WIDTH",
		"right",
		"left",
		"bottom",
		"top",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_CHILDSIZE",
		"RBBIM_IDEALSIZE",
		"RB_GETBANDINFO",
		"cxIdeal",
		"cyMinChild",
		"cyChild",
		"cyMaxChild",
		"COMCTL32_MAJOR",
		"RB_GETBANDMARGINS",
		"cxLeftWidth",
		"cxRightWidth",
		"style",
		"FLAT",
		"SEPARATOR_WIDTH",
		"cx",
		"fMask",
		"RBBIM_SIZE",
		"RB_SETBANDINFO",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_CHILDSIZE",
		"RB_GETBANDINFO",
		"cxMinChild",
		"cyMinChild",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_CHILDSIZE",
		"RB_GETBANDINFO",
		"cxMinChild",
		"cyMinChild",
		"RB_SETBANDINFO",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_STYLE",
		"RB_GETBANDINFO",
		"fStyle",
		"RBBS_BREAK",
		"handle",
		"cbSize",
		"sizeof",
		"fMask",
		"RBBIM_STYLE",
		"RB_GETBANDINFO",
		"fStyle",
		"RBBS_BREAK",
		"fStyle",
		"RBBS_BREAK",
		"RB_SETBANDINFO",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"listener",
		"wHint",
		"hHint",
		"control",
		"width",
		"height",
		"size",
		"width",
		"height",
		"size",
		"width",
		"height",
		"size",
		"wrap",
		"listener"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.events"
	],
	"methods":[
		"addSelectionListener",
		"checkSubclass",
		"computeSize",
		"getBounds",
		"getClientArea",
		"getControl",
		"getParent",
		"releaseChild",
		"releaseWidget",
		"setControl",
		"getPreferredSize",
		"setPreferredSize",
		"setPreferredSize",
		"getSize",
		"setSize",
		"setSize",
		"getMinimumSize",
		"setMinimumSize",
		"setMinimumSize",
		"getWrap",
		"setWrap",
		"removeSelectionListener",
		"createItem",
		"getItemCount",
		"createItem",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"isValidSubclass",
		"error",
		"checkWidget",
		"indexOf",
		"getMargin",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"SendMessage",
		"isLastItemOfRow",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"checkWidget",
		"releaseChild",
		"destroyItem",
		"releaseWidget",
		"checkWidget",
		"isDisposed",
		"error",
		"error",
		"indexOf",
		"isDisposed",
		"topHandle",
		"GetWindow",
		"getVisible",
		"getVisible",
		"SendMessage",
		"setVisible",
		"setVisible",
		"SetWindowPos",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"getMargin",
		"checkWidget",
		"indexOf",
		"max",
		"max",
		"SendMessage",
		"max",
		"getMargin",
		"SendMessage",
		"checkWidget",
		"error",
		"setPreferredSize",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"SendMessage",
		"isLastItemOfRow",
		"checkWidget",
		"indexOf",
		"max",
		"max",
		"SendMessage",
		"max",
		"getMargin",
		"isLastItemOfRow",
		"SendMessage",
		"SendMessage",
		"error",
		"setSize",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"checkWidget",
		"indexOf",
		"max",
		"max",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"error",
		"setMinimumSize",
		"indexOf",
		"SendMessage",
		"indexOf",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"TypedListener",
		"Point",
		"Point",
		"Rectangle",
		"RECT",
		"MARGINS",
		"Rectangle",
		"Rectangle",
		"RECT",
		"RECT",
		"REBARBANDINFO",
		"Rectangle",
		"REBARBANDINFO",
		"Point",
		"REBARBANDINFO",
		"Point",
		"REBARBANDINFO",
		"Point",
		"RECT",
		"MARGINS",
		"Point",
		"REBARBANDINFO",
		"MARGINS",
		"Point",
		"REBARBANDINFO",
		"Point",
		"REBARBANDINFO",
		"REBARBANDINFO",
		"REBARBANDINFO"
	],
	"methodsBody":{
		"public void setSize(Point size)":{
			"methodBody":"{\n    if (size == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    setSize(size.x, size.y);\n}",
			"comments":"/**\n* Sets the receiver's size to the point specified by the argument.\n* <p>\n* Note: Attempting to set the width or height of the\n* receiver to a negative number will cause them to be\n* set to zero instead.\n* </p>\n*\n* @param size the new size for the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the point is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setSize(Point size)"
		},
		"boolean getWrap()":{
			"methodBody":"{\n    int index = parent.indexOf(this);\n    int hwnd = parent.handle;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    rbBand.fMask = OS.RBBIM_STYLE;\n    OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n    return (rbBand.fStyle & OS.RBBS_BREAK) != 0;\n}",
			"comments":"",
			"methodName":"boolean getWrap()"
		},
		"public Rectangle getBounds()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return new Rectangle(0, 0, 0, 0);\n    int hwnd = parent.handle;\n    RECT rect = new RECT();\n    OS.SendMessage(hwnd, OS.RB_GETRECT, index, rect);\n    if (OS.COMCTL32_MAJOR >= 6) {\n        MARGINS margins = new MARGINS();\n        OS.SendMessage(hwnd, OS.RB_GETBANDMARGINS, 0, margins);\n        rect.left -= margins.cxLeftWidth;\n        rect.right += margins.cxRightWidth;\n    }\n    if (!parent.isLastItemOfRow(index)) {\n        rect.right += (parent.style & SWT.FLAT) == 0 ? CoolBar.SEPARATOR_WIDTH : 0;\n    }\n    int width = rect.right - rect.left;\n    int height = rect.bottom - rect.top;\n    return new Rectangle(rect.left, rect.top, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent.\n*\n* @return the receiver's bounding rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle getBounds()"
		},
		"public Point getSize()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        new Point(0, 0);\n    int hwnd = parent.handle;\n    RECT rect = new RECT();\n    OS.SendMessage(hwnd, OS.RB_GETRECT, index, rect);\n    if (OS.COMCTL32_MAJOR >= 6) {\n        MARGINS margins = new MARGINS();\n        OS.SendMessage(hwnd, OS.RB_GETBANDMARGINS, 0, margins);\n        rect.left -= margins.cxLeftWidth;\n        rect.right += margins.cxRightWidth;\n    }\n    if (!parent.isLastItemOfRow(index)) {\n        rect.right += (parent.style & SWT.FLAT) == 0 ? CoolBar.SEPARATOR_WIDTH : 0;\n    }\n    int width = rect.right - rect.left;\n    int height = rect.bottom - rect.top;\n    return new Point(width, height);\n}",
			"comments":"/**\n* Returns a point describing the receiver's size. The\n* x coordinate of the result is the width of the receiver.\n* The y coordinate of the result is the height of the\n* receiver.\n*\n* @return the receiver's size\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Point getSize()"
		},
		"public void setMinimumSize(int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    width = Math.max(0, width);\n    height = Math.max(0, height);\n    minimum = true;\n    int hwnd = parent.handle;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    \n    rbBand.fMask = OS.RBBIM_CHILDSIZE;\n    OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n    \n    rbBand.cxMinChild = width;\n    rbBand.cyMinChild = height;\n    OS.SendMessage(hwnd, OS.RB_SETBANDINFO, index, rbBand);\n}",
			"comments":"/**\n* Sets the minimum size that the cool item can be resized to\n* using the cool item's gripper, to the point specified by the arguments.\n*\n* @param width the minimum width of the cool item, in pixels\n* @param height the minimum height of the cool item, in pixels\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n/* Get the child size fields first so we don't overwrite them. */\n/* Set the size fields we are currently modifying. */\n",
			"methodName":"public void setMinimumSize(int width, int height)"
		},
		"public Point getPreferredSize()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return new Point(0, 0);\n    int hwnd = parent.handle;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    rbBand.fMask = OS.RBBIM_CHILDSIZE | OS.RBBIM_IDEALSIZE;\n    OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n    int width = rbBand.cxIdeal + parent.getMargin(index);\n    return new Point(width, rbBand.cyMinChild);\n}",
			"comments":"/**\n* Returns a point describing the receiver's ideal size.\n* The x coordinate of the result is the ideal width of the receiver.\n* The y coordinate of the result is the ideal height of the receiver.\n*\n* @return the receiver's ideal size\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Point getPreferredSize()"
		},
		"public Control getControl()":{
			"methodBody":"{\n    checkWidget();\n    return control;\n}",
			"comments":"/**\n* Returns the control that is associated with the receiver.\n*\n* @return the control that is contained by the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Control getControl()"
		},
		"public CoolBar getParent()":{
			"methodBody":"{\n    checkWidget();\n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>CoolBar</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public CoolBar getParent()"
		},
		"public void setPreferredSize(Point size)":{
			"methodBody":"{\n    checkWidget();\n    if (size == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    setPreferredSize(size.x, size.y);\n}",
			"comments":"/**\n* Sets the receiver's ideal size to the point specified by the argument.\n*\n* @param size the new ideal size for the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the point is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setPreferredSize(Point size)"
		},
		"public void setSize(int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    width = Math.max(0, width);\n    height = Math.max(0, height);\n    int hwnd = parent.handle;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    \n    rbBand.fMask = OS.RBBIM_CHILDSIZE | OS.RBBIM_IDEALSIZE;\n    OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n    \n    if (!ideal)\n        rbBand.cxIdeal = Math.max(0, width - parent.getMargin(index));\n    if (!minimum)\n        rbBand.cyMinChild = height;\n    rbBand.cyChild = rbBand.cyMaxChild = height;\n    \n    if (!parent.isLastItemOfRow(index)) {\n        if (OS.COMCTL32_MAJOR >= 6) {\n            MARGINS margins = new MARGINS();\n            OS.SendMessage(hwnd, OS.RB_GETBANDMARGINS, 0, margins);\n            width -= margins.cxLeftWidth;\n            width -= margins.cxRightWidth;\n        }\n        int separator = (parent.style & SWT.FLAT) == 0 ? CoolBar.SEPARATOR_WIDTH : 0;\n        rbBand.cx = width - separator;\n        rbBand.fMask |= OS.RBBIM_SIZE;\n    }\n    OS.SendMessage(hwnd, OS.RB_SETBANDINFO, index, rbBand);\n}",
			"comments":"/**\n* Sets the receiver's size to the point specified by the arguments.\n* <p>\n* Note: Attempting to set the width or height of the\n* receiver to a negative number will cause that\n* value to be set to zero instead.\n* </p>\n*\n* @param width the new width for the receiver\n* @param height the new height for the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/* Get the child size fields first so we don't overwrite them. */\n/* Set the size fields we are currently modifying. */\n/*\n* Do not set the size for the last item on the row.\n*/\n",
			"methodName":"public void setSize(int width, int height)"
		},
		"public void setPreferredSize(int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    width = Math.max(0, width);\n    height = Math.max(0, height);\n    ideal = true;\n    int hwnd = parent.handle;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    \n    rbBand.fMask = OS.RBBIM_CHILDSIZE;\n    OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n    \n    rbBand.fMask = OS.RBBIM_CHILDSIZE | OS.RBBIM_IDEALSIZE;\n    rbBand.cxIdeal = Math.max(0, width - parent.getMargin(index));\n    rbBand.cyMaxChild = height;\n    if (!minimum)\n        rbBand.cyMinChild = height;\n    OS.SendMessage(hwnd, OS.RB_SETBANDINFO, index, rbBand);\n}",
			"comments":"/**\n* Sets the receiver's ideal size to the point specified by the arguments.\n*\n* @param width the new ideal width for the receiver\n* @param height the new ideal height for the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/* Get the child size fields first so we don't overwrite them. */\n/* Set the size fields we are currently modifying. */\n",
			"methodName":"public void setPreferredSize(int width, int height)"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    if (!isValidSubclass())\n        error(SWT.ERROR_INVALID_SUBCLASS);\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"void setWrap(boolean wrap)":{
			"methodBody":"{\n    int index = parent.indexOf(this);\n    int hwnd = parent.handle;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    rbBand.fMask = OS.RBBIM_STYLE;\n    OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n    if (wrap) {\n        rbBand.fStyle |= OS.RBBS_BREAK;\n    } else {\n        rbBand.fStyle &= ~OS.RBBS_BREAK;\n    }\n    OS.SendMessage(hwnd, OS.RB_SETBANDINFO, index, rbBand);\n}",
			"comments":"",
			"methodName":"void setWrap(boolean wrap)"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    control = null;\n    parent = null;\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public void setControl(Control control)":{
			"methodBody":"{\n    checkWidget();\n    if (control != null) {\n        if (control.isDisposed())\n            error(SWT.ERROR_INVALID_ARGUMENT);\n        if (control.parent != parent)\n            error(SWT.ERROR_INVALID_PARENT);\n    }\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    if (this.control != null && this.control.isDisposed()) {\n        this.control = null;\n    }\n    Control oldControl = this.control, newControl = control;\n    int hwnd = parent.handle;\n    int hwndChild = newControl != null ? control.topHandle() : 0;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    rbBand.fMask = OS.RBBIM_CHILD;\n    rbBand.hwndChild = hwndChild;\n    this.control = newControl;\n    \n    int hwndAbove = 0;\n    if (newControl != null) {\n        hwndAbove = OS.GetWindow(hwndChild, OS.GW_HWNDPREV);\n    }\n    boolean hideNew = newControl != null && !newControl.getVisible();\n    boolean showOld = oldControl != null && oldControl.getVisible();\n    OS.SendMessage(hwnd, OS.RB_SETBANDINFO, index, rbBand);\n    if (hideNew)\n        newControl.setVisible(false);\n    if (showOld)\n        oldControl.setVisible(true);\n    if (hwndAbove != 0 && hwndAbove != hwndChild) {\n        int flags = OS.SWP_NOSIZE | OS.SWP_NOMOVE | OS.SWP_NOACTIVATE;\n        SetWindowPos(hwndChild, hwndAbove, 0, 0, 0, 0, flags);\n    }\n}",
			"comments":"/**\n* Sets the control that is associated with the receiver\n* to the argument.\n*\n* @param control the new control that will be contained by the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>\n*    <li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* Feature in Windows.  When Windows sets the rebar band child,\n* it makes the new child visible and hides the old child and\n* moves the new child to the top of the Z-order.  The fix is\n* to save and restore the visibility and Z-order.\n*/\n",
			"methodName":"public void setControl(Control control)"
		},
		"Rectangle getClientArea()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return new Rectangle(0, 0, 0, 0);\n    int hwnd = parent.handle;\n    RECT insetRect = new RECT();\n    OS.SendMessage(hwnd, OS.RB_GETBANDBORDERS, index, insetRect);\n    RECT rect = new RECT();\n    OS.SendMessage(hwnd, OS.RB_GETRECT, index, rect);\n    int x = rect.left + insetRect.left;\n    int y = rect.top;\n    int width = rect.right - rect.left - insetRect.left;\n    int height = rect.bottom - rect.top;\n    if ((parent.style & SWT.FLAT) == 0) {\n        y += insetRect.top;\n        width -= insetRect.right;\n        height -= insetRect.top + insetRect.bottom;\n    }\n    if (index == 0) {\n        REBARBANDINFO rbBand = new REBARBANDINFO();\n        rbBand.cbSize = REBARBANDINFO.sizeof;\n        rbBand.fMask = OS.RBBIM_HEADERSIZE;\n        OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n        width = width - rbBand.cxHeader + 1;\n    }\n    return new Rectangle(x, y, width, height);\n}",
			"comments":"/*\n* Not currently used.\n*/\n",
			"methodName":"Rectangle getClientArea()"
		},
		"public void setMinimumSize(Point size)":{
			"methodBody":"{\n    checkWidget();\n    if (size == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    setMinimumSize(size.x, size.y);\n}",
			"comments":"/**\n* Sets the minimum size that the cool item can be resized to\n* using the cool item's gripper, to the point specified by the argument.\n*\n* @param size a point representing the minimum width and height of the cool item, in pixels\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the point is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public void setMinimumSize(Point size)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Selection, listener);\n    eventTable.unhook(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners that\n* will be notified when the control is selected.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*\n* @since 2.0\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    parent.destroyItem(this);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners that will\n* be notified when the control is selected, by sending it one\n* of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* If <code>widgetSelected</code> is called when the mouse is over\n* the drop-down arrow (or 'chevron') portion of the cool item,\n* the event object detail field contains the value <code>SWT.ARROW</code>,\n* and the x and y fields in the event object represent the point at\n* the bottom left of the chevron, where the menu should be popped up.\n* <code>widgetDefaultSelected</code> is not called.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*\n* @since 2.0\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"public Point computeSize(int wHint, int hHint)":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return new Point(0, 0);\n    int width = wHint, height = hHint;\n    if (wHint == SWT.DEFAULT)\n        width = 32;\n    if (hHint == SWT.DEFAULT)\n        height = 32;\n    width += parent.getMargin(index);\n    return new Point(width, height);\n}",
			"comments":"/**\n* Returns the preferred size of the receiver.\n* <p>\n* The <em>preferred size</em> of a <code>CoolItem</code> is the size that\n* it would best be displayed at. The width hint and height hint arguments\n* allow the caller to ask the instance questions such as \"Given a particular\n* width, how high does it need to be to show all of the contents?\"\n* To indicate that the caller does not wish to constrain a particular\n* dimension, the constant <code>SWT.DEFAULT</code> is passed for the hint.\n* </p>\n*\n* @param wHint the width hint (can be <code>SWT.DEFAULT</code>)\n* @param hHint the height hint (can be <code>SWT.DEFAULT</code>)\n* @return the preferred size\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see Layout\n* @see #getBounds\n* @see #getSize\n* @see Control#getBorderWidth\n* @see Scrollable#computeTrim\n* @see Scrollable#getClientArea\n*/\n",
			"methodName":"public Point computeSize(int wHint, int hHint)"
		},
		"public Point getMinimumSize()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return new Point(0, 0);\n    int hwnd = parent.handle;\n    REBARBANDINFO rbBand = new REBARBANDINFO();\n    rbBand.cbSize = REBARBANDINFO.sizeof;\n    rbBand.fMask = OS.RBBIM_CHILDSIZE;\n    OS.SendMessage(hwnd, OS.RB_GETBANDINFO, index, rbBand);\n    return new Point(rbBand.cxMinChild, rbBand.cyMinChild);\n}",
			"comments":"/**\n* Returns the minimum size that the cool item can\n* be resized to using the cool item's gripper.\n*\n* @return a point containing the minimum width and height of the cool item, in pixels\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public Point getMinimumSize()"
		}
	},
	"ClassORInterfaceName":[
		"CoolItem"
	]
}
