{
	"variables":[
		"buffer",
		"size",
		"hHeap",
		"ppNames",
		"memTracker",
		"i",
		"nameSize",
		"pName",
		"i",
		"address",
		"rgszNames",
		"OS",
		"OS",
		"hHeap",
		"OS",
		"size",
		"size",
		"i",
		"size",
		"i",
		"rgszNames",
		"i",
		"buffer",
		"nameSize",
		"rgszNames",
		"i",
		"nameSize",
		"buffer",
		"OS",
		"hHeap",
		"OS",
		"buffer",
		"OS",
		"pName",
		"buffer",
		"buffer",
		"COM",
		"ppNames",
		"i",
		"pName",
		"memTracker",
		"i",
		"pName",
		"COM",
		"address",
		"ppNames",
		"cNames",
		"lcid",
		"rgDispId",
		"i",
		"memTracker",
		"i",
		"OS",
		"hHeap",
		"memTracker",
		"i",
		"OS",
		"hHeap",
		"ppNames",
		"COM",
		"address",
		"iTInfo",
		"lcid",
		"ppTInfo",
		"COM",
		"address",
		"pctinfo",
		"COM",
		"address",
		"dispIdMember",
		"riid",
		"lcid",
		"dwFlags",
		"pDispParams",
		"pVarResult",
		"pExcepInfo",
		"pArgErr",
		"length",
		"HEAP_ZERO_MEMORY",
		"HEAP_ZERO_MEMORY",
		"length",
		"length",
		"length",
		"address",
		"riid",
		"rgszNames",
		"cNames",
		"lcid",
		"rgDispId",
		"iTInfo",
		"lcid",
		"ppTInfo",
		"pctinfo",
		"dispIdMember",
		"riid",
		"lcid",
		"dwFlags",
		"pDispParams",
		"pVarResult",
		"pExcepInfo",
		"pArgErr"
	],
	"extendORImplementFiles":[
		"IUnknown"
	],
	"package":[
		"org.eclipse.swt.internal.ole.win32"
	],
	"import":[
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"GetIDsOfNames",
		"GetTypeInfo",
		"GetTypeInfoCount",
		"Invoke",
		"GetProcessHeap",
		"HeapAlloc",
		"length",
		"getChars",
		"HeapAlloc",
		"MoveMemory",
		"MoveMemory",
		"VtblCall",
		"HeapFree",
		"HeapFree",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"GUID"
	],
	"methodsBody":{
		"public int GetTypeInfo(int iTInfo, int lcid, int[] ppTInfo)":{
			"methodBody":"{\n    return COM.VtblCall(4, address, iTInfo, lcid, ppTInfo);\n}",
			"comments":"",
			"methodName":"public int GetTypeInfo(int iTInfo, int lcid, int[] ppTInfo)"
		},
		"public int GetIDsOfNames(GUID riid, String[] rgszNames, int cNames, int lcid, int[] rgDispId)":{
			"methodBody":"{\n    char[] buffer;\n    int size = rgszNames.length;\n    \n    int hHeap = OS.GetProcessHeap();\n    int ppNames = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, size * 4);\n    int[] memTracker = new int[size];\n    try {\n        for (int i = 0; i < size; i++) {\n            \n            int nameSize = rgszNames[i].length();\n            buffer = new char[nameSize + 1];\n            rgszNames[i].getChars(0, nameSize, buffer, 0);\n            \n            int pName = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, buffer.length * 2);\n            OS.MoveMemory(pName, buffer, buffer.length * 2);\n            \n            COM.MoveMemory(ppNames + 4 * i, new int[] { pName }, 4);\n            \n            memTracker[i] = pName;\n        }\n        return COM.VtblCall(5, address, new GUID(), ppNames, cNames, lcid, rgDispId);\n    } finally {\n        \n        for (int i = 0; i < memTracker.length; i++) {\n            OS.HeapFree(hHeap, 0, memTracker[i]);\n        }\n        OS.HeapFree(hHeap, 0, ppNames);\n    }\n}",
			"comments":"// create an array to hold the addresses\n// add the address of each string to the array\n// create a null terminated array of char for each String\n// get the address of the start of the array of char\n// copy the address to the array of addresses\n// keep track of the Global Memory so we can free it\n// free the memory\n",
			"methodName":"public int GetIDsOfNames(GUID riid, String[] rgszNames, int cNames, int lcid, int[] rgDispId)"
		},
		"public int GetTypeInfoCount(int[] pctinfo)":{
			"methodBody":"{\n    return COM.VtblCall(3, address, pctinfo);\n}",
			"comments":"",
			"methodName":"public int GetTypeInfoCount(int[] pctinfo)"
		},
		"public int Invoke(int dispIdMember, GUID riid, int lcid, int dwFlags, DISPPARAMS pDispParams, int pVarResult, EXCEPINFO pExcepInfo, int[] pArgErr)":{
			"methodBody":"{\n    return COM.VtblCall(6, address, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr);\n}",
			"comments":"",
			"methodName":"public int Invoke(int dispIdMember, GUID riid, int lcid, int dwFlags, DISPPARAMS pDispParams, int pVarResult, EXCEPINFO pExcepInfo, int[] pArgErr)"
		}
	},
	"ClassORInterfaceName":[
		"IDispatch"
	]
}
