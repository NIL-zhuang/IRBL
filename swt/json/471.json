{
	"variables":[
		"parent",
		"resizable",
		"moveable",
		"typedListener",
		"typedListener",
		"index",
		"hwnd",
		"index",
		"hwnd",
		"oldWidth",
		"buffer",
		"headerWidth",
		"margin",
		"hwndHeader",
		"rect",
		"columnWidth",
		"hStateList",
		"cx",
		"cy",
		"rect",
		"fixWidth",
		"flags",
		"flags",
		"newWidth",
		"moved",
		"order",
		"columns",
		"i",
		"column",
		"index",
		"hwnd",
		"lvColumn",
		"fmt",
		"index",
		"hwnd",
		"lvColumn",
		"index",
		"hwnd",
		"lvColumn",
		"hHeap",
		"buffer",
		"byteCount",
		"pszText",
		"result",
		"index",
		"hwnd",
		"parent",
		"style",
		"resizable",
		"parent",
		"parent",
		"parent",
		"parent",
		"style",
		"resizable",
		"parent",
		"parent",
		"index",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"moveable",
		"resizable",
		"parent",
		"index",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"parent",
		"index",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"parent",
		"text",
		"OS",
		"hwnd",
		"OS",
		"buffer",
		"Table",
		"image",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"margin",
		"OS",
		"hwndHeader",
		"OS",
		"margin",
		"OS",
		"OS",
		"image",
		"headerWidth",
		"rect",
		"margin",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"index",
		"parent",
		"columnWidth",
		"parent",
		"SWT",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hStateList",
		"OS",
		"hStateList",
		"cx",
		"cy",
		"columnWidth",
		"cx",
		"headerWidth",
		"columnWidth",
		"image",
		"index",
		"parent",
		"fixWidth",
		"rect",
		"OS",
		"hwnd",
		"rect",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"rect",
		"rect",
		"flags",
		"OS",
		"hwnd",
		"OS",
		"index",
		"OS",
		"fixWidth",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"rect",
		"rect",
		"rect",
		"rect",
		"flags",
		"OS",
		"hwnd",
		"OS",
		"index",
		"headerWidth",
		"index",
		"OS",
		"hwnd",
		"OS",
		"index",
		"columnWidth",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"oldWidth",
		"newWidth",
		"SWT",
		"parent",
		"parent",
		"i",
		"order",
		"i",
		"columns",
		"order",
		"i",
		"moved",
		"column",
		"column",
		"SWT",
		"column",
		"moved",
		"parent",
		"parent",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"alignment",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"index",
		"index",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"alignment",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"lvColumn",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"lvColumn",
		"lvColumn",
		"OS",
		"style",
		"SWT",
		"SWT",
		"fmt",
		"OS",
		"style",
		"SWT",
		"SWT",
		"fmt",
		"OS",
		"style",
		"SWT",
		"SWT",
		"fmt",
		"OS",
		"lvColumn",
		"fmt",
		"OS",
		"hwnd",
		"OS",
		"index",
		"lvColumn",
		"image",
		"image",
		"SWT",
		"parent",
		"index",
		"image",
		"parent",
		"lvColumn",
		"OS",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"lvColumn",
		"image",
		"lvColumn",
		"OS",
		"lvColumn",
		"parent",
		"image",
		"lvColumn",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"lvColumn",
		"moveable",
		"parent",
		"resizable",
		"string",
		"SWT",
		"parent",
		"index",
		"string",
		"parent",
		"lvColumn",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"index",
		"lvColumn",
		"OS",
		"parent",
		"string",
		"buffer",
		"TCHAR",
		"OS",
		"hHeap",
		"OS",
		"byteCount",
		"OS",
		"pszText",
		"buffer",
		"byteCount",
		"lvColumn",
		"OS",
		"lvColumn",
		"pszText",
		"OS",
		"hwnd",
		"OS",
		"index",
		"lvColumn",
		"pszText",
		"OS",
		"hHeap",
		"pszText",
		"result",
		"SWT",
		"parent",
		"index",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"index",
		"width",
		"parent",
		"parent",
		"ERROR_NULL_ARGUMENT",
		"Resize",
		"Move",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"LEFT",
		"CENTER",
		"RIGHT",
		"ERROR_INVALID_SUBCLASS",
		"LEFT",
		"LEFT",
		"CENTER",
		"CENTER",
		"RIGHT",
		"RIGHT",
		"LEFT",
		"handle",
		"LVM_GETCOLUMNWIDTH",
		"handle",
		"LVM_GETCOLUMNWIDTH",
		"LVM_GETSTRINGWIDTH",
		"HEADER_MARGIN",
		"COMCTL32_VERSION",
		"LVM_GETHEADER",
		"HDM_GETBITMAPMARGIN",
		"SM_CXEDGE",
		"width",
		"ignoreResize",
		"LVM_SETCOLUMNWIDTH",
		"LVSCW_AUTOSIZE",
		"LVM_GETCOLUMNWIDTH",
		"imageList",
		"style",
		"CHECK",
		"LVM_GETIMAGELIST",
		"LVSIL_STATE",
		"SWP_NOACTIVATE",
		"SWP_NOMOVE",
		"SWP_NOREDRAW",
		"SWP_NOZORDER",
		"bottom",
		"top",
		"LVM_SETCOLUMNWIDTH",
		"LVSCW_AUTOSIZE_USEHEADER",
		"SWP_NOACTIVATE",
		"SWP_NOMOVE",
		"SWP_NOZORDER",
		"right",
		"left",
		"bottom",
		"top",
		"LVM_SETCOLUMNWIDTH",
		"LVM_SETCOLUMNWIDTH",
		"ignoreResize",
		"LVM_GETCOLUMNWIDTH",
		"Resize",
		"length",
		"Move",
		"ERROR_NULL_ARGUMENT",
		"Move",
		"Resize",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"LEFT",
		"RIGHT",
		"CENTER",
		"LEFT",
		"RIGHT",
		"CENTER",
		"LEFT",
		"RIGHT",
		"CENTER",
		"handle",
		"mask",
		"LVCF_FMT",
		"LVCF_IMAGE",
		"LVM_GETCOLUMN",
		"fmt",
		"LVCFMT_JUSTIFYMASK",
		"LEFT",
		"LEFT",
		"LVCFMT_LEFT",
		"CENTER",
		"CENTER",
		"LVCFMT_CENTER",
		"RIGHT",
		"RIGHT",
		"LVCFMT_RIGHT",
		"fmt",
		"LVM_SETCOLUMN",
		"ERROR_INVALID_ARGUMENT",
		"handle",
		"mask",
		"LVCF_FMT",
		"LVCF_IMAGE",
		"LVM_GETCOLUMN",
		"fmt",
		"LVCFMT_IMAGE",
		"iImage",
		"fmt",
		"LVCFMT_IMAGE",
		"LVM_SETCOLUMN",
		"moveable",
		"resizable",
		"ERROR_NULL_ARGUMENT",
		"handle",
		"mask",
		"LVCF_FMT",
		"LVM_GETCOLUMN",
		"sizeof",
		"HEAP_ZERO_MEMORY",
		"mask",
		"LVCF_TEXT",
		"pszText",
		"LVM_SETCOLUMN",
		"ERROR_CANNOT_SET_TEXT",
		"handle",
		"LVM_SETCOLUMNWIDTH",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"listener",
		"listener",
		"style",
		"listener",
		"listener",
		"alignment",
		"image",
		"moveable",
		"resizable",
		"string",
		"width"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.events"
	],
	"methods":[
		"addControlListener",
		"addSelectionListener",
		"checkStyle",
		"checkSubclass",
		"getAlignment",
		"getNameText",
		"getParent",
		"getMoveable",
		"getResizable",
		"getWidth",
		"pack",
		"releaseChild",
		"releaseWidget",
		"removeControlListener",
		"removeSelectionListener",
		"setAlignment",
		"setImage",
		"setMoveable",
		"setResizable",
		"setText",
		"setWidth",
		"checkStyle",
		"createItem",
		"getColumnCount",
		"checkStyle",
		"createItem",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"checkBits",
		"isValidSubclass",
		"error",
		"checkWidget",
		"getText",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"getCodePage",
		"SendMessage",
		"VERSION",
		"SendMessage",
		"SendMessage",
		"GetSystemMetrics",
		"getBounds",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"ImageList_GetIconSize",
		"getColumnCount",
		"GetWindowRect",
		"UpdateWindow",
		"SetWindowPos",
		"SendMessage",
		"SetWindowPos",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"sendEvent",
		"isDisposed",
		"getColumnOrder",
		"getColumns",
		"isDisposed",
		"sendEvent",
		"releaseChild",
		"destroyItem",
		"releaseWidget",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"isDisposed",
		"error",
		"indexOf",
		"setImage",
		"SendMessage",
		"imageIndex",
		"SendMessage",
		"checkWidget",
		"updateMoveable",
		"checkWidget",
		"checkWidget",
		"error",
		"indexOf",
		"setText",
		"SendMessage",
		"GetProcessHeap",
		"getCodePage",
		"fixMnemonic",
		"length",
		"HeapAlloc",
		"MoveMemory",
		"SendMessage",
		"HeapFree",
		"error",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"TypedListener",
		"TypedListener",
		"TCHAR",
		"RECT",
		"LVCOLUMN",
		"LVCOLUMN",
		"LVCOLUMN",
		"TCHAR"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    super.setText(string);\n    \n    int hwnd = parent.handle;\n    LVCOLUMN lvColumn = new LVCOLUMN();\n    lvColumn.mask = OS.LVCF_FMT;\n    OS.SendMessage(hwnd, OS.LVM_GETCOLUMN, index, lvColumn);\n    \n    int hHeap = OS.GetProcessHeap();\n    TCHAR buffer = new TCHAR(parent.getCodePage(), fixMnemonic(string), true);\n    int byteCount = buffer.length() * TCHAR.sizeof;\n    int pszText = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\n    OS.MoveMemory(pszText, buffer, byteCount);\n    lvColumn.mask |= OS.LVCF_TEXT;\n    lvColumn.pszText = pszText;\n    int result = OS.SendMessage(hwnd, OS.LVM_SETCOLUMN, index, lvColumn);\n    if (pszText != 0)\n        OS.HeapFree(hHeap, 0, pszText);\n    if (result == 0)\n        error(SWT.ERROR_CANNOT_SET_TEXT);\n}",
			"comments":"/*\n* Bug in Windows.  For some reason, when the title\n* of a column is changed after the column has been\n* created, the alignment must also be reset or the\n* text does not draw.  The fix is to query and then\n* set the alignment.\n*/\n/*\n* Bug in Windows.  When a column header contains a\n* mnemonic character, Windows does not measure the\n* text properly.  This causes '...' to always appear\n* at the end of the text.  The fix is to remove\n* mnemonic characters and replace doubled mnemonics\n* with spaces.\n*/\n",
			"methodName":"public void setText(String string)"
		},
		"public int getWidth()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return 0;\n    int hwnd = parent.handle;\n    return OS.SendMessage(hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);\n}",
			"comments":"/**\n* Gets the width of the receiver.\n*\n* @return the width\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getWidth()"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed()) {\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    super.setImage(image);\n    int hwnd = parent.handle;\n    LVCOLUMN lvColumn = new LVCOLUMN();\n    lvColumn.mask = OS.LVCF_FMT | OS.LVCF_IMAGE;\n    OS.SendMessage(hwnd, OS.LVM_GETCOLUMN, index, lvColumn);\n    if (image != null) {\n        lvColumn.fmt |= OS.LVCFMT_IMAGE;\n        lvColumn.iImage = parent.imageIndex(image);\n    } else {\n        lvColumn.fmt &= ~OS.LVCFMT_IMAGE;\n    }\n    OS.SendMessage(hwnd, OS.LVM_SETCOLUMN, index, lvColumn);\n}",
			"comments":"",
			"methodName":"public void setImage(Image image)"
		},
		"public void removeControlListener(ControlListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Move, listener);\n    eventTable.unhook(SWT.Resize, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the control is moved or resized.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ControlListener\n* @see #addControlListener\n*/\n",
			"methodName":"public void removeControlListener(ControlListener listener)"
		},
		"public void pack()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    int hwnd = parent.handle;\n    int oldWidth = OS.SendMessage(hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);\n    TCHAR buffer = new TCHAR(parent.getCodePage(), text, true);\n    int headerWidth = OS.SendMessage(hwnd, OS.LVM_GETSTRINGWIDTH, 0, buffer) + Table.HEADER_MARGIN;\n    if (image != null) {\n        int margin = 0;\n        if (OS.COMCTL32_VERSION >= OS.VERSION(5, 80)) {\n            int hwndHeader = OS.SendMessage(hwnd, OS.LVM_GETHEADER, 0, 0);\n            margin = OS.SendMessage(hwndHeader, OS.HDM_GETBITMAPMARGIN, 0, 0);\n        } else {\n            margin = OS.GetSystemMetrics(OS.SM_CXEDGE) * 3;\n        }\n        Rectangle rect = image.getBounds();\n        headerWidth += rect.width + margin * 2;\n    }\n    parent.ignoreResize = true;\n    OS.SendMessage(hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);\n    int columnWidth = OS.SendMessage(hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);\n    if (index == 0) {\n        \n        if (parent.imageList == null)\n            columnWidth += 2;\n        \n        if ((parent.style & SWT.CHECK) != 0) {\n            int hStateList = OS.SendMessage(hwnd, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);\n            if (hStateList != 0) {\n                int[] cx = new int[1], cy = new int[1];\n                OS.ImageList_GetIconSize(hStateList, cx, cy);\n                columnWidth += cx[0];\n            }\n        }\n    }\n    if (headerWidth > columnWidth) {\n        if (image == null) {\n            \n            RECT rect = null;\n            boolean fixWidth = index == parent.getColumnCount() - 1;\n            if (fixWidth) {\n                rect = new RECT();\n                OS.GetWindowRect(hwnd, rect);\n                OS.UpdateWindow(hwnd);\n                int flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOREDRAW | OS.SWP_NOZORDER;\n                SetWindowPos(hwnd, 0, 0, 0, 0, rect.bottom - rect.top, flags);\n            }\n            OS.SendMessage(hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE_USEHEADER);\n            if (fixWidth) {\n                int flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOZORDER;\n                SetWindowPos(hwnd, 0, 0, 0, rect.right - rect.left, rect.bottom - rect.top, flags);\n            }\n        } else {\n            OS.SendMessage(hwnd, OS.LVM_SETCOLUMNWIDTH, index, headerWidth);\n        }\n    } else {\n        if (index == 0) {\n            OS.SendMessage(hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);\n        }\n    }\n    parent.ignoreResize = false;\n    int newWidth = OS.SendMessage(hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);\n    if (oldWidth != newWidth) {\n        sendEvent(SWT.Resize);\n        if (isDisposed())\n            return;\n        boolean moved = false;\n        int[] order = parent.getColumnOrder();\n        TableColumn[] columns = parent.getColumns();\n        for (int i = 0; i < order.length; i++) {\n            TableColumn column = columns[order[i]];\n            if (moved && !column.isDisposed()) {\n                column.sendEvent(SWT.Move);\n            }\n            if (column == this)\n                moved = true;\n        }\n    }\n}",
			"comments":"/**\n* Causes the receiver to be resized to its preferred size.\n* For a composite, this involves computing the preferred size\n* from its layout, if there is one.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n*/\n/*\n* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE\n* where each item has I_IMAGECALLBACK but there are no images in the\n* table, the size computed by LVM_SETCOLUMNWIDTH is too small for the\n* first column, causing long items to be clipped with '...'.  The fix\n* is to increase the column width by a small amount.\n*/\n/*\n* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE\n* for a table with a state image list, the column is width does not\n* include space for the state icon.  The fix is to increase the column\n* width by the width of the image list.\n*/\n/*\n* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used\n* with LVM_SETCOLUMNWIDTH to resize the last column, the last\n* column is expanded to fill the client area.  The fix is to\n* resize the table to be small, set the column width and then\n* restore the table to its original size.\n*/\n",
			"methodName":"public void pack()"
		},
		"public void addControlListener(ControlListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Resize, typedListener);\n    addListener(SWT.Move, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the control is moved or resized, by sending\n* it one of the messages defined in the <code>ControlListener</code>\n* interface.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ControlListener\n* @see #removeControlListener\n*/\n",
			"methodName":"public void addControlListener(ControlListener listener)"
		},
		"public boolean getMoveable()":{
			"methodBody":"{\n    checkWidget();\n    return moveable;\n}",
			"comments":"/**\n* Gets the moveable attribute. A column that is\n* not moveable cannot be reordered by the user\n* by dragging the header but may be reordered\n* by the programmer.\n*\n* @return the moveable attribute\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see Table#getColumnOrder()\n* @see Table#setColumnOrder(int[])\n* @see TableColumn#setMoveable(boolean)\n* @see SWT#Move\n*\n* @since 3.1\n*/\n",
			"methodName":"public boolean getMoveable()"
		},
		"public Table getParent()":{
			"methodBody":"{\n    checkWidget();\n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>Table</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Table getParent()"
		},
		"public void setMoveable(boolean moveable)":{
			"methodBody":"{\n    checkWidget();\n    this.moveable = moveable;\n    parent.updateMoveable();\n}",
			"comments":"/**\n* Sets the moveable attribute.  A column that is\n* moveable can be reordered by the user by dragging\n* the header. A column that is not moveable cannot be\n* dragged by the user but may be reordered\n* by the programmer.\n*\n* @param moveable the moveable attribute\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see Table#setColumnOrder(int[])\n* @see Table#getColumnOrder()\n* @see TableColumn#getMoveable()\n* @see SWT#Move\n*\n* @since 3.1\n*/\n",
			"methodName":"public void setMoveable(boolean moveable)"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    if (!isValidSubclass())\n        error(SWT.ERROR_INVALID_SUBCLASS);\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"String getNameText()":{
			"methodBody":"{\n    return getText();\n}",
			"comments":"",
			"methodName":"String getNameText()"
		},
		"public void setAlignment(int alignment)":{
			"methodBody":"{\n    checkWidget();\n    if ((alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER)) == 0)\n        return;\n    int index = parent.indexOf(this);\n    if (index == -1 || index == 0)\n        return;\n    style &= ~(SWT.LEFT | SWT.RIGHT | SWT.CENTER);\n    style |= alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER);\n    int hwnd = parent.handle;\n    LVCOLUMN lvColumn = new LVCOLUMN();\n    lvColumn.mask = OS.LVCF_FMT | OS.LVCF_IMAGE;\n    OS.SendMessage(hwnd, OS.LVM_GETCOLUMN, index, lvColumn);\n    lvColumn.fmt &= ~OS.LVCFMT_JUSTIFYMASK;\n    int fmt = 0;\n    if ((style & SWT.LEFT) == SWT.LEFT)\n        fmt = OS.LVCFMT_LEFT;\n    if ((style & SWT.CENTER) == SWT.CENTER)\n        fmt = OS.LVCFMT_CENTER;\n    if ((style & SWT.RIGHT) == SWT.RIGHT)\n        fmt = OS.LVCFMT_RIGHT;\n    lvColumn.fmt |= fmt;\n    OS.SendMessage(hwnd, OS.LVM_SETCOLUMN, index, lvColumn);\n}",
			"comments":"/**\n* Controls how text and images will be displayed in the receiver.\n* The argument should be one of <code>LEFT</code>, <code>RIGHT</code>\n* or <code>CENTER</code>.\n*\n* @param alignment the new alignment\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setAlignment(int alignment)"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    parent = null;\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public void setWidth(int width)":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    int hwnd = parent.handle;\n    OS.SendMessage(hwnd, OS.LVM_SETCOLUMNWIDTH, index, width);\n}",
			"comments":"/**\n* Sets the width of the receiver.\n*\n* @param width the new width\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setWidth(int width)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    return checkBits(style, SWT.LEFT, SWT.CENTER, SWT.RIGHT, 0, 0, 0);\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Selection, listener);\n    eventTable.unhook(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the control is selected.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    parent.destroyItem(this);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"public void setResizable(boolean resizable)":{
			"methodBody":"{\n    checkWidget();\n    this.resizable = resizable;\n}",
			"comments":"/**\n* Sets the resizable attribute.  A column that is\n* resizable can be resized by the user dragging the\n* edge of the header.  A column that is not resizable\n* cannot be dragged by the user but may be resized\n* by the programmer.\n*\n* @param resizable the resize attribute\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setResizable(boolean resizable)"
		},
		"public int getAlignment()":{
			"methodBody":"{\n    checkWidget();\n    if ((style & SWT.LEFT) != 0)\n        return SWT.LEFT;\n    if ((style & SWT.CENTER) != 0)\n        return SWT.CENTER;\n    if ((style & SWT.RIGHT) != 0)\n        return SWT.RIGHT;\n    return SWT.LEFT;\n}",
			"comments":"/**\n* Returns a value which describes the position of the\n* text or image in the receiver. The value will be one of\n* <code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>.\n*\n* @return the alignment\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getAlignment()"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the control is selected, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* <code>widgetSelected</code> is called when the column header is selected.\n* <code>widgetDefaultSelected</code> is not called.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"public boolean getResizable()":{
			"methodBody":"{\n    checkWidget();\n    return resizable;\n}",
			"comments":"/**\n* Gets the resizable attribute. A column that is\n* not resizable cannot be dragged by the user but\n* may be resized by the programmer.\n*\n* @return the resizable attribute\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getResizable()"
		}
	},
	"ClassORInterfaceName":[
		"TableColumn"
	]
}
