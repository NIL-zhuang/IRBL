{
	"variables":[
		"maxVFactor",
		"maxHFactor",
		"componentIdentifiers",
		"componentParameters",
		"nf",
		"compSpecParams",
		"hmax",
		"vmax",
		"i",
		"ofs",
		"ci",
		"hi",
		"vi",
		"tqi",
		"compParam",
		"newParams",
		"x",
		"y",
		"multiples",
		"i",
		"compParam",
		"hi",
		"vi",
		"compWidth",
		"compHeight",
		"dsWidth",
		"dsHeight",
		"nf",
		"hmax",
		"vmax",
		"compSpecParams",
		"i",
		"ofs",
		"compParam",
		"hi",
		"vi",
		"x",
		"y",
		"multiples",
		"i",
		"compParam",
		"hi",
		"vi",
		"compWidth",
		"compHeight",
		"dsWidth",
		"dsHeight",
		"a",
		"marker",
		"marker",
		"reference",
		"byteStream",
		"reference",
		"reference",
		"reference",
		"reference",
		"reference",
		"reference",
		"reference",
		"precision",
		"reference",
		"anInteger",
		"reference",
		"anInteger",
		"reference",
		"samples",
		"reference",
		"samples",
		"reference",
		"anInteger",
		"maxHFactor",
		"maxVFactor",
		"maxHFactor",
		"anInteger",
		"maxVFactor",
		"anInteger",
		"componentIdentifiers",
		"nf",
		"i",
		"nf",
		"i",
		"i",
		"reference",
		"ofs",
		"componentIdentifiers",
		"i",
		"ci",
		"reference",
		"ofs",
		"reference",
		"ofs",
		"reference",
		"ofs",
		"hi",
		"hmax",
		"hmax",
		"hi",
		"vi",
		"vmax",
		"vmax",
		"vi",
		"compParam",
		"tqi",
		"compParam",
		"hi",
		"compParam",
		"vi",
		"compSpecParams",
		"ci",
		"ci",
		"System",
		"compSpecParams",
		"newParams",
		"compSpecParams",
		"compSpecParams",
		"newParams",
		"compSpecParams",
		"ci",
		"compParam",
		"i",
		"nf",
		"i",
		"compSpecParams",
		"componentIdentifiers",
		"i",
		"compParam",
		"compParam",
		"x",
		"hi",
		"hmax",
		"hmax",
		"y",
		"vi",
		"vmax",
		"vmax",
		"compWidth",
		"multiples",
		"hi",
		"compHeight",
		"multiples",
		"vi",
		"compParam",
		"dsWidth",
		"compParam",
		"dsHeight",
		"hmax",
		"vmax",
		"componentParameters",
		"compSpecParams",
		"nf",
		"nf",
		"componentParameters",
		"SWT",
		"SWT",
		"componentParameters",
		"i",
		"nf",
		"i",
		"i",
		"compSpecParams",
		"componentIdentifiers",
		"i",
		"compParam",
		"compParam",
		"hi",
		"vi",
		"SWT",
		"SWT",
		"reference",
		"ofs",
		"i",
		"reference",
		"ofs",
		"hi",
		"vi",
		"reference",
		"ofs",
		"compParam",
		"hi",
		"hmax",
		"hmax",
		"hi",
		"vi",
		"vmax",
		"vmax",
		"vi",
		"i",
		"nf",
		"i",
		"compSpecParams",
		"componentIdentifiers",
		"i",
		"compParam",
		"compParam",
		"x",
		"hi",
		"hmax",
		"hmax",
		"y",
		"vi",
		"vmax",
		"vmax",
		"compWidth",
		"multiples",
		"hi",
		"compHeight",
		"multiples",
		"vi",
		"compParam",
		"dsWidth",
		"compParam",
		"dsHeight",
		"hmax",
		"vmax",
		"anInteger",
		"mInteger",
		"a",
		"a",
		"mInteger",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"marker",
		"JPEGFileFormat",
		"JPEGFileFormat",
		"length",
		"length",
		"length",
		"ERROR_INVALID_IMAGE",
		"ERROR_INVALID_IMAGE",
		"SOF0",
		"SOF3",
		"SOF5",
		"SOF7",
		"SOF9",
		"SOF11",
		"SOF13",
		"SOF15",
		"SOF2",
		"SOF6",
		"SOF10",
		"SOF14",
		"SOF9",
		"reference",
		"byteStream",
		"precision",
		"anInteger",
		"samples",
		"anInteger",
		"anInteger",
		"anInteger",
		"anInteger",
		"mInteger"
	],
	"extendORImplementFiles":[
		"JPEGVariableSizeSegment"
	],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[
		"org.eclipse.swt"
	],
	"methods":[
		"getSamplePrecision",
		"getNumberOfLines",
		"getSamplesPerLine",
		"getNumberOfImageComponents",
		"setSamplePrecision",
		"setNumberOfLines",
		"setSamplesPerLine",
		"setNumberOfImageComponents",
		"getMaxHFactor",
		"getMaxVFactor",
		"setMaxHFactor",
		"setMaxVFactor",
		"initializeComponentParameters",
		"initializeContents",
		"roundUpToMultiple",
		"verify",
		"isProgressive",
		"isArithmeticCoding",
		"initializeComponentParameters",
		"getNumberOfImageComponents",
		"arraycopy",
		"getSamplesPerLine",
		"getNumberOfLines",
		"roundUpToMultiple",
		"roundUpToMultiple",
		"setMaxHFactor",
		"setMaxVFactor",
		"getNumberOfImageComponents",
		"error",
		"error",
		"getSamplesPerLine",
		"getNumberOfLines",
		"roundUpToMultiple",
		"roundUpToMultiple",
		"setMaxHFactor",
		"setMaxVFactor",
		"getSegmentMarker",
		"getSegmentMarker",
		"getSegmentMarker"
	],
	"methodsBody":{
		"public int getSamplePrecision()":{
			"methodBody":"{\n    return reference[4] & 0xFF;\n}",
			"comments":"",
			"methodName":"public int getSamplePrecision()"
		},
		"public void setSamplePrecision(int precision)":{
			"methodBody":"{\n    reference[4] = (byte) (precision & 0xFF);\n}",
			"comments":"",
			"methodName":"public void setSamplePrecision(int precision)"
		},
		"int roundUpToMultiple(int anInteger, int mInteger)":{
			"methodBody":"{\n    int a = anInteger + mInteger - 1;\n    return a - (a % mInteger);\n}",
			"comments":"",
			"methodName":"int roundUpToMultiple(int anInteger, int mInteger)"
		},
		"public void setMaxVFactor(int anInteger)":{
			"methodBody":"{\n    maxVFactor = anInteger;\n}",
			"comments":"",
			"methodName":"public void setMaxVFactor(int anInteger)"
		},
		"public int getSamplesPerLine()":{
			"methodBody":"{\n    return (reference[7] & 0xFF) << 8 | (reference[8] & 0xFF);\n}",
			"comments":"",
			"methodName":"public int getSamplesPerLine()"
		},
		"public void setMaxHFactor(int anInteger)":{
			"methodBody":"{\n    maxHFactor = anInteger;\n}",
			"comments":"",
			"methodName":"public void setMaxHFactor(int anInteger)"
		},
		"public int getMaxHFactor()":{
			"methodBody":"{\n    return maxHFactor;\n}",
			"comments":"",
			"methodName":"public int getMaxHFactor()"
		},
		"void initializeComponentParameters()":{
			"methodBody":"{\n    int nf = getNumberOfImageComponents();\n    componentIdentifiers = new int[nf];\n    int[][] compSpecParams = new int[0][];\n    int hmax = 1;\n    int vmax = 1;\n    for (int i = 0; i < nf; i++) {\n        int ofs = i * 3 + 10;\n        int ci = reference[ofs] & 0xFF;\n        componentIdentifiers[i] = ci;\n        int hi = (reference[ofs + 1] & 0xFF) / 16;\n        int vi = (reference[ofs + 1] & 0xFF) % 16;\n        int tqi = reference[ofs + 2] & 0xFF;\n        if (hi > hmax) {\n            hmax = hi;\n        }\n        if (vi > vmax) {\n            vmax = vi;\n        }\n        int[] compParam = new int[5];\n        compParam[0] = tqi;\n        compParam[1] = hi;\n        compParam[2] = vi;\n        if (compSpecParams.length <= ci) {\n            int[][] newParams = new int[ci + 1][];\n            System.arraycopy(compSpecParams, 0, newParams, 0, compSpecParams.length);\n            compSpecParams = newParams;\n        }\n        compSpecParams[ci] = compParam;\n    }\n    int x = getSamplesPerLine();\n    int y = getNumberOfLines();\n    int[] multiples = new int[] { 8, 16, 24, 32 };\n    for (int i = 0; i < nf; i++) {\n        int[] compParam = compSpecParams[componentIdentifiers[i]];\n        int hi = compParam[1];\n        int vi = compParam[2];\n        int compWidth = (x * hi + hmax - 1) / hmax;\n        int compHeight = (y * vi + vmax - 1) / vmax;\n        int dsWidth = roundUpToMultiple(compWidth, multiples[hi - 1]);\n        int dsHeight = roundUpToMultiple(compHeight, multiples[vi - 1]);\n        compParam[3] = dsWidth;\n        compParam[4] = dsHeight;\n    }\n    setMaxHFactor(hmax);\n    setMaxVFactor(vmax);\n    componentParameters = compSpecParams;\n}",
			"comments":"/* Used when decoding. */\n",
			"methodName":"void initializeComponentParameters()"
		},
		"public int getNumberOfLines()":{
			"methodBody":"{\n    return (reference[5] & 0xFF) << 8 | (reference[6] & 0xFF);\n}",
			"comments":"",
			"methodName":"public int getNumberOfLines()"
		},
		"public void setSamplesPerLine(int samples)":{
			"methodBody":"{\n    reference[7] = (byte) ((samples & 0xFF00) >> 8);\n    reference[8] = (byte) (samples & 0xFF);\n}",
			"comments":"",
			"methodName":"public void setSamplesPerLine(int samples)"
		},
		"public void initializeContents()":{
			"methodBody":"{\n    int nf = getNumberOfImageComponents();\n    if (nf == 0 || nf != componentParameters.length) {\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    }\n    int hmax = 0;\n    int vmax = 0;\n    int[][] compSpecParams = componentParameters;\n    for (int i = 0; i < nf; i++) {\n        int ofs = i * 3 + 10;\n        int[] compParam = compSpecParams[componentIdentifiers[i]];\n        int hi = compParam[1];\n        int vi = compParam[2];\n        if (hi * vi > 4) {\n            SWT.error(SWT.ERROR_INVALID_IMAGE);\n        }\n        reference[ofs] = (byte) (i + 1);\n        reference[ofs + 1] = (byte) (hi * 16 + vi);\n        reference[ofs + 2] = (byte) (compParam[0]);\n        if (hi > hmax)\n            hmax = hi;\n        if (vi > vmax)\n            vmax = vi;\n    }\n    int x = getSamplesPerLine();\n    int y = getNumberOfLines();\n    int[] multiples = new int[] { 8, 16, 24, 32 };\n    for (int i = 0; i < nf; i++) {\n        int[] compParam = compSpecParams[componentIdentifiers[i]];\n        int hi = compParam[1];\n        int vi = compParam[2];\n        int compWidth = (x * hi + hmax - 1) / hmax;\n        int compHeight = (y * vi + vmax - 1) / vmax;\n        int dsWidth = roundUpToMultiple(compWidth, multiples[hi - 1]);\n        int dsHeight = roundUpToMultiple(compHeight, multiples[vi - 1]);\n        compParam[3] = dsWidth;\n        compParam[4] = dsHeight;\n    }\n    setMaxHFactor(hmax);\n    setMaxVFactor(vmax);\n}",
			"comments":"/* Used when encoding. */\n",
			"methodName":"public void initializeContents()"
		},
		"public boolean isArithmeticCoding()":{
			"methodBody":"{\n    return getSegmentMarker() >= JPEGFileFormat.SOF9;\n}",
			"comments":"",
			"methodName":"public boolean isArithmeticCoding()"
		},
		"public void setNumberOfImageComponents(int anInteger)":{
			"methodBody":"{\n    reference[9] = (byte) (anInteger & 0xFF);\n}",
			"comments":"",
			"methodName":"public void setNumberOfImageComponents(int anInteger)"
		},
		"public void setNumberOfLines(int anInteger)":{
			"methodBody":"{\n    reference[5] = (byte) ((anInteger & 0xFF00) >> 8);\n    reference[6] = (byte) (anInteger & 0xFF);\n}",
			"comments":"",
			"methodName":"public void setNumberOfLines(int anInteger)"
		},
		"public int getNumberOfImageComponents()":{
			"methodBody":"{\n    return reference[9] & 0xFF;\n}",
			"comments":"",
			"methodName":"public int getNumberOfImageComponents()"
		},
		"public int getMaxVFactor()":{
			"methodBody":"{\n    return maxVFactor;\n}",
			"comments":"",
			"methodName":"public int getMaxVFactor()"
		},
		"public boolean isProgressive()":{
			"methodBody":"{\n    int marker = getSegmentMarker();\n    return marker == JPEGFileFormat.SOF2 || marker == JPEGFileFormat.SOF6 || marker == JPEGFileFormat.SOF10 || marker == JPEGFileFormat.SOF14;\n}",
			"comments":"",
			"methodName":"public boolean isProgressive()"
		},
		"public boolean verify()":{
			"methodBody":"{\n    int marker = getSegmentMarker();\n    return (marker >= JPEGFileFormat.SOF0 && marker <= JPEGFileFormat.SOF3) || (marker >= JPEGFileFormat.SOF5 && marker <= JPEGFileFormat.SOF7) || (marker >= JPEGFileFormat.SOF9 && marker <= JPEGFileFormat.SOF11) || (marker >= JPEGFileFormat.SOF13 && marker <= JPEGFileFormat.SOF15);\n}",
			"comments":"/*\n* Verify the information contained in the receiver is correct.\n* Answer true if the header contains a valid marker. Otherwise,\n* answer false. Valid Start Of Frame markers are:\n*\tSOF_0  - Baseline DCT, Huffman coding\n*\tSOF_1  - Extended sequential DCT, Huffman coding\n*\tSOF_2  - Progressive DCT, Huffman coding\n*\tSOF_3  - Lossless (sequential), Huffman coding\n*\tSOF_5  - Differential sequential, Huffman coding\n*\tSOF_6  - Differential progressive, Huffman coding\n*\tSOF_7  - Differential lossless, Huffman coding\n*\tSOF_9  - Extended sequential DCT, arithmetic coding\n*\tSOF_10 - Progressive DCT, arithmetic coding\n*\tSOF_11 - Lossless (sequential), arithmetic coding\n*\tSOF_13 - Differential sequential, arithmetic coding\n*\tSOF_14 - Differential progressive, arithmetic coding\n*\tSOF_15 - Differential lossless, arithmetic coding\n*/\n",
			"methodName":"public boolean verify()"
		}
	},
	"ClassORInterfaceName":[
		"JPEGFrameHeader"
	]
}
