{
	"variables":[
		"table",
		"items",
		"plusImage",
		"minusImage",
		"sizeImage",
		"inDispose",
		"EMPTY_ITEMS",
		"EMPTY_TEXTS",
		"EMPTY_IMAGES",
		"ITEMID",
		"tableListener",
		"tableEvents",
		"i",
		"listener",
		"events",
		"i",
		"newItems",
		"typedListener",
		"typedListener",
		"mask",
		"event",
		"newItems",
		"selection",
		"result",
		"i",
		"itemHeight",
		"indent",
		"size",
		"midpoint",
		"foreground",
		"plusMinus",
		"background",
		"palette",
		"imageData",
		"gc",
		"i",
		"i",
		"size",
		"event",
		"tableItem",
		"item",
		"count",
		"item",
		"i",
		"item",
		"selection",
		"item",
		"type",
		"trailKey",
		"newSelection",
		"parent",
		"index",
		"event",
		"items",
		"i",
		"rect",
		"item",
		"i",
		"index",
		"newItems",
		"gc",
		"size",
		"length",
		"tableItems",
		"i",
		"tableItem",
		"EMPTY_ITEMS",
		"parent",
		"style",
		"table",
		"style",
		"e",
		"SWT",
		"e",
		"SWT",
		"e",
		"SWT",
		"e",
		"SWT",
		"e",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"tableEvents",
		"i",
		"table",
		"tableEvents",
		"i",
		"tableListener",
		"e",
		"SWT",
		"e",
		"SWT",
		"e",
		"SWT",
		"e",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"events",
		"i",
		"events",
		"i",
		"listener",
		"index",
		"index",
		"items",
		"SWT",
		"SWT",
		"items",
		"System",
		"items",
		"newItems",
		"index",
		"newItems",
		"index",
		"item",
		"System",
		"items",
		"index",
		"newItems",
		"index",
		"items",
		"index",
		"items",
		"newItems",
		"index",
		"items",
		"table",
		"table",
		"items",
		"index",
		"listener",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"listener",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"SWT",
		"SWT",
		"style",
		"style",
		"mask",
		"style",
		"table",
		"wHint",
		"hHint",
		"changed",
		"table",
		"x",
		"y",
		"width",
		"height",
		"table",
		"item",
		"item",
		"item",
		"item",
		"item",
		"item",
		"item",
		"event",
		"item",
		"SWT",
		"event",
		"table",
		"table",
		"table",
		"table",
		"items",
		"table",
		"items",
		"System",
		"items",
		"newItems",
		"items",
		"newItems",
		"table",
		"selection",
		"i",
		"selection",
		"i",
		"result",
		"i",
		"selection",
		"i",
		"ITEMID",
		"result",
		"table",
		"table",
		"table",
		"sizeImage",
		"Math",
		"itemHeight",
		"indent",
		"Math",
		"indent",
		"Math",
		"itemHeight",
		"indent",
		"size",
		"size",
		"indent",
		"size",
		"SWT",
		"foreground",
		"background",
		"plusMinus",
		"itemHeight",
		"itemHeight",
		"palette",
		"imageData",
		"plusImage",
		"imageData",
		"plusImage",
		"gc",
		"background",
		"gc",
		"itemHeight",
		"itemHeight",
		"gc",
		"plusMinus",
		"gc",
		"indent",
		"indent",
		"size",
		"size",
		"gc",
		"foreground",
		"gc",
		"midpoint",
		"indent",
		"midpoint",
		"indent",
		"size",
		"gc",
		"indent",
		"midpoint",
		"indent",
		"size",
		"midpoint",
		"gc",
		"palette",
		"foreground",
		"background",
		"plusMinus",
		"imageData",
		"itemHeight",
		"itemHeight",
		"palette",
		"imageData",
		"minusImage",
		"imageData",
		"gc",
		"minusImage",
		"gc",
		"background",
		"gc",
		"itemHeight",
		"itemHeight",
		"gc",
		"plusMinus",
		"gc",
		"indent",
		"indent",
		"size",
		"size",
		"gc",
		"foreground",
		"gc",
		"indent",
		"midpoint",
		"indent",
		"size",
		"midpoint",
		"gc",
		"plusImage",
		"plusImage",
		"minusImage",
		"minusImage",
		"i",
		"items",
		"i",
		"item",
		"items",
		"i",
		"i",
		"inDispose",
		"i",
		"items",
		"i",
		"items",
		"i",
		"inDispose",
		"plusImage",
		"plusImage",
		"minusImage",
		"minusImage",
		"sizeImage",
		"sizeImage",
		"plusImage",
		"minusImage",
		"sizeImage",
		"table",
		"size",
		"size",
		"e",
		"tableItem",
		"event",
		"item",
		"e",
		"SWT",
		"e",
		"SWT",
		"item",
		"event",
		"SWT",
		"item",
		"tableItem",
		"e",
		"event",
		"items",
		"index",
		"index",
		"count",
		"SWT",
		"SWT",
		"items",
		"index",
		"table",
		"point",
		"item",
		"item",
		"tableItem",
		"i",
		"items",
		"i",
		"items",
		"i",
		"tableItem",
		"item",
		"item",
		"table",
		"selection",
		"selection",
		"e",
		"SWT",
		"e",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"e",
		"trailKey",
		"item",
		"item",
		"item",
		"table",
		"newSelection",
		"newSelection",
		"type",
		"SWT",
		"item",
		"type",
		"SWT",
		"item",
		"item",
		"type",
		"SWT",
		"item",
		"parent",
		"parent",
		"item",
		"index",
		"table",
		"parent",
		"type",
		"SWT",
		"e",
		"item",
		"e",
		"item",
		"item",
		"type",
		"SWT",
		"e",
		"item",
		"item",
		"item",
		"type",
		"SWT",
		"type",
		"event",
		"item",
		"type",
		"event",
		"table",
		"i",
		"items",
		"i",
		"items",
		"i",
		"rect",
		"event",
		"event",
		"items",
		"i",
		"ITEMID",
		"event",
		"event",
		"item",
		"item",
		"item",
		"item",
		"SWT",
		"event",
		"SWT",
		"event",
		"items",
		"i",
		"i",
		"items",
		"i",
		"items",
		"EMPTY_ITEMS",
		"index",
		"items",
		"items",
		"index",
		"item",
		"index",
		"index",
		"items",
		"items",
		"System",
		"items",
		"newItems",
		"index",
		"System",
		"items",
		"index",
		"newItems",
		"index",
		"items",
		"index",
		"items",
		"newItems",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"listener",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"listener",
		"table",
		"color",
		"table",
		"color",
		"sizeImage",
		"sizeImage",
		"gc",
		"sizeImage",
		"gc",
		"size",
		"gc",
		"enabled",
		"table",
		"enabled",
		"font",
		"table",
		"font",
		"color",
		"table",
		"color",
		"menu",
		"table",
		"menu",
		"items",
		"SWT",
		"SWT",
		"items",
		"length",
		"table",
		"SWT",
		"length",
		"length",
		"i",
		"length",
		"i",
		"items",
		"i",
		"SWT",
		"SWT",
		"items",
		"i",
		"items",
		"i",
		"tableItems",
		"i",
		"items",
		"i",
		"table",
		"tableItems",
		"string",
		"table",
		"string",
		"item",
		"SWT",
		"SWT",
		"item",
		"item",
		"item",
		"table",
		"tableItem",
		"table",
		"type",
		"MouseDown",
		"Selection",
		"DefaultSelection",
		"KeyDown",
		"MouseDown",
		"Selection",
		"DefaultSelection",
		"KeyDown",
		"length",
		"type",
		"Dispose",
		"Resize",
		"FocusIn",
		"Dispose",
		"Resize",
		"FocusIn",
		"length",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"length",
		"length",
		"length",
		"tableItem",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"ERROR_NULL_ARGUMENT",
		"Expand",
		"Collapse",
		"LEFT_TO_RIGHT",
		"RIGHT_TO_LEFT",
		"parentItem",
		"expanded",
		"length",
		"items",
		"item",
		"Expand",
		"length",
		"length",
		"length",
		"length",
		"length",
		"height",
		"COLOR_WIDGET_NORMAL_SHADOW",
		"transparentPixel",
		"transparentPixel",
		"length",
		"length",
		"x",
		"y",
		"item",
		"item",
		"type",
		"Selection",
		"detail",
		"CHECK",
		"detail",
		"CHECK",
		"checked",
		"type",
		"length",
		"ERROR_INVALID_RANGE",
		"length",
		"length",
		"keyCode",
		"ARROW_RIGHT",
		"keyCode",
		"ARROW_LEFT",
		"MIRRORED",
		"ARROW_LEFT",
		"ARROW_RIGHT",
		"keyCode",
		"tableItem",
		"Selection",
		"Expand",
		"Collapse",
		"tableItem",
		"Selection",
		"character",
		"character",
		"Collapse",
		"character",
		"Expand",
		"item",
		"length",
		"x",
		"y",
		"item",
		"Expand",
		"Collapse",
		"length",
		"length",
		"length",
		"length",
		"length",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"ERROR_NULL_ARGUMENT",
		"Expand",
		"Collapse",
		"ERROR_NULL_ARGUMENT",
		"length",
		"SINGLE",
		"ERROR_NULL_ARGUMENT",
		"tableItem",
		"ERROR_NULL_ARGUMENT",
		"tableItem",
		"parent",
		"style",
		"e",
		"e",
		"item",
		"index",
		"listener",
		"listener",
		"style",
		"wHint",
		"hHint",
		"changed",
		"x",
		"y",
		"width",
		"height",
		"item",
		"item",
		"e",
		"e",
		"e",
		"index",
		"point",
		"tableItem",
		"e",
		"e",
		"event",
		"item",
		"listener",
		"listener",
		"color",
		"enabled",
		"font",
		"color",
		"menu",
		"items",
		"string",
		"item"
	],
	"extendORImplementFiles":[
		"Composite"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.events",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"handleEvent",
		"handleEvent",
		"addItem",
		"addSelectionListener",
		"addTreeListener",
		"checkStyle",
		"computeSize",
		"computeTrim",
		"deselectAll",
		"expandItem",
		"getBackground",
		"getClientArea",
		"getForeground",
		"getFont",
		"getItemCount",
		"getItemHeight",
		"getItems",
		"getSelection",
		"getSelectionCount",
		"getStyle",
		"getTable",
		"createImages",
		"getPlusImage",
		"getMinusImage",
		"indexOf",
		"onDispose",
		"onResize",
		"onSelection",
		"getItem",
		"getItem",
		"getItem",
		"onFocusIn",
		"onKeyDown",
		"onMouseDown",
		"removeAll",
		"removeItem",
		"removeSelectionListener",
		"removeTreeListener",
		"selectAll",
		"setBackground",
		"setEnabled",
		"setFont",
		"setForeground",
		"setMenu",
		"setSelection",
		"setToolTipText",
		"showItem",
		"showSelection",
		"checkStyle",
		"onMouseDown",
		"onSelection",
		"onSelection",
		"onKeyDown",
		"addListener",
		"onDispose",
		"onResize",
		"onFocusIn",
		"addListener",
		"error",
		"arraycopy",
		"arraycopy",
		"getItemCount",
		"indexOf",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"checkWidget",
		"computeSize",
		"checkWidget",
		"computeTrim",
		"checkWidget",
		"deselectAll",
		"expandItem",
		"getVisible",
		"setVisible",
		"setExpanded",
		"notifyListeners",
		"getBackground",
		"getClientArea",
		"getForeground",
		"getFont",
		"checkWidget",
		"getItemHeight",
		"arraycopy",
		"checkWidget",
		"getSelection",
		"getData",
		"checkWidget",
		"getSelectionCount",
		"checkWidget",
		"getStyle",
		"getBounds",
		"min",
		"max",
		"max",
		"getForeground",
		"getSystemColor",
		"getDisplay",
		"getBackground",
		"getRGB",
		"getRGB",
		"getRGB",
		"getDisplay",
		"setBackground",
		"fillRectangle",
		"setForeground",
		"drawRectangle",
		"setForeground",
		"drawLine",
		"drawLine",
		"dispose",
		"getRGB",
		"getRGB",
		"getRGB",
		"getDisplay",
		"setBackground",
		"fillRectangle",
		"setForeground",
		"drawRectangle",
		"setForeground",
		"drawLine",
		"dispose",
		"createImages",
		"createImages",
		"dispose",
		"dispose",
		"dispose",
		"dispose",
		"getSize",
		"setBounds",
		"getItem",
		"getChecked",
		"notifyListeners",
		"checkWidget",
		"error",
		"checkWidget",
		"getItem",
		"getItem",
		"getItem",
		"setFocus",
		"getSelection",
		"getStyle",
		"getItemCount",
		"getExpanded",
		"getItems",
		"setSelection",
		"showItem",
		"setExpanded",
		"getExpanded",
		"setExpanded",
		"getParentItem",
		"indexOf",
		"setSelection",
		"expandAll",
		"getExpanded",
		"setExpanded",
		"getItemCount",
		"getExpanded",
		"setExpanded",
		"notifyListeners",
		"getItems",
		"getImageBounds",
		"contains",
		"getData",
		"setExpanded",
		"getExpanded",
		"getExpanded",
		"notifyListeners",
		"notifyListeners",
		"checkWidget",
		"setRedraw",
		"dispose",
		"setRedraw",
		"arraycopy",
		"arraycopy",
		"checkWidget",
		"error",
		"removeListener",
		"removeListener",
		"checkWidget",
		"error",
		"removeListener",
		"removeListener",
		"checkWidget",
		"selectAll",
		"setBackground",
		"setBackground",
		"setBackground",
		"getBackground",
		"getBounds",
		"fillRectangle",
		"dispose",
		"setEnabled",
		"setEnabled",
		"setFont",
		"setFont",
		"setForeground",
		"setForeground",
		"setMenu",
		"setMenu",
		"checkWidget",
		"error",
		"getStyle",
		"deselectAll",
		"error",
		"getVisible",
		"expandItem",
		"setSelection",
		"setToolTipText",
		"setToolTipText",
		"checkWidget",
		"error",
		"getVisible",
		"expandItem",
		"showItem",
		"checkWidget",
		"showSelection",
		"Table",
		"Listener",
		"Listener",
		"TypedListener",
		"TypedListener",
		"Event",
		"PaletteData",
		"ImageData",
		"Image",
		"GC",
		"PaletteData",
		"ImageData",
		"Image",
		"GC",
		"Event",
		"Event",
		"Event",
		"GC"
	],
	"methodsBody":{
		"private static int checkStyle(int style)":{
			"methodBody":"{\n    int mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;\n    style = style & mask;\n    return style;\n}",
			"comments":"",
			"methodName":"private static int checkStyle(int style)"
		},
		"void onMouseDown(Event event)":{
			"methodBody":"{\n    \n    TableItem[] items = table.getItems();\n    for (int i = 0; i < items.length; i++) {\n        Rectangle rect = items[i].getImageBounds(0);\n        if (rect.contains(event.x, event.y)) {\n            TableTreeItem item = (TableTreeItem) items[i].getData(ITEMID);\n            event = new Event();\n            event.item = item;\n            item.setExpanded(!item.getExpanded());\n            if (item.getExpanded()) {\n                notifyListeners(SWT.Expand, event);\n            } else {\n                notifyListeners(SWT.Collapse, event);\n            }\n            return;\n        }\n    }\n}",
			"comments":"/* If user clicked on the [+] or [-], expand or collapse the tree. */\n",
			"methodName":"void onMouseDown(Event event)"
		},
		"public void selectAll()":{
			"methodBody":"{\n    checkWidget();\n    table.selectAll();\n}",
			"comments":"/**\n* Selects all of the items in the receiver.\n* <p>\n* If the receiver is single-select, do nothing.\n*\n* @exception SWTException <ul>\n*\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread\n*\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed\n* </ul>\n*/\n",
			"methodName":"public void selectAll()"
		},
		"public void showSelection()":{
			"methodBody":"{\n    checkWidget();\n    table.showSelection();\n}",
			"comments":"/**\n* Shows the selection.\n* <p>\n* If there is no selection or the selection\n* is already visible, this method does nothing.\n* If the selection is scrolled out of view,\n* the top index of the widget is changed such\n* that selection becomes visible.\n*\n* @exception SWTException <ul>\n*\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread\n*\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed\n* </ul>\n*/\n",
			"methodName":"public void showSelection()"
		},
		"public int getItemHeight()":{
			"methodBody":"{\n    checkWidget();\n    return table.getItemHeight();\n}",
			"comments":"/**\n* Gets the height of one item.\n* <p>\n* This operation will fail if the height of\n* one item could not be queried from the OS.\n*\n* @return the height of one item in the widget\n*\n* @exception SWTException <ul>\n*\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread\n*\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed\n* </ul>\n*/\n",
			"methodName":"public int getItemHeight()"
		},
		"public void deselectAll()":{
			"methodBody":"{\n    checkWidget();\n    table.deselectAll();\n}",
			"comments":"/**\n* Deselects all items.\n* <p>\n* If an item is selected, it is deselected.\n* If an item is not selected, it remains unselected.\n*\n* @exception SWTException <ul>\n*\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread\n*\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed\n* </ul>\n*/\n",
			"methodName":"public void deselectAll()"
		},
		"Image getMinusImage()":{
			"methodBody":"{\n    if (minusImage == null)\n        createImages();\n    return minusImage;\n}",
			"comments":"",
			"methodName":"Image getMinusImage()"
		},
		"public TableTreeItem getItem(int index)":{
			"methodBody":"{\n    checkWidget();\n    int count = items.length;\n    if (!(0 <= index && index < count))\n        SWT.error(SWT.ERROR_INVALID_RANGE);\n    return items[index];\n}",
			"comments":"/**\n* Returns the item at the given, zero-relative index in the\n* receiver. Throws an exception if the index is out of range.\n*\n* @param index the index of the item to return\n* @return the item at the given index\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public TableTreeItem getItem(int index)"
		},
		"public void removeTreeListener(TreeListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    removeListener(SWT.Expand, listener);\n    removeListener(SWT.Collapse, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when items in the receiver are expanded or collapsed..\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see TreeListener\n* @see #addTreeListener\n*/\n",
			"methodName":"public void removeTreeListener(TreeListener listener)"
		},
		"int addItem(TableTreeItem item, int index)":{
			"methodBody":"{\n    if (index < 0 || index > items.length)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    TableTreeItem[] newItems = new TableTreeItem[items.length + 1];\n    System.arraycopy(items, 0, newItems, 0, index);\n    newItems[index] = item;\n    System.arraycopy(items, index, newItems, index + 1, items.length - index);\n    items = newItems;\n    \n    if (index == items.length - 1)\n        return table.getItemCount();\n    else\n        return table.indexOf(items[index + 1].tableItem);\n}",
			"comments":"/* Return the index in the table where this table should be inserted */\n",
			"methodName":"int addItem(TableTreeItem item, int index)"
		},
		"public Color getBackground()":{
			"methodBody":"{\n    \n    return table.getBackground();\n}",
			"comments":"// This method must be overriden otherwise, in a TableTree in which the first\n// item has no sub items, a grey (Widget background colour) square will appear in\n// the first column of the first item.\n// It is not possible in the constructor to set the background of the TableTree\n// to be the same as the background of the Table because this interferes with\n// the TableTree adapting to changes in the System color settings.\n",
			"methodName":"public Color getBackground()"
		},
		"public Rectangle getClientArea()":{
			"methodBody":"{\n    return table.getClientArea();\n}",
			"comments":"",
			"methodName":"public Rectangle getClientArea()"
		},
		"public Rectangle computeTrim(int x, int y, int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    return table.computeTrim(x, y, width, height);\n}",
			"comments":"",
			"methodName":"public Rectangle computeTrim(int x, int y, int width, int height)"
		},
		"public TableTreeItem getItem(Point point)":{
			"methodBody":"{\n    checkWidget();\n    TableItem item = table.getItem(point);\n    if (item == null)\n        return null;\n    return getItem(item);\n}",
			"comments":"/**\n* Returns the item at the given point in the receiver\n* or null if no such item exists. The point is in the\n* coordinate system of the receiver.\n*\n* @param point the point used to locate the item\n* @return the item at the given point\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the point is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public TableTreeItem getItem(Point point)"
		},
		"public void setEnabled(boolean enabled)":{
			"methodBody":"{\n    super.setEnabled(enabled);\n    table.setEnabled(enabled);\n}",
			"comments":"",
			"methodName":"public void setEnabled(boolean enabled)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    super.setForeground(color);\n    table.setForeground(color);\n}",
			"comments":"",
			"methodName":"public void setForeground(Color color)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    removeListener(SWT.Selection, listener);\n    removeListener(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the receiver's selection changes.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"public TableTreeItem[] getItems()":{
			"methodBody":"{\n    \n    TableTreeItem[] newItems = new TableTreeItem[items.length];\n    System.arraycopy(items, 0, newItems, 0, items.length);\n    return newItems;\n}",
			"comments":"/**\n* Gets the items.\n* <p>\n* @return the items in the widget\n*/\n//checkWidget();\n",
			"methodName":"public TableTreeItem[] getItems()"
		},
		"TableTreeItem getItem(TableItem tableItem)":{
			"methodBody":"{\n    if (tableItem == null)\n        return null;\n    for (int i = 0; i < items.length; i++) {\n        TableTreeItem item = items[i].getItem(tableItem);\n        if (item != null)\n            return item;\n    }\n    return null;\n}",
			"comments":"",
			"methodName":"TableTreeItem getItem(TableItem tableItem)"
		},
		"public void setMenu(Menu menu)":{
			"methodBody":"{\n    super.setMenu(menu);\n    table.setMenu(menu);\n}",
			"comments":"",
			"methodName":"public void setMenu(Menu menu)"
		},
		"void onDispose(Event e)":{
			"methodBody":"{\n    \n    inDispose = true;\n    for (int i = 0; i < items.length; i++) {\n        items[i].dispose();\n    }\n    inDispose = false;\n    if (plusImage != null)\n        plusImage.dispose();\n    if (minusImage != null)\n        minusImage.dispose();\n    if (sizeImage != null)\n        sizeImage.dispose();\n    plusImage = minusImage = sizeImage = null;\n}",
			"comments":"/*\n* Usually when an item is disposed, destroyItem will change the size of the items array\n* and dispose of the underlying table items.\n* Since the whole table tree is being disposed, this is not necessary.  For speed\n* the inDispose flag is used to skip over this part of the item dispose.\n*/\n",
			"methodName":"void onDispose(Event e)"
		},
		"public Point computeSize(int wHint, int hHint, boolean changed)":{
			"methodBody":"{\n    checkWidget();\n    return table.computeSize(wHint, hHint, changed);\n}",
			"comments":"",
			"methodName":"public Point computeSize(int wHint, int hHint, boolean changed)"
		},
		"public Font getFont()":{
			"methodBody":"{\n    return table.getFont();\n}",
			"comments":"",
			"methodName":"public Font getFont()"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    super.setBackground(color);\n    table.setBackground(color);\n    if (sizeImage != null) {\n        GC gc = new GC(sizeImage);\n        gc.setBackground(getBackground());\n        Rectangle size = sizeImage.getBounds();\n        gc.fillRectangle(size);\n        gc.dispose();\n    }\n}",
			"comments":"",
			"methodName":"public void setBackground(Color color)"
		},
		"void onResize(Event e)":{
			"methodBody":"{\n    Point size = getSize();\n    table.setBounds(0, 0, size.x, size.y);\n}",
			"comments":"",
			"methodName":"void onResize(Event e)"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    switch(e.type) {\n        case SWT.Dispose:\n            onDispose(e);\n            break;\n        case SWT.Resize:\n            onResize(e);\n            break;\n        case SWT.FocusIn:\n            onFocusIn(e);\n            break;\n    }\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"public Table getTable()":{
			"methodBody":"{\n    \n    return table;\n}",
			"comments":"/**\n* Returns the underlying Table control.\n*\n* @return the underlying Table control\n*/\n//checkWidget();\n",
			"methodName":"public Table getTable()"
		},
		"public TableTreeItem[] getSelection()":{
			"methodBody":"{\n    checkWidget();\n    TableItem[] selection = table.getSelection();\n    TableTreeItem[] result = new TableTreeItem[selection.length];\n    for (int i = 0; i < selection.length; i++) {\n        result[i] = (TableTreeItem) selection[i].getData(ITEMID);\n    }\n    return result;\n}",
			"comments":"/**\n* Gets the selected items.\n* <p>\n* This operation will fail if the selected\n* items cannot be queried from the OS.\n*\n* @return the selected items in the widget\n*\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"public TableTreeItem[] getSelection()"
		},
		"public void setSelection(TableTreeItem[] items)":{
			"methodBody":"{\n    checkWidget();\n    if (items == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    int length = items.length;\n    if (length == 0 || ((table.getStyle() & SWT.SINGLE) != 0 && length > 1)) {\n        deselectAll();\n        return;\n    }\n    TableItem[] tableItems = new TableItem[length];\n    for (int i = 0; i < length; i++) {\n        if (items[i] == null)\n            SWT.error(SWT.ERROR_NULL_ARGUMENT);\n        if (!items[i].getVisible())\n            expandItem(items[i]);\n        tableItems[i] = items[i].tableItem;\n    }\n    table.setSelection(tableItems);\n}",
			"comments":"/**\n* Sets the receiver's selection to be the given array of items.\n* The current selection is cleared before the new items are selected.\n* <p>\n* Items that are not in the receiver are ignored.\n* If the receiver is single-select and multiple items are specified,\n* then all items are ignored.\n*\n* @param items the array of items\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the array of items is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if one of the item has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see TableTree#deselectAll()\n*/\n",
			"methodName":"public void setSelection(TableTreeItem[] items)"
		},
		"public int getStyle()":{
			"methodBody":"{\n    checkWidget();\n    return table.getStyle();\n}",
			"comments":"",
			"methodName":"public int getStyle()"
		},
		"public void showItem(TableTreeItem item)":{
			"methodBody":"{\n    checkWidget();\n    if (item == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (!item.getVisible())\n        expandItem(item);\n    TableItem tableItem = item.tableItem;\n    table.showItem(tableItem);\n}",
			"comments":"/**\n* Shows the item.  If the item is already showing in the receiver,\n* this method simply returns.  Otherwise, the items are scrolled\n* and expanded until the item is visible.\n*\n* @param item the item to be shown\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the item is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the item has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see TableTree#showSelection()\n*/\n",
			"methodName":"public void showItem(TableTreeItem item)"
		},
		"public int indexOf(TableTreeItem item)":{
			"methodBody":"{\n    \n    for (int i = 0; i < items.length; i++) {\n        if (item == items[i])\n            return i;\n    }\n    return -1;\n}",
			"comments":"/**\n* Gets the index of an item.\n*\n* <p>The widget is searched starting at 0 until an\n* item is found that is equal to the search item.\n* If no item is found, -1 is returned.  Indexing\n* is zero based.  This index is relative to the parent only.\n*\n* @param item the search item\n* @return the index of the item or -1\n*/\n//checkWidget();\n",
			"methodName":"public int indexOf(TableTreeItem item)"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    super.setFont(font);\n    table.setFont(font);\n}",
			"comments":"",
			"methodName":"public void setFont(Font font)"
		},
		"void onFocusIn(Event e)":{
			"methodBody":"{\n    table.setFocus();\n}",
			"comments":"",
			"methodName":"void onFocusIn(Event e)"
		},
		"void onKeyDown(Event e)":{
			"methodBody":"{\n    TableTreeItem[] selection = getSelection();\n    if (selection.length == 0)\n        return;\n    TableTreeItem item = selection[0];\n    int type = 0;\n    if (e.keyCode == SWT.ARROW_RIGHT || e.keyCode == SWT.ARROW_LEFT) {\n        int trailKey = (getStyle() & SWT.MIRRORED) != 0 ? SWT.ARROW_LEFT : SWT.ARROW_RIGHT;\n        if (e.keyCode == trailKey) {\n            if (item.getItemCount() == 0)\n                return;\n            if (item.getExpanded()) {\n                TableTreeItem newSelection = item.getItems()[0];\n                table.setSelection(new TableItem[] { newSelection.tableItem });\n                showItem(newSelection);\n                type = SWT.Selection;\n            } else {\n                item.setExpanded(true);\n                type = SWT.Expand;\n            }\n        } else {\n            if (item.getExpanded()) {\n                item.setExpanded(false);\n                type = SWT.Collapse;\n            } else {\n                TableTreeItem parent = item.getParentItem();\n                if (parent != null) {\n                    int index = parent.indexOf(item);\n                    if (index != 0)\n                        return;\n                    table.setSelection(new TableItem[] { parent.tableItem });\n                    type = SWT.Selection;\n                }\n            }\n        }\n    }\n    if (e.character == '*') {\n        item.expandAll(true);\n    }\n    if (e.character == '-') {\n        if (item.getExpanded()) {\n            item.setExpanded(false);\n            type = SWT.Collapse;\n        }\n    }\n    if (e.character == '+') {\n        if (item.getItemCount() > 0 && !item.getExpanded()) {\n            item.setExpanded(true);\n            type = SWT.Expand;\n        }\n    }\n    if (type == 0)\n        return;\n    Event event = new Event();\n    event.item = item;\n    notifyListeners(type, event);\n}",
			"comments":"",
			"methodName":"void onKeyDown(Event e)"
		},
		"public void addTreeListener(TreeListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Expand, typedListener);\n    addListener(SWT.Collapse, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when an item in the receiver is expanded or collapsed\n* by sending it one of the messages defined in the <code>TreeListener</code>\n* interface.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see TreeListener\n* @see #removeTreeListener\n*/\n",
			"methodName":"public void addTreeListener(TreeListener listener)"
		},
		"public int getSelectionCount()":{
			"methodBody":"{\n    checkWidget();\n    return table.getSelectionCount();\n}",
			"comments":"/**\n* Gets the number of selected items.\n* <p>\n* This operation will fail if the number of selected\n* items cannot be queried from the OS.\n*\n* @return the number of selected items in the widget\n*\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"public int getSelectionCount()"
		},
		"Image getPlusImage()":{
			"methodBody":"{\n    if (plusImage == null)\n        createImages();\n    return plusImage;\n}",
			"comments":"",
			"methodName":"Image getPlusImage()"
		},
		"public void removeAll()":{
			"methodBody":"{\n    checkWidget();\n    setRedraw(false);\n    for (int i = items.length - 1; i >= 0; i--) {\n        items[i].dispose();\n    }\n    items = EMPTY_ITEMS;\n    setRedraw(true);\n}",
			"comments":"/**\n* Removes all items.\n* <p>\n* This operation will fail when an item\n* could not be removed in the OS.\n*\n* @exception SWTException <ul>\n*\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread\n* \t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed\n* </ul>\n*/\n",
			"methodName":"public void removeAll()"
		},
		"void onSelection(Event e)":{
			"methodBody":"{\n    Event event = new Event();\n    TableItem tableItem = (TableItem) e.item;\n    TableTreeItem item = getItem(tableItem);\n    event.item = item;\n    if (e.type == SWT.Selection && e.detail == SWT.CHECK && item != null) {\n        event.detail = SWT.CHECK;\n        item.checked = tableItem.getChecked();\n    }\n    notifyListeners(e.type, event);\n}",
			"comments":"",
			"methodName":"void onSelection(Event e)"
		},
		"void removeItem(TableTreeItem item)":{
			"methodBody":"{\n    int index = 0;\n    while (index < items.length && items[index] != item) index++;\n    if (index == items.length)\n        return;\n    TableTreeItem[] newItems = new TableTreeItem[items.length - 1];\n    System.arraycopy(items, 0, newItems, 0, index);\n    System.arraycopy(items, index + 1, newItems, index, items.length - index - 1);\n    items = newItems;\n}",
			"comments":"",
			"methodName":"void removeItem(TableTreeItem item)"
		},
		"void expandItem(TableTreeItem item)":{
			"methodBody":"{\n    if (item == null)\n        return;\n    expandItem(item.parentItem);\n    if (!item.getVisible())\n        item.setVisible(true);\n    if (!item.expanded && item.items.length > 0) {\n        item.setExpanded(true);\n        Event event = new Event();\n        event.item = item;\n        notifyListeners(SWT.Expand, event);\n    }\n}",
			"comments":"/* Expand upward from the specified leaf item. */\n",
			"methodName":"void expandItem(TableTreeItem item)"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the receiver's selection changes, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* When <code>widgetSelected</code> is called, the item field of the event object is valid.\n* If the reciever has <code>SWT.CHECK</code> style set and the check selection changes,\n* the event object detail field contains the value <code>SWT.CHECK</code>.\n* <code>widgetDefaultSelected</code> is typically called when an item is double-clicked.\n* The item field of the event object is valid for default selection, but the detail field is not used.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"public Color getForeground()":{
			"methodBody":"{\n    return table.getForeground();\n}",
			"comments":"",
			"methodName":"public Color getForeground()"
		},
		"public int getItemCount()":{
			"methodBody":"{\n    \n    return items.length;\n}",
			"comments":"/**\n* Gets the number of items.\n* <p>\n* @return the number of items in the widget\n*/\n//checkWidget();\n",
			"methodName":"public int getItemCount()"
		},
		"void createImages()":{
			"methodBody":"{\n    int itemHeight = sizeImage.getBounds().height;\n    \n    \n    \n    int indent = Math.min(6, (itemHeight - 9) / 2);\n    indent = Math.max(0, indent);\n    int size = Math.max(10, itemHeight - 2 * indent);\n    \n    size = ((size + 1) / 2) * 2;\n    int midpoint = indent + size / 2;\n    Color foreground = getForeground();\n    Color plusMinus = getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\n    Color background = getBackground();\n    \n    PaletteData palette = new PaletteData(new RGB[] { foreground.getRGB(), background.getRGB(), plusMinus.getRGB() });\n    ImageData imageData = new ImageData(itemHeight, itemHeight, 4, palette);\n    imageData.transparentPixel = 1;\n    plusImage = new Image(getDisplay(), imageData);\n    GC gc = new GC(plusImage);\n    gc.setBackground(background);\n    gc.fillRectangle(0, 0, itemHeight, itemHeight);\n    gc.setForeground(plusMinus);\n    gc.drawRectangle(indent, indent, size, size);\n    gc.setForeground(foreground);\n    gc.drawLine(midpoint, indent + 2, midpoint, indent + size - 2);\n    gc.drawLine(indent + 2, midpoint, indent + size - 2, midpoint);\n    gc.dispose();\n    \n    palette = new PaletteData(new RGB[] { foreground.getRGB(), background.getRGB(), plusMinus.getRGB() });\n    imageData = new ImageData(itemHeight, itemHeight, 4, palette);\n    imageData.transparentPixel = 1;\n    minusImage = new Image(getDisplay(), imageData);\n    gc = new GC(minusImage);\n    gc.setBackground(background);\n    gc.fillRectangle(0, 0, itemHeight, itemHeight);\n    gc.setForeground(plusMinus);\n    gc.drawRectangle(indent, indent, size, size);\n    gc.setForeground(foreground);\n    gc.drawLine(indent + 2, midpoint, indent + size - 2, midpoint);\n    gc.dispose();\n}",
			"comments":"// Calculate border around image.\n// At least 9 pixels are needed to draw the image\n// Leave at least a 6 pixel border.\n// size must be an even number\n/* Plus image */\n/* Minus image */\n",
			"methodName":"void createImages()"
		},
		"public void setToolTipText(String string)":{
			"methodBody":"{\n    super.setToolTipText(string);\n    table.setToolTipText(string);\n}",
			"comments":"",
			"methodName":"public void setToolTipText(String string)"
		}
	},
	"ClassORInterfaceName":[
		"TableTree"
	]
}
