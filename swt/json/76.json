{
	"variables":[
		"table",
		"item",
		"column",
		"columnListener",
		"cell",
		"rect",
		"area",
		"editorRect",
		"tableColumn",
		"columnCount",
		"tableColumn",
		"tableColumn",
		"columnCount",
		"table",
		"table",
		"columnListener",
		"grabVertical",
		"item",
		"column",
		"item",
		"item",
		"column",
		"item",
		"column",
		"cell",
		"rect",
		"rect",
		"cell",
		"rect",
		"table",
		"cell",
		"area",
		"area",
		"cell",
		"cell",
		"area",
		"area",
		"cell",
		"area",
		"area",
		"cell",
		"cell",
		"cell",
		"minimumWidth",
		"minimumHeight",
		"grabHorizontal",
		"editorRect",
		"Math",
		"cell",
		"minimumWidth",
		"grabVertical",
		"editorRect",
		"Math",
		"cell",
		"minimumHeight",
		"horizontalAlignment",
		"SWT",
		"editorRect",
		"cell",
		"editorRect",
		"horizontalAlignment",
		"SWT",
		"editorRect",
		"cell",
		"editorRect",
		"verticalAlignment",
		"SWT",
		"editorRect",
		"cell",
		"editorRect",
		"verticalAlignment",
		"SWT",
		"editorRect",
		"cell",
		"editorRect",
		"editorRect",
		"table",
		"table",
		"tableColumn",
		"columnListener",
		"columnListener",
		"table",
		"item",
		"column",
		"column",
		"item",
		"table",
		"columnCount",
		"column",
		"columnCount",
		"table",
		"tableColumn",
		"columnListener",
		"column",
		"column",
		"table",
		"column",
		"table",
		"tableColumn",
		"columnListener",
		"item",
		"item",
		"column",
		"editor",
		"table",
		"item",
		"item",
		"table",
		"columnCount",
		"column",
		"columnCount",
		"column",
		"column",
		"columnCount",
		"table",
		"x",
		"x",
		"width",
		"width",
		"width",
		"x",
		"x",
		"width",
		"x",
		"width",
		"x",
		"width",
		"width",
		"x",
		"width",
		"x",
		"x",
		"y",
		"width",
		"width",
		"height",
		"height",
		"RIGHT",
		"x",
		"width",
		"width",
		"LEFT",
		"x",
		"width",
		"width",
		"BOTTOM",
		"y",
		"height",
		"height",
		"TOP",
		"y",
		"height",
		"height",
		"column",
		"column",
		"column",
		"column",
		"column",
		"column",
		"column",
		"column",
		"column",
		"column",
		"item",
		"table",
		"e",
		"e",
		"column",
		"item",
		"editor",
		"item",
		"column"
	],
	"extendORImplementFiles":[
		"ControlEditor"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.events",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"controlMoved",
		"controlResized",
		"computeBounds",
		"dispose",
		"getColumn",
		"getItem",
		"setColumn",
		"setItem",
		"setEditor",
		"resize",
		"resize",
		"resize",
		"isDisposed",
		"getBounds",
		"getImageBounds",
		"getClientArea",
		"max",
		"max",
		"getColumnCount",
		"getColumn",
		"removeControlListener",
		"dispose",
		"getColumnCount",
		"resize",
		"getColumn",
		"removeControlListener",
		"getColumnCount",
		"getColumn",
		"addControlListener",
		"resize",
		"resize",
		"setItem",
		"setColumn",
		"setEditor",
		"isDisposed",
		"isDisposed",
		"getColumnCount",
		"resize",
		"ControlListener",
		"Rectangle",
		"Rectangle"
	],
	"methodsBody":{
		"Rectangle computeBounds()":{
			"methodBody":"{\n    if (item == null || column == -1 || item.isDisposed())\n        return new Rectangle(0, 0, 0, 0);\n    Rectangle cell = item.getBounds(column);\n    Rectangle rect = item.getImageBounds(column);\n    cell.x = rect.x + rect.width;\n    cell.width -= rect.width;\n    Rectangle area = table.getClientArea();\n    if (cell.x < area.x + area.width) {\n        if (cell.x + cell.width > area.x + area.width) {\n            cell.width = area.x + area.width - cell.x;\n        }\n    }\n    Rectangle editorRect = new Rectangle(cell.x, cell.y, minimumWidth, minimumHeight);\n    if (grabHorizontal) {\n        editorRect.width = Math.max(cell.width, minimumWidth);\n    }\n    if (grabVertical) {\n        editorRect.height = Math.max(cell.height, minimumHeight);\n    }\n    if (horizontalAlignment == SWT.RIGHT) {\n        editorRect.x += cell.width - editorRect.width;\n    } else if (horizontalAlignment == SWT.LEFT) {\n    \n    } else {\n        \n        editorRect.x += (cell.width - editorRect.width) / 2;\n    }\n    if (verticalAlignment == SWT.BOTTOM) {\n        editorRect.y += cell.height - editorRect.height;\n    } else if (verticalAlignment == SWT.TOP) {\n    \n    } else {\n        \n        editorRect.y += (cell.height - editorRect.height) / 2;\n    }\n    return editorRect;\n}",
			"comments":"// do nothing - cell.x is the right answer\n// default is CENTER\n// do nothing - cell.y is the right answer\n// default is CENTER\n",
			"methodName":"Rectangle computeBounds()"
		},
		"void resize()":{
			"methodBody":"{\n    if (table.isDisposed())\n        return;\n    if (item == null || item.isDisposed())\n        return;\n    int columnCount = table.getColumnCount();\n    if (columnCount == 0 && column != 0)\n        return;\n    if (columnCount > 0 && (column < 0 || column >= columnCount))\n        return;\n    super.resize();\n}",
			"comments":"",
			"methodName":"void resize()"
		},
		"public void dispose()":{
			"methodBody":"{\n    if (this.column > -1 && this.column < table.getColumnCount()) {\n        TableColumn tableColumn = table.getColumn(this.column);\n        tableColumn.removeControlListener(columnListener);\n    }\n    columnListener = null;\n    table = null;\n    item = null;\n    column = -1;\n    super.dispose();\n}",
			"comments":"/**\n* Removes all associations between the TableEditor and the cell in the table.  The\n* Table and the editor Control are <b>not</b> disposed.\n*/\n",
			"methodName":"public void dispose()"
		},
		"public void controlMoved(ControlEvent e)":{
			"methodBody":"{\n    resize();\n}",
			"comments":"",
			"methodName":"public void controlMoved(ControlEvent e)"
		},
		"public int getColumn()":{
			"methodBody":"{\n    return column;\n}",
			"comments":"/**\n* Returns the zero based index of the column of the cell being tracked by this editor.\n*\n* @return the zero based index of the column of the cell being tracked by this editor\n*/\n",
			"methodName":"public int getColumn()"
		},
		"public TableItem getItem()":{
			"methodBody":"{\n    return item;\n}",
			"comments":"/**\n* Returns the TableItem for the row of the cell being tracked by this editor.\n*\n* @return the TableItem for the row of the cell being tracked by this editor\n*/\n",
			"methodName":"public TableItem getItem()"
		},
		"public void controlResized(ControlEvent e)":{
			"methodBody":"{\n    resize();\n}",
			"comments":"",
			"methodName":"public void controlResized(ControlEvent e)"
		},
		"public void setColumn(int column)":{
			"methodBody":"{\n    int columnCount = table.getColumnCount();\n    \n    if (columnCount == 0) {\n        this.column = (column == 0) ? 0 : -1;\n        resize();\n        return;\n    }\n    if (this.column > -1 && this.column < columnCount) {\n        TableColumn tableColumn = table.getColumn(this.column);\n        tableColumn.removeControlListener(columnListener);\n        this.column = -1;\n    }\n    if (column < 0 || column >= table.getColumnCount())\n        return;\n    this.column = column;\n    TableColumn tableColumn = table.getColumn(this.column);\n    tableColumn.addControlListener(columnListener);\n    resize();\n}",
			"comments":"/**\n* Sets the zero based index of the column of the cell being tracked by this editor.\n*\n* @param column the zero based index of the column of the cell being tracked by this editor\n*/\n// Separately handle the case where the table has no TableColumns.\n// In this situation, there is a single default column.\n",
			"methodName":"public void setColumn(int column)"
		},
		"public void setEditor(Control editor, TableItem item, int column)":{
			"methodBody":"{\n    setItem(item);\n    setColumn(column);\n    setEditor(editor);\n}",
			"comments":"/**\n* Specify the Control that is to be displayed and the cell in the table that it is to be positioned above.\n*\n* <p>Note: The Control provided as the editor <b>must</b> be created with its parent being the Table control\n* specified in the TableEditor constructor.\n*\n* @param editor the Control that is displayed above the cell being edited\n* @param item the TableItem for the row of the cell being tracked by this editor\n* @param column the zero based index of the column of the cell being tracked by this editor\n*/\n",
			"methodName":"public void setEditor(Control editor, TableItem item, int column)"
		},
		"public void setItem(TableItem item)":{
			"methodBody":"{\n    this.item = item;\n    resize();\n}",
			"comments":"",
			"methodName":"public void setItem(TableItem item)"
		}
	},
	"ClassORInterfaceName":[
		"TableEditor"
	]
}
