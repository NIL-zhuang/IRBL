{
	"variables":[
		"rgb",
		"buffer",
		"hwndOwner",
		"callback",
		"lpfnHook",
		"display",
		"hHeap",
		"lpcc",
		"red",
		"green",
		"blue",
		"oldModal",
		"success",
		"red",
		"green",
		"blue",
		"parent",
		"SWT",
		"parent",
		"style",
		"uiMsg",
		"OS",
		"title",
		"title",
		"title",
		"OS",
		"hdlg",
		"buffer",
		"rgb",
		"parent",
		"callback",
		"lpfnHook",
		"SWT",
		"SWT",
		"parent",
		"display",
		"OS",
		"display",
		"OS",
		"hHeap",
		"OS",
		"lpcc",
		"CHOOSECOLOR",
		"lpcc",
		"OS",
		"OS",
		"lpcc",
		"lpfnHook",
		"lpcc",
		"hwndOwner",
		"lpcc",
		"display",
		"rgb",
		"lpcc",
		"OS",
		"rgb",
		"rgb",
		"rgb",
		"lpcc",
		"red",
		"green",
		"blue",
		"style",
		"SWT",
		"SWT",
		"oldModal",
		"display",
		"display",
		"parent",
		"OS",
		"lpcc",
		"style",
		"SWT",
		"SWT",
		"display",
		"oldModal",
		"success",
		"lpcc",
		"lpcc",
		"lpcc",
		"rgb",
		"red",
		"green",
		"blue",
		"callback",
		"success",
		"rgb",
		"rgb",
		"PRIMARY_MODAL",
		"WM_INITDIALOG",
		"handle",
		"ERROR_NO_MORE_CALLBACKS",
		"display",
		"lpCustColors",
		"lpCustColors",
		"HEAP_ZERO_MEMORY",
		"lStructSize",
		"sizeof",
		"Flags",
		"CC_ANYCOLOR",
		"CC_ENABLEHOOK",
		"lpfnHook",
		"hwndOwner",
		"lpCustColors",
		"lpCustColors",
		"Flags",
		"CC_RGBINIT",
		"red",
		"green",
		"blue",
		"rgbResult",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"rgbResult",
		"rgbResult",
		"rgbResult",
		"rgb",
		"parent",
		"parent",
		"style",
		"hdlg",
		"uiMsg",
		"lParam",
		"lpData",
		"rgb"
	],
	"extendORImplementFiles":[
		"Dialog"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal",
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"CCHookProc",
		"getRGB",
		"open",
		"setRGB",
		"checkSubclass",
		"length",
		"SetWindowText",
		"getAddress",
		"error",
		"GetProcessHeap",
		"HeapAlloc",
		"getModalDialogShell",
		"setModalDialogShell",
		"ChooseColor",
		"setModalDialogShell",
		"dispose",
		"TCHAR",
		"Callback",
		"CHOOSECOLOR",
		"RGB"
	],
	"methodsBody":{
		"public RGB getRGB()":{
			"methodBody":"{\n    return rgb;\n}",
			"comments":"/**\n* Returns the currently selected color in the receiver.\n*\n* @return the RGB value for the selected color, may be null\n*\n* @see PaletteData#getRGBs\n*/\n",
			"methodName":"public RGB getRGB()"
		},
		"int CCHookProc(int hdlg, int uiMsg, int lParam, int lpData)":{
			"methodBody":"{\n    switch(uiMsg) {\n        case OS.WM_INITDIALOG:\n            if (title != null && title.length() != 0) {\n                \n                TCHAR buffer = new TCHAR(0, title, true);\n                OS.SetWindowText(hdlg, buffer);\n            }\n            break;\n    }\n    return 0;\n}",
			"comments":"/* Use the character encoding for the default locale */\n",
			"methodName":"int CCHookProc(int hdlg, int uiMsg, int lParam, int lpData)"
		},
		"public void setRGB(RGB rgb)":{
			"methodBody":"{\n    this.rgb = rgb;\n}",
			"comments":"/**\n* Sets the receiver's selected color to be the argument.\n*\n* @param rgb the new RGB value for the selected color, may be\n*        null to let the platform select a default when\n*        open() is called\n* @see PaletteData#getRGBs\n*/\n",
			"methodName":"public void setRGB(RGB rgb)"
		},
		"public RGB open()":{
			"methodBody":"{\n    \n    int hwndOwner = parent.handle;\n    \n    \n    Callback callback = new Callback(this, \"CCHookProc\", 4);\n    int lpfnHook = callback.getAddress();\n    if (lpfnHook == 0)\n        SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);\n    \n    Display display = parent.display;\n    if (display.lpCustColors == 0) {\n        int hHeap = OS.GetProcessHeap();\n        display.lpCustColors = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, 16 * 4);\n    }\n    \n    CHOOSECOLOR lpcc = new CHOOSECOLOR();\n    lpcc.lStructSize = CHOOSECOLOR.sizeof;\n    lpcc.Flags = OS.CC_ANYCOLOR | OS.CC_ENABLEHOOK;\n    lpcc.lpfnHook = lpfnHook;\n    lpcc.hwndOwner = hwndOwner;\n    lpcc.lpCustColors = display.lpCustColors;\n    if (rgb != null) {\n        lpcc.Flags |= OS.CC_RGBINIT;\n        int red = rgb.red & 0xFF;\n        int green = (rgb.green << 8) & 0xFF00;\n        int blue = (rgb.blue << 16) & 0xFF0000;\n        lpcc.rgbResult = red | green | blue;\n    }\n    \n    Shell oldModal = null;\n    if ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        oldModal = display.getModalDialogShell();\n        display.setModalDialogShell(parent);\n    }\n    \n    boolean success = OS.ChooseColor(lpcc);\n    \n    if ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n        display.setModalDialogShell(oldModal);\n    }\n    if (success) {\n        int red = lpcc.rgbResult & 0xFF;\n        int green = (lpcc.rgbResult >> 8) & 0xFF;\n        int blue = (lpcc.rgbResult >> 16) & 0xFF;\n        rgb = new RGB(red, green, blue);\n    }\n    \n    callback.dispose();\n    if (!success)\n        return null;\n    return rgb;\n}",
			"comments":"/**\n* Makes the receiver visible and brings it to the front\n* of the display.\n*\n* @return the selected color, or null if the dialog was\n*         cancelled, no color was selected, or an error\n*         occurred\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/* Get the owner HWND for the dialog */\n/* Create the CCHookProc */\n//$NON-NLS-1$\n/* Allocate the Custom Colors */\n/* Open the dialog */\n/* Make the parent shell be temporary modal */\n/* Open the dialog */\n/* Clear the temporary dialog modal parent */\n/* Free the CCHookProc */\n/* Free the Custom Colors */\n/*\n* This code is intentionally commented.  Currently,\n* there is exactly one set of custom colors per display.\n* The memory associated with these colors is released\n* when the display is disposed.\n*/\n//\tif (lpCustColors != 0) OS.HeapFree (hHeap, 0, lpCustColors);\n/*\n* This code is intentionally commented.  On some\n* platforms, the owner window is repainted right\n* away when a dialog window exits.  This behavior\n* is currently unspecified.\n*/\n//\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);\n",
			"methodName":"public RGB open()"
		}
	},
	"ClassORInterfaceName":[
		"ColorDialog"
	]
}
