{
	"variables":[
		"parent",
		"id",
		"image2",
		"toolTipText",
		"visible",
		"typedListener",
		"data",
		"mask",
		"width",
		"height",
		"hMask",
		"hBitmap",
		"hDC",
		"dstHdc",
		"oldDstBitmap",
		"srcHdc",
		"oldSrcBitmap",
		"info",
		"hIcon",
		"iconData",
		"iconData",
		"hIcon",
		"icon",
		"iconData",
		"iconData",
		"buffer",
		"length",
		"szTip",
		"szTip",
		"iconData",
		"parent",
		"style",
		"parent",
		"parent",
		"parent",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"SWT",
		"image",
		"data",
		"data",
		"data",
		"display",
		"data",
		"mask",
		"data",
		"data",
		"OS",
		"OS",
		"hDC",
		"OS",
		"OS",
		"OS",
		"hBitmap",
		"Display",
		"image",
		"data",
		"data",
		"data",
		"hMask",
		"OS",
		"width",
		"height",
		"oldDstBitmap",
		"OS",
		"dstHdc",
		"hMask",
		"OS",
		"dstHdc",
		"width",
		"height",
		"OS",
		"hMask",
		"Display",
		"data",
		"width",
		"height",
		"hBitmap",
		"OS",
		"hDC",
		"width",
		"height",
		"oldDstBitmap",
		"OS",
		"dstHdc",
		"hBitmap",
		"OS",
		"hDC",
		"OS",
		"srcHdc",
		"image",
		"OS",
		"dstHdc",
		"width",
		"height",
		"OS",
		"OS",
		"dstHdc",
		"width",
		"height",
		"srcHdc",
		"OS",
		"OS",
		"srcHdc",
		"hMask",
		"OS",
		"dstHdc",
		"width",
		"height",
		"srcHdc",
		"OS",
		"OS",
		"srcHdc",
		"image",
		"OS",
		"dstHdc",
		"width",
		"height",
		"srcHdc",
		"OS",
		"OS",
		"srcHdc",
		"oldSrcBitmap",
		"OS",
		"srcHdc",
		"OS",
		"dstHdc",
		"oldDstBitmap",
		"OS",
		"dstHdc",
		"OS",
		"hDC",
		"info",
		"info",
		"hBitmap",
		"info",
		"hMask",
		"OS",
		"info",
		"hIcon",
		"SWT",
		"SWT",
		"OS",
		"hBitmap",
		"OS",
		"hMask",
		"Image",
		"display",
		"SWT",
		"hIcon",
		"OS",
		"OS",
		"iconData",
		"NOTIFYICONDATA",
		"iconData",
		"id",
		"display",
		"iconData",
		"display",
		"iconData",
		"OS",
		"iconData",
		"Display",
		"OS",
		"OS",
		"iconData",
		"toolTipText",
		"visible",
		"lParam",
		"OS",
		"SWT",
		"OS",
		"hwnd",
		"SWT",
		"OS",
		"OS",
		"SWT",
		"OS",
		"hwnd",
		"SWT",
		"OS",
		"SWT",
		"OS",
		"hwnd",
		"SWT",
		"display",
		"visible",
		"text",
		"text",
		"image",
		"image",
		"toolTipText",
		"toolTipText",
		"parent",
		"image2",
		"image2",
		"image2",
		"toolTipText",
		"OS",
		"OS",
		"iconData",
		"NOTIFYICONDATA",
		"iconData",
		"id",
		"iconData",
		"display",
		"OS",
		"OS",
		"iconData",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"image",
		"image",
		"SWT",
		"image",
		"OS",
		"image2",
		"image2",
		"image2",
		"image",
		"icon",
		"icon",
		"SWT",
		"image2",
		"image",
		"hIcon",
		"image2",
		"SWT",
		"hIcon",
		"icon",
		"OS",
		"iconData",
		"NOTIFYICONDATA",
		"iconData",
		"id",
		"iconData",
		"display",
		"iconData",
		"hIcon",
		"iconData",
		"OS",
		"OS",
		"OS",
		"iconData",
		"toolTipText",
		"value",
		"OS",
		"OS",
		"toolTipText",
		"toolTipText",
		"OS",
		"OS",
		"iconData",
		"length",
		"Math",
		"length",
		"buffer",
		"System",
		"buffer",
		"szTip",
		"length",
		"iconData",
		"length",
		"Math",
		"length",
		"buffer",
		"System",
		"buffer",
		"szTip",
		"length",
		"iconData",
		"NOTIFYICONDATA",
		"iconData",
		"id",
		"iconData",
		"display",
		"iconData",
		"OS",
		"OS",
		"OS",
		"iconData",
		"visible",
		"visible",
		"SWT",
		"visible",
		"OS",
		"OS",
		"iconData",
		"NOTIFYICONDATA",
		"iconData",
		"id",
		"iconData",
		"display",
		"OS",
		"visible",
		"iconData",
		"OS",
		"iconData",
		"Display",
		"OS",
		"OS",
		"iconData",
		"image",
		"toolTipText",
		"OS",
		"OS",
		"iconData",
		"iconData",
		"OS",
		"iconData",
		"visible",
		"OS",
		"iconData",
		"OS",
		"OS",
		"OS",
		"iconData",
		"visible",
		"SWT",
		"parent",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"ERROR_INVALID_SUBCLASS",
		"alpha",
		"alphaData",
		"width",
		"height",
		"IsWinCE",
		"WIN32_VERSION",
		"handle",
		"alpha",
		"alphaData",
		"transparentPixel",
		"BLACKNESS",
		"handle",
		"BLACKNESS",
		"SRCINVERT",
		"SRCAND",
		"handle",
		"SRCINVERT",
		"fIcon",
		"hbmColor",
		"hbmMask",
		"ERROR_NO_HANDLES",
		"ICON",
		"IsWinCE",
		"IsUnicode",
		"cbSize",
		"sizeof",
		"uID",
		"nextTrayId",
		"hWnd",
		"hwndMessage",
		"uFlags",
		"NIF_MESSAGE",
		"uCallbackMessage",
		"SWT_TRAYICONMSG",
		"NIM_ADD",
		"WM_LBUTTONDOWN",
		"Selection",
		"Selection",
		"WM_LBUTTONDBLCLK",
		"WM_RBUTTONDBLCLK",
		"DefaultSelection",
		"DefaultSelection",
		"WM_RBUTTONUP",
		"MenuDetect",
		"MenuDetect",
		"IsWinCE",
		"IsUnicode",
		"cbSize",
		"sizeof",
		"uID",
		"hWnd",
		"hwndMessage",
		"NIM_DELETE",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"ERROR_INVALID_ARGUMENT",
		"IsWinCE",
		"type",
		"BITMAP",
		"handle",
		"ICON",
		"handle",
		"IsUnicode",
		"cbSize",
		"sizeof",
		"uID",
		"hWnd",
		"hwndMessage",
		"hIcon",
		"uFlags",
		"NIF_ICON",
		"NIM_MODIFY",
		"IsWinCE",
		"IsUnicode",
		"SHELL32_MAJOR",
		"IsUnicode",
		"szTip",
		"chars",
		"szTip",
		"bytes",
		"cbSize",
		"sizeof",
		"uID",
		"hWnd",
		"hwndMessage",
		"uFlags",
		"NIF_TIP",
		"NIM_MODIFY",
		"visible",
		"Show",
		"visible",
		"IsWinCE",
		"IsUnicode",
		"cbSize",
		"sizeof",
		"uID",
		"hWnd",
		"hwndMessage",
		"SHELL32_MAJOR",
		"uFlags",
		"NIF_MESSAGE",
		"uCallbackMessage",
		"SWT_TRAYICONMSG",
		"NIM_ADD",
		"NIM_DELETE",
		"uFlags",
		"NIF_STATE",
		"dwState",
		"NIS_HIDDEN",
		"dwStateMask",
		"NIS_HIDDEN",
		"NIM_MODIFY",
		"Hide",
		"parent",
		"style",
		"listener",
		"image",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"listener",
		"image",
		"value",
		"visible"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.events",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"addSelectionListener",
		"checkSubclass",
		"createIcon",
		"createWidget",
		"getToolTipText",
		"getVisible",
		"messageProc",
		"recreate",
		"releaseChild",
		"releaseWidget",
		"removeSelectionListener",
		"setImage",
		"setToolTipText",
		"setVisible",
		"createItem",
		"getItemCount",
		"createWidget",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"isValidSubclass",
		"error",
		"getImageData",
		"getTransparencyMask",
		"GetDC",
		"CreateCompatibleDC",
		"VERSION",
		"create32bitDIB",
		"CreateBitmap",
		"SelectObject",
		"PatBlt",
		"createMaskFromAlpha",
		"CreateCompatibleBitmap",
		"SelectObject",
		"CreateCompatibleDC",
		"SelectObject",
		"PatBlt",
		"BitBlt",
		"SelectObject",
		"BitBlt",
		"SelectObject",
		"BitBlt",
		"SelectObject",
		"DeleteDC",
		"SelectObject",
		"DeleteDC",
		"ReleaseDC",
		"CreateIconIndirect",
		"error",
		"DeleteObject",
		"DeleteObject",
		"win32_new",
		"Shell_NotifyIcon",
		"checkWidget",
		"checkWidget",
		"hooks",
		"SetForegroundWindow",
		"postEvent",
		"hooks",
		"SetForegroundWindow",
		"postEvent",
		"hooks",
		"SetForegroundWindow",
		"sendEvent",
		"isDisposed",
		"wakeThread",
		"createWidget",
		"setVisible",
		"length",
		"setText",
		"setImage",
		"setToolTipText",
		"releaseChild",
		"destroyItem",
		"releaseWidget",
		"dispose",
		"Shell_NotifyIcon",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"isDisposed",
		"error",
		"setImage",
		"dispose",
		"createIcon",
		"Shell_NotifyIcon",
		"checkWidget",
		"min",
		"length",
		"arraycopy",
		"min",
		"length",
		"arraycopy",
		"Shell_NotifyIcon",
		"checkWidget",
		"sendEvent",
		"isDisposed",
		"Shell_NotifyIcon",
		"setImage",
		"setToolTipText",
		"Shell_NotifyIcon",
		"Shell_NotifyIcon",
		"sendEvent",
		"TypedListener",
		"Image",
		"ICONINFO",
		"NOTIFYICONDATAW",
		"NOTIFYICONDATAA",
		"NOTIFYICONDATAW",
		"NOTIFYICONDATAA",
		"NOTIFYICONDATAW",
		"NOTIFYICONDATAA",
		"NOTIFYICONDATAW",
		"NOTIFYICONDATAA",
		"TCHAR",
		"NOTIFYICONDATAW",
		"NOTIFYICONDATAA"
	],
	"methodsBody":{
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed())\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    super.setImage(image);\n    if (OS.IsWinCE)\n        return;\n    if (image2 != null)\n        image2.dispose();\n    image2 = null;\n    int hIcon = 0;\n    Image icon = image;\n    if (icon != null) {\n        switch(icon.type) {\n            case SWT.BITMAP:\n                image2 = createIcon(image);\n                hIcon = image2.handle;\n                break;\n            case SWT.ICON:\n                hIcon = icon.handle;\n                break;\n        }\n    }\n    NOTIFYICONDATA iconData = OS.IsUnicode ? (NOTIFYICONDATA) new NOTIFYICONDATAW() : new NOTIFYICONDATAA();\n    iconData.cbSize = NOTIFYICONDATA.sizeof;\n    iconData.uID = id;\n    iconData.hWnd = display.hwndMessage;\n    iconData.hIcon = hIcon;\n    iconData.uFlags = OS.NIF_ICON;\n    OS.Shell_NotifyIcon(OS.NIM_MODIFY, iconData);\n}",
			"comments":"/**\n* Sets the receiver's image.\n*\n* @param image the new image\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setImage(Image image)"
		},
		"int messageProc(int hwnd, int msg, int wParam, int lParam)":{
			"methodBody":"{\n    \n    switch(lParam) {\n        case OS.WM_LBUTTONDOWN:\n            if (hooks(SWT.Selection)) {\n                OS.SetForegroundWindow(hwnd);\n                postEvent(SWT.Selection);\n            }\n            break;\n        case OS.WM_LBUTTONDBLCLK:\n        case OS.WM_RBUTTONDBLCLK:\n            if (hooks(SWT.DefaultSelection)) {\n                OS.SetForegroundWindow(hwnd);\n                postEvent(SWT.DefaultSelection);\n            }\n            break;\n        case OS.WM_RBUTTONUP:\n            {\n                if (hooks(SWT.MenuDetect)) {\n                    OS.SetForegroundWindow(hwnd);\n                    sendEvent(SWT.MenuDetect);\n                    \n                    if (isDisposed())\n                        return 0;\n                }\n                break;\n            }\n    }\n    display.wakeThread();\n    return 0;\n}",
			"comments":"/*\n* Feature in Windows.  When the user clicks on the tray\n* icon, another application may be the foreground window.\n* This means that the event loop is not running and can\n* cause problems.  For example, if a menu is shown, when\n* the user clicks outside of the menu to cancel it, the\n* menu is not hidden until an event is processed.  If\n* another application is the foreground window, then the\n* menu is not hidden.  The fix is to force the tray icon\n* message window to the foreground when sending an event.\n*/\n// widget could be disposed at this point\n",
			"methodName":"int messageProc(int hwnd, int msg, int wParam, int lParam)"
		},
		"void recreate()":{
			"methodBody":"{\n    createWidget();\n    if (!visible)\n        setVisible(false);\n    if (text.length() != 0)\n        setText(text);\n    if (image != null)\n        setImage(image);\n    if (toolTipText != null)\n        setToolTipText(toolTipText);\n}",
			"comments":"",
			"methodName":"void recreate()"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    if (!isValidSubclass())\n        error(SWT.ERROR_INVALID_SUBCLASS);\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    if (image2 != null)\n        image2.dispose();\n    image2 = null;\n    toolTipText = null;\n    if (OS.IsWinCE)\n        return;\n    NOTIFYICONDATA iconData = OS.IsUnicode ? (NOTIFYICONDATA) new NOTIFYICONDATAW() : new NOTIFYICONDATAA();\n    iconData.cbSize = NOTIFYICONDATA.sizeof;\n    iconData.uID = id;\n    iconData.hWnd = display.hwndMessage;\n    OS.Shell_NotifyIcon(OS.NIM_DELETE, iconData);\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public boolean getVisible()":{
			"methodBody":"{\n    checkWidget();\n    return visible;\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is visible and\n* <code>false</code> otherwise.\n*\n* @return the receiver's visibility\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getVisible()"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Selection, listener);\n    eventTable.unhook(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the receiver is selected.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"public void setToolTipText(String value)":{
			"methodBody":"{\n    checkWidget();\n    toolTipText = value;\n    if (OS.IsWinCE)\n        return;\n    NOTIFYICONDATA iconData = OS.IsUnicode ? (NOTIFYICONDATA) new NOTIFYICONDATAW() : new NOTIFYICONDATAA();\n    TCHAR buffer = new TCHAR(0, toolTipText == null ? \"\" : toolTipText, true);\n    \n    int length = OS.SHELL32_MAJOR < 5 ? 64 : 128;\n    if (OS.IsUnicode) {\n        char[] szTip = ((NOTIFYICONDATAW) iconData).szTip;\n        length = Math.min(length - 1, buffer.length());\n        System.arraycopy(buffer.chars, 0, szTip, 0, length);\n    } else {\n        byte[] szTip = ((NOTIFYICONDATAA) iconData).szTip;\n        length = Math.min(length - 1, buffer.length());\n        System.arraycopy(buffer.bytes, 0, szTip, 0, length);\n    }\n    iconData.cbSize = NOTIFYICONDATA.sizeof;\n    iconData.uID = id;\n    iconData.hWnd = display.hwndMessage;\n    iconData.uFlags = OS.NIF_TIP;\n    OS.Shell_NotifyIcon(OS.NIM_MODIFY, iconData);\n}",
			"comments":"/**\n* Sets the receiver's tool tip text to the argument, which\n* may be null indicating that no tool tip text should be shown.\n*\n* @param value the new tool tip text (or null)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* Note that the size of the szTip field is different\n* in version 5.0 of shell32.dll.\n*/\n",
			"methodName":"public void setToolTipText(String value)"
		},
		"void createWidget()":{
			"methodBody":"{\n    if (OS.IsWinCE)\n        return;\n    NOTIFYICONDATA iconData = OS.IsUnicode ? (NOTIFYICONDATA) new NOTIFYICONDATAW() : new NOTIFYICONDATAA();\n    iconData.cbSize = NOTIFYICONDATA.sizeof;\n    iconData.uID = id = display.nextTrayId++;\n    iconData.hWnd = display.hwndMessage;\n    iconData.uFlags = OS.NIF_MESSAGE;\n    iconData.uCallbackMessage = Display.SWT_TRAYICONMSG;\n    OS.Shell_NotifyIcon(OS.NIM_ADD, iconData);\n}",
			"comments":"",
			"methodName":"void createWidget()"
		},
		"public String getToolTipText()":{
			"methodBody":"{\n    checkWidget();\n    return toolTipText;\n}",
			"comments":"/**\n* Returns the receiver's tool tip text, or null if it has\n* not been set.\n*\n* @return the receiver's tool tip text\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String getToolTipText()"
		},
		"Image createIcon(Image image)":{
			"methodBody":"{\n    ImageData data = image.getImageData();\n    if (data.alpha == -1 && data.alphaData == null) {\n        ImageData mask = data.getTransparencyMask();\n        return new Image(display, data, mask);\n    }\n    int width = data.width, height = data.height;\n    int hMask, hBitmap;\n    int hDC = OS.GetDC(0);\n    int dstHdc = OS.CreateCompatibleDC(hDC), oldDstBitmap;\n    if (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(5, 1)) {\n        hBitmap = Display.create32bitDIB(image.handle, data.alpha, data.alphaData, data.transparentPixel);\n        hMask = OS.CreateBitmap(width, height, 1, 1, null);\n        oldDstBitmap = OS.SelectObject(dstHdc, hMask);\n        OS.PatBlt(dstHdc, 0, 0, width, height, OS.BLACKNESS);\n    } else {\n        hMask = Display.createMaskFromAlpha(data, width, height);\n        \n        hBitmap = OS.CreateCompatibleBitmap(hDC, width, height);\n        oldDstBitmap = OS.SelectObject(dstHdc, hBitmap);\n        int srcHdc = OS.CreateCompatibleDC(hDC);\n        int oldSrcBitmap = OS.SelectObject(srcHdc, image.handle);\n        OS.PatBlt(dstHdc, 0, 0, width, height, OS.BLACKNESS);\n        OS.BitBlt(dstHdc, 0, 0, width, height, srcHdc, 0, 0, OS.SRCINVERT);\n        OS.SelectObject(srcHdc, hMask);\n        OS.BitBlt(dstHdc, 0, 0, width, height, srcHdc, 0, 0, OS.SRCAND);\n        OS.SelectObject(srcHdc, image.handle);\n        OS.BitBlt(dstHdc, 0, 0, width, height, srcHdc, 0, 0, OS.SRCINVERT);\n        OS.SelectObject(srcHdc, oldSrcBitmap);\n        OS.DeleteDC(srcHdc);\n    }\n    OS.SelectObject(dstHdc, oldDstBitmap);\n    OS.DeleteDC(dstHdc);\n    OS.ReleaseDC(0, hDC);\n    ICONINFO info = new ICONINFO();\n    info.fIcon = true;\n    info.hbmColor = hBitmap;\n    info.hbmMask = hMask;\n    int hIcon = OS.CreateIconIndirect(info);\n    if (hIcon == 0)\n        SWT.error(SWT.ERROR_NO_HANDLES);\n    OS.DeleteObject(hBitmap);\n    OS.DeleteObject(hMask);\n    return Image.win32_new(display, SWT.ICON, hIcon);\n}",
			"comments":"/* Icons need black pixels where the mask is transparent */\n",
			"methodName":"Image createIcon(Image image)"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    parent.destroyItem(this);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the receiver is selected, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* <code>widgetSelected</code> is called when the receiver is selected\n* <code>widgetDefaultSelected</code> is called when the receiver is double-clicked\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"public void setVisible(boolean visible)":{
			"methodBody":"{\n    checkWidget();\n    if (this.visible == visible)\n        return;\n    if (visible) {\n        \n        sendEvent(SWT.Show);\n        if (isDisposed())\n            return;\n    }\n    this.visible = visible;\n    if (!OS.IsWinCE) {\n        NOTIFYICONDATA iconData = OS.IsUnicode ? (NOTIFYICONDATA) new NOTIFYICONDATAW() : new NOTIFYICONDATAA();\n        iconData.cbSize = NOTIFYICONDATA.sizeof;\n        iconData.uID = id;\n        iconData.hWnd = display.hwndMessage;\n        if (OS.SHELL32_MAJOR < 5) {\n            if (visible) {\n                iconData.uFlags = OS.NIF_MESSAGE;\n                iconData.uCallbackMessage = Display.SWT_TRAYICONMSG;\n                OS.Shell_NotifyIcon(OS.NIM_ADD, iconData);\n                setImage(image);\n                setToolTipText(toolTipText);\n            } else {\n                OS.Shell_NotifyIcon(OS.NIM_DELETE, iconData);\n            }\n        } else {\n            iconData.uFlags = OS.NIF_STATE;\n            iconData.dwState = visible ? 0 : OS.NIS_HIDDEN;\n            iconData.dwStateMask = OS.NIS_HIDDEN;\n            OS.Shell_NotifyIcon(OS.NIM_MODIFY, iconData);\n        }\n    }\n    if (!visible)\n        sendEvent(SWT.Hide);\n}",
			"comments":"/**\n* Makes the receiver visible if the argument is <code>true</code>,\n* and makes it invisible otherwise.\n*\n* @param visible the new visibility state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* It is possible (but unlikely), that application\n* code could have disposed the widget in the show\n* event.  If this happens, just return.\n*/\n",
			"methodName":"public void setVisible(boolean visible)"
		}
	},
	"ClassORInterfaceName":[
		"TrayItem"
	]
}
