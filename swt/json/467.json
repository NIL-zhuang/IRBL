{
	"variables":[
		"display",
		"messageCount",
		"messages",
		"messageLock",
		"syncThread",
		"wake",
		"newMessages",
		"lock",
		"run",
		"lock",
		"lock",
		"interrupted",
		"display",
		"messageLock",
		"messages",
		"messages",
		"messageCount",
		"messages",
		"messageCount",
		"System",
		"messages",
		"newMessages",
		"messageCount",
		"messages",
		"newMessages",
		"messages",
		"messageCount",
		"lock",
		"wake",
		"messageCount",
		"wake",
		"display",
		"runnable",
		"display",
		"runnable",
		"messageLock",
		"messageCount",
		"display",
		"messages",
		"messageLock",
		"syncThread",
		"messageLock",
		"messageCount",
		"messages",
		"System",
		"messages",
		"messages",
		"messageCount",
		"messages",
		"messageCount",
		"messageCount",
		"messages",
		"messages",
		"lock",
		"lock",
		"run",
		"run",
		"lock",
		"syncThread",
		"lock",
		"lock",
		"lock",
		"t",
		"SWT",
		"SWT",
		"t",
		"syncThread",
		"lock",
		"all",
		"run",
		"display",
		"runnable",
		"runnable",
		"runnable",
		"display",
		"runnable",
		"lock",
		"Thread",
		"lock",
		"lock",
		"lock",
		"lock",
		"interrupted",
		"interrupted",
		"Compatibility",
		"lock",
		"SWT",
		"SWT",
		"lock",
		"display",
		"length",
		"length",
		"thread",
		"throwable",
		"ERROR_FAILED_EXEC",
		"thread",
		"throwable",
		"ERROR_FAILED_EXEC",
		"throwable",
		"display",
		"lock",
		"runnable",
		"all",
		"t",
		"runnable",
		"e"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.internal.Compatibility"
	],
	"methods":[
		"addLast",
		"asyncExec",
		"getMessageCount",
		"releaseSynchronizer",
		"removeFirst",
		"runAsyncMessages",
		"runAsyncMessages",
		"syncExec",
		"arraycopy",
		"wakeThread",
		"wake",
		"addLast",
		"arraycopy",
		"runAsyncMessages",
		"removeFirst",
		"run",
		"error",
		"notifyAll",
		"isValidThread",
		"run",
		"wake",
		"currentThread",
		"addLast",
		"done",
		"wait",
		"interrupt",
		"error",
		"Object",
		"RunnableLock",
		"RunnableLock"
	],
	"methodsBody":{
		"boolean runAsyncMessages(boolean all)":{
			"methodBody":"{\n    boolean run = false;\n    do {\n        RunnableLock lock = removeFirst();\n        if (lock == null)\n            return run;\n        run = true;\n        synchronized (lock) {\n            syncThread = lock.thread;\n            try {\n                lock.run();\n            } catch (Throwable t) {\n                lock.throwable = t;\n                SWT.error(SWT.ERROR_FAILED_EXEC, t);\n            } finally {\n                syncThread = null;\n                lock.notifyAll();\n            }\n        }\n    } while (all);\n    return run;\n}",
			"comments":"",
			"methodName":"boolean runAsyncMessages(boolean all)"
		},
		"int getMessageCount()":{
			"methodBody":"{\n    synchronized (messageLock) {\n        return messageCount;\n    }\n}",
			"comments":"",
			"methodName":"int getMessageCount()"
		},
		"void addLast(RunnableLock lock)":{
			"methodBody":"{\n    boolean wake = false;\n    synchronized (messageLock) {\n        if (messages == null)\n            messages = new RunnableLock[4];\n        if (messageCount == messages.length) {\n            RunnableLock[] newMessages = new RunnableLock[messageCount + 4];\n            System.arraycopy(messages, 0, newMessages, 0, messageCount);\n            messages = newMessages;\n        }\n        messages[messageCount++] = lock;\n        wake = messageCount == 1;\n    }\n    if (wake)\n        display.wakeThread();\n}",
			"comments":"",
			"methodName":"void addLast(RunnableLock lock)"
		},
		"protected void asyncExec(Runnable runnable)":{
			"methodBody":"{\n    if (runnable == null) {\n        display.wake();\n        return;\n    }\n    addLast(new RunnableLock(runnable));\n}",
			"comments":"/**\n* Causes the <code>run()</code> method of the runnable to\n* be invoked by the user-interface thread at the next\n* reasonable opportunity. The caller of this method continues\n* to run in parallel, and is not notified when the\n* runnable has completed.\n*\n* @param runnable code to run on the user-interface thread.\n*\n* @see #syncExec\n*/\n",
			"methodName":"protected void asyncExec(Runnable runnable)"
		},
		"void releaseSynchronizer()":{
			"methodBody":"{\n    display = null;\n    messages = null;\n    messageLock = null;\n    syncThread = null;\n}",
			"comments":"",
			"methodName":"void releaseSynchronizer()"
		},
		"RunnableLock removeFirst()":{
			"methodBody":"{\n    synchronized (messageLock) {\n        if (messageCount == 0)\n            return null;\n        RunnableLock lock = messages[0];\n        System.arraycopy(messages, 1, messages, 0, --messageCount);\n        messages[messageCount] = null;\n        if (messageCount == 0) {\n            if (messages.length > 64)\n                messages = null;\n        }\n        return lock;\n    }\n}",
			"comments":"",
			"methodName":"RunnableLock removeFirst()"
		},
		"boolean runAsyncMessages()":{
			"methodBody":"{\n    return runAsyncMessages(false);\n}",
			"comments":"",
			"methodName":"boolean runAsyncMessages()"
		},
		"protected void syncExec(Runnable runnable)":{
			"methodBody":"{\n    if (display.isValidThread()) {\n        if (runnable != null)\n            runnable.run();\n        return;\n    }\n    if (runnable == null) {\n        display.wake();\n        return;\n    }\n    RunnableLock lock = new RunnableLock(runnable);\n    \n    lock.thread = Thread.currentThread();\n    synchronized (lock) {\n        addLast(lock);\n        boolean interrupted = false;\n        while (!lock.done()) {\n            try {\n                lock.wait();\n            } catch (InterruptedException e) {\n                interrupted = true;\n            }\n        }\n        if (interrupted) {\n            Compatibility.interrupt();\n        }\n        if (lock.throwable != null) {\n            SWT.error(SWT.ERROR_FAILED_EXEC, lock.throwable);\n        }\n    }\n}",
			"comments":"/**\n* Causes the <code>run()</code> method of the runnable to\n* be invoked by the user-interface thread at the next\n* reasonable opportunity. The thread which calls this method\n* is suspended until the runnable completes.\n*\n* @param runnable code to run on the user-interface thread.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_FAILED_EXEC - if an exception occured when executing the runnable</li>\n* </ul>\n*\n* @see #asyncExec\n*/\n/*\n* Only remember the syncThread for syncExec.\n*/\n",
			"methodName":"protected void syncExec(Runnable runnable)"
		}
	},
	"ClassORInterfaceName":[
		"Synchronizer"
	]
}
