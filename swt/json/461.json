{
	"variables":[
		"TrackBarProc",
		"TrackBarClass",
		"lpWndClass",
		"hInstance",
		"hHeap",
		"byteCount",
		"lpszClassName",
		"typedListener",
		"border",
		"width",
		"height",
		"rect",
		"scrollY",
		"scrollX",
		"minimum",
		"maximum",
		"minimum",
		"maximum",
		"minimum",
		"maximum",
		"bits",
		"code",
		"event",
		"OS",
		"OS",
		"TrackBarClass",
		"lpWndClass",
		"TrackBarProc",
		"lpWndClass",
		"OS",
		"OS",
		"lpWndClass",
		"hInstance",
		"lpWndClass",
		"OS",
		"lpWndClass",
		"OS",
		"TrackBarClass",
		"TCHAR",
		"OS",
		"hHeap",
		"OS",
		"byteCount",
		"OS",
		"lpszClassName",
		"TrackBarClass",
		"byteCount",
		"lpWndClass",
		"lpszClassName",
		"OS",
		"lpWndClass",
		"parent",
		"style",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"handle",
		"OS",
		"TrackBarProc",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"SWT",
		"SWT",
		"border",
		"border",
		"OS",
		"handle",
		"OS",
		"rect",
		"style",
		"SWT",
		"width",
		"OS",
		"OS",
		"OS",
		"OS",
		"height",
		"rect",
		"scrollY",
		"scrollY",
		"OS",
		"OS",
		"width",
		"rect",
		"scrollX",
		"scrollX",
		"height",
		"OS",
		"OS",
		"wHint",
		"SWT",
		"width",
		"wHint",
		"border",
		"hHint",
		"SWT",
		"height",
		"hHint",
		"border",
		"width",
		"height",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"background",
		"pixel",
		"pixel",
		"OS",
		"handle",
		"OS",
		"increment",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"increment",
		"maximum",
		"minimum",
		"OS",
		"handle",
		"OS",
		"increment",
		"OS",
		"handle",
		"OS",
		"minimum",
		"minimum",
		"value",
		"OS",
		"handle",
		"OS",
		"value",
		"OS",
		"handle",
		"OS",
		"value",
		"value",
		"maximum",
		"OS",
		"handle",
		"OS",
		"value",
		"pageIncrement",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"pageIncrement",
		"maximum",
		"minimum",
		"OS",
		"handle",
		"OS",
		"pageIncrement",
		"OS",
		"handle",
		"OS",
		"pageIncrement",
		"OS",
		"handle",
		"OS",
		"value",
		"OS",
		"OS",
		"OS",
		"style",
		"SWT",
		"bits",
		"OS",
		"OS",
		"bits",
		"OS",
		"TrackBarClass",
		"TrackBarProc",
		"wParam",
		"code",
		"OS",
		"OS",
		"SWT",
		"event",
		"TRACKBAR_CLASS",
		"lpfnWndProc",
		"hInstance",
		"style",
		"CS_GLOBALCLASS",
		"style",
		"CS_DBLCLKS",
		"sizeof",
		"HEAP_ZERO_MEMORY",
		"lpszClassName",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"HORIZONTAL",
		"VERTICAL",
		"TBM_GETTHUMBRECT",
		"HORIZONTAL",
		"SM_CXHSCROLL",
		"SM_CYHSCROLL",
		"top",
		"SM_CXVSCROLL",
		"left",
		"SM_CYVSCROLL",
		"DEFAULT",
		"DEFAULT",
		"TBM_SETRANGEMAX",
		"TBM_SETPAGESIZE",
		"TBM_SETTICFREQ",
		"COLOR_BTNFACE",
		"TBM_GETLINESIZE",
		"TBM_GETRANGEMAX",
		"TBM_GETRANGEMIN",
		"TBM_GETPAGESIZE",
		"TBM_GETPOS",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"WM_SETFOCUS",
		"TBM_GETRANGEMIN",
		"TBM_GETRANGEMAX",
		"TBM_SETLINESIZE",
		"TBM_GETRANGEMIN",
		"TBM_SETRANGEMAX",
		"TBM_GETRANGEMAX",
		"TBM_SETRANGEMIN",
		"TBM_GETRANGEMIN",
		"TBM_GETRANGEMAX",
		"TBM_SETPAGESIZE",
		"TBM_SETTICFREQ",
		"TBM_SETPOS",
		"WS_TABSTOP",
		"TBS_BOTH",
		"TBS_AUTOTICKS",
		"HORIZONTAL",
		"TBS_HORZ",
		"TBS_DOWNISLEFT",
		"TBS_VERT",
		"TB_ENDTRACK",
		"TB_THUMBPOSITION",
		"Selection",
		"parent",
		"style",
		"listener",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"wHint",
		"hHint",
		"changed",
		"listener",
		"pixel",
		"increment",
		"value",
		"value",
		"pageIncrement",
		"value",
		"wParam",
		"lParam"
	],
	"extendORImplementFiles":[
		"Control"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.events"
	],
	"methods":[
		"addSelectionListener",
		"callWindowProc",
		"checkStyle",
		"computeSize",
		"createHandle",
		"defaultForeground",
		"getIncrement",
		"getMaximum",
		"getMinimum",
		"getPageIncrement",
		"getSelection",
		"removeSelectionListener",
		"setBackgroundPixel",
		"setIncrement",
		"setMaximum",
		"setMinimum",
		"setPageIncrement",
		"setSelection",
		"widgetStyle",
		"windowClass",
		"windowProc",
		"wmScrollChild",
		"GetClassInfo",
		"GetModuleHandle",
		"GetProcessHeap",
		"length",
		"HeapAlloc",
		"MoveMemory",
		"RegisterClass",
		"checkStyle",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"CallWindowProc",
		"checkBits",
		"checkWidget",
		"getBorderWidth",
		"SendMessage",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"createHandle",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"GetSysColor",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"setBackgroundPixel",
		"PostMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"widgetStyle",
		"sendEvent",
		"TCHAR",
		"WNDCLASS",
		"TypedListener",
		"RECT",
		"Point",
		"Event"
	],
	"methodsBody":{
		"TCHAR windowClass()":{
			"methodBody":"{\n    return TrackBarClass;\n}",
			"comments":"",
			"methodName":"TCHAR windowClass()"
		},
		"public int getPageIncrement()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.TBM_GETPAGESIZE, 0, 0);\n}",
			"comments":"/**\n* Returns the amount that the receiver's value will be\n* modified by when the page increment/decrement areas\n* are selected.\n*\n* @return the page increment\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getPageIncrement()"
		},
		"public int getMinimum()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.TBM_GETRANGEMIN, 0, 0);\n}",
			"comments":"/**\n* Returns the minimum value which the receiver will allow.\n*\n* @return the minimum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getMinimum()"
		},
		"void setBackgroundPixel(int pixel)":{
			"methodBody":"{\n    if (background == pixel)\n        return;\n    super.setBackgroundPixel(pixel);\n    \n    OS.PostMessage(handle, OS.WM_SETFOCUS, 0, 0);\n}",
			"comments":"/*\n* Bug in Windows.  Changing the background color of the Scale\n* widget and calling InvalidateRect() still draws with the old\n* color.  The fix is to post a fake WM_SETFOCUS event to cause\n* it to redraw with the new background color.\n*\n* Note.  This WM_SETFOCUS message causes recursion when\n* setBackground is called from within the focus event\n* listener.\n*/\n",
			"methodName":"void setBackgroundPixel(int pixel)"
		},
		"int defaultForeground()":{
			"methodBody":"{\n    return OS.GetSysColor(OS.COLOR_BTNFACE);\n}",
			"comments":"",
			"methodName":"int defaultForeground()"
		},
		"void createHandle()":{
			"methodBody":"{\n    super.createHandle();\n    OS.SendMessage(handle, OS.TBM_SETRANGEMAX, 0, 100);\n    OS.SendMessage(handle, OS.TBM_SETPAGESIZE, 0, 10);\n    OS.SendMessage(handle, OS.TBM_SETTICFREQ, 10, 0);\n}",
			"comments":"",
			"methodName":"void createHandle()"
		},
		"LRESULT wmScrollChild(int wParam, int lParam)":{
			"methodBody":"{\n    \n    int code = wParam & 0xFFFF;\n    switch(code) {\n        case OS.TB_ENDTRACK:\n        case OS.TB_THUMBPOSITION:\n            return null;\n    }\n    Event event = new Event();\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    sendEvent(SWT.Selection, event);\n    \n    return null;\n}",
			"comments":"/* Do nothing when scrolling is ending */\n/*\n* This code is intentionally commented.  The event\n* detail field is not currently supported on all\n* platforms.\n*/\n//\tswitch (code) {\n//\t\tcase OS.TB_TOP: \t\tevent.detail = SWT.HOME;  break;\n//\t\tcase OS.TB_BOTTOM:\t\tevent.detail = SWT.END;  break;\n//\t\tcase OS.TB_LINEDOWN:\tevent.detail = SWT.ARROW_DOWN;  break;\n//\t\tcase OS.TB_LINEUP: \t\tevent.detail = SWT.ARROW_UP;  break;\n//\t\tcase OS.TB_PAGEDOWN: \tevent.detail = SWT.PAGE_DOWN;  break;\n//\t\tcase OS.TB_PAGEUP: \t\tevent.detail = SWT.PAGE_UP;  break;\n//\t}\n/*\n* Send the event because WM_HSCROLL and WM_VSCROLL\n* are sent from a modal message loop in windows that\n* is active when the user is scrolling.\n*/\n// widget could be disposed at this point\n",
			"methodName":"LRESULT wmScrollChild(int wParam, int lParam)"
		},
		"public int getMaximum()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.TBM_GETRANGEMAX, 0, 0);\n}",
			"comments":"/**\n* Returns the maximum value which the receiver will allow.\n*\n* @return the maximum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getMaximum()"
		},
		"public void setSelection(int value)":{
			"methodBody":"{\n    checkWidget();\n    OS.SendMessage(handle, OS.TBM_SETPOS, 1, value);\n}",
			"comments":"/**\n* Sets the 'selection', which is the receiver's value,\n* to the argument which must be greater than or equal to zero.\n*\n* @param value the new selection (must be zero or greater)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setSelection(int value)"
		},
		"public int getSelection()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.TBM_GETPOS, 0, 0);\n}",
			"comments":"/**\n* Returns the 'selection', which is the receiver's position.\n*\n* @return the selection\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getSelection()"
		},
		"public void setMinimum(int value)":{
			"methodBody":"{\n    checkWidget();\n    int maximum = OS.SendMessage(handle, OS.TBM_GETRANGEMAX, 0, 0);\n    if (0 <= value && value < maximum) {\n        OS.SendMessage(handle, OS.TBM_SETRANGEMIN, 1, value);\n    }\n}",
			"comments":"/**\n* Sets the minimum value that the receiver will allow.  This new\n* value will be ignored if it is negative or is not less than the receiver's\n* current maximum value.  If the new minimum is applied then the receiver's\n* selection value will be adjusted if necessary to fall within its new range.\n*\n* @param value the new minimum, which must be nonnegative and less than the current maximum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMinimum(int value)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    return checkBits(style, SWT.HORIZONTAL, SWT.VERTICAL, 0, 0, 0, 0);\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"int windowProc()":{
			"methodBody":"{\n    return TrackBarProc;\n}",
			"comments":"",
			"methodName":"int windowProc()"
		},
		"public void setPageIncrement(int pageIncrement)":{
			"methodBody":"{\n    checkWidget();\n    if (pageIncrement < 1)\n        return;\n    int minimum = OS.SendMessage(handle, OS.TBM_GETRANGEMIN, 0, 0);\n    int maximum = OS.SendMessage(handle, OS.TBM_GETRANGEMAX, 0, 0);\n    if (pageIncrement > maximum - minimum)\n        return;\n    OS.SendMessage(handle, OS.TBM_SETPAGESIZE, 0, pageIncrement);\n    OS.SendMessage(handle, OS.TBM_SETTICFREQ, pageIncrement, 0);\n}",
			"comments":"/**\n* Sets the amount that the receiver's value will be\n* modified by when the page increment/decrement areas\n* are selected to the argument, which must be at least\n* one.\n*\n* @param pageIncrement the page increment (must be greater than zero)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setPageIncrement(int pageIncrement)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Selection, listener);\n    eventTable.unhook(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the receiver's value changes.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"public void setMaximum(int value)":{
			"methodBody":"{\n    checkWidget();\n    int minimum = OS.SendMessage(handle, OS.TBM_GETRANGEMIN, 0, 0);\n    if (0 <= minimum && minimum < value) {\n        OS.SendMessage(handle, OS.TBM_SETRANGEMAX, 1, value);\n    }\n}",
			"comments":"/**\n* Sets the maximum value that the receiver will allow.  This new\n* value will be ignored if it is not greater than the receiver's current\n* minimum value.  If the new maximum is applied then the receiver's\n* selection value will be adjusted if necessary to fall within its new range.\n*\n* @param value the new maximum, which must be greater than the current minimum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMaximum(int value)"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the receiver's value changes, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"int callWindowProc(int hwnd, int msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (handle == 0)\n        return 0;\n    return OS.CallWindowProc(TrackBarProc, hwnd, msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"int callWindowProc(int hwnd, int msg, int wParam, int lParam)"
		},
		"public Point computeSize(int wHint, int hHint, boolean changed)":{
			"methodBody":"{\n    checkWidget();\n    int border = getBorderWidth();\n    int width = border * 2, height = border * 2;\n    RECT rect = new RECT();\n    OS.SendMessage(handle, OS.TBM_GETTHUMBRECT, 0, rect);\n    if ((style & SWT.HORIZONTAL) != 0) {\n        width += OS.GetSystemMetrics(OS.SM_CXHSCROLL) * 10;\n        int scrollY = OS.GetSystemMetrics(OS.SM_CYHSCROLL);\n        height += (rect.top * 2) + scrollY + (scrollY / 3);\n    } else {\n        int scrollX = OS.GetSystemMetrics(OS.SM_CXVSCROLL);\n        width += (rect.left * 2) + scrollX + (scrollX / 3);\n        height += OS.GetSystemMetrics(OS.SM_CYVSCROLL) * 10;\n    }\n    if (wHint != SWT.DEFAULT)\n        width = wHint + (border * 2);\n    if (hHint != SWT.DEFAULT)\n        height = hHint + (border * 2);\n    return new Point(width, height);\n}",
			"comments":"",
			"methodName":"public Point computeSize(int wHint, int hHint, boolean changed)"
		},
		"public int getIncrement()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.TBM_GETLINESIZE, 0, 0);\n}",
			"comments":"/**\n* Returns the amount that the receiver's value will be\n* modified by when the up/down (or right/left) arrows\n* are pressed.\n*\n* @return the increment\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getIncrement()"
		},
		"int widgetStyle()":{
			"methodBody":"{\n    int bits = super.widgetStyle() | OS.WS_TABSTOP | OS.TBS_BOTH | OS.TBS_AUTOTICKS;\n    if ((style & SWT.HORIZONTAL) != 0)\n        return bits | OS.TBS_HORZ | OS.TBS_DOWNISLEFT;\n    return bits | OS.TBS_VERT;\n}",
			"comments":"",
			"methodName":"int widgetStyle()"
		},
		"public void setIncrement(int increment)":{
			"methodBody":"{\n    checkWidget();\n    if (increment < 1)\n        return;\n    int minimum = OS.SendMessage(handle, OS.TBM_GETRANGEMIN, 0, 0);\n    int maximum = OS.SendMessage(handle, OS.TBM_GETRANGEMAX, 0, 0);\n    if (increment > maximum - minimum)\n        return;\n    OS.SendMessage(handle, OS.TBM_SETLINESIZE, 0, increment);\n}",
			"comments":"/**\n* Sets the amount that the receiver's value will be\n* modified by when the up/down (or right/left) arrows\n* are pressed to the argument, which must be at least\n* one.\n*\n* @param increment the new increment (must be greater than zero)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setIncrement(int increment)"
		}
	},
	"ClassORInterfaceName":[
		"Scale"
	]
}
