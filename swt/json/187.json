{
	"variables":[
		"MAJOR_VERSION",
		"MINOR_VERSION",
		"REVISION",
		"JAVA_VERSION",
		"SWT_VERSION",
		"major",
		"minor",
		"micro",
		"length",
		"index",
		"start",
		"platform",
		"version",
		"newName",
		"newName",
		"JAVA_VERSION",
		"System",
		"SWT_VERSION",
		"MAJOR_VERSION",
		"MINOR_VERSION",
		"version",
		"version",
		"index",
		"length",
		"Character",
		"version",
		"index",
		"index",
		"start",
		"length",
		"major",
		"Integer",
		"version",
		"start",
		"index",
		"start",
		"index",
		"index",
		"length",
		"Character",
		"version",
		"index",
		"index",
		"start",
		"length",
		"minor",
		"Integer",
		"version",
		"start",
		"index",
		"start",
		"index",
		"index",
		"length",
		"Character",
		"version",
		"index",
		"index",
		"start",
		"length",
		"micro",
		"Integer",
		"version",
		"start",
		"index",
		"major",
		"minor",
		"micro",
		"major",
		"minor",
		"micro",
		"major",
		"minor",
		"Platform",
		"System",
		"version",
		"version",
		"MAJOR_VERSION",
		"MINOR_VERSION",
		"version",
		"MINOR_VERSION",
		"version",
		"version",
		"MINOR_VERSION",
		"REVISION",
		"version",
		"REVISION",
		"name",
		"platform",
		"version",
		"System",
		"newName",
		"name",
		"platform",
		"System",
		"newName",
		"e1",
		"PLATFORM",
		"version",
		"e",
		"e",
		"e",
		"major",
		"minor",
		"micro",
		"major",
		"minor",
		"name",
		"e1",
		"e2"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal"
	],
	"import":[],
	"methods":[
		"parseVersion",
		"JAVA_VERSION",
		"SWT_VERSION",
		"loadLibrary",
		"parseVersion",
		"getProperty",
		"SWT_VERSION",
		"length",
		"isDigit",
		"charAt",
		"parseInt",
		"substring",
		"isDigit",
		"charAt",
		"parseInt",
		"substring",
		"isDigit",
		"charAt",
		"parseInt",
		"substring",
		"JAVA_VERSION",
		"getProperty",
		"loadLibrary",
		"loadLibrary"
	],
	"methodsBody":{
		"public static int SWT_VERSION(int major, int minor)":{
			"methodBody":"{\n    return major * 1000 + minor;\n}",
			"comments":"/**\n* Returns the SWT version number as an integer.\n*\n* @param major\n* @param minor\n* @return the version\n*/\n",
			"methodName":"public static int SWT_VERSION(int major, int minor)"
		},
		"static int parseVersion(String version)":{
			"methodBody":"{\n    if (version == null)\n        return 0;\n    int major = 0, minor = 0, micro = 0;\n    int length = version.length(), index = 0, start = 0;\n    while (index < length && Character.isDigit(version.charAt(index))) index++;\n    try {\n        if (start < length)\n            major = Integer.parseInt(version.substring(start, index));\n    } catch (NumberFormatException e) {\n    }\n    start = ++index;\n    while (index < length && Character.isDigit(version.charAt(index))) index++;\n    try {\n        if (start < length)\n            minor = Integer.parseInt(version.substring(start, index));\n    } catch (NumberFormatException e) {\n    }\n    start = ++index;\n    while (index < length && Character.isDigit(version.charAt(index))) index++;\n    try {\n        if (start < length)\n            micro = Integer.parseInt(version.substring(start, index));\n    } catch (NumberFormatException e) {\n    }\n    return JAVA_VERSION(major, minor, micro);\n}",
			"comments":"",
			"methodName":"static int parseVersion(String version)"
		},
		"public static void loadLibrary(String name)":{
			"methodBody":"{\n    \n    String platform = Platform.PLATFORM;\n    \n    \n    String version = System.getProperty(\"swt.version\");\n    if (version == null) {\n        \n        version = \"\" + MAJOR_VERSION;\n        \n        if (MINOR_VERSION < 10) {\n            \n            version += \"00\";\n        } else {\n            \n            if (MINOR_VERSION < 100)\n                version += \"0\";\n        }\n        version += MINOR_VERSION;\n        \n        if (REVISION > 0)\n            version += \"r\" + REVISION;\n    }\n    try {\n        \n        String newName = name + \"-\" + platform + \"-\" + version;\n        System.loadLibrary(newName);\n        return;\n    } catch (UnsatisfiedLinkError e1) {\n        try {\n            \n            String newName = name + \"-\" + platform;\n            System.loadLibrary(newName);\n            return;\n        } catch (UnsatisfiedLinkError e2) {\n            throw e1;\n        }\n    }\n}",
			"comments":"/**\n* Loads the shared library that matches the version of the\n* Java code which is currently running.  SWT shared libraries\n* follow an encoding scheme where the major, minor and revision\n* numbers are embedded in the library name and this along with\n* <code>name</code> is used to load the library.  If this fails,\n* <code>name</code> is used in another attempt to load the library,\n* this time ignoring the SWT version encoding scheme.\n*\n* @param name the name of the library to load\n*/\n/*\n* Include platform name to support different windowing systems\n* on same operating system.\n*/\n/*\n* Get version qualifier.\n*/\n//$NON-NLS-1$\n//$NON-NLS-1$\n/* Force 3 digits in minor version number */\n//$NON-NLS-1$\n//$NON-NLS-1$\n/* No \"r\" until first revision */\n//$NON-NLS-1$\n//$NON-NLS-1$ //$NON-NLS-2$\n//$NON-NLS-1$\n",
			"methodName":"public static void loadLibrary(String name)"
		},
		"public static int JAVA_VERSION(int major, int minor, int micro)":{
			"methodBody":"{\n    return (major << 16) + (minor << 8) + micro;\n}",
			"comments":"/**\n* Returns the Java version number as an integer.\n*\n* @param major\n* @param minor\n* @param micro\n* @return the version\n*/\n",
			"methodName":"public static int JAVA_VERSION(int major, int minor, int micro)"
		}
	},
	"ClassORInterfaceName":[
		"Library"
	]
}
