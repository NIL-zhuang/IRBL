{
	"variables":[
		"controlSite",
		"iUnknown",
		"iPropertyNotifySink",
		"refCount",
		"propertyCookie",
		"eventTable",
		"ppvObject",
		"cpc",
		"cp",
		"cookie",
		"ppvObject",
		"cpc",
		"cp",
		"event",
		"event",
		"guid",
		"controlSite",
		"listener",
		"OLE",
		"SWT",
		"eventTable",
		"eventTable",
		"eventTable",
		"propertyID",
		"listener",
		"refCount",
		"refCount",
		"objIUnknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"cpc",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"cp",
		"iPropertyNotifySink",
		"cookie",
		"COM",
		"propertyCookie",
		"cookie",
		"cp",
		"cpc",
		"iUnknown",
		"args",
		"args",
		"iPropertyNotifySink",
		"args",
		"args",
		"args",
		"args",
		"propertyCookie",
		"objIUnknown",
		"objIUnknown",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"cpc",
		"COM",
		"ppvObject",
		"COM",
		"ppvObject",
		"cp",
		"propertyCookie",
		"COM",
		"propertyCookie",
		"cp",
		"cpc",
		"iUnknown",
		"iUnknown",
		"iUnknown",
		"iPropertyNotifySink",
		"iPropertyNotifySink",
		"iPropertyNotifySink",
		"event",
		"OLE",
		"SWT",
		"eventTable",
		"event",
		"eventType",
		"event",
		"controlSite",
		"eventTable",
		"event",
		"eventTable",
		"eventTable",
		"dispID",
		"COM",
		"event",
		"OLE",
		"dispID",
		"event",
		"COM",
		"eventTable",
		"eventTable",
		"dispID",
		"COM",
		"event",
		"event",
		"OLE",
		"dispID",
		"event",
		"event",
		"COM",
		"COM",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iUnknown",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iPropertyNotifySink",
		"COM",
		"COM",
		"ppvObject",
		"COM",
		"refCount",
		"refCount",
		"refCount",
		"listener",
		"OLE",
		"SWT",
		"eventTable",
		"eventTable",
		"propertyID",
		"listener",
		"controlSite",
		"ERROR_NULL_ARGUMENT",
		"IIDIConnectionPointContainer",
		"S_OK",
		"IIDIPropertyNotifySink",
		"S_OK",
		"S_OK",
		"IIDIConnectionPointContainer",
		"S_OK",
		"IIDIPropertyNotifySink",
		"S_OK",
		"S_OK",
		"ERROR_NULL_ARGUMENT",
		"type",
		"widget",
		"S_OK",
		"detail",
		"PROPERTY_CHANGED",
		"S_OK",
		"S_OK",
		"doit",
		"detail",
		"PROPERTY_CHANGING",
		"doit",
		"S_OK",
		"S_FALSE",
		"E_INVALIDARG",
		"sizeof",
		"IIDIUnknown",
		"S_OK",
		"IIDIPropertyNotifySink",
		"S_OK",
		"E_NOINTERFACE",
		"ERROR_NULL_ARGUMENT",
		"controlSite",
		"propertyID",
		"listener",
		"objIUnknown",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"objIUnknown",
		"eventType",
		"event",
		"dispID",
		"dispID",
		"riid",
		"ppvObject",
		"propertyID",
		"listener"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.ole.win32"
	],
	"import":[
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt"
	],
	"methods":[
		"addListener",
		"AddRef",
		"connect",
		"createCOMInterfaces",
		"method0",
		"method1",
		"method2",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"disconnect",
		"disposeCOMInterfaces",
		"notifyListener",
		"OnChanged",
		"OnRequestEdit",
		"QueryInterface",
		"Release",
		"removeListener",
		"createCOMInterfaces",
		"error",
		"hook",
		"QueryInterface",
		"FindConnectionPoint",
		"Advise",
		"getAddress",
		"Release",
		"Release",
		"QueryInterface",
		"AddRef",
		"Release",
		"QueryInterface",
		"AddRef",
		"Release",
		"OnChanged",
		"OnRequestEdit",
		"QueryInterface",
		"FindConnectionPoint",
		"Unadvise",
		"Release",
		"Release",
		"dispose",
		"dispose",
		"error",
		"sendEvent",
		"hooks",
		"notifyListener",
		"hooks",
		"notifyListener",
		"MoveMemory",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"disposeCOMInterfaces",
		"error",
		"unhook",
		"OleEventTable",
		"IConnectionPointContainer",
		"IConnectionPoint",
		"COMObject",
		"COMObject",
		"IConnectionPointContainer",
		"IConnectionPoint",
		"OleEvent",
		"OleEvent",
		"GUID"
	],
	"methodsBody":{
		"void addListener(int propertyID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        eventTable = new OleEventTable();\n    eventTable.hook(propertyID, listener);\n}",
			"comments":"",
			"methodName":"void addListener(int propertyID, OleListener listener)"
		},
		"void disconnect(IUnknown objIUnknown)":{
			"methodBody":"{\n    \n    if (propertyCookie != 0 && objIUnknown != null) {\n        int[] ppvObject = new int[1];\n        if (objIUnknown.QueryInterface(COM.IIDIConnectionPointContainer, ppvObject) == COM.S_OK) {\n            IConnectionPointContainer cpc = new IConnectionPointContainer(ppvObject[0]);\n            if (cpc.FindConnectionPoint(COM.IIDIPropertyNotifySink, ppvObject) == COM.S_OK) {\n                IConnectionPoint cp = new IConnectionPoint(ppvObject[0]);\n                if (cp.Unadvise(propertyCookie) == COM.S_OK) {\n                    propertyCookie = 0;\n                }\n                cp.Release();\n            }\n            cpc.Release();\n        }\n    }\n}",
			"comments":"// disconnect property notification sink\n",
			"methodName":"void disconnect(IUnknown objIUnknown)"
		},
		"private int OnRequestEdit(int dispID)":{
			"methodBody":"{\n    if (eventTable == null || !eventTable.hooks(dispID))\n        return COM.S_OK;\n    OleEvent event = new OleEvent();\n    event.doit = true;\n    event.detail = OLE.PROPERTY_CHANGING;\n    notifyListener(dispID, event);\n    return (event.doit) ? COM.S_OK : COM.S_FALSE;\n}",
			"comments":"",
			"methodName":"private int OnRequestEdit(int dispID)"
		},
		"int AddRef()":{
			"methodBody":"{\n    refCount++;\n    return refCount;\n}",
			"comments":"",
			"methodName":"int AddRef()"
		},
		"public int method4(int[] args)":{
			"methodBody":"{\n    return OnRequestEdit(args[0]);\n}",
			"comments":"",
			"methodName":"public int method4(int[] args)"
		},
		"private int QueryInterface(int riid, int ppvObject)":{
			"methodBody":"{\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_INVALIDARG;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIUnknown)) {\n        COM.MoveMemory(ppvObject, new int[] { iUnknown.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    if (COM.IsEqualGUID(guid, COM.IIDIPropertyNotifySink)) {\n        COM.MoveMemory(ppvObject, new int[] { iPropertyNotifySink.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    COM.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"private int QueryInterface(int riid, int ppvObject)"
		},
		"private void notifyListener(int eventType, OleEvent event)":{
			"methodBody":"{\n    if (event == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    event.type = eventType;\n    event.widget = controlSite;\n    eventTable.sendEvent(event);\n}",
			"comments":"/**\n* Notify listeners of an event.\n* <p>\n*\tThis method notifies all listeners that an event\n* has occurred.\n*\n* @param eventType the desired SWT event\n* @param event the event data\n*\n* @exception IllegalArgumentException <ul>\n* \t\t<li>ERROR_NULL_ARGUMENT when handler is null</li>\n* </ul>\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"private void notifyListener(int eventType, OleEvent event)"
		},
		"private void createCOMInterfaces()":{
			"methodBody":"{\n    \n    iUnknown = new COMObject(new int[] { 2, 0, 0 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n    };\n    iPropertyNotifySink = new COMObject(new int[] { 2, 0, 0, 1, 1 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return OnChanged(args[0]);\n        }\n\n        public int method4(int[] args) {\n            return OnRequestEdit(args[0]);\n        }\n    };\n}",
			"comments":"// register each of the interfaces that this object implements\n",
			"methodName":"private void createCOMInterfaces()"
		},
		"public int method3(int[] args)":{
			"methodBody":"{\n    return OnChanged(args[0]);\n}",
			"comments":"",
			"methodName":"public int method3(int[] args)"
		},
		"public int method2(int[] args)":{
			"methodBody":"{\n    return Release();\n}",
			"comments":"",
			"methodName":"public int method2(int[] args)"
		},
		"private void disposeCOMInterfaces()":{
			"methodBody":"{\n    if (iUnknown != null)\n        iUnknown.dispose();\n    iUnknown = null;\n    if (iPropertyNotifySink != null)\n        iPropertyNotifySink.dispose();\n    iPropertyNotifySink = null;\n}",
			"comments":"",
			"methodName":"private void disposeCOMInterfaces()"
		},
		"void connect(IUnknown objIUnknown)":{
			"methodBody":"{\n    \n    int[] ppvObject = new int[1];\n    if (objIUnknown.QueryInterface(COM.IIDIConnectionPointContainer, ppvObject) == COM.S_OK) {\n        IConnectionPointContainer cpc = new IConnectionPointContainer(ppvObject[0]);\n        if (cpc.FindConnectionPoint(COM.IIDIPropertyNotifySink, ppvObject) == COM.S_OK) {\n            IConnectionPoint cp = new IConnectionPoint(ppvObject[0]);\n            int[] cookie = new int[1];\n            if (cp.Advise(iPropertyNotifySink.getAddress(), cookie) == COM.S_OK) {\n                propertyCookie = cookie[0];\n            }\n            cp.Release();\n        }\n        cpc.Release();\n    }\n}",
			"comments":"// Set up property change notification sink\n",
			"methodName":"void connect(IUnknown objIUnknown)"
		},
		"public int method1(int[] args)":{
			"methodBody":"{\n    return AddRef();\n}",
			"comments":"",
			"methodName":"public int method1(int[] args)"
		},
		"private int OnChanged(int dispID)":{
			"methodBody":"{\n    if (eventTable == null || !eventTable.hooks(dispID))\n        return COM.S_OK;\n    OleEvent event = new OleEvent();\n    event.detail = OLE.PROPERTY_CHANGED;\n    notifyListener(dispID, event);\n    return COM.S_OK;\n}",
			"comments":"",
			"methodName":"private int OnChanged(int dispID)"
		},
		"void removeListener(int propertyID, OleListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        OLE.error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(propertyID, listener);\n}",
			"comments":"",
			"methodName":"void removeListener(int propertyID, OleListener listener)"
		},
		"int Release()":{
			"methodBody":"{\n    refCount--;\n    if (refCount == 0) {\n        disposeCOMInterfaces();\n    }\n    return refCount;\n}",
			"comments":"",
			"methodName":"int Release()"
		},
		"public int method0(int[] args)":{
			"methodBody":"{\n    return QueryInterface(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method0(int[] args)"
		}
	},
	"ClassORInterfaceName":[
		"OlePropertyChangeSink"
	]
}
