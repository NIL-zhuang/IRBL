{
	"variables":[
		"IsWin32s",
		"IsWin95",
		"IsWinNT",
		"IsWinCE",
		"IsPPC",
		"IsHPC",
		"IsSP",
		"IsDBLocale",
		"IsUnicode",
		"WIN32_MAJOR",
		"WIN32_MINOR",
		"WIN32_VERSION",
		"COMCTL32_MAJOR",
		"COMCTL32_MINOR",
		"COMCTL32_VERSION",
		"SHELL32_MAJOR",
		"SHELL32_MINOR",
		"SHELL32_VERSION",
		"VER_PLATFORM_WIN32s",
		"VER_PLATFORM_WIN32_WINDOWS",
		"VER_PLATFORM_WIN32_NT",
		"VER_PLATFORM_WIN32_CE",
		"info",
		"dbcsEnabled",
		"immEnabled",
		"langID",
		"primaryLang",
		"dvi",
		"lpLibFileName",
		"hModule",
		"name",
		"lpProcName",
		"i",
		"DllGetVersion",
		"dvi",
		"lpLibFileName",
		"hModule",
		"name",
		"lpProcName",
		"i",
		"DllGetVersion",
		"SYS_COLOR_INDEX_FLAG",
		"ABS_DOWNDISABLED",
		"ABS_DOWNNORMAL",
		"ABS_DOWNPRESSED",
		"ABS_LEFTDISABLED",
		"ABS_LEFTNORMAL",
		"ABS_LEFTPRESSED",
		"ABS_RIGHTDISABLED",
		"ABS_RIGHTNORMAL",
		"ABS_RIGHTPRESSED",
		"ABS_UPDISABLED",
		"ABS_UPNORMAL",
		"ABS_UPPRESSED",
		"AC_SRC_OVER",
		"AC_SRC_ALPHA",
		"ALTERNATE",
		"BDR_SUNKENINNER",
		"BFFM_INITIALIZED",
		"BFFM_SETSELECTION",
		"BFFM_VALIDATEFAILED",
		"BFFM_VALIDATEFAILEDW",
		"BFFM_VALIDATEFAILEDA",
		"BF_BOTTOM",
		"BF_RIGHT",
		"BIF_EDITBOX",
		"BIF_NEWDIALOGSTYLE",
		"BIF_RETURNONLYFSDIRS",
		"BIF_VALIDATE",
		"BITSPIXEL",
		"BI_BITFIELDS",
		"BI_RGB",
		"BLACKNESS",
		"BCM_FIRST",
		"BCM_GETIDEALSIZE",
		"BCM_GETIMAGELIST",
		"BCM_SETIMAGELIST",
		"BUTTON_IMAGELIST_ALIGN_LEFT",
		"BUTTON_IMAGELIST_ALIGN_RIGHT",
		"BUTTON_IMAGELIST_ALIGN_CENTER",
		"BM_CLICK",
		"BM_GETCHECK",
		"BM_SETCHECK",
		"BM_SETIMAGE",
		"BM_SETSTYLE",
		"BN_CLICKED",
		"BN_DOUBLECLICKED",
		"BP_CHECKBOX",
		"BST_CHECKED",
		"BST_UNCHECKED",
		"BS_BITMAP",
		"BS_CENTER",
		"BS_CHECKBOX",
		"BS_DEFPUSHBUTTON",
		"BS_FLAT",
		"BS_GROUPBOX",
		"BS_ICON",
		"BS_LEFT",
		"BS_NOTIFY",
		"BS_OWNERDRAW",
		"BS_PUSHBUTTON",
		"BS_PUSHLIKE",
		"BS_RADIOBUTTON",
		"BS_RIGHT",
		"BS_SOLID",
		"BTNS_AUTOSIZE",
		"BTNS_BUTTON",
		"BTNS_CHECK",
		"BTNS_CHECKGROUP",
		"BTNS_DROPDOWN",
		"BTNS_GROUP",
		"BTNS_SEP",
		"BTNS_SHOWTEXT",
		"CBN_EDITCHANGE",
		"CBN_KILLFOCUS",
		"CBN_SELCHANGE",
		"CBN_SETFOCUS",
		"CBS_AUTOHSCROLL",
		"CBS_DROPDOWN",
		"CBS_DROPDOWNLIST",
		"CBS_CHECKEDNORMAL",
		"CBS_MIXEDNORMAL",
		"CBS_NOINTEGRALHEIGHT",
		"CBS_SIMPLE",
		"CBS_UNCHECKEDNORMAL",
		"CB_ADDSTRING",
		"CB_DELETESTRING",
		"CB_ERR",
		"CB_ERRSPACE",
		"CB_FINDSTRINGEXACT",
		"CB_GETCOUNT",
		"CB_GETCURSEL",
		"CB_GETDROPPEDCONTROLRECT",
		"CB_GETDROPPEDSTATE",
		"CB_GETEDITSEL",
		"CB_GETITEMHEIGHT",
		"CB_GETLBTEXT",
		"CB_GETLBTEXTLEN",
		"CB_INSERTSTRING",
		"CB_LIMITTEXT",
		"CB_RESETCONTENT",
		"CB_SELECTSTRING",
		"CB_SETCURSEL",
		"CB_SETEDITSEL",
		"CB_SHOWDROPDOWN",
		"CCM_FIRST",
		"CCM_SETBKCOLOR",
		"CCM_SETVERSION",
		"CCS_NODIVIDER",
		"CCS_NORESIZE",
		"CCS_VERT",
		"CC_ANYCOLOR",
		"CC_ENABLEHOOK",
		"CC_RGBINIT",
		"CDDS_POSTERASE",
		"CDDS_POSTPAINT",
		"CDDS_PREERASE",
		"CDDS_PREPAINT",
		"CDDS_ITEM",
		"CDDS_ITEMPOSTPAINT",
		"CDDS_ITEMPREPAINT",
		"CDDS_SUBITEM",
		"CDRF_DODEFAULT",
		"CDRF_NEWFONT",
		"CDRF_NOTIFYITEMDRAW",
		"CDRF_NOTIFYPOSTERASE",
		"CDRF_NOTIFYPOSTPAINT",
		"CDRF_NOTIFYSUBITEMDRAW",
		"CFE_AUTOCOLOR",
		"CFE_ITALIC",
		"CFE_STRIKEOUT",
		"CFE_UNDERLINE",
		"CFM_BOLD",
		"CFM_CHARSET",
		"CFM_COLOR",
		"CFM_FACE",
		"CFM_ITALIC",
		"CFM_SIZE",
		"CFM_STRIKEOUT",
		"CFM_UNDERLINE",
		"CFM_WEIGHT",
		"CFS_POINT",
		"CFS_RECT",
		"CF_EFFECTS",
		"CF_INITTOLOGFONTSTRUCT",
		"CF_SCREENFONTS",
		"CF_TEXT",
		"CF_UNICODETEXT",
		"CF_USESTYLE",
		"CLR_DEFAULT",
		"CLR_INVALID",
		"CLSCTX_INPROC_SERVER",
		"COLORONCOLOR",
		"COLOR_3DDKSHADOW",
		"COLOR_3DFACE",
		"COLOR_3DHIGHLIGHT",
		"COLOR_3DHILIGHT",
		"COLOR_3DLIGHT",
		"COLOR_3DSHADOW",
		"COLOR_ACTIVECAPTION",
		"COLOR_BTNFACE",
		"COLOR_BTNHIGHLIGHT",
		"COLOR_BTNSHADOW",
		"COLOR_BTNTEXT",
		"COLOR_CAPTIONTEXT",
		"COLOR_GRADIENTACTIVECAPTION",
		"COLOR_GRADIENTINACTIVECAPTION",
		"COLOR_GRAYTEXT",
		"COLOR_HIGHLIGHT",
		"COLOR_HIGHLIGHTTEXT",
		"COLOR_INACTIVECAPTION",
		"COLOR_INACTIVECAPTIONTEXT",
		"COLOR_INFOBK",
		"COLOR_INFOTEXT",
		"COLOR_MENU",
		"COLOR_MENUTEXT",
		"COLOR_SCROLLBAR",
		"COLOR_WINDOW",
		"COLOR_WINDOWFRAME",
		"COLOR_WINDOWTEXT",
		"COMPLEXREGION",
		"CP_ACP",
		"CP_UTF8",
		"CP_INSTALLED",
		"CS_BYTEALIGNWINDOW",
		"CS_DBLCLKS",
		"CS_DROPSHADOW",
		"CS_GLOBALCLASS",
		"CS_HREDRAW",
		"CS_VREDRAW",
		"CW_USEDEFAULT",
		"DCX_CACHE",
		"DCX_CLIPCHILDREN",
		"DCX_CLIPSIBLINGS",
		"DEFAULT_CHARSET",
		"DEFAULT_GUI_FONT",
		"DFCS_BUTTONCHECK",
		"DFCS_CHECKED",
		"DFCS_FLAT",
		"DFCS_INACTIVE",
		"DFCS_PUSHED",
		"DFCS_SCROLLDOWN",
		"DFCS_SCROLLLEFT",
		"DFCS_SCROLLRIGHT",
		"DFCS_SCROLLUP",
		"DFC_BUTTON",
		"DFC_SCROLL",
		"DIB_RGB_COLORS",
		"DISP_E_EXCEPTION",
		"DI_NORMAL",
		"DI_NOMIRROR",
		"DLGC_BUTTON",
		"DLGC_HASSETSEL",
		"DLGC_STATIC",
		"DLGC_WANTALLKEYS",
		"DLGC_WANTARROWS",
		"DLGC_WANTCHARS",
		"DLGC_WANTTAB",
		"DM_SETDEFID",
		"DSS_DISABLED",
		"DSTINVERT",
		"DST_BITMAP",
		"DST_ICON",
		"DT_CALCRECT",
		"DT_CENTER",
		"DT_EDITCONTROL",
		"DT_EXPANDTABS",
		"DT_ENDELLIPSIS",
		"DT_LEFT",
		"DT_NOPREFIX",
		"DT_RASPRINTER",
		"DT_RIGHT",
		"DT_SINGLELINE",
		"DT_VCENTER",
		"DT_WORDBREAK",
		"ECOOP_AND",
		"ECOOP_OR",
		"ECO_AUTOHSCROLL",
		"EDGE_ETCHED",
		"EDGE_SUNKEN",
		"EM_CANUNDO",
		"EM_CHARFROMPOS",
		"EM_DISPLAYBAND",
		"EM_GETFIRSTVISIBLELINE",
		"EM_GETLIMITTEXT",
		"EM_GETLINE",
		"EM_GETLINECOUNT",
		"EM_GETMARGINS",
		"EM_GETPASSWORDCHAR",
		"EM_GETSCROLLPOS",
		"EM_GETSEL",
		"EM_LIMITTEXT",
		"EM_LINEFROMCHAR",
		"EM_LINEINDEX",
		"EM_LINELENGTH",
		"EM_LINESCROLL",
		"EM_POSFROMCHAR",
		"EM_REPLACESEL",
		"EM_SCROLLCARET",
		"EM_SETBKGNDCOLOR",
		"EM_SETLIMITTEXT",
		"EM_SETOPTIONS",
		"EM_SETPARAFORMAT",
		"EM_SETPASSWORDCHAR",
		"EM_SETREADONLY",
		"EM_SETSEL",
		"EM_SETTABSTOPS",
		"EM_UNDO",
		"EN_ALIGN_LTR_EC",
		"EN_ALIGN_RTL_EC",
		"EN_CHANGE",
		"ERROR_NO_MORE_ITEMS",
		"ESB_DISABLE_BOTH",
		"ESB_ENABLE_BOTH",
		"ES_AUTOHSCROLL",
		"ES_AUTOVSCROLL",
		"ES_CENTER",
		"ES_MULTILINE",
		"ES_NOHIDESEL",
		"ES_PASSWORD",
		"ES_READONLY",
		"ES_RIGHT",
		"ETO_CLIPPED",
		"EVENT_OBJECT_FOCUS",
		"EVENT_OBJECT_LOCATIONCHANGE",
		"EVENT_OBJECT_SELECTIONWITHIN",
		"EVENT_OBJECT_VALUECHANGE",
		"FALT",
		"FCONTROL",
		"FE_FONTSMOOTHINGCLEARTYPE",
		"FNERR_INVALIDFILENAME",
		"FORMAT_MESSAGE_ALLOCATE_BUFFER",
		"FORMAT_MESSAGE_FROM_SYSTEM",
		"FORMAT_MESSAGE_IGNORE_INSERTS",
		"FSHIFT",
		"FVIRTKEY",
		"GCS_COMPSTR",
		"GCS_RESULTSTR",
		"GM_ADVANCED",
		"GMDI_USEDISABLED",
		"GMEM_FIXED",
		"GMEM_ZEROINIT",
		"GN_CONTEXTMENU",
		"GPTR",
		"GRADIENT_FILL_RECT_H",
		"GRADIENT_FILL_RECT_V",
		"GTL_NUMBYTES",
		"GTL_NUMCHARS",
		"GTL_PRECISE",
		"GT_DEFAULT",
		"GUI_16BITTASK",
		"GUI_CARETBLINKING",
		"GUI_INMENUMODE",
		"GUI_INMOVESIZE",
		"GUI_POPUPMENUMODE",
		"GUI_SYSTEMMENUMODE",
		"GWL_EXSTYLE",
		"GWL_ID",
		"GWL_STYLE",
		"GWL_USERDATA",
		"GWL_WNDPROC",
		"GW_CHILD",
		"GW_HWNDFIRST",
		"GW_HWNDLAST",
		"GW_HWNDNEXT",
		"GW_HWNDPREV",
		"GW_OWNER",
		"HBMMENU_CALLBACK",
		"HCF_HIGHCONTRASTON",
		"HDF_CENTER",
		"HDF_JUSTIFYMASK",
		"HDF_IMAGE",
		"HDF_LEFT",
		"HDF_RIGHT",
		"HDI_IMAGE",
		"HDI_ORDER",
		"HDI_TEXT",
		"HDI_WIDTH",
		"HDI_FORMAT",
		"HDM_FIRST",
		"HDM_DELETEITEM",
		"HDM_GETBITMAPMARGIN",
		"HDM_GETITEMCOUNT",
		"HDM_GETITEMA",
		"HDM_GETITEMW",
		"HDM_GETITEM",
		"HDM_GETITEMRECT",
		"HDM_INSERTITEMA",
		"HDM_INSERTITEMW",
		"HDM_INSERTITEM",
		"HDM_LAYOUT",
		"HDM_SETIMAGELIST",
		"HDM_SETITEMA",
		"HDM_SETITEMW",
		"HDM_SETITEM",
		"HDN_FIRST",
		"HDN_BEGINDRAG",
		"HDN_BEGINTRACK",
		"HDN_BEGINTRACKW",
		"HDN_BEGINTRACKA",
		"HDN_DIVIDERDBLCLICKA",
		"HDN_DIVIDERDBLCLICKW",
		"HDN_DIVIDERDBLCLICK",
		"HDN_ENDDRAG",
		"HDN_ITEMCHANGED",
		"HDN_ITEMCHANGEDW",
		"HDN_ITEMCHANGEDA",
		"HDN_ITEMCHANGINGW",
		"HDN_ITEMCHANGINGA",
		"HDN_ITEMCLICKW",
		"HDN_ITEMCLICKA",
		"HDN_ITEMDBLCLICKW",
		"HDN_ITEMDBLCLICKA",
		"HDN_ITEMDBLCLICK",
		"HDS_BUTTONS",
		"HDS_FULLDRAG",
		"HDS_HIDDEN",
		"HEAP_ZERO_MEMORY",
		"HELPINFO_MENUITEM",
		"HICF_ARROWKEYS",
		"HINST_COMMCTRL",
		"HKEY_CLASSES_ROOT",
		"HKEY_CURRENT_USER",
		"HKEY_LOCAL_MACHINE",
		"HORZRES",
		"HTBORDER",
		"HTCAPTION",
		"HTCLIENT",
		"HTERROR",
		"HTHSCROLL",
		"HTMENU",
		"HTNOWHERE",
		"HTSYSMENU",
		"HTTRANSPARENT",
		"HTVSCROLL",
		"HWND_BOTTOM",
		"HWND_TOP",
		"HWND_TOPMOST",
		"HWND_NOTOPMOST",
		"ICC_COOL_CLASSES",
		"ICM_NOTOPEN",
		"ICON_BIG",
		"ICON_SMALL",
		"I_IMAGECALLBACK",
		"I_IMAGENONE",
		"IDABORT",
		"IDB_STD_SMALL_COLOR",
		"IDC_APPSTARTING",
		"IDC_ARROW",
		"IDC_CROSS",
		"IDC_HAND",
		"IDC_HELP",
		"IDC_IBEAM",
		"IDC_NO",
		"IDC_SIZE",
		"IDC_SIZEALL",
		"IDC_SIZENESW",
		"IDC_SIZENS",
		"IDC_SIZENWSE",
		"IDC_SIZEWE",
		"IDC_UPARROW",
		"IDC_WAIT",
		"IDNO",
		"IDOK",
		"IDRETRY",
		"IDYES",
		"ILC_COLOR",
		"ILC_COLOR16",
		"ILC_COLOR24",
		"ILC_COLOR32",
		"ILC_COLOR4",
		"ILC_COLOR8",
		"ILC_MASK",
		"ILC_MIRROR",
		"ILD_NORMAL",
		"IMAGE_BITMAP",
		"IMAGE_CURSOR",
		"IMAGE_ICON",
		"IME_CMODE_FULLSHAPE",
		"IME_CMODE_KATAKANA",
		"IME_CMODE_NATIVE",
		"IME_CMODE_ROMAN",
		"INFINITE",
		"INPUT_KEYBOARD",
		"INPUT_MOUSE",
		"KEY_ENUMERATE_SUB_KEYS",
		"KEY_NOTIFY",
		"KEY_QUERY_VALUE",
		"KEY_READ",
		"KEYEVENTF_KEYUP",
		"L_MAX_URL_LENGTH",
		"LANG_KOREAN",
		"LANG_NEUTRAL",
		"LANG_USER_DEFAULT",
		"LAYOUT_RTL",
		"LBN_DBLCLK",
		"LBN_SELCHANGE",
		"LBS_EXTENDEDSEL",
		"LBS_MULTIPLESEL",
		"LBS_NOINTEGRALHEIGHT",
		"LBS_NOTIFY",
		"LB_ADDSTRING",
		"LB_DELETESTRING",
		"LB_ERR",
		"LB_ERRSPACE",
		"LB_FINDSTRINGEXACT",
		"LB_GETCARETINDEX",
		"LB_GETCOUNT",
		"LB_GETCURSEL",
		"LB_GETHORIZONTALEXTENT",
		"LB_GETITEMHEIGHT",
		"LB_GETITEMRECT",
		"LB_GETSEL",
		"LB_GETSELCOUNT",
		"LB_GETSELITEMS",
		"LB_GETTEXT",
		"LB_GETTEXTLEN",
		"LB_GETTOPINDEX",
		"LB_INITSTORAGE",
		"LB_INSERTSTRING",
		"LB_RESETCONTENT",
		"LB_SELITEMRANGE",
		"LB_SELITEMRANGEEX",
		"LB_SETCARETINDEX",
		"LB_SETCURSEL",
		"LB_SETHORIZONTALEXTENT",
		"LB_SETSEL",
		"LB_SETTOPINDEX",
		"LF_FACESIZE",
		"LGRPID_ARABIC",
		"LGRPID_HEBREW",
		"LGRPID_INSTALLED",
		"LIF_ITEMINDEX",
		"LIF_STATE",
		"LIS_FOCUSED",
		"LIS_ENABLED",
		"LM_GETIDEALHEIGHT",
		"LM_SETITEM",
		"LM_GETITEM",
		"LCID_SUPPORTED",
		"LOCALE_IDEFAULTANSICODEPAGE",
		"LOCALE_SDECIMAL",
		"LOCALE_SISO3166CTRYNAME",
		"LOCALE_SISO639LANGNAME",
		"LOCALE_USER_DEFAULT",
		"LOGPIXELSX",
		"LOGPIXELSY",
		"LPSTR_TEXTCALLBACK",
		"LR_DEFAULTCOLOR",
		"LR_SHARED",
		"LVCFMT_CENTER",
		"LVCFMT_IMAGE",
		"LVCFMT_LEFT",
		"LVCFMT_RIGHT",
		"LVCF_FMT",
		"LVCF_IMAGE",
		"LVCFMT_JUSTIFYMASK",
		"LVCF_TEXT",
		"LVCF_WIDTH",
		"LVHT_ONITEM",
		"LVHT_ONITEMICON",
		"LVHT_ONITEMLABEL",
		"LVHT_ONITEMSTATEICON",
		"LVIF_IMAGE",
		"LVIF_INDENT",
		"LVIF_STATE",
		"LVIF_TEXT",
		"LVIR_BOUNDS",
		"LVIR_ICON",
		"LVIR_LABEL",
		"LVIR_SELECTBOUNDS",
		"LVIS_DROPHILITED",
		"LVIS_FOCUSED",
		"LVIS_SELECTED",
		"LVIS_STATEIMAGEMASK",
		"LVM_APPROXIMATEVIEWRECT",
		"LVM_DELETEALLITEMS",
		"LVM_DELETECOLUMN",
		"LVM_DELETEITEM",
		"LVM_ENSUREVISIBLE",
		"LVM_FIRST",
		"LVM_GETBKCOLOR",
		"LVM_GETCOLUMN",
		"LVM_GETCOLUMNORDERARRAY",
		"LVM_GETCOLUMNWIDTH",
		"LVM_GETCOUNTPERPAGE",
		"LVM_GETEXTENDEDLISTVIEWSTYLE",
		"LVM_GETHEADER",
		"LVM_GETIMAGELIST",
		"LVM_GETITEM",
		"LVM_GETITEMW",
		"LVM_GETITEMA",
		"LVM_GETITEMCOUNT",
		"LVM_GETITEMRECT",
		"LVM_GETITEMSTATE",
		"LVM_GETNEXTITEM",
		"LVM_GETSELECTEDCOUNT",
		"LVM_GETSTRINGWIDTH",
		"LVM_GETSUBITEMRECT",
		"LVM_GETTEXTCOLOR",
		"LVM_GETTOOLTIPS",
		"LVM_GETTOPINDEX",
		"LVM_HITTEST",
		"LVM_INSERTCOLUMN",
		"LVM_INSERTITEM",
		"LVM_REDRAWITEMS",
		"LVM_SCROLL",
		"LVM_SETBKCOLOR",
		"LVM_SETCALLBACKMASK",
		"LVM_SETCOLUMN",
		"LVM_SETCOLUMNORDERARRAY",
		"LVM_SETCOLUMNWIDTH",
		"LVM_SETEXTENDEDLISTVIEWSTYLE",
		"LVM_SETIMAGELIST",
		"LVM_SETITEM",
		"LVM_SETITEMCOUNT",
		"LVM_SETITEMSTATE",
		"LVM_SETTEXTBKCOLOR",
		"LVM_SETTEXTCOLOR",
		"LVNI_FOCUSED",
		"LVNI_SELECTED",
		"LVN_BEGINDRAG",
		"LVN_BEGINRDRAG",
		"LVN_COLUMNCLICK",
		"LVN_FIRST",
		"LVN_GETDISPINFOA",
		"LVN_GETDISPINFOW",
		"LVN_ITEMACTIVATE",
		"LVN_ITEMCHANGED",
		"LVN_MARQUEEBEGIN",
		"LVN_ODFINDITEMA",
		"LVN_ODFINDITEMW",
		"LVSCW_AUTOSIZE",
		"LVSCW_AUTOSIZE_USEHEADER",
		"LVSICF_NOINVALIDATEALL",
		"LVSICF_NOSCROLL",
		"LVSIL_SMALL",
		"LVSIL_STATE",
		"LVS_EX_FULLROWSELECT",
		"LVS_EX_GRIDLINES",
		"LVS_EX_HEADERDRAGDROP",
		"LVS_EX_LABELTIP",
		"LVS_EX_ONECLICKACTIVATE",
		"LVS_EX_SUBITEMIMAGES",
		"LVS_EX_TRACKSELECT",
		"LVS_EX_TWOCLICKACTIVATE",
		"LVS_NOCOLUMNHEADER",
		"LVS_NOSCROLL",
		"LVS_OWNERDATA",
		"LVS_REPORT",
		"LVS_SHAREIMAGELISTS",
		"LVS_SHOWSELALWAYS",
		"LVS_SINGLESEL",
		"MAX_LINKID_TEXT",
		"MAX_PATH",
		"MA_NOACTIVATE",
		"MB_ABORTRETRYIGNORE",
		"MB_APPLMODAL",
		"MB_ICONERROR",
		"MB_ICONINFORMATION",
		"MB_ICONQUESTION",
		"MB_ICONWARNING",
		"MB_OK",
		"MB_OKCANCEL",
		"MB_PRECOMPOSED",
		"MB_RETRYCANCEL",
		"MB_RTLREADING",
		"MB_SYSTEMMODAL",
		"MB_TASKMODAL",
		"MB_YESNO",
		"MB_YESNOCANCEL",
		"MDIS_ALLCHILDSTYLES",
		"MFS_CHECKED",
		"MFS_DISABLED",
		"MFS_GRAYED",
		"MFT_RADIOCHECK",
		"MFT_RIGHTJUSTIFY",
		"MFT_RIGHTORDER",
		"MFT_SEPARATOR",
		"MFT_STRING",
		"MF_BYCOMMAND",
		"MF_BYPOSITION",
		"MF_CHECKED",
		"MF_DISABLED",
		"MF_ENABLED",
		"MF_GRAYED",
		"MF_HILITE",
		"MF_POPUP",
		"MF_SEPARATOR",
		"MF_SYSMENU",
		"MF_UNCHECKED",
		"MIIM_BITMAP",
		"MIIM_DATA",
		"MIIM_ID",
		"MIIM_STATE",
		"MIIM_SUBMENU",
		"MIIM_TYPE",
		"MIM_STYLE",
		"MK_CONTROL",
		"MK_LBUTTON",
		"MK_MBUTTON",
		"MK_RBUTTON",
		"MK_SHIFT",
		"MK_XBUTTON1",
		"MK_XBUTTON2",
		"MM_TEXT",
		"MNC_CLOSE",
		"MNS_CHECKORBMP",
		"MONITOR_DEFAULTTONEAREST",
		"MONITORINFOF_PRIMARY",
		"MOUSEEVENTF_ABSOLUTE",
		"MOUSEEVENTF_LEFTDOWN",
		"MOUSEEVENTF_LEFTUP",
		"MOUSEEVENTF_MIDDLEDOWN",
		"MOUSEEVENTF_MIDDLEUP",
		"MOUSEEVENTF_MOVE",
		"MOUSEEVENTF_RIGHTDOWN",
		"MOUSEEVENTF_RIGHTUP",
		"MWMO_INPUTAVAILABLE",
		"NIF_ICON",
		"NIF_INFO",
		"NIF_MESSAGE",
		"NIF_STATE",
		"NIF_TIP",
		"NIIF_ERROR",
		"NIIF_INFO",
		"NIIF_NONE",
		"NIIF_WARNING",
		"NIM_ADD",
		"NIM_DELETE",
		"NIM_MODIFY",
		"NIS_HIDDEN",
		"NM_FIRST",
		"NM_CLICK",
		"NM_CUSTOMDRAW",
		"NM_DBLCLK",
		"NM_RECOGNIZEGESTURE",
		"NM_RELEASEDCAPTURE",
		"NM_RETURN",
		"NOTIFYICONDATAA_V2_SIZE",
		"NOTIFYICONDATAW_V2_SIZE",
		"NOTIFYICONDATA_V2_SIZE",
		"NOTSRCCOPY",
		"NULLREGION",
		"NULL_BRUSH",
		"NULL_PEN",
		"NUMRESERVED",
		"OBJID_CARET",
		"OBJID_CLIENT",
		"OBJID_MENU",
		"OBJID_WINDOW",
		"OBJ_BITMAP",
		"OBJ_FONT",
		"OBJ_PEN",
		"OBM_CHECKBOXES",
		"ODS_SELECTED",
		"ODT_MENU",
		"OFN_ALLOWMULTISELECT",
		"OFN_EXPLORER",
		"OFN_HIDEREADONLY",
		"OFN_NOCHANGEDIR",
		"OIC_BANG",
		"OIC_HAND",
		"OIC_INFORMATION",
		"OIC_QUES",
		"OIC_WINLOGO",
		"OPAQUE",
		"PATCOPY",
		"PATINVERT",
		"PBM_GETPOS",
		"PBM_GETRANGE",
		"PBM_SETBARCOLOR",
		"PBM_SETBKCOLOR",
		"PBM_SETMARQUEE",
		"PBM_SETPOS",
		"PBM_SETRANGE32",
		"PBM_STEPIT",
		"PBS_MARQUEE",
		"PBS_SMOOTH",
		"PBS_VERTICAL",
		"PD_ALLPAGES",
		"PD_COLLATE",
		"PD_PAGENUMS",
		"PD_PRINTTOFILE",
		"PD_RETURNDC",
		"PD_SELECTION",
		"PD_USEDEVMODECOPIESANDCOLLATE",
		"PFM_TABSTOPS",
		"PHYSICALHEIGHT",
		"PHYSICALOFFSETX",
		"PHYSICALOFFSETY",
		"PHYSICALWIDTH",
		"PLANES",
		"PM_NOREMOVE",
		"PM_NOYIELD",
		"QS_HOTKEY",
		"QS_KEY",
		"QS_MOUSEMOVE",
		"QS_MOUSEBUTTON",
		"QS_MOUSE",
		"QS_INPUT",
		"QS_POSTMESSAGE",
		"QS_TIMER",
		"QS_PAINT",
		"QS_SENDMESSAGE",
		"QS_ALLINPUT",
		"PM_QS_INPUT",
		"PM_QS_POSTMESSAGE",
		"PM_QS_PAINT",
		"PM_QS_SENDMESSAGE",
		"PM_REMOVE",
		"PROGRESS_CLASS",
		"PS_DASH",
		"PS_DASHDOT",
		"PS_DASHDOTDOT",
		"PS_DOT",
		"PS_ENDCAP_FLAT",
		"PS_ENDCAP_SQUARE",
		"PS_ENDCAP_ROUND",
		"PS_ENDCAP_MASK",
		"PS_GEOMETRIC",
		"PS_JOIN_BEVEL",
		"PS_JOIN_MASK",
		"PS_JOIN_MITER",
		"PS_JOIN_ROUND",
		"PS_SOLID",
		"PS_STYLE_MASK",
		"PS_TYPE_MASK",
		"PS_USERSTYLE",
		"R2_COPYPEN",
		"R2_XORPEN",
		"RASTERCAPS",
		"RASTER_FONTTYPE",
		"RBBIM_CHILD",
		"RBBIM_CHILDSIZE",
		"RBBIM_COLORS",
		"RBBIM_HEADERSIZE",
		"RBBIM_ID",
		"RBBIM_IDEALSIZE",
		"RBBIM_SIZE",
		"RBBIM_STYLE",
		"RBBIM_TEXT",
		"RBBS_BREAK",
		"RBBS_GRIPPERALWAYS",
		"RBBS_NOGRIPPER",
		"RBBS_USECHEVRON",
		"RBBS_VARIABLEHEIGHT",
		"RBN_FIRST",
		"RBN_CHILDSIZE",
		"RBN_CHEVRONPUSHED",
		"RBN_HEIGHTCHANGE",
		"RBS_DBLCLKTOGGLE",
		"RBS_BANDBORDERS",
		"RBS_VARHEIGHT",
		"RB_DELETEBAND",
		"RB_GETBANDBORDERS",
		"RB_GETBANDCOUNT",
		"RB_GETBANDINFO",
		"RB_GETBANDMARGINS",
		"RB_GETBARHEIGHT",
		"RB_GETBKCOLOR",
		"RB_GETRECT",
		"RB_GETTEXTCOLOR",
		"RB_IDTOINDEX",
		"RB_INSERTBAND",
		"RB_MOVEBAND",
		"RB_SETBANDINFO",
		"RB_SETBKCOLOR",
		"RB_SETTEXTCOLOR",
		"RC_BITBLT",
		"RC_PALETTE",
		"RDW_ALLCHILDREN",
		"RDW_ERASE",
		"RDW_FRAME",
		"RDW_INVALIDATE",
		"RDW_UPDATENOW",
		"READ_CONTROL",
		"REBARCLASSNAME",
		"RGN_AND",
		"RGN_COPY",
		"RGN_DIFF",
		"RGN_ERROR",
		"RGN_OR",
		"SBP_ARROWBTN",
		"SBS_HORZ",
		"SBS_VERT",
		"SB_BOTH",
		"SB_BOTTOM",
		"SB_CTL",
		"SB_ENDSCROLL",
		"SB_HORZ",
		"SB_LINEDOWN",
		"SB_LINEUP",
		"SB_PAGEDOWN",
		"SB_PAGEUP",
		"SB_THUMBPOSITION",
		"SB_THUMBTRACK",
		"SB_TOP",
		"SB_VERT",
		"SCF_ALL",
		"SCF_DEFAULT",
		"SCF_SELECTION",
		"SC_CLOSE",
		"SC_HSCROLL",
		"SC_KEYMENU",
		"SC_MAXIMIZE",
		"SC_MINIMIZE",
		"SC_NEXTWINDOW",
		"SC_RESTORE",
		"SC_SIZE",
		"SC_TASKLIST",
		"SC_VSCROLL",
		"SEM_FAILCRITICALERRORS",
		"SF_RTF",
		"SHCMBF_HIDDEN",
		"SHCMBM_OVERRIDEKEY",
		"SHCMBM_SETSUBMENU",
		"SHCMBM_GETSUBMENU",
		"SHMBOF_NODEFAULT",
		"SHMBOF_NOTIFY",
		"SHRG_RETURNCMD",
		"SIF_ALL",
		"SIF_DISABLENOSCROLL",
		"SIF_PAGE",
		"SIF_POS",
		"SIF_RANGE",
		"SIF_TRACKPOS",
		"SIP_DOWN",
		"SIP_UP",
		"SIPF_ON",
		"SIZE_RESTORED",
		"SIZE_MINIMIZED",
		"SIZE_MAXIMIZED",
		"SIZEPALETTE",
		"SM_CMONITORS",
		"SM_CXBORDER",
		"SM_CXCURSOR",
		"SM_CXEDGE",
		"SM_CXHSCROLL",
		"SM_CXICON",
		"SM_CYICON",
		"SM_CXVIRTUALSCREEN",
		"SM_CYVIRTUALSCREEN",
		"SM_CXSMICON",
		"SM_CYSMICON",
		"SM_CXSCREEN",
		"SM_XVIRTUALSCREEN",
		"SM_YVIRTUALSCREEN",
		"SM_CXVSCROLL",
		"SM_CYBORDER",
		"SM_CYCURSOR",
		"SM_CYHSCROLL",
		"SM_CYMENU",
		"SM_CXMINTRACK",
		"SM_CYMINTRACK",
		"SM_CYSCREEN",
		"SM_CYVSCROLL",
		"SM_DBCSENABLED",
		"SM_IMMENABLED",
		"SPI_GETFONTSMOOTHINGTYPE",
		"SPI_GETHIGHCONTRAST",
		"SPI_GETWORKAREA",
		"SPI_GETNONCLIENTMETRICS",
		"SPI_GETWHEELSCROLLLINES",
		"SPI_SETSIPINFO",
		"SRCAND",
		"SRCCOPY",
		"SRCINVERT",
		"SRCPAINT",
		"SS_BITMAP",
		"SS_CENTER",
		"SS_CENTERIMAGE",
		"SS_ICON",
		"SS_LEFT",
		"SS_LEFTNOWORDWRAP",
		"SS_NOTIFY",
		"SS_OWNERDRAW",
		"SS_REALSIZEIMAGE",
		"SS_RIGHT",
		"STANDARD_RIGHTS_READ",
		"STD_COPY",
		"STD_CUT",
		"STD_FILENEW",
		"STD_FILEOPEN",
		"STD_FILESAVE",
		"STD_PASTE",
		"STM_GETIMAGE",
		"STM_SETIMAGE",
		"SWP_ASYNCWINDOWPOS",
		"SWP_DRAWFRAME",
		"SWP_NOACTIVATE",
		"SWP_NOCOPYBITS",
		"SWP_NOMOVE",
		"SWP_NOREDRAW",
		"SWP_NOSIZE",
		"SWP_NOZORDER",
		"SW_ERASE",
		"SW_HIDE",
		"SW_INVALIDATE",
		"SW_MINIMIZE",
		"SW_PARENTOPENING",
		"SW_RESTORE",
		"SW_SCROLLCHILDREN",
		"SW_SHOW",
		"SW_SHOWMAXIMIZED",
		"SW_SHOWMINIMIZED",
		"SW_SHOWMINNOACTIVE",
		"SW_SHOWNA",
		"SW_SHOWNOACTIVATE",
		"SYNCHRONIZE",
		"SYSRGN",
		"SYSTEM_FONT",
		"S_OK",
		"TABP_BODY",
		"TBIF_COMMAND",
		"TBIF_STATE",
		"TBIF_IMAGE",
		"TBIF_LPARAM",
		"TBIF_SIZE",
		"TBIF_STYLE",
		"TBIF_TEXT",
		"TB_GETEXTENDEDSTYLE",
		"TBM_GETLINESIZE",
		"TBM_GETPAGESIZE",
		"TBM_GETPOS",
		"TBM_GETRANGEMAX",
		"TBM_GETRANGEMIN",
		"TBM_GETTHUMBRECT",
		"TBM_SETLINESIZE",
		"TBM_SETPAGESIZE",
		"TBM_SETPOS",
		"TBM_SETRANGEMAX",
		"TBM_SETRANGEMIN",
		"TBM_SETTICFREQ",
		"TBN_DROPDOWN",
		"TBN_FIRST",
		"TBN_HOTITEMCHANGE",
		"TBSTATE_CHECKED",
		"TBSTATE_PRESSED",
		"TBSTYLE_CUSTOMERASE",
		"TBSTYLE_DROPDOWN",
		"TBSTATE_ENABLED",
		"TBSTYLE_AUTOSIZE",
		"TBSTYLE_EX_DOUBLEBUFFER",
		"TBSTYLE_EX_DRAWDDARROWS",
		"TBSTYLE_EX_HIDECLIPPEDBUTTONS",
		"TBSTYLE_EX_MIXEDBUTTONS",
		"TBSTYLE_FLAT",
		"TBSTYLE_LIST",
		"TBSTYLE_TOOLTIPS",
		"TBSTYLE_TRANSPARENT",
		"TBSTYLE_WRAPABLE",
		"TBS_AUTOTICKS",
		"TBS_BOTH",
		"TBS_DOWNISLEFT",
		"TBS_HORZ",
		"TBS_VERT",
		"TB_ADDSTRING",
		"TB_AUTOSIZE",
		"TB_BUTTONCOUNT",
		"TB_BUTTONSTRUCTSIZE",
		"TB_COMMANDTOINDEX",
		"TB_DELETEBUTTON",
		"TB_ENDTRACK",
		"TB_GETBUTTON",
		"TB_GETBUTTONINFO",
		"TB_GETBUTTONSIZE",
		"TB_GETBUTTONTEXT",
		"TB_GETDISABLEDIMAGELIST",
		"TB_GETHOTIMAGELIST",
		"TB_GETHOTITEM",
		"TB_GETIMAGELIST",
		"TB_GETITEMRECT",
		"TB_GETPADDING",
		"TB_GETROWS",
		"TB_GETSTATE",
		"TB_GETTOOLTIPS",
		"TB_INSERTBUTTON",
		"TB_LOADIMAGES",
		"TB_MAPACCELERATOR",
		"TB_SETBITMAPSIZE",
		"TB_SETBUTTONINFO",
		"TB_SETBUTTONSIZE",
		"TB_SETDISABLEDIMAGELIST",
		"TB_SETEXTENDEDSTYLE",
		"TB_SETHOTIMAGELIST",
		"TB_SETHOTITEM",
		"TB_SETIMAGELIST",
		"TB_SETPARENT",
		"TB_SETROWS",
		"TB_SETSTATE",
		"TB_THUMBPOSITION",
		"TCIF_IMAGE",
		"TCIF_TEXT",
		"TCI_SRCCHARSET",
		"TCI_SRCCODEPAGE",
		"TCM_ADJUSTRECT",
		"TCM_DELETEITEM",
		"TCM_GETCURSEL",
		"TCM_GETITEMCOUNT",
		"TCM_GETITEMRECT",
		"TCM_GETTOOLTIPS",
		"TCM_INSERTITEM",
		"TCM_SETCURSEL",
		"TCM_SETIMAGELIST",
		"TCM_SETITEM",
		"TCN_SELCHANGE",
		"TCN_SELCHANGING",
		"TCS_BOTTOM",
		"TCS_FOCUSNEVER",
		"TCS_MULTILINE",
		"TCS_TABS",
		"TCS_TOOLTIPS",
		"TECHNOLOGY",
		"TME_HOVER",
		"TME_LEAVE",
		"TME_QUERY",
		"TMPF_VECTOR",
		"TOOLBARCLASSNAME",
		"TOOLTIPS_CLASS",
		"TPM_LEFTALIGN",
		"TPM_LEFTBUTTON",
		"TPM_RIGHTBUTTON",
		"TPM_RIGHTALIGN",
		"TRACKBAR_CLASS",
		"TRANSPARENT",
		"TTF_IDISHWND",
		"TTF_SUBCLASS",
		"TTF_RTLREADING",
		"TTM_ADDTOOL",
		"TTM_DELTOOL",
		"TTM_GETTOOLINFO",
		"TTM_GETTOOLINFOA",
		"TTM_GETTOOLINFOW",
		"TTM_SETMAXTIPWIDTH",
		"TTM_UPDATE",
		"TTN_FIRST",
		"TTN_GETDISPINFO",
		"TTN_GETDISPINFOW",
		"TTN_GETDISPINFOA",
		"TTN_POP",
		"TTN_SHOW",
		"TTS_ALWAYSTIP",
		"TV_FIRST",
		"TVE_COLLAPSE",
		"TVE_EXPAND",
		"TVGN_CARET",
		"TVGN_CHILD",
		"TVGN_DROPHILITED",
		"TVGN_FIRSTVISIBLE",
		"TVGN_LASTVISIBLE",
		"TVGN_NEXT",
		"TVGN_NEXTVISIBLE",
		"TVGN_PARENT",
		"TVGN_PREVIOUSVISIBLE",
		"TVGN_ROOT",
		"TVHT_ONITEM",
		"TVHT_ONITEMBUTTON",
		"TVHT_ONITEMICON",
		"TVHT_ONITEMLABEL",
		"TVHT_ONITEMSTATEICON",
		"TVIF_HANDLE",
		"TVIF_IMAGE",
		"TVIF_PARAM",
		"TVIF_SELECTEDIMAGE",
		"TVIF_STATE",
		"TVIF_TEXT",
		"TVIS_DROPHILITED",
		"TVIS_EXPANDED",
		"TVIS_SELECTED",
		"TVIS_STATEIMAGEMASK",
		"TVI_FIRST",
		"TVI_LAST",
		"TVI_ROOT",
		"TVM_DELETEITEM",
		"TVM_ENSUREVISIBLE",
		"TVM_EXPAND",
		"TVM_GETBKCOLOR",
		"TVM_GETCOUNT",
		"TVM_GETIMAGELIST",
		"TVM_GETITEM",
		"TVM_GETITEMHEIGHT",
		"TVM_GETITEMRECT",
		"TVM_GETNEXTITEM",
		"TVM_GETTEXTCOLOR",
		"TVM_GETTOOLTIPS",
		"TVM_GETVISIBLECOUNT",
		"TVM_HITTEST",
		"TVM_INSERTITEM",
		"TVM_MAPACCIDTOHTREEITEM",
		"TVM_MAPHTREEITEMTOACCID",
		"TVM_SELECTITEM",
		"TVM_SETBKCOLOR",
		"TVM_SETIMAGELIST",
		"TVM_SETINSERTMARK",
		"TVM_SETITEM",
		"TVM_SETTEXTCOLOR",
		"TVN_BEGINDRAGW",
		"TVN_BEGINDRAGA",
		"TVN_BEGINRDRAGW",
		"TVN_BEGINRDRAGA",
		"TVN_FIRST",
		"TVN_GETDISPINFOA",
		"TVN_GETDISPINFOW",
		"TVN_ITEMEXPANDEDA",
		"TVN_ITEMEXPANDEDW",
		"TVN_ITEMEXPANDINGW",
		"TVN_ITEMEXPANDINGA",
		"TVN_SELCHANGEDW",
		"TVN_SELCHANGEDA",
		"TVN_SELCHANGINGW",
		"TVN_SELCHANGINGA",
		"TVSIL_NORMAL",
		"TVSIL_STATE",
		"TVS_DISABLEDRAGDROP",
		"TVS_FULLROWSELECT",
		"TVS_HASBUTTONS",
		"TVS_HASLINES",
		"TVS_LINESATROOT",
		"TVS_NOHSCROLL",
		"TVS_NOTOOLTIPS",
		"TVS_SHOWSELALWAYS",
		"UDM_GETACCEL",
		"UDM_GETRANGE32",
		"UDM_GETPOS",
		"UDM_GETPOS32",
		"UDM_SETACCEL",
		"UDM_SETRANGE32",
		"UDM_SETPOS",
		"UDM_SETPOS32",
		"UDN_DELTAPOS",
		"UDS_WRAP",
		"UIS_INITIALIZE",
		"UPDOWN_CLASS",
		"USP_E_SCRIPT_NOT_IN_FONT",
		"VERTRES",
		"VK_BACK",
		"VK_CANCEL",
		"VK_CAPITAL",
		"VK_CONTROL",
		"VK_DECIMAL",
		"VK_DELETE",
		"VK_DIVIDE",
		"VK_DOWN",
		"VK_END",
		"VK_ESCAPE",
		"VK_F1",
		"VK_F10",
		"VK_F11",
		"VK_F12",
		"VK_F13",
		"VK_F14",
		"VK_F15",
		"VK_F2",
		"VK_F3",
		"VK_F4",
		"VK_F5",
		"VK_F6",
		"VK_F7",
		"VK_F8",
		"VK_F9",
		"VK_HOME",
		"VK_INSERT",
		"VK_LBUTTON",
		"VK_LEFT",
		"VK_MBUTTON",
		"VK_MENU",
		"VK_MULTIPLY",
		"VK_N",
		"VK_NEXT",
		"VK_NUMLOCK",
		"VK_NUMPAD0",
		"VK_NUMPAD1",
		"VK_NUMPAD2",
		"VK_NUMPAD3",
		"VK_NUMPAD4",
		"VK_NUMPAD5",
		"VK_NUMPAD6",
		"VK_NUMPAD7",
		"VK_NUMPAD8",
		"VK_NUMPAD9",
		"VK_PAUSE",
		"VK_PRIOR",
		"VK_RBUTTON",
		"VK_RETURN",
		"VK_RIGHT",
		"VK_SCROLL",
		"VK_SEPARATOR",
		"VK_SHIFT",
		"VK_SNAPSHOT",
		"VK_SPACE",
		"VK_SUBTRACT",
		"VK_TAB",
		"VK_UP",
		"VK_XBUTTON1",
		"VK_XBUTTON2",
		"VK_ADD",
		"VK_APP1",
		"VK_APP2",
		"VK_APP3",
		"VK_APP4",
		"VK_APP5",
		"VK_APP6",
		"WC_HEADER",
		"WC_LINK",
		"WC_LISTVIEW",
		"WC_TABCONTROL",
		"WC_TREEVIEW",
		"WINDING",
		"WH_GETMESSAGE",
		"WH_MSGFILTER",
		"WH_FOREGROUNDIDLE",
		"WHEEL_DELTA",
		"WHEEL_PAGESCROLL",
		"WM_ACTIVATE",
		"WM_ACTIVATEAPP",
		"WM_APP",
		"WM_CANCELMODE",
		"WM_CAPTURECHANGED",
		"WM_CHANGEUISTATE",
		"WM_CHAR",
		"WM_CLEAR",
		"WM_CLOSE",
		"WM_COMMAND",
		"WM_CONTEXTMENU",
		"WM_COPY",
		"WM_CREATE",
		"WM_CTLCOLORBTN",
		"WM_CTLCOLORDLG",
		"WM_CTLCOLOREDIT",
		"WM_CTLCOLORLISTBOX",
		"WM_CTLCOLORMSGBOX",
		"WM_CTLCOLORSCROLLBAR",
		"WM_CTLCOLORSTATIC",
		"WM_CUT",
		"WM_DEADCHAR",
		"WM_DESTROY",
		"WM_DRAWITEM",
		"WM_ENDSESSION",
		"WM_ENTERIDLE",
		"WM_ERASEBKGND",
		"WM_GETDLGCODE",
		"WM_GETFONT",
		"WM_GETOBJECT",
		"WM_GETMINMAXINFO",
		"WM_HELP",
		"WM_HOTKEY",
		"WM_HSCROLL",
		"WM_IME_CHAR",
		"WM_IME_COMPOSITION",
		"WM_INITDIALOG",
		"WM_INITMENUPOPUP",
		"WM_INPUTLANGCHANGE",
		"WM_KEYDOWN",
		"WM_KEYFIRST",
		"WM_KEYLAST",
		"WM_KEYUP",
		"WM_KILLFOCUS",
		"WM_LBUTTONDBLCLK",
		"WM_LBUTTONDOWN",
		"WM_LBUTTONUP",
		"WM_MBUTTONDBLCLK",
		"WM_MBUTTONDOWN",
		"WM_MBUTTONUP",
		"WM_MEASUREITEM",
		"WM_MENUCHAR",
		"WM_MENUSELECT",
		"WM_MOUSEACTIVATE",
		"WM_MOUSEFIRST",
		"WM_MOUSEHOVER",
		"WM_MOUSELEAVE",
		"WM_MOUSEMOVE",
		"WM_MOUSEWHEEL",
		"WM_MOUSELAST",
		"WM_MOVE",
		"WM_NCACTIVATE",
		"WM_NCCALCSIZE",
		"WM_NCHITTEST",
		"WM_NCLBUTTONDOWN",
		"WM_NOTIFY",
		"WM_NULL",
		"WM_PAINT",
		"WM_PALETTECHANGED",
		"WM_PARENTNOTIFY",
		"WM_PASTE",
		"WM_PRINTCLIENT",
		"WM_QUERYENDSESSION",
		"WM_QUERYNEWPALETTE",
		"WM_QUERYOPEN",
		"WM_RBUTTONDBLCLK",
		"WM_RBUTTONDOWN",
		"WM_RBUTTONUP",
		"WM_SETCURSOR",
		"WM_SETFOCUS",
		"WM_SETFONT",
		"WM_SETICON",
		"WM_SETREDRAW",
		"WM_SETTEXT",
		"WM_SETTINGCHANGE",
		"WM_SHOWWINDOW",
		"WM_SIZE",
		"WM_SYSCHAR",
		"WM_SYSCOLORCHANGE",
		"WM_SYSCOMMAND",
		"WM_SYSKEYDOWN",
		"WM_SYSKEYUP",
		"WM_TIMER",
		"WM_UNDO",
		"WM_USER",
		"WM_VSCROLL",
		"WM_WINDOWPOSCHANGED",
		"WM_WINDOWPOSCHANGING",
		"WS_BORDER",
		"WS_CAPTION",
		"WS_CHILD",
		"WS_CLIPCHILDREN",
		"WS_CLIPSIBLINGS",
		"WS_DISABLED",
		"WS_EX_CAPTIONOKBTN",
		"WS_EX_CLIENTEDGE",
		"WS_EX_DLGMODALFRAME",
		"WS_EX_LAYOUTRTL",
		"WS_EX_LEFTSCROLLBAR",
		"WS_EX_MDICHILD",
		"WS_EX_NOINHERITLAYOUT",
		"WS_EX_RIGHT",
		"WS_EX_RTLREADING",
		"WS_EX_STATICEDGE",
		"WS_EX_TOOLWINDOW",
		"WS_EX_TOPMOST",
		"WS_EX_TRANSPARENT",
		"WS_HSCROLL",
		"WS_MAXIMIZEBOX",
		"WS_MINIMIZEBOX",
		"WS_OVERLAPPED",
		"WS_OVERLAPPEDWINDOW",
		"WS_POPUP",
		"WS_SYSMENU",
		"WS_TABSTOP",
		"WS_THICKFRAME",
		"WS_VISIBLE",
		"WS_VSCROLL",
		"WM_XBUTTONDOWN",
		"WM_XBUTTONUP",
		"WM_XBUTTONDBLCLK",
		"XBUTTON1",
		"XBUTTON2",
		"lpszDriver1",
		"lpszDevice1",
		"lpszDriver1",
		"lpszDevice1",
		"lpClassName1",
		"lpWindowName1",
		"lpClassName1",
		"lpWindowName1",
		"lpszFile1",
		"lpszFile1",
		"lpString1",
		"lpString1",
		"lpszFamily1",
		"lpszFamily1",
		"lpSrc1",
		"lpDst1",
		"lpSrc1",
		"lpDst1",
		"lpszFile1",
		"lpszFile1",
		"lpString1",
		"lpString1",
		"lpClassName1",
		"lpWindowName1",
		"lpClassName1",
		"lpWindowName1",
		"lpString1",
		"lpString1",
		"lpClassName1",
		"lpClassName1",
		"lpClassName1",
		"lpClassName1",
		"lpszFormatName1",
		"lpszFormatName1",
		"lpString1",
		"lpString1",
		"lpLCData1",
		"lpLCData1",
		"lpModuleName1",
		"lpModuleName1",
		"lpAppName1",
		"lpKeyName1",
		"lpDefault1",
		"lpReturnedString1",
		"lpAppName1",
		"lpKeyName1",
		"lpDefault1",
		"lpReturnedString1",
		"lpString1",
		"lpString1",
		"lpString1",
		"lpString1",
		"lpString1",
		"lpString1",
		"lpBuf1",
		"lpBuf1",
		"lpNewItem1",
		"lpNewItem1",
		"lpszName1",
		"lpszName1",
		"lpLibFileName1",
		"lpLibFileName1",
		"lpBuffer1",
		"lpBuffer1",
		"lpText1",
		"lpCaption1",
		"lpText1",
		"lpCaption1",
		"Source1",
		"Source1",
		"Destination1",
		"Destination1",
		"lpName1",
		"lpClass1",
		"lpName1",
		"lpClass1",
		"lpszFormat1",
		"lpszFormat1",
		"lpString1",
		"lpString1",
		"lpSubKey1",
		"lpSubKey1",
		"lpValueName1",
		"lpData1",
		"lpValueName1",
		"lpData1",
		"lpValueName1",
		"lpValueName1",
		"lParam1",
		"lParam1",
		"lpString1",
		"lpString1",
		"pszPath1",
		"pszPath1",
		"lpClassName1",
		"lpClassName1",
		"Library",
		"info",
		"OSVERSIONINFOW",
		"OS",
		"info",
		"info",
		"info",
		"OSVERSIONINFOA",
		"OS",
		"info",
		"OSVERSIONINFO",
		"info",
		"IsWin32s",
		"info",
		"VER_PLATFORM_WIN32s",
		"IsWin95",
		"info",
		"VER_PLATFORM_WIN32_WINDOWS",
		"IsWinNT",
		"info",
		"VER_PLATFORM_WIN32_NT",
		"IsWinCE",
		"info",
		"VER_PLATFORM_WIN32_CE",
		"IsSP",
		"IsPPC",
		"IsHPC",
		"IsWinCE",
		"IsPPC",
		"IsSP",
		"WIN32_MAJOR",
		"info",
		"WIN32_MINOR",
		"info",
		"WIN32_VERSION",
		"WIN32_MAJOR",
		"WIN32_MINOR",
		"IsUnicode",
		"IsWin32s",
		"IsWin95",
		"OS",
		"OS",
		"OS",
		"OS",
		"IsDBLocale",
		"dbcsEnabled",
		"immEnabled",
		"OS",
		"OS",
		"OS",
		"OS",
		"OS",
		"langID",
		"primaryLang",
		"OS",
		"OS",
		"dvi",
		"DLLVERSIONINFO",
		"dvi",
		"dvi",
		"OS",
		"lpLibFileName",
		"hModule",
		"name",
		"i",
		"lpProcName",
		"i",
		"lpProcName",
		"i",
		"name",
		"i",
		"OS",
		"hModule",
		"lpProcName",
		"DllGetVersion",
		"OS",
		"DllGetVersion",
		"dvi",
		"OS",
		"hModule",
		"COMCTL32_MAJOR",
		"dvi",
		"COMCTL32_MINOR",
		"dvi",
		"COMCTL32_VERSION",
		"COMCTL32_MAJOR",
		"COMCTL32_MINOR",
		"dvi",
		"DLLVERSIONINFO",
		"dvi",
		"OS",
		"lpLibFileName",
		"hModule",
		"name",
		"i",
		"lpProcName",
		"i",
		"lpProcName",
		"i",
		"name",
		"i",
		"OS",
		"hModule",
		"lpProcName",
		"DllGetVersion",
		"OS",
		"DllGetVersion",
		"dvi",
		"OS",
		"hModule",
		"SHELL32_MAJOR",
		"dvi",
		"SHELL32_MINOR",
		"dvi",
		"SHELL32_VERSION",
		"SHELL32_MAJOR",
		"SHELL32_MINOR",
		"OS",
		"IsUnicode",
		"IsUnicode",
		"BCM_FIRST",
		"BCM_FIRST",
		"BCM_FIRST",
		"CDDS_ITEM",
		"CDDS_POSTPAINT",
		"CDDS_ITEM",
		"CDDS_PREPAINT",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"SYS_COLOR_INDEX_FLAG",
		"HDM_FIRST",
		"HDM_FIRST",
		"HDM_FIRST",
		"HDM_FIRST",
		"IsUnicode",
		"HDM_GETITEMW",
		"HDM_GETITEMA",
		"HDM_FIRST",
		"HDM_FIRST",
		"HDM_FIRST",
		"IsUnicode",
		"HDM_INSERTITEMW",
		"HDM_INSERTITEMA",
		"HDM_FIRST",
		"HDM_FIRST",
		"HDM_FIRST",
		"HDM_FIRST",
		"IsUnicode",
		"HDM_SETITEMW",
		"HDM_SETITEMA",
		"HDN_FIRST",
		"IsUnicode",
		"HDN_FIRST",
		"HDN_FIRST",
		"IsUnicode",
		"HDN_DIVIDERDBLCLICKW",
		"HDN_DIVIDERDBLCLICKA",
		"HDN_FIRST",
		"IsUnicode",
		"HDN_FIRST",
		"HDN_FIRST",
		"HDN_FIRST",
		"HDN_FIRST",
		"HDN_FIRST",
		"HDN_FIRST",
		"IsUnicode",
		"HDN_ITEMDBLCLICKW",
		"HDN_ITEMDBLCLICKA",
		"IsUnicode",
		"LVM_FIRST",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"LVM_FIRST",
		"LVM_FIRST",
		"IsUnicode",
		"LVM_FIRST",
		"IsUnicode",
		"LVM_FIRST",
		"LVN_FIRST",
		"LVN_FIRST",
		"LVN_FIRST",
		"LVN_FIRST",
		"NM_FIRST",
		"NM_FIRST",
		"NM_FIRST",
		"IsUnicode",
		"NOTIFYICONDATAW_V2_SIZE",
		"NOTIFYICONDATAA_V2_SIZE",
		"OS",
		"QS_MOUSEMOVE",
		"QS_MOUSEBUTTON",
		"QS_KEY",
		"QS_MOUSE",
		"QS_MOUSEMOVE",
		"QS_MOUSEBUTTON",
		"QS_KEY",
		"QS_POSTMESSAGE",
		"QS_TIMER",
		"QS_PAINT",
		"QS_SENDMESSAGE",
		"QS_INPUT",
		"QS_POSTMESSAGE",
		"QS_HOTKEY",
		"QS_TIMER",
		"QS_PAINT",
		"QS_SENDMESSAGE",
		"RBN_FIRST",
		"RBN_FIRST",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsWinCE",
		"IsWinCE",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"IsUnicode",
		"TTN_FIRST",
		"TTN_FIRST",
		"IsUnicode",
		"TV_FIRST",
		"TV_FIRST",
		"IsUnicode",
		"TV_FIRST",
		"TV_FIRST",
		"IsUnicode",
		"TVN_FIRST",
		"TVN_FIRST",
		"TVN_FIRST",
		"TVN_FIRST",
		"IsWinCE",
		"IsWinCE",
		"IsWinCE",
		"WS_BORDER",
		"WS_CAPTION",
		"major",
		"minor",
		"IsUnicode",
		"lpPrevWndFunc",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"lpPrevWndFunc",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"ch",
		"ch",
		"IsUnicode",
		"ch",
		"ch",
		"IsUnicode",
		"lpcc",
		"lpcc",
		"IsUnicode",
		"chooseFont",
		"chooseFont",
		"IsUnicode",
		"lpaccl",
		"cEntries",
		"lpaccl",
		"cEntries",
		"IsUnicode",
		"lpszDriver",
		"lpszDriver",
		"lpszDevice",
		"lpszDevice",
		"lpszDriver1",
		"lpszDevice1",
		"lpszOutput",
		"lpInitData",
		"lpszDriver",
		"lpszDriver",
		"lpszDevice",
		"lpszDevice",
		"lpszDriver1",
		"lpszDevice1",
		"lpszOutput",
		"lpInitData",
		"IsUnicode",
		"lplf",
		"lplf",
		"IsUnicode",
		"lplf",
		"lplf",
		"IsUnicode",
		"lpClassName",
		"lpClassName",
		"lpWindowName",
		"lpWindowName",
		"dwExStyle",
		"lpClassName1",
		"lpWindowName1",
		"dwStyle",
		"X",
		"Y",
		"nWidth",
		"nHeight",
		"hWndParent",
		"hMenu",
		"hInstance",
		"lpParam",
		"lpClassName",
		"lpClassName",
		"lpWindowName",
		"lpWindowName",
		"dwExStyle",
		"lpClassName1",
		"lpWindowName1",
		"dwStyle",
		"X",
		"Y",
		"nWidth",
		"nHeight",
		"hWndParent",
		"hMenu",
		"hInstance",
		"lpParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"hWndMDIClient",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"hWndMDIClient",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"lpmsg",
		"lpmsg",
		"IsUnicode",
		"lpszFile",
		"lpszFile",
		"hDrop",
		"iFile",
		"lpszFile1",
		"cch",
		"lpszFile",
		"lpszFile",
		"hDrop",
		"iFile",
		"lpszFile1",
		"cch",
		"IsUnicode",
		"hdc",
		"hbr",
		"lpOutputFunc",
		"lData",
		"wData",
		"x",
		"y",
		"cx",
		"cy",
		"fuFlags",
		"hdc",
		"hbr",
		"lpOutputFunc",
		"lData",
		"wData",
		"x",
		"y",
		"cx",
		"cy",
		"fuFlags",
		"IsUnicode",
		"lpString",
		"lpString",
		"hDC",
		"lpString1",
		"nCount",
		"lpRect",
		"uFormat",
		"lpString",
		"lpString",
		"hDC",
		"lpString1",
		"nCount",
		"lpRect",
		"uFormat",
		"IsUnicode",
		"lpszFamily",
		"lpszFamily",
		"hdc",
		"lpszFamily1",
		"lpEnumFontFamProc",
		"lParam",
		"lpszFamily",
		"lpszFamily",
		"hdc",
		"lpszFamily1",
		"lpEnumFontFamProc",
		"lParam",
		"IsUnicode",
		"hdc",
		"lpLogfont",
		"lpEnumFontFamExProc",
		"lParam",
		"dwFlags",
		"hdc",
		"lpLogfont",
		"lpEnumFontFamExProc",
		"lParam",
		"dwFlags",
		"IsUnicode",
		"lpLocaleEnumProc",
		"dwFlags",
		"lpLocaleEnumProc",
		"dwFlags",
		"IsUnicode",
		"pLangGroupEnumProc",
		"dwFlags",
		"lParam",
		"pLangGroupEnumProc",
		"dwFlags",
		"lParam",
		"IsUnicode",
		"lpSrc",
		"lpSrc",
		"lpDst",
		"lpDst",
		"lpSrc1",
		"lpDst1",
		"nSize",
		"lpSrc",
		"lpSrc",
		"lpDst",
		"lpDst",
		"lpSrc1",
		"lpDst1",
		"nSize",
		"IsUnicode",
		"lpszFile",
		"lpszFile",
		"lpszFile1",
		"nIconIndex",
		"phiconLarge",
		"phiconSmall",
		"nIcons",
		"lpszFile",
		"lpszFile",
		"lpszFile1",
		"nIconIndex",
		"phiconLarge",
		"phiconSmall",
		"nIcons",
		"IsUnicode",
		"lpString",
		"lpString",
		"hdc",
		"X",
		"Y",
		"fuOptions",
		"lprc",
		"lpString1",
		"cbCount",
		"lpDx",
		"lpString",
		"lpString",
		"hdc",
		"X",
		"Y",
		"fuOptions",
		"lprc",
		"lpString1",
		"cbCount",
		"lpDx",
		"IsUnicode",
		"lpClassName",
		"lpClassName",
		"lpWindowName",
		"lpWindowName",
		"lpClassName1",
		"lpWindowName1",
		"lpClassName",
		"lpClassName",
		"lpWindowName",
		"lpWindowName",
		"lpClassName1",
		"lpWindowName1",
		"IsUnicode",
		"dwFlags",
		"lpSource",
		"dwMessageId",
		"dwLanguageId",
		"lpBuffer",
		"nSize",
		"Arguments",
		"dwFlags",
		"lpSource",
		"dwMessageId",
		"dwLanguageId",
		"lpBuffer",
		"nSize",
		"Arguments",
		"IsUnicode",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"IsUnicode",
		"lpString",
		"lpString",
		"hdc",
		"lpString1",
		"nCount",
		"nMaxExtent",
		"lpResults",
		"dwFlags",
		"lpString",
		"lpString",
		"hdc",
		"lpString1",
		"nCount",
		"nMaxExtent",
		"lpResults",
		"dwFlags",
		"IsUnicode",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"IsUnicode",
		"lpClassName",
		"lpClassName",
		"hInstance",
		"lpClassName1",
		"lpWndClass",
		"lpClassName",
		"lpClassName",
		"hInstance",
		"lpClassName1",
		"lpWndClass",
		"IsUnicode",
		"lpClassName",
		"lpClassName",
		"hWnd",
		"lpClassName1",
		"nMaxCount",
		"lpClassName",
		"lpClassName",
		"hWnd",
		"lpClassName1",
		"nMaxCount",
		"IsUnicode",
		"lpszFormatName",
		"lpszFormatName",
		"format",
		"lpszFormatName1",
		"cchMaxCount",
		"lpszFormatName",
		"lpszFormatName",
		"format",
		"lpszFormatName1",
		"cchMaxCount",
		"IsUnicode",
		"lpString",
		"lpString",
		"lParam",
		"lpString1",
		"nSize",
		"lpString",
		"lpString",
		"lParam",
		"lpString1",
		"nSize",
		"IsUnicode",
		"lpLCData",
		"lpLCData",
		"Locale",
		"LCType",
		"lpLCData1",
		"cchData",
		"lpLCData",
		"lpLCData",
		"Locale",
		"LCType",
		"lpLCData1",
		"cchData",
		"IsUnicode",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"IsUnicode",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"IsUnicode",
		"lpModuleName",
		"lpModuleName",
		"lpModuleName1",
		"lpModuleName",
		"lpModuleName",
		"lpModuleName1",
		"IsUnicode",
		"hmonitor",
		"lpmi",
		"hmonitor",
		"lpmi",
		"IsUnicode",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"IsUnicode",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"IsUnicode",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"IsUnicode",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"IsUnicode",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"IsUnicode",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"IsUnicode",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"IsUnicode",
		"lpofn",
		"lpofn",
		"IsUnicode",
		"lpAppName",
		"lpAppName",
		"lpKeyName",
		"lpKeyName",
		"lpDefault",
		"lpDefault",
		"lpReturnedString",
		"lpReturnedString",
		"lpAppName1",
		"lpKeyName1",
		"lpDefault1",
		"lpReturnedString1",
		"nSize",
		"lpAppName",
		"lpAppName",
		"lpKeyName",
		"lpKeyName",
		"lpDefault",
		"lpDefault",
		"lpReturnedString",
		"lpReturnedString",
		"lpAppName1",
		"lpKeyName1",
		"lpDefault1",
		"lpReturnedString1",
		"nSize",
		"IsUnicode",
		"hWnd",
		"lpString",
		"hWnd",
		"lpString",
		"IsUnicode",
		"lpofn",
		"lpofn",
		"IsUnicode",
		"lpString",
		"lpString",
		"hdc",
		"lpString1",
		"cbString",
		"lpSize",
		"lpString",
		"lpString",
		"hdc",
		"lpString1",
		"cbString",
		"lpSize",
		"IsUnicode",
		"hdc",
		"lptm",
		"hdc",
		"lptm",
		"IsUnicode",
		"lpVersionInfo",
		"lpVersionInfo",
		"IsUnicode",
		"hWnd",
		"nIndex",
		"hWnd",
		"nIndex",
		"IsUnicode",
		"lpString",
		"lpString",
		"hWnd",
		"lpString1",
		"nMaxCount",
		"lpString",
		"lpString",
		"hWnd",
		"lpString1",
		"nMaxCount",
		"IsUnicode",
		"hWnd",
		"hWnd",
		"IsUnicode",
		"lpString",
		"lpString",
		"lpString1",
		"lpString",
		"lpString",
		"lpString1",
		"IsUnicode",
		"hIMC",
		"lplf",
		"hIMC",
		"lplf",
		"IsUnicode",
		"hIMC",
		"lplf",
		"hIMC",
		"lplf",
		"IsUnicode",
		"lpBuf",
		"lpBuf",
		"hIMC",
		"dwIndex",
		"lpBuf1",
		"dwBufLen",
		"lpBuf",
		"lpBuf",
		"hIMC",
		"dwIndex",
		"lpBuf1",
		"dwBufLen",
		"IsUnicode",
		"lpNewItem",
		"lpNewItem",
		"hMenu",
		"uPosition",
		"uFlags",
		"uIDNewItem",
		"lpNewItem1",
		"lpNewItem",
		"lpNewItem",
		"hMenu",
		"uPosition",
		"uFlags",
		"uIDNewItem",
		"lpNewItem1",
		"IsUnicode",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"IsUnicode",
		"hInstance",
		"lpBitmapName",
		"hInstance",
		"lpBitmapName",
		"IsUnicode",
		"hInstance",
		"lpCursorName",
		"hInstance",
		"lpCursorName",
		"IsUnicode",
		"hInstance",
		"lpIconName",
		"hInstance",
		"lpIconName",
		"IsUnicode",
		"lpszName",
		"lpszName",
		"hinst",
		"lpszName1",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"lpszName",
		"lpszName",
		"hinst",
		"lpszName1",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"IsUnicode",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"IsUnicode",
		"lpLibFileName",
		"lpLibFileName",
		"lpLibFileName1",
		"lpLibFileName",
		"lpLibFileName",
		"lpLibFileName1",
		"IsUnicode",
		"lpBuffer",
		"lpBuffer",
		"hinst",
		"uID",
		"lpBuffer1",
		"nBufferMax",
		"lpBuffer",
		"lpBuffer",
		"hinst",
		"uID",
		"lpBuffer1",
		"nBufferMax",
		"IsUnicode",
		"uCode",
		"uMapType",
		"uCode",
		"uMapType",
		"IsUnicode",
		"lpText",
		"lpText",
		"lpCaption",
		"lpCaption",
		"hWnd",
		"lpText1",
		"lpCaption1",
		"uType",
		"lpText",
		"lpText",
		"lpCaption",
		"lpCaption",
		"hWnd",
		"lpText1",
		"lpCaption1",
		"uType",
		"IsUnicode",
		"Source",
		"Source",
		"Destination",
		"Source1",
		"Length",
		"Source",
		"Source",
		"Destination",
		"Source1",
		"Length",
		"IsUnicode",
		"Destination",
		"Destination",
		"Destination1",
		"Source",
		"Length",
		"Destination",
		"Destination",
		"Destination1",
		"Source",
		"Length",
		"IsUnicode",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"IsUnicode",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"IsUnicode",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"IsUnicode",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"IsUnicode",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"IsUnicode",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"wRemoveMsg",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"wRemoveMsg",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"idThread",
		"Msg",
		"wParam",
		"lParam",
		"idThread",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"lppd",
		"lppd",
		"IsUnicode",
		"lpName",
		"lpName",
		"lpClass",
		"lpClass",
		"hKey",
		"dwIndex",
		"lpName1",
		"lpcName",
		"lpReserved",
		"lpClass1",
		"lpcClass",
		"lpftLastWriteTime",
		"lpName",
		"lpName",
		"lpClass",
		"lpClass",
		"hKey",
		"dwIndex",
		"lpName1",
		"lpcName",
		"lpReserved",
		"lpClass1",
		"lpcClass",
		"lpftLastWriteTime",
		"IsUnicode",
		"lpWndClass",
		"lpWndClass",
		"IsUnicode",
		"lpszFormat",
		"lpszFormat",
		"lpszFormat1",
		"lpszFormat",
		"lpszFormat",
		"lpszFormat1",
		"IsUnicode",
		"lpString",
		"lpString",
		"lpString1",
		"lpString",
		"lpString",
		"lpString1",
		"IsUnicode",
		"lpSubKey",
		"lpSubKey",
		"hKey",
		"lpSubKey1",
		"ulOptions",
		"samDesired",
		"phkResult",
		"lpSubKey",
		"lpSubKey",
		"hKey",
		"lpSubKey1",
		"ulOptions",
		"samDesired",
		"phkResult",
		"IsUnicode",
		"hKey",
		"lpClass",
		"lpcbClass",
		"lpReserved",
		"lpSubKeys",
		"lpcbMaxSubKeyLen",
		"lpcbMaxClassLen",
		"lpcValues",
		"lpcbMaxValueNameLen",
		"lpcbMaxValueLen",
		"lpcbSecurityDescriptor",
		"lpftLastWriteTime",
		"hKey",
		"lpClass",
		"lpcbClass",
		"lpReserved",
		"lpSubKeys",
		"lpcbMaxSubKeyLen",
		"lpcbMaxClassLen",
		"lpcValues",
		"lpcbMaxValueNameLen",
		"lpcbMaxValueLen",
		"lpcbSecurityDescriptor",
		"lpftLastWriteTime",
		"IsUnicode",
		"lpValueName",
		"lpValueName",
		"lpData",
		"lpData",
		"hKey",
		"lpValueName1",
		"lpReserved",
		"lpType",
		"lpData1",
		"lpcbData",
		"lpValueName",
		"lpValueName",
		"lpData",
		"lpData",
		"hKey",
		"lpValueName1",
		"lpReserved",
		"lpType",
		"lpData1",
		"lpcbData",
		"IsUnicode",
		"lpValueName",
		"lpValueName",
		"hKey",
		"lpValueName1",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"lpValueName",
		"lpValueName",
		"hKey",
		"lpValueName1",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"IsUnicode",
		"hWnd",
		"lpString",
		"hWnd",
		"lpString",
		"IsUnicode",
		"lParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam1",
		"lParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam1",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"IsUnicode",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"IsUnicode",
		"hWnd",
		"lpString",
		"hData",
		"hWnd",
		"lpString",
		"hData",
		"IsUnicode",
		"hWnd",
		"nIndex",
		"dwNewLong",
		"hWnd",
		"nIndex",
		"dwNewLong",
		"IsUnicode",
		"idHook",
		"lpfn",
		"hMod",
		"dwThreadId",
		"idHook",
		"lpfn",
		"hMod",
		"dwThreadId",
		"IsUnicode",
		"lpString",
		"lpString",
		"hWnd",
		"lpString1",
		"lpString",
		"lpString",
		"hWnd",
		"lpString1",
		"IsUnicode",
		"lpbi",
		"lpbi",
		"IsUnicode",
		"lpExecInfo",
		"lpExecInfo",
		"IsUnicode",
		"dwMessage",
		"lpData",
		"dwMessage",
		"lpData",
		"IsUnicode",
		"pszPath",
		"pszPath",
		"pidl",
		"pszPath1",
		"pszPath",
		"pszPath",
		"pidl",
		"pszPath1",
		"IsUnicode",
		"hdc",
		"lpdi",
		"hdc",
		"lpdi",
		"IsUnicode",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"IsUnicode",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"IsUnicode",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"IsUnicode",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"IsUnicode",
		"hWnd",
		"hAccTable",
		"lpMsg",
		"hWnd",
		"hAccTable",
		"lpMsg",
		"IsUnicode",
		"lpClassName",
		"lpClassName",
		"lpClassName1",
		"hInstance",
		"lpClassName",
		"lpClassName",
		"lpClassName1",
		"hInstance",
		"IsUnicode",
		"ch",
		"ch",
		"dwOSVersionInfoSize",
		"sizeof",
		"dwOSVersionInfoSize",
		"sizeof",
		"sizeof",
		"dwOSVersionInfoSize",
		"dwPlatformId",
		"dwPlatformId",
		"dwPlatformId",
		"dwPlatformId",
		"dwMajorVersion",
		"dwMinorVersion",
		"SM_DBCSENABLED",
		"SM_IMMENABLED",
		"IsWinCE",
		"WIN32_VERSION",
		"LANG_KOREAN",
		"cbSize",
		"sizeof",
		"dwMajorVersion",
		"dwMinorVersion",
		"length",
		"dwMajorVersion",
		"dwMinorVersion",
		"cbSize",
		"sizeof",
		"dwMajorVersion",
		"length",
		"dwMajorVersion",
		"dwMinorVersion",
		"IsWinCE",
		"WM_USER",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"chars",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"bytes",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"chars",
		"bytes",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"chars",
		"bytes",
		"major",
		"minor",
		"lpPrevWndFunc",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"ch",
		"ch",
		"lpcc",
		"chooseFont",
		"lpaccl",
		"cEntries",
		"lpszDriver",
		"lpszDevice",
		"lpszOutput",
		"lpInitData",
		"lplf",
		"lplf",
		"dwExStyle",
		"lpClassName",
		"lpWindowName",
		"dwStyle",
		"X",
		"Y",
		"nWidth",
		"nHeight",
		"hWndParent",
		"hMenu",
		"hInstance",
		"lpParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"hWndMDIClient",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"lpmsg",
		"hDrop",
		"iFile",
		"lpszFile",
		"cch",
		"hdc",
		"hbr",
		"lpOutputFunc",
		"lData",
		"wData",
		"x",
		"y",
		"cx",
		"cy",
		"fuFlags",
		"hDC",
		"lpString",
		"nCount",
		"lpRect",
		"uFormat",
		"hdc",
		"lpszFamily",
		"lpEnumFontFamProc",
		"lParam",
		"hdc",
		"lpLogfont",
		"lpEnumFontFamExProc",
		"lParam",
		"dwFlags",
		"lpLocaleEnumProc",
		"dwFlags",
		"pLangGroupEnumProc",
		"dwFlags",
		"lParam",
		"lpSrc",
		"lpDst",
		"nSize",
		"lpszFile",
		"nIconIndex",
		"phiconLarge",
		"phiconSmall",
		"nIcons",
		"hdc",
		"X",
		"Y",
		"fuOptions",
		"lprc",
		"lpString",
		"cbCount",
		"lpDx",
		"lpClassName",
		"lpWindowName",
		"dwFlags",
		"lpSource",
		"dwMessageId",
		"dwLanguageId",
		"lpBuffer",
		"nSize",
		"Arguments",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"hdc",
		"lpString",
		"nCount",
		"nMaxExtent",
		"lpResults",
		"dwFlags",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"hInstance",
		"lpClassName",
		"lpWndClass",
		"hWnd",
		"lpClassName",
		"nMaxCount",
		"format",
		"lpszFormatName",
		"cchMaxCount",
		"lParam",
		"lpString",
		"nSize",
		"Locale",
		"LCType",
		"lpLCData",
		"cchData",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"lpModuleName",
		"hmonitor",
		"lpmi",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"lpofn",
		"lpAppName",
		"lpKeyName",
		"lpDefault",
		"lpReturnedString",
		"nSize",
		"hWnd",
		"lpString",
		"lpofn",
		"hdc",
		"lpString",
		"cbString",
		"lpSize",
		"hdc",
		"lptm",
		"lpVersionInfo",
		"hWnd",
		"nIndex",
		"hWnd",
		"lpString",
		"nMaxCount",
		"hWnd",
		"lpString",
		"hIMC",
		"lplf",
		"hIMC",
		"lplf",
		"hIMC",
		"dwIndex",
		"lpBuf",
		"dwBufLen",
		"hMenu",
		"uPosition",
		"uFlags",
		"uIDNewItem",
		"lpNewItem",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hInstance",
		"lpBitmapName",
		"hInstance",
		"lpCursorName",
		"hInstance",
		"lpIconName",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"lpLibFileName",
		"hinst",
		"uID",
		"lpBuffer",
		"nBufferMax",
		"uCode",
		"uMapType",
		"hWnd",
		"lpText",
		"lpCaption",
		"uType",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"wRemoveMsg",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"idThread",
		"Msg",
		"wParam",
		"lParam",
		"lppd",
		"hKey",
		"dwIndex",
		"lpName",
		"lpcName",
		"lpReserved",
		"lpClass",
		"lpcClass",
		"lpftLastWriteTime",
		"lpWndClass",
		"lpszFormat",
		"lpString",
		"hKey",
		"lpSubKey",
		"ulOptions",
		"samDesired",
		"phkResult",
		"hKey",
		"lpClass",
		"lpcbClass",
		"lpReserved",
		"lpSubKeys",
		"lpcbMaxSubKeyLen",
		"lpcbMaxClassLen",
		"lpcValues",
		"lpcbMaxValueNameLen",
		"lpcbMaxValueLen",
		"lpcbSecurityDescriptor",
		"lpftLastWriteTime",
		"hKey",
		"lpValueName",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"hKey",
		"lpValueName",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"hWnd",
		"lpString",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hWnd",
		"lpString",
		"hData",
		"hWnd",
		"nIndex",
		"dwNewLong",
		"idHook",
		"lpfn",
		"hMod",
		"dwThreadId",
		"hWnd",
		"lpString",
		"lpbi",
		"lpExecInfo",
		"dwMessage",
		"lpData",
		"pidl",
		"pszPath",
		"hdc",
		"lpdi",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"hWnd",
		"hAccTable",
		"lpMsg",
		"lpClassName",
		"hInstance",
		"ch",
		"hdc",
		"hkl",
		"Flags",
		"lpRect",
		"dwStyle",
		"bMenu",
		"dwExStyle",
		"hdcDest",
		"nXOriginDest",
		"nYOriginDest",
		"nWidthDest",
		"nHeightDest",
		"hdcSrc",
		"nXOriginSrc",
		"nYOriginSrc",
		"nWidthSrc",
		"nHeightSrc",
		"blendFunction",
		"hdc",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"nXStartArc",
		"nYStartArc",
		"nXEndArc",
		"nYEndArc",
		"nNumWindows",
		"hWnd",
		"lpPaint",
		"hdc",
		"hdcDest",
		"nXDest",
		"nYDest",
		"nWidth",
		"nHeight",
		"hdcSrc",
		"nXSrc",
		"nYSrc",
		"dwRop",
		"hWnd",
		"address",
		"arg0",
		"hhk",
		"nCode",
		"wParam",
		"lParam",
		"lpPrevWndFunc",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"lpPrevWndFunc",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"ch",
		"ch",
		"ch",
		"ch",
		"hmenu",
		"uIDCheckItem",
		"uCheck",
		"lpcc",
		"lpcc",
		"chooseFont",
		"chooseFont",
		"hWnd",
		"lpPoint",
		"hTheme",
		"rclsid",
		"pUnkOuter",
		"dwClsContext",
		"riid",
		"ppv",
		"hrgnDest",
		"hrgnSrc1",
		"hrgnSrc2",
		"fnCombineMode",
		"hwndCB",
		"dwFlags",
		"dwReserved",
		"hInst",
		"hwndParent",
		"idCmdBar",
		"hwndCB",
		"hwndCB",
		"iButton",
		"hdnwCB",
		"hwndCB",
		"hInst",
		"pszMenu",
		"iButton",
		"hwndCB",
		"fShow",
		"hImage",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuFlags",
		"lpaccl",
		"cEntries",
		"lpaccl",
		"cEntries",
		"nWidth",
		"nHeight",
		"cPlanes",
		"cBitsPerPel",
		"lpvBits",
		"hWnd",
		"hBitmap",
		"nWidth",
		"nHeight",
		"hdc",
		"nWidth",
		"nHeight",
		"hdc",
		"hInst",
		"xHotSpot",
		"yHotSpot",
		"nWidth",
		"nHeight",
		"pvANDPlane",
		"pvXORPlane",
		"lpszDriver",
		"lpszDevice",
		"lpszOutput",
		"lpInitData",
		"lpszDriver",
		"lpszDevice",
		"lpszOutput",
		"lpInitData",
		"hdc",
		"pbmi",
		"iUsage",
		"ppvBits",
		"hSection",
		"dwOffset",
		"lplf",
		"lplf",
		"lplf",
		"lplf",
		"lplf",
		"logPalette",
		"colorRef",
		"fnPenStyle",
		"nWidth",
		"crColor",
		"lppt",
		"cPoints",
		"fnPolyFillMode",
		"left",
		"top",
		"right",
		"bottom",
		"colorRef",
		"hGlobal",
		"fDeleteOnRelease",
		"ppstm",
		"dwExStyle",
		"lpClassName",
		"lpWindowName",
		"dwStyle",
		"X",
		"Y",
		"nWidth",
		"nHeight",
		"hWndParent",
		"hMenu",
		"hInstance",
		"lpParam",
		"dwExStyle",
		"lpClassName",
		"lpWindowName",
		"dwStyle",
		"X",
		"Y",
		"nWidth",
		"nHeight",
		"hWndParent",
		"hMenu",
		"hInstance",
		"lpParam",
		"hWinPosInfo",
		"hWnd",
		"hWndInsertAfter",
		"X",
		"Y",
		"cx",
		"cy",
		"uFlags",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"hWndMDIClient",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"hWndMDIClient",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hdc",
		"hMenu",
		"uPosition",
		"uFlags",
		"hGdiObj",
		"hAccel",
		"hCursor",
		"hIcon",
		"hMenu",
		"hWnd",
		"lpmsg",
		"lpmsg",
		"hwnd",
		"pt",
		"hDrop",
		"hDrop",
		"iFile",
		"lpszFile",
		"cch",
		"hDrop",
		"iFile",
		"lpszFile",
		"cch",
		"hdc",
		"qrc",
		"edge",
		"grfFlags",
		"hDC",
		"lpRect",
		"hdc",
		"lprc",
		"uType",
		"uState",
		"hdc",
		"xLeft",
		"yTop",
		"hIcon",
		"cxWidth",
		"cyWidth",
		"istepIfAniCur",
		"hbrFlickerFreeDraw",
		"diFlags",
		"hWnd",
		"hdc",
		"hbr",
		"lpOutputFunc",
		"lData",
		"wData",
		"x",
		"y",
		"cx",
		"cy",
		"fuFlags",
		"hdc",
		"hbr",
		"lpOutputFunc",
		"lData",
		"wData",
		"x",
		"y",
		"cx",
		"cy",
		"fuFlags",
		"hDC",
		"lpString",
		"nCount",
		"lpRect",
		"uFormat",
		"hDC",
		"lpString",
		"nCount",
		"lpRect",
		"uFormat",
		"hTheme",
		"hdc",
		"iPartId",
		"iStateId",
		"pRect",
		"pClipRect",
		"hdc",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"hMenu",
		"uIDEnableItem",
		"uEnable",
		"hWnd",
		"wSBflags",
		"wArrows",
		"hWnd",
		"bEnable",
		"pLangGroupEnumProc",
		"dwFlags",
		"lParam",
		"pLangGroupEnumProc",
		"dwFlags",
		"lParam",
		"lpLocaleEnumProc",
		"dwFlags",
		"lpLocaleEnumProc",
		"dwFlags",
		"hWinPosInfo",
		"hdc",
		"hdc",
		"hWnd",
		"lpPaint",
		"hdc",
		"hdc",
		"lprcClip",
		"lpfnEnum",
		"dwData",
		"hdc",
		"lpszFamily",
		"lpEnumFontFamProc",
		"lParam",
		"hdc",
		"lpszFamily",
		"lpEnumFontFamProc",
		"lParam",
		"hdc",
		"lpLogfont",
		"lpEnumFontFamExProc",
		"lParam",
		"dwFlags",
		"hdc",
		"lpLogfont",
		"lpEnumFontFamExProc",
		"lParam",
		"dwFlags",
		"lprc1",
		"lprc2",
		"hSrcRgn1",
		"hSrcRgn2",
		"hdc",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"lpSrc",
		"lsDst",
		"nSize",
		"lpSrc",
		"lsDst",
		"nSize",
		"dwPenStyle",
		"dwWidth",
		"lplb",
		"dwStyleCount",
		"lpStyle",
		"lpXform",
		"nCount",
		"lpRgnData",
		"hdc",
		"X",
		"Y",
		"fuOptions",
		"lprc",
		"lpString",
		"cbCount",
		"lpDx",
		"hdc",
		"X",
		"Y",
		"fuOptions",
		"lprc",
		"lpString",
		"cbCount",
		"lpDx",
		"lpszFile",
		"nIconIndex",
		"phiconLarge",
		"phiconSmall",
		"nIcons",
		"lpszFile",
		"nIconIndex",
		"phiconLarge",
		"phiconSmall",
		"nIcons",
		"hDC",
		"lprc",
		"hbr",
		"hdc",
		"lpClassName",
		"lpWindowName",
		"lpClassName",
		"lpWindowName",
		"dwFlags",
		"lpSource",
		"dwMessageId",
		"dwLanguageId",
		"lpBuffer",
		"nSize",
		"Arguments",
		"dwFlags",
		"lpSource",
		"dwMessageId",
		"dwLanguageId",
		"lpBuffer",
		"nSize",
		"Arguments",
		"hLibModule",
		"dwLimit",
		"hDC",
		"lpPoint",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpabc",
		"hdc",
		"lpString",
		"nCount",
		"nMaxExtent",
		"lpResults",
		"dwFlags",
		"hdc",
		"lpString",
		"nCount",
		"nMaxExtent",
		"lpResults",
		"dwFlags",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpBuffer",
		"hdc",
		"iFirstChar",
		"iLastChar",
		"lpBuffer",
		"hInstance",
		"lpClassName",
		"lpWndClass",
		"hInstance",
		"lpClassName",
		"lpWndClass",
		"hWnd",
		"lpClassName",
		"nMaxCount",
		"hWnd",
		"lpClassName",
		"nMaxCount",
		"hWnd",
		"lpRect",
		"uFormat",
		"format",
		"lpszFormatName",
		"cchMaxCount",
		"format",
		"lpszFormatName",
		"cchMaxCount",
		"hdc",
		"lprc",
		"hdc",
		"hrgn",
		"hwndCombo",
		"pcbi",
		"hdc",
		"uObjectType",
		"lpPoint",
		"hwnd",
		"hWnd",
		"hrgnClip",
		"flags",
		"hdc",
		"nIndex",
		"hdc",
		"uStartIndex",
		"cEntries",
		"pColors",
		"hdc",
		"hbmp",
		"uStartScan",
		"cScanLines",
		"lpvBits",
		"lpbi",
		"uUsage",
		"hDlg",
		"nIDDlgItem",
		"hdc",
		"idThread",
		"lpgui",
		"hIcon",
		"piconinfo",
		"nBuff",
		"lpList",
		"idThread",
		"nVirtKey",
		"lpKeyState",
		"lParam",
		"lpString",
		"nSize",
		"lParam",
		"lpString",
		"nSize",
		"hWnd",
		"hdc",
		"Locale",
		"LCType",
		"lpLCData",
		"cchData",
		"Locale",
		"LCType",
		"lpLCData",
		"cchData",
		"hWnd",
		"hWnd",
		"idObject",
		"idItem",
		"pmbi",
		"hMenu",
		"fByPos",
		"gmdiFlags",
		"hmenu",
		"lpcmi",
		"hMenu",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hWnd",
		"hMenu",
		"uItem",
		"lprcItem",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"hdc",
		"hrgn",
		"hdc",
		"lpModuleName",
		"lpModuleName",
		"hmonitor",
		"lpmi",
		"hmonitor",
		"lpmi",
		"hPal",
		"crColor",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"hgdiobj",
		"cbBuffer",
		"lpvObject",
		"lpofn",
		"lpofn",
		"hPalette",
		"iStartIndex",
		"nEntries",
		"logPalette",
		"hWnd",
		"hdc",
		"x",
		"y",
		"hdc",
		"hModule",
		"lpProcName",
		"lpAppName",
		"lpKeyName",
		"lpDefault",
		"lpReturnedString",
		"nSize",
		"lpAppName",
		"lpKeyName",
		"lpDefault",
		"lpReturnedString",
		"nSize",
		"hWnd",
		"lpString",
		"hWnd",
		"lpString",
		"hdc",
		"hrgn",
		"iNum",
		"hRgn",
		"dwCount",
		"lpRgnData",
		"hrgn",
		"lprc",
		"hdc",
		"lpofn",
		"lpofn",
		"hwnd",
		"flags",
		"info",
		"fnObject",
		"nIndex",
		"nIndex",
		"hWnd",
		"bRevert",
		"nIndex",
		"hdc",
		"iStartIndex",
		"nEntries",
		"lppe",
		"hDC",
		"hdc",
		"lpString",
		"cbString",
		"lpSize",
		"hdc",
		"lpString",
		"cbString",
		"lpSize",
		"hdc",
		"lptm",
		"hdc",
		"lptm",
		"hWnd",
		"lpRect",
		"bErase",
		"hWnd",
		"hRgn",
		"bErase",
		"lpVersionInfo",
		"lpVersionInfo",
		"hWnd",
		"uCmd",
		"hWnd",
		"nIndex",
		"hWnd",
		"nIndex",
		"hdc",
		"lpPoint",
		"hWnd",
		"lpwndpl",
		"hWnd",
		"lpRect",
		"hWnd",
		"hRgn",
		"hWnd",
		"lpString",
		"nMaxCount",
		"hWnd",
		"lpString",
		"nMaxCount",
		"hWnd",
		"hWnd",
		"hWnd",
		"lpdwProcessId",
		"hdc",
		"lpXform",
		"lpString",
		"lpString",
		"uFlags",
		"dwBytes",
		"hMem",
		"hMem",
		"hMem",
		"hMem",
		"hdc",
		"pVertex",
		"dwNumVertex",
		"pMesh",
		"dwNumMesh",
		"dwMode",
		"hHeap",
		"dwFlags",
		"dwBytes",
		"hHeap",
		"dwFlags",
		"lpMem",
		"hWnd",
		"lpsz",
		"lpiid",
		"himl",
		"hbmImage",
		"hbmMask",
		"himl",
		"hbmImage",
		"crMask",
		"cx",
		"cy",
		"flags",
		"cInitial",
		"cGrow",
		"himl",
		"himl",
		"i",
		"flags",
		"himl",
		"cx",
		"cy",
		"himl",
		"himl",
		"i",
		"himl",
		"i",
		"hbmImage",
		"hbmMask",
		"himl",
		"i",
		"hicon",
		"himl",
		"cx",
		"cy",
		"hWnd",
		"hIMC",
		"hIMC",
		"idThread",
		"hIMC",
		"lplf",
		"hIMC",
		"lplf",
		"hIMC",
		"dwIndex",
		"lpBuf",
		"dwBufLen",
		"hIMC",
		"dwIndex",
		"lpBuf",
		"dwBufLen",
		"hWnd",
		"hIMC",
		"lpfdwConversion",
		"lpfdwSentence",
		"hWnd",
		"hIMC",
		"hWnd",
		"hIMC",
		"hIMC",
		"lplf",
		"hIMC",
		"lplf",
		"hIMC",
		"lpCompForm",
		"hIMC",
		"fdwConversion",
		"dwSentence",
		"hIMC",
		"fOpen",
		"lpInitCtrls",
		"hMenu",
		"uPosition",
		"uFlags",
		"uIDNewItem",
		"lpNewItem",
		"hMenu",
		"uPosition",
		"uFlags",
		"uIDNewItem",
		"lpNewItem",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hdc",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"lprcDst",
		"lprcSrc1",
		"lprcSrc2",
		"hWnd",
		"lpRect",
		"bErase",
		"hWnd",
		"hRgn",
		"bErase",
		"TestChar",
		"hWnd",
		"hWnd",
		"hWnd",
		"hWnd",
		"hWnd",
		"hWnd",
		"uIDEvent",
		"hdc",
		"x1",
		"x2",
		"hInstance",
		"lpBitmapName",
		"hInstance",
		"lpBitmapName",
		"hInstance",
		"lpCursorName",
		"hInstance",
		"lpCursorName",
		"hInstance",
		"lpIconName",
		"hInstance",
		"lpIconName",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"hinst",
		"lpszName",
		"uType",
		"cxDesired",
		"cyDesired",
		"fuLoad",
		"hinst",
		"uID",
		"lpBuffer",
		"nBufferMax",
		"hinst",
		"uID",
		"lpBuffer",
		"nBufferMax",
		"lpLibFileName",
		"lpLibFileName",
		"hMem",
		"uCode",
		"uMapType",
		"uCode",
		"uMapType",
		"hWndFrom",
		"hWndTo",
		"lpPoints",
		"cPoints",
		"hWndFrom",
		"hWndTo",
		"lpPoints",
		"cPoints",
		"uType",
		"hWnd",
		"lpText",
		"lpCaption",
		"uType",
		"hWnd",
		"lpText",
		"lpCaption",
		"uType",
		"hwnd",
		"dwFlags",
		"Destination",
		"SourcePtr",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"SourcePtr",
		"Length",
		"Destination",
		"SourcePtr",
		"Length",
		"Destination",
		"SourcePtr",
		"Length",
		"DestinationPtr",
		"Source",
		"Length",
		"DestinationPtr",
		"Source",
		"Length",
		"DestinationPtr",
		"Source",
		"Length",
		"Destination",
		"SourcePtr",
		"Length",
		"Destination",
		"SourcePtr",
		"Length",
		"Destination",
		"SourcePtr",
		"Length",
		"Destination",
		"Source",
		"Length",
		"Destination",
		"Source",
		"Length",
		"hdc",
		"x1",
		"x2",
		"lPoint",
		"nCount",
		"pHandles",
		"dwMilliseconds",
		"dwWakeMask",
		"dwFlags",
		"CodePage",
		"dwFlags",
		"lpMultiByteStr",
		"cchMultiByte",
		"lpWideCharStr",
		"cchWideChar",
		"CodePage",
		"dwFlags",
		"lpMultiByteStr",
		"cchMultiByte",
		"lpWideCharStr",
		"cchWideChar",
		"event",
		"hwnd",
		"idObject",
		"idChild",
		"lprc",
		"dx",
		"dy",
		"hrgn",
		"nXOffset",
		"nYOffset",
		"pvReserved",
		"hWndNewOwner",
		"hwnd",
		"pszClassList",
		"hdc",
		"x1",
		"x2",
		"w",
		"h",
		"rop",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"wRemoveMsg",
		"lpMsg",
		"hWnd",
		"wMsgFilterMin",
		"wMsgFilterMax",
		"wRemoveMsg",
		"hdc",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"nXStartArc",
		"nYStartArc",
		"nXEndArc",
		"nYEndArc",
		"hdc",
		"points",
		"nPoints",
		"hdc",
		"points",
		"nPoints",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"idThread",
		"Msg",
		"wParam",
		"lParam",
		"idThread",
		"Msg",
		"wParam",
		"lParam",
		"lgid",
		"lppd",
		"lppd",
		"rect",
		"pt",
		"hrgn",
		"X",
		"Y",
		"hDC",
		"hdc",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"hrgn",
		"lprc",
		"hWnd",
		"lprcUpdate",
		"hrgnUpdate",
		"flags",
		"hKey",
		"lpWndClass",
		"lpWndClass",
		"lpString",
		"lpString",
		"hKey",
		"dwIndex",
		"lpName",
		"lpcName",
		"lpReserved",
		"lpClass",
		"lpcClass",
		"lpftLastWriteTime",
		"lpszFormat",
		"lpszFormat",
		"hKey",
		"lpSubKey",
		"ulOptions",
		"samDesired",
		"phkResult",
		"hKey",
		"lpClass",
		"lpcbClass",
		"lpReserved",
		"lpSubKeys",
		"lpcbMaxSubKeyLen",
		"lpcbMaxClassLen",
		"lpcValues",
		"lpcbMaxValueNameLen",
		"lpcbMaxValueLen",
		"lpcbSecurityDescriptor",
		"lpftLastWriteTime",
		"hKey",
		"lpValueName",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"hKey",
		"lpValueName",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"hKey",
		"dwIndex",
		"lpName",
		"lpcName",
		"lpReserved",
		"lpClass",
		"lpcClass",
		"lpftLastWriteTime",
		"hKey",
		"lpSubKey",
		"ulOptions",
		"samDesired",
		"phkResult",
		"hKey",
		"lpClass",
		"lpcbClass",
		"lpReserved",
		"lpSubKeys",
		"lpcbMaxSubKeyLen",
		"lpcbMaxClassLen",
		"lpcValues",
		"lpcbMaxValueNameLen",
		"lpcbMaxValueLen",
		"lpcbSecurityDescriptor",
		"lpftLastWriteTime",
		"hKey",
		"lpValueName",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"hKey",
		"lpValueName",
		"lpReserved",
		"lpType",
		"lpData",
		"lpcbData",
		"hWnd",
		"hDC",
		"hMenu",
		"uPosition",
		"uFlags",
		"hWnd",
		"lpString",
		"hWnd",
		"lpString",
		"hdc",
		"nSavedDC",
		"hdc",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"nWidth",
		"nHeight",
		"hdc",
		"hWnd",
		"lpPoint",
		"pwcChars",
		"cChars",
		"psa",
		"psla",
		"ppSp",
		"piNumScripts",
		"hdc",
		"psc",
		"tmHeight",
		"iCP",
		"fTrailing",
		"cChars",
		"cGlyphs",
		"pwLogClust",
		"psva",
		"piAdvance",
		"psa",
		"piX",
		"psc",
		"hdc",
		"psc",
		"sfp",
		"psa",
		"cChars",
		"cGlyphs",
		"piGlyphWidth",
		"pwLogClust",
		"psva",
		"piDx",
		"pwcInChars",
		"cInChars",
		"cMaxItems",
		"psControl",
		"psState",
		"pItems",
		"pcItems",
		"cRuns",
		"pbLevel",
		"piVisualToLogical",
		"piLogicalToVisual",
		"hdc",
		"psc",
		"pwGlyphs",
		"cGlyphs",
		"psva",
		"psa",
		"piAdvance",
		"pGoffset",
		"pABC",
		"hdc",
		"psc",
		"pwcChars",
		"cChars",
		"cMaxGlyphs",
		"psa",
		"pwOutGlyphs",
		"pwLogClust",
		"psva",
		"pcGlyphs",
		"hdc",
		"psc",
		"x",
		"y",
		"fuOptions",
		"lprc",
		"psa",
		"pwcReserved",
		"iReserved",
		"pwGlyphs",
		"cGlyphs",
		"piAdvance",
		"piJustify",
		"pGoffset",
		"iX",
		"cChars",
		"cGlyphs",
		"pwLogClust",
		"psva",
		"piAdvance",
		"psa",
		"piCP",
		"piTrailing",
		"hWnd",
		"dx",
		"dy",
		"prcScroll",
		"prcClip",
		"hrgnUpdate",
		"prcUpdate",
		"flags",
		"hdc",
		"hrgn",
		"hDC",
		"HGDIObj",
		"hDC",
		"hpal",
		"bForceBackground",
		"nInputs",
		"pInputs",
		"cbSize",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"Msg",
		"wParam",
		"lParam",
		"hWnd",
		"hdc",
		"colorRef",
		"hdc",
		"mode",
		"hWnd",
		"X",
		"Y",
		"uFormat",
		"hMem",
		"hCursor",
		"X",
		"Y",
		"hdc",
		"uStartIndex",
		"cEntries",
		"pColors",
		"uMode",
		"hWnd",
		"hWnd",
		"hdc",
		"iMode",
		"hdc",
		"dwLayout",
		"hWnd",
		"hMenu",
		"hMenu",
		"uItem",
		"fByPos",
		"hmenu",
		"lpcmi",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hMenu",
		"uItem",
		"fByPosition",
		"lpmii",
		"hdc",
		"hPal",
		"iStart",
		"cEntries",
		"lppe",
		"hWndChild",
		"hWndNewParent",
		"hdc",
		"X",
		"Y",
		"crColor",
		"hdc",
		"iPolyFillMode",
		"lprc",
		"xLeft",
		"yTop",
		"xRight",
		"yBottom",
		"hrgn",
		"nLeftRect",
		"nTopRect",
		"nRightRect",
		"nBottomRect",
		"hdc",
		"fnDrawMode",
		"hwnd",
		"flags",
		"info",
		"fRedraw",
		"hdc",
		"iStretchMode",
		"hWnd",
		"lpString",
		"hData",
		"hWnd",
		"lpString",
		"hData",
		"hdc",
		"fMode",
		"hdc",
		"colorRef",
		"hWnd",
		"nIDEvent",
		"Elapse",
		"lpTimerFunc",
		"hWnd",
		"nIndex",
		"dwNewLong",
		"hWnd",
		"nIndex",
		"dwNewLong",
		"hdc",
		"X",
		"Y",
		"lpPoint",
		"hWnd",
		"lpwndpl",
		"hWnd",
		"hWndInsertAfter",
		"X",
		"Y",
		"cx",
		"cy",
		"uFlags",
		"hWnd",
		"hRgn",
		"bRedraw",
		"hWnd",
		"lpString",
		"hWnd",
		"lpString",
		"idHook",
		"lpfn",
		"hMod",
		"dwThreadId",
		"idHook",
		"lpfn",
		"hMod",
		"dwThreadId",
		"hdc",
		"lpXform",
		"lpbi",
		"lpbi",
		"pmb",
		"hwnd",
		"wParam",
		"lParam",
		"psai",
		"shrg",
		"uMsg",
		"wp",
		"lp",
		"hwnd",
		"st",
		"lpExecInfo",
		"lpExecInfo",
		"dwMessage",
		"lpData",
		"dwMessage",
		"lpData",
		"ppMalloc",
		"pidl",
		"pszPath",
		"pidl",
		"pszPath",
		"bVk",
		"hwnd",
		"hWnd",
		"hWnd",
		"fShow",
		"hWnd",
		"wBar",
		"bShow",
		"hWnd",
		"nCmdShow",
		"pSipInfo",
		"hdc",
		"lpdi",
		"hdc",
		"lpdi",
		"hdc",
		"hdcDest",
		"nXOriginDest",
		"nYOriginDest",
		"nWidthDest",
		"nHeightDest",
		"hdcSrc",
		"nXOriginSrc",
		"nYOriginSrc",
		"nWidthSrc",
		"nHeightSrc",
		"dwRop",
		"hdc",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uiAction",
		"uiParam",
		"pvParam",
		"fWinIni",
		"uVirtKey",
		"uScanCode",
		"lpKeyState",
		"lpChar",
		"uFlags",
		"wVirtKey",
		"wScanCode",
		"lpKeyState",
		"pwszBuff",
		"cchBuff",
		"wFlags",
		"lpEventTrack",
		"hMenu",
		"uFlags",
		"x",
		"y",
		"nReserved",
		"hWnd",
		"prcRect",
		"hWnd",
		"hAccTable",
		"lpMsg",
		"hWnd",
		"hAccTable",
		"lpMsg",
		"lpSrc",
		"lpCs",
		"dwFlags",
		"hWndClient",
		"lpMsg",
		"lpmsg",
		"hdcDest",
		"nXOriginDest",
		"nYOriginDest",
		"nWidthDest",
		"hHeightDest",
		"hdcSrc",
		"nXOriginSrc",
		"nYOriginSrc",
		"nWidthSrc",
		"nHeightSrc",
		"crTransparent",
		"hdcDest",
		"DstX",
		"DstY",
		"DstCx",
		"DstCy",
		"hSrc",
		"SrcX",
		"SrcY",
		"SrcCx",
		"SrcCy",
		"TransparentColor",
		"hhk",
		"lpClassName",
		"hInstance",
		"lpClassName",
		"hInstance",
		"hWnd",
		"hWnd",
		"lpRect",
		"ch",
		"ch",
		"fnNumber",
		"ppVtbl",
		"fnNumber",
		"ppVtbl",
		"arg0",
		"fnNumber",
		"ppVtbl",
		"arg0",
		"arg1",
		"arg2",
		"arg3",
		"fnNumber",
		"ppVtbl",
		"arg0",
		"arg1",
		"arg2",
		"arg3",
		"arg4",
		"CodePage",
		"dwFlags",
		"lpWideCharStr",
		"cchWideChar",
		"lpMultiByteStr",
		"cchMultiByte",
		"lpDefaultChar",
		"lpUsedDefaultChar",
		"CodePage",
		"dwFlags",
		"lpWideCharStr",
		"cchWideChar",
		"lpMultiByteStr",
		"cchMultiByte",
		"lpDefaultChar",
		"lpUsedDefaultChar",
		"hDC",
		"lpPoint",
		"s",
		"string"
	],
	"extendORImplementFiles":[
		"Platform"
	],
	"package":[
		"org.eclipse.swt.internal.win32"
	],
	"import":[
		"org.eclipse.swt.internal"
	],
	"methods":[
		"VERSION",
		"CallWindowProc",
		"CharUpper",
		"CharLower",
		"ChooseColor",
		"ChooseFont",
		"CreateAcceleratorTable",
		"CreateDC",
		"CreateFontIndirect",
		"CreateFontIndirect",
		"CreateWindowEx",
		"DefMDIChildProc",
		"DefFrameProc",
		"DefWindowProc",
		"DispatchMessage",
		"DragQueryFile",
		"DrawState",
		"DrawText",
		"EnumFontFamilies",
		"EnumFontFamiliesEx",
		"EnumSystemLocales",
		"EnumSystemLanguageGroups",
		"ExpandEnvironmentStrings",
		"ExtractIconEx",
		"ExtTextOut",
		"FindWindow",
		"FormatMessage",
		"GetCharABCWidths",
		"GetCharacterPlacement",
		"GetCharWidth",
		"GetClassInfo",
		"GetClassName",
		"GetClipboardFormatName",
		"GetKeyNameText",
		"GetLocaleInfo",
		"GetMenuItemInfo",
		"GetMessage",
		"GetModuleHandle",
		"GetMonitorInfo",
		"GetObject",
		"GetObject",
		"GetObject",
		"GetObject",
		"GetObject",
		"GetObject",
		"GetObject",
		"GetOpenFileName",
		"GetProfileString",
		"GetProp",
		"GetSaveFileName",
		"GetTextExtentPoint32",
		"GetTextMetrics",
		"GetVersionEx",
		"GetWindowLong",
		"GetWindowText",
		"GetWindowTextLength",
		"GlobalAddAtom",
		"ImmGetCompositionFont",
		"ImmSetCompositionFont",
		"ImmGetCompositionString",
		"InsertMenu",
		"InsertMenuItem",
		"LoadBitmap",
		"LoadCursor",
		"LoadIcon",
		"LoadImage",
		"LoadImage",
		"LoadLibrary",
		"LoadString",
		"MapVirtualKey",
		"MessageBox",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"PeekMessage",
		"PostMessage",
		"PostThreadMessage",
		"PrintDlg",
		"RegEnumKeyEx",
		"RegisterClass",
		"RegisterClipboardFormat",
		"RegisterWindowMessage",
		"RegOpenKeyEx",
		"RegQueryInfoKey",
		"RegQueryValueEx",
		"RegQueryValueEx",
		"RemoveProp",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SetMenuItemInfo",
		"SetProp",
		"SetWindowLong",
		"SetWindowsHookEx",
		"SetWindowText",
		"SHBrowseForFolder",
		"ShellExecuteEx",
		"Shell_NotifyIcon",
		"SHGetPathFromIDList",
		"StartDoc",
		"SystemParametersInfo",
		"SystemParametersInfo",
		"SystemParametersInfo",
		"SystemParametersInfo",
		"TranslateAccelerator",
		"UnregisterClass",
		"VkKeyScan",
		"AbortDoc",
		"ActivateKeyboardLayout",
		"AdjustWindowRectEx",
		"AlphaBlend",
		"Arc",
		"BeginDeferWindowPos",
		"BeginPaint",
		"BeginPath",
		"BitBlt",
		"BringWindowToTop",
		"Call",
		"CallNextHookEx",
		"CallWindowProcW",
		"CallWindowProcA",
		"CharLowerW",
		"CharLowerA",
		"CharUpperW",
		"CharUpperA",
		"CheckMenuItem",
		"ChooseColorW",
		"ChooseColorA",
		"ChooseFontW",
		"ChooseFontA",
		"ClientToScreen",
		"CloseClipboard",
		"CloseThemeData",
		"CoCreateInstance",
		"CombineRgn",
		"CommandBar_AddAdornments",
		"CommandBar_Create",
		"CommandBar_Destroy",
		"CommandBar_DrawMenuBar",
		"CommandBar_Height",
		"CommandBar_InsertMenubarEx",
		"CommandBar_Show",
		"CommDlgExtendedError",
		"CopyImage",
		"CreateAcceleratorTableW",
		"CreateAcceleratorTableA",
		"CreateBitmap",
		"CreateCaret",
		"CreateCompatibleBitmap",
		"CreateCompatibleDC",
		"CreateCursor",
		"CreateDCW",
		"CreateDCA",
		"CreateDIBSection",
		"CreateFontIndirectW",
		"CreateFontIndirectA",
		"CreateFontIndirectW",
		"CreateFontIndirectA",
		"CreateIconIndirect",
		"CreateMenu",
		"CreatePalette",
		"CreatePatternBrush",
		"CreatePen",
		"CreatePolygonRgn",
		"CreatePopupMenu",
		"CreateRectRgn",
		"CreateSolidBrush",
		"CreateStreamOnHGlobal",
		"CreateWindowExW",
		"CreateWindowExA",
		"DeferWindowPos",
		"DefMDIChildProcW",
		"DefMDIChildProcA",
		"DefFrameProcW",
		"DefFrameProcA",
		"DefWindowProcW",
		"DefWindowProcA",
		"DeleteDC",
		"DeleteMenu",
		"DeleteObject",
		"DestroyAcceleratorTable",
		"DestroyCaret",
		"DestroyCursor",
		"DestroyIcon",
		"DestroyMenu",
		"DestroyWindow",
		"DispatchMessageW",
		"DispatchMessageA",
		"DragDetect",
		"DragFinish",
		"DragQueryFileA",
		"DragQueryFileW",
		"DrawEdge",
		"DrawFocusRect",
		"DrawFrameControl",
		"DrawIconEx",
		"DrawMenuBar",
		"DrawStateW",
		"DrawStateA",
		"DrawTextW",
		"DrawTextA",
		"DrawThemeBackground",
		"Ellipse",
		"EnableMenuItem",
		"EnableScrollBar",
		"EnableWindow",
		"EnumSystemLanguageGroupsW",
		"EnumSystemLanguageGroupsA",
		"EnumSystemLocalesW",
		"EnumSystemLocalesA",
		"EndDeferWindowPos",
		"EndDoc",
		"EndPage",
		"EndPaint",
		"EndPath",
		"EnumDisplayMonitors",
		"EnumFontFamiliesW",
		"EnumFontFamiliesA",
		"EnumFontFamiliesExW",
		"EnumFontFamiliesExA",
		"EqualRect",
		"EqualRgn",
		"ExcludeClipRect",
		"ExpandEnvironmentStringsW",
		"ExpandEnvironmentStringsA",
		"ExtCreatePen",
		"ExtCreateRegion",
		"ExtTextOutW",
		"ExtTextOutA",
		"ExtractIconExW",
		"ExtractIconExA",
		"FillRect",
		"FillPath",
		"FindWindowA",
		"FindWindowW",
		"FormatMessageA",
		"FormatMessageW",
		"FreeLibrary",
		"GdiSetBatchLimit",
		"GetACP",
		"GetActiveWindow",
		"GetBkColor",
		"GetCapture",
		"GetCaretPos",
		"GetCharABCWidthsA",
		"GetCharABCWidthsW",
		"GetCharacterPlacementW",
		"GetCharacterPlacementA",
		"GetCharWidthA",
		"GetCharWidthW",
		"GetClassInfoW",
		"GetClassInfoA",
		"GetClassNameW",
		"GetClassNameA",
		"GetClientRect",
		"GetClipboardData",
		"GetClipboardFormatNameA",
		"GetClipboardFormatNameW",
		"GetClipBox",
		"GetClipRgn",
		"GetComboBoxInfo",
		"GetCurrentObject",
		"GetCurrentProcessId",
		"GetCurrentThreadId",
		"GetCursor",
		"GetCursorPos",
		"GetDC",
		"GetDCEx",
		"GetDesktopWindow",
		"GetDeviceCaps",
		"GetDialogBaseUnits",
		"GetDIBColorTable",
		"GetDIBits",
		"GetDlgItem",
		"GetDoubleClickTime",
		"GetFocus",
		"GetFontLanguageInfo",
		"GetForegroundWindow",
		"GetGUIThreadInfo",
		"GetIconInfo",
		"GetKeyboardLayoutList",
		"GetKeyboardLayout",
		"GetKeyState",
		"GetKeyboardState",
		"GetKeyNameTextW",
		"GetKeyNameTextA",
		"GetLastActivePopup",
		"GetLastError",
		"GetLayout",
		"GetLibraryHandle",
		"GetLocaleInfoW",
		"GetLocaleInfoA",
		"GetMenu",
		"GetMenuBarInfo",
		"GetMenuDefaultItem",
		"GetMenuInfo",
		"GetMenuItemCount",
		"GetMenuItemInfoW",
		"GetMenuItemInfoA",
		"GetMenuItemRect",
		"GetMessageW",
		"GetMessageA",
		"GetMessagePos",
		"GetMessageTime",
		"GetMetaRgn",
		"GetTextCharset",
		"GetTickCount",
		"GetModuleHandleW",
		"GetModuleHandleA",
		"GetMonitorInfoW",
		"GetMonitorInfoA",
		"GetNearestPaletteIndex",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetOpenFileNameW",
		"GetOpenFileNameA",
		"GetPaletteEntries",
		"GetParent",
		"GetPixel",
		"GetPolyFillMode",
		"GetProcAddress",
		"GetProcessHeap",
		"GetProfileStringW",
		"GetProfileStringA",
		"GetPropW",
		"GetPropA",
		"GetRandomRgn",
		"GetRegionData",
		"GetRgnBox",
		"GetROP2",
		"GetSaveFileNameW",
		"GetSaveFileNameA",
		"GetScrollInfo",
		"GetStockObject",
		"GetSysColor",
		"GetSysColorBrush",
		"GetSystemDefaultUILanguage",
		"GetSystemMenu",
		"GetSystemMetrics",
		"GetSystemPaletteEntries",
		"GetTextColor",
		"GetTextExtentPoint32W",
		"GetTextExtentPoint32A",
		"GetTextMetricsW",
		"GetTextMetricsA",
		"GetUpdateRect",
		"GetUpdateRgn",
		"GetVersionExW",
		"GetVersionExA",
		"GetWindow",
		"GetWindowLongW",
		"GetWindowLongA",
		"GetWindowOrgEx",
		"GetWindowPlacement",
		"GetWindowRect",
		"GetWindowRgn",
		"GetWindowTextW",
		"GetWindowTextA",
		"GetWindowTextLengthW",
		"GetWindowTextLengthA",
		"GetWindowThreadProcessId",
		"GetWorldTransform",
		"GlobalAddAtomW",
		"GlobalAddAtomA",
		"GlobalAlloc",
		"GlobalFree",
		"GlobalLock",
		"GlobalSize",
		"GlobalUnlock",
		"GradientFill",
		"HeapAlloc",
		"HeapFree",
		"HideCaret",
		"IIDFromString",
		"ImageList_Add",
		"ImageList_AddMasked",
		"ImageList_Create",
		"ImageList_Destroy",
		"ImageList_GetIcon",
		"ImageList_GetIconSize",
		"ImageList_GetImageCount",
		"ImageList_Remove",
		"ImageList_Replace",
		"ImageList_ReplaceIcon",
		"ImageList_SetIconSize",
		"ImmAssociateContext",
		"ImmCreateContext",
		"ImmDestroyContext",
		"ImmDisableTextFrameService",
		"ImmGetCompositionFontW",
		"ImmGetCompositionFontA",
		"ImmGetCompositionStringW",
		"ImmGetCompositionStringA",
		"ImmGetContext",
		"ImmGetConversionStatus",
		"ImmGetDefaultIMEWnd",
		"ImmGetOpenStatus",
		"ImmReleaseContext",
		"ImmSetCompositionFontW",
		"ImmSetCompositionFontA",
		"ImmSetCompositionWindow",
		"ImmSetConversionStatus",
		"ImmSetOpenStatus",
		"InitCommonControls",
		"InitCommonControlsEx",
		"InsertMenuW",
		"InsertMenuA",
		"InsertMenuItemW",
		"InsertMenuItemA",
		"IntersectClipRect",
		"IntersectRect",
		"InvalidateRect",
		"InvalidateRgn",
		"IsAppThemed",
		"IsDBCSLeadByte",
		"IsHungAppWindow",
		"IsIconic",
		"IsPPC",
		"IsSP",
		"IsWindowEnabled",
		"IsWindowVisible",
		"IsZoomed",
		"KillTimer",
		"LineTo",
		"LoadBitmapW",
		"LoadBitmapA",
		"LoadCursorW",
		"LoadCursorA",
		"LoadIconW",
		"LoadIconA",
		"LoadImageW",
		"LoadImageA",
		"LoadImageW",
		"LoadImageA",
		"LoadStringW",
		"LoadStringA",
		"LoadLibraryW",
		"LoadLibraryA",
		"LocalFree",
		"MapVirtualKeyW",
		"MapVirtualKeyA",
		"MapWindowPoints",
		"MapWindowPoints",
		"MessageBeep",
		"MessageBoxW",
		"MessageBoxA",
		"MonitorFromWindow",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveToEx",
		"MsgWaitForMultipleObjectsEx",
		"MultiByteToWideChar",
		"MultiByteToWideChar",
		"NotifyWinEvent",
		"OffsetRect",
		"OffsetRgn",
		"OleInitialize",
		"OleUninitialize",
		"OpenClipboard",
		"OpenThemeData",
		"PatBlt",
		"PeekMessageW",
		"PeekMessageA",
		"Pie",
		"Polygon",
		"Polyline",
		"PostMessageW",
		"PostMessageA",
		"PostThreadMessageW",
		"PostThreadMessageA",
		"PRIMARYLANGID",
		"PrintDlgW",
		"PrintDlgA",
		"PtInRect",
		"PtInRegion",
		"RealizePalette",
		"Rectangle",
		"RectInRegion",
		"RedrawWindow",
		"RegCloseKey",
		"RegisterClassW",
		"RegisterClassA",
		"RegisterWindowMessageW",
		"RegisterWindowMessageA",
		"RegEnumKeyExW",
		"RegisterClipboardFormatA",
		"RegisterClipboardFormatW",
		"RegOpenKeyExW",
		"RegQueryInfoKeyW",
		"RegQueryValueExW",
		"RegQueryValueExW",
		"RegEnumKeyExA",
		"RegOpenKeyExA",
		"RegQueryInfoKeyA",
		"RegQueryValueExA",
		"RegQueryValueExA",
		"ReleaseCapture",
		"ReleaseDC",
		"RemoveMenu",
		"RemovePropA",
		"RemovePropW",
		"RestoreDC",
		"RoundRect",
		"SaveDC",
		"ScreenToClient",
		"ScriptBreak",
		"ScriptGetProperties",
		"ScriptCacheGetHeight",
		"ScriptCPtoX",
		"ScriptFreeCache",
		"ScriptGetFontProperties",
		"ScriptGetLogicalWidths",
		"ScriptItemize",
		"ScriptLayout",
		"ScriptPlace",
		"ScriptShape",
		"ScriptTextOut",
		"ScriptXtoCP",
		"ScrollWindowEx",
		"SelectClipRgn",
		"SelectObject",
		"SelectPalette",
		"SendInput",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageW",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SendMessageA",
		"SetActiveWindow",
		"SetBkColor",
		"SetBkMode",
		"SetCapture",
		"SetCaretPos",
		"SetClipboardData",
		"SetCursor",
		"SetCursorPos",
		"SetDIBColorTable",
		"SetErrorMode",
		"SetFocus",
		"SetForegroundWindow",
		"SetGraphicsMode",
		"SetLayout",
		"SetMenu",
		"SetMenuDefaultItem",
		"SetMenuInfo",
		"SetMenuItemInfoW",
		"SetMenuItemInfoA",
		"SetMetaRgn",
		"SetPaletteEntries",
		"SetParent",
		"SetPixel",
		"SetPolyFillMode",
		"SetRect",
		"SetRectRgn",
		"SetROP2",
		"SetScrollInfo",
		"SetStretchBltMode",
		"SetPropW",
		"SetPropA",
		"SetTextAlign",
		"SetTextColor",
		"SetTimer",
		"SetWindowLongW",
		"SetWindowLongA",
		"SetWindowOrgEx",
		"SetWindowPlacement",
		"SetWindowPos",
		"SetWindowRgn",
		"SetWindowTextW",
		"SetWindowTextA",
		"SetWindowsHookExW",
		"SetWindowsHookExA",
		"SetWorldTransform",
		"SHBrowseForFolderW",
		"SHBrowseForFolderA",
		"SHCreateMenuBar",
		"SHHandleWMSettingChange",
		"SHRecognizeGesture",
		"SHSendBackToFocusWindow",
		"SHSipPreference",
		"ShellExecuteExW",
		"ShellExecuteExA",
		"Shell_NotifyIconA",
		"Shell_NotifyIconW",
		"SHGetMalloc",
		"SHGetPathFromIDListW",
		"SHGetPathFromIDListA",
		"SHSetAppKeyWndAssoc",
		"ShowCaret",
		"ShowOwnedPopups",
		"ShowScrollBar",
		"ShowWindow",
		"SipGetInfo",
		"StartDocW",
		"StartDocA",
		"StartPage",
		"StretchBlt",
		"StrokePath",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"ToAscii",
		"ToUnicode",
		"TrackMouseEvent",
		"TrackPopupMenu",
		"TranslateAcceleratorW",
		"TranslateAcceleratorA",
		"TranslateCharsetInfo",
		"TranslateMDISysAccel",
		"TranslateMessage",
		"TransparentBlt",
		"TransparentImage",
		"UnhookWindowsHookEx",
		"UnregisterClassW",
		"UnregisterClassA",
		"UpdateWindow",
		"ValidateRect",
		"VkKeyScanW",
		"VkKeyScanA",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"VtblCall",
		"WaitMessage",
		"WideCharToMultiByte",
		"WideCharToMultiByte",
		"WindowFromDC",
		"WindowFromPoint",
		"strlen",
		"wcslen",
		"loadLibrary",
		"GetVersionExW",
		"GetVersionExA",
		"IsSP",
		"IsPPC",
		"VERSION",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"VERSION",
		"GetSystemDefaultUILanguage",
		"PRIMARYLANGID",
		"ImmDisableTextFrameService",
		"LoadLibrary",
		"length",
		"charAt",
		"GetProcAddress",
		"Call",
		"FreeLibrary",
		"VERSION",
		"LoadLibrary",
		"length",
		"charAt",
		"GetProcAddress",
		"Call",
		"FreeLibrary",
		"VERSION",
		"CallWindowProcW",
		"CallWindowProcA",
		"CharUpperW",
		"CharUpperA",
		"CharLowerW",
		"CharLowerA",
		"ChooseColorW",
		"ChooseColorA",
		"ChooseFontW",
		"ChooseFontA",
		"CreateAcceleratorTableW",
		"CreateAcceleratorTableA",
		"CreateDCW",
		"CreateDCA",
		"CreateFontIndirectW",
		"CreateFontIndirectA",
		"CreateFontIndirectW",
		"CreateFontIndirectA",
		"CreateWindowExW",
		"CreateWindowExA",
		"DefMDIChildProcW",
		"DefMDIChildProcA",
		"DefFrameProcW",
		"DefFrameProcA",
		"DefWindowProcW",
		"DefWindowProcA",
		"DispatchMessageW",
		"DispatchMessageA",
		"DragQueryFileW",
		"DragQueryFileA",
		"DrawStateW",
		"DrawStateA",
		"DrawTextW",
		"DrawTextA",
		"EnumFontFamiliesW",
		"EnumFontFamiliesA",
		"EnumFontFamiliesExW",
		"EnumFontFamiliesExA",
		"EnumSystemLocalesW",
		"EnumSystemLocalesA",
		"EnumSystemLanguageGroupsW",
		"EnumSystemLanguageGroupsA",
		"ExpandEnvironmentStringsW",
		"ExpandEnvironmentStringsA",
		"ExtractIconExW",
		"ExtractIconExA",
		"ExtTextOutW",
		"ExtTextOutA",
		"FindWindowW",
		"FindWindowA",
		"FormatMessageW",
		"FormatMessageA",
		"GetCharABCWidthsW",
		"GetCharABCWidthsA",
		"GetCharacterPlacementW",
		"GetCharacterPlacementA",
		"GetCharWidthW",
		"GetCharWidthA",
		"GetClassInfoW",
		"GetClassInfoA",
		"GetClassNameW",
		"GetClassNameA",
		"GetClipboardFormatNameW",
		"GetClipboardFormatNameA",
		"GetKeyNameTextW",
		"GetKeyNameTextA",
		"GetLocaleInfoW",
		"GetLocaleInfoA",
		"GetMenuItemInfoW",
		"GetMenuItemInfoA",
		"GetMessageW",
		"GetMessageA",
		"GetModuleHandleW",
		"GetModuleHandleA",
		"GetMonitorInfoW",
		"GetMonitorInfoA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetObjectW",
		"GetObjectA",
		"GetOpenFileNameW",
		"GetOpenFileNameA",
		"GetProfileStringW",
		"GetProfileStringA",
		"GetPropW",
		"GetPropA",
		"GetSaveFileNameW",
		"GetSaveFileNameA",
		"GetTextExtentPoint32W",
		"GetTextExtentPoint32A",
		"GetTextMetricsW",
		"GetTextMetricsA",
		"GetVersionExW",
		"GetVersionExA",
		"GetWindowLongW",
		"GetWindowLongA",
		"GetWindowTextW",
		"GetWindowTextA",
		"GetWindowTextLengthW",
		"GetWindowTextLengthA",
		"GlobalAddAtomW",
		"GlobalAddAtomA",
		"ImmGetCompositionFontW",
		"ImmGetCompositionFontA",
		"ImmSetCompositionFontW",
		"ImmSetCompositionFontA",
		"ImmGetCompositionStringW",
		"ImmGetCompositionStringA",
		"InsertMenuW",
		"InsertMenuA",
		"InsertMenuItemW",
		"InsertMenuItemA",
		"LoadBitmapW",
		"LoadBitmapA",
		"LoadCursorW",
		"LoadCursorA",
		"LoadIconW",
		"LoadIconA",
		"LoadImageW",
		"LoadImageA",
		"LoadImageW",
		"LoadImageA",
		"LoadLibraryW",
		"LoadLibraryA",
		"LoadStringW",
		"LoadStringA",
		"MapVirtualKeyW",
		"MapVirtualKeyA",
		"MessageBoxW",
		"MessageBoxA",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"PeekMessageW",
		"PeekMessageA",
		"PostMessageW",
		"PostMessageA",
		"PostThreadMessageW",
		"PostThreadMessageA",
		"PrintDlgW",
		"PrintDlgA",
		"RegEnumKeyExW",
		"RegEnumKeyExA",
		"RegisterClassW",
		"RegisterClassA",
		"RegisterClipboardFormatW",
		"RegisterClipboardFormatA",
		"RegisterWindowMessageW",
		"RegisterWindowMessageA",
		"RegOpenKeyExW",
		"RegOpenKeyExA",
		"RegQueryInfoKeyW",
		"RegQueryInfoKeyA",
		"RegQueryValueExW",
		"RegQueryValueExA",
		"RegQueryValueExW",
		"RegQueryValueExA",
		"RemovePropW",
		"RemovePropA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SendMessageW",
		"SendMessageA",
		"SetMenuItemInfoW",
		"SetMenuItemInfoA",
		"SetPropW",
		"SetPropA",
		"SetWindowLongW",
		"SetWindowLongA",
		"SetWindowsHookExW",
		"SetWindowsHookExA",
		"SetWindowTextW",
		"SetWindowTextA",
		"SHBrowseForFolderW",
		"SHBrowseForFolderA",
		"ShellExecuteExW",
		"ShellExecuteExA",
		"Shell_NotifyIconW",
		"Shell_NotifyIconA",
		"SHGetPathFromIDListW",
		"SHGetPathFromIDListA",
		"StartDocW",
		"StartDocA",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"SystemParametersInfoW",
		"SystemParametersInfoA",
		"TranslateAcceleratorW",
		"TranslateAcceleratorA",
		"UnregisterClassW",
		"UnregisterClassA",
		"VkKeyScanW",
		"VkKeyScanA",
		"OSVERSIONINFOW",
		"OSVERSIONINFOA",
		"DLLVERSIONINFO",
		"TCHAR",
		"DLLVERSIONINFO",
		"TCHAR"
	],
	"methodsBody":{
		"public static final native int DeferWindowPos(int hWinPosInfo, int hWnd, int hWndInsertAfter, int X, int Y, int cx, int cy, int uFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DeferWindowPos(int hWinPosInfo, int hWnd, int hWndInsertAfter, int X, int Y, int cx, int cy, int uFlags)"
		},
		"public static final native void MoveMemory(int Destination, MEASUREITEMSTRUCT Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, MEASUREITEMSTRUCT Source, int Length)"
		},
		"public static final native boolean SetCursorPos(int X, int Y)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetCursorPos(int X, int Y)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LVITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LVITEM lParam)"
		},
		"public static final native int ScriptCPtoX(int iCP, boolean fTrailing, int cChars, int cGlyphs, int pwLogClust, int psva, int piAdvance, SCRIPT_ANALYSIS psa, int[] piX)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptCPtoX(int iCP, boolean fTrailing, int cChars, int cGlyphs, int pwLogClust, int psva, int piAdvance, SCRIPT_ANALYSIS psa, int[] piX)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int[] wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int[] wParam, int lParam)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, MARGINS lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, MARGINS lParam)"
		},
		"public static final native int GetLocaleInfoW(int Locale, int LCType, char[] lpLCData, int cchData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetLocaleInfoW(int Locale, int LCType, char[] lpLCData, int cchData)"
		},
		"public static final native int CreatePalette(byte[] logPalette)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreatePalette(byte[] logPalette)"
		},
		"public static final native boolean GetClassInfoW(int hInstance, char[] lpClassName, WNDCLASS lpWndClass)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetClassInfoW(int hInstance, char[] lpClassName, WNDCLASS lpWndClass)"
		},
		"public static final int GetModuleHandle(TCHAR lpModuleName)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpModuleName1 = lpModuleName == null ? null : lpModuleName.chars;\n        return GetModuleHandleW(lpModuleName1);\n    }\n    byte[] lpModuleName1 = lpModuleName == null ? null : lpModuleName.bytes;\n    return GetModuleHandleA(lpModuleName1);\n}",
			"comments":"",
			"methodName":"public static final int GetModuleHandle(TCHAR lpModuleName)"
		},
		"public static final native int DispatchMessageW(MSG lpmsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DispatchMessageW(MSG lpmsg)"
		},
		"public static final boolean SHGetPathFromIDList(int pidl, TCHAR pszPath)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] pszPath1 = pszPath == null ? null : pszPath.chars;\n        return SHGetPathFromIDListW(pidl, pszPath1);\n    }\n    byte[] pszPath1 = pszPath == null ? null : pszPath.bytes;\n    return SHGetPathFromIDListA(pidl, pszPath1);\n}",
			"comments":"",
			"methodName":"public static final boolean SHGetPathFromIDList(int pidl, TCHAR pszPath)"
		},
		"public static final native boolean GetMonitorInfoA(int hmonitor, MONITORINFO lpmi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMonitorInfoA(int hmonitor, MONITORINFO lpmi)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LVCOLUMN lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LVCOLUMN lParam)"
		},
		"public static final boolean PostThreadMessage(int idThread, int Msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return PostThreadMessageW(idThread, Msg, wParam, lParam);\n    return PostThreadMessageA(idThread, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final boolean PostThreadMessage(int idThread, int Msg, int wParam, int lParam)"
		},
		"public static final native int EndDoc(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int EndDoc(int hdc)"
		},
		"public static final native void MoveMemory(NMHEADER Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMHEADER Destination, int Source, int Length)"
		},
		"public static final native boolean ClientToScreen(int hWnd, POINT lpPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ClientToScreen(int hWnd, POINT lpPoint)"
		},
		"public static final native int ExtractIconExW(char[] lpszFile, int nIconIndex, int[] phiconLarge, int[] phiconSmall, int nIcons)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ExtractIconExW(char[] lpszFile, int nIconIndex, int[] phiconLarge, int[] phiconSmall, int nIcons)"
		},
		"public static final int GetLocaleInfo(int Locale, int LCType, TCHAR lpLCData, int cchData)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpLCData1 = lpLCData == null ? null : lpLCData.chars;\n        return GetLocaleInfoW(Locale, LCType, lpLCData1, cchData);\n    }\n    byte[] lpLCData1 = lpLCData == null ? null : lpLCData.bytes;\n    return GetLocaleInfoA(Locale, LCType, lpLCData1, cchData);\n}",
			"comments":"",
			"methodName":"public static final int GetLocaleInfo(int Locale, int LCType, TCHAR lpLCData, int cchData)"
		},
		"public static final boolean SystemParametersInfo(int uiAction, int uiParam, RECT pvParam, int fWinIni)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SystemParametersInfoW(uiAction, uiParam, pvParam, fWinIni);\n    return SystemParametersInfoA(uiAction, uiParam, pvParam, fWinIni);\n}",
			"comments":"",
			"methodName":"public static final boolean SystemParametersInfo(int uiAction, int uiParam, RECT pvParam, int fWinIni)"
		},
		"public static final native int SetMetaRgn(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetMetaRgn(int hdc)"
		},
		"public static final native boolean WaitMessage()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean WaitMessage()"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native int LoadImageW(int hinst, char[] lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadImageW(int hinst, char[] lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)"
		},
		"public static final native boolean GetTextExtentPoint32W(int hdc, char[] lpString, int cbString, SIZE lpSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetTextExtentPoint32W(int hdc, char[] lpString, int cbString, SIZE lpSize)"
		},
		"public static final boolean SystemParametersInfo(int uiAction, int uiParam, HIGHCONTRAST pvParam, int fWinIni)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SystemParametersInfoW(uiAction, uiParam, pvParam, fWinIni);\n    return SystemParametersInfoA(uiAction, uiParam, pvParam, fWinIni);\n}",
			"comments":"",
			"methodName":"public static final boolean SystemParametersInfo(int uiAction, int uiParam, HIGHCONTRAST pvParam, int fWinIni)"
		},
		"public static final native boolean ShowWindow(int hWnd, int nCmdShow)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ShowWindow(int hWnd, int nCmdShow)"
		},
		"public static final native int GlobalSize(int hMem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GlobalSize(int hMem)"
		},
		"public static final native int ImmCreateContext()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImmCreateContext()"
		},
		"public static final int LoadCursor(int hInstance, int lpCursorName)":{
			"methodBody":"{\n    if (IsUnicode)\n        return LoadCursorW(hInstance, lpCursorName);\n    return LoadCursorA(hInstance, lpCursorName);\n}",
			"comments":"",
			"methodName":"public static final int LoadCursor(int hInstance, int lpCursorName)"
		},
		"public static final native boolean GetWindowOrgEx(int hdc, POINT lpPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetWindowOrgEx(int hdc, POINT lpPoint)"
		},
		"public static final int GetWindowLong(int hWnd, int nIndex)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetWindowLongW(hWnd, nIndex);\n    return GetWindowLongA(hWnd, nIndex);\n}",
			"comments":"",
			"methodName":"public static final int GetWindowLong(int hWnd, int nIndex)"
		},
		"public static final native int SetPolyFillMode(int hdc, int iPolyFillMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetPolyFillMode(int hdc, int iPolyFillMode)"
		},
		"public static final native boolean InsertMenuItemA(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean InsertMenuItemA(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native boolean InsertMenuA(int hMenu, int uPosition, int uFlags, int uIDNewItem, byte[] lpNewItem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean InsertMenuA(int hMenu, int uPosition, int uFlags, int uIDNewItem, byte[] lpNewItem)"
		},
		"public static final native void MoveMemory(NMREBARCHILDSIZE Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMREBARCHILDSIZE Destination, int Source, int Length)"
		},
		"public static final native boolean UnregisterClassW(char[] lpClassName, int hInstance)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean UnregisterClassW(char[] lpClassName, int hInstance)"
		},
		"public static final native boolean TrackMouseEvent(TRACKMOUSEEVENT lpEventTrack)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean TrackMouseEvent(TRACKMOUSEEVENT lpEventTrack)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, short[] lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, short[] lParam)"
		},
		"public static final native void MoveMemory(int Destination, RECT Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, RECT Source, int Length)"
		},
		"public static final native int GetROP2(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetROP2(int hdc)"
		},
		"public static final native int ImmGetCompositionStringW(int hIMC, int dwIndex, char[] lpBuf, int dwBufLen)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImmGetCompositionStringW(int hIMC, int dwIndex, char[] lpBuf, int dwBufLen)"
		},
		"public static final native int GetDC(int hwnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDC(int hwnd)"
		},
		"public static final native int LoadImageW(int hinst, int lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadImageW(int hinst, int lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)"
		},
		"public static final native void MoveMemory(BITMAPINFOHEADER Destination, byte[] Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(BITMAPINFOHEADER Destination, byte[] Source, int Length)"
		},
		"public static final native int CoCreateInstance(byte[] rclsid, int pUnkOuter, int dwClsContext, byte[] riid, int[] ppv)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CoCreateInstance(byte[] rclsid, int pUnkOuter, int dwClsContext, byte[] riid, int[] ppv)"
		},
		"public static final native int CreatePopupMenu()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreatePopupMenu()"
		},
		"public static final native boolean GetOpenFileNameA(OPENFILENAME lpofn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetOpenFileNameA(OPENFILENAME lpofn)"
		},
		"public static final native int GetMenu(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetMenu(int hWnd)"
		},
		"public static final native int GdiSetBatchLimit(int dwLimit)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GdiSetBatchLimit(int dwLimit)"
		},
		"public static final native boolean Polygon(int hdc, int[] points, int nPoints)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Polygon(int hdc, int[] points, int nPoints)"
		},
		"public static final boolean GetVersionEx(OSVERSIONINFO lpVersionInfo)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetVersionExW((OSVERSIONINFOW) lpVersionInfo);\n    return GetVersionExA((OSVERSIONINFOA) lpVersionInfo);\n}",
			"comments":"",
			"methodName":"public static final boolean GetVersionEx(OSVERSIONINFO lpVersionInfo)"
		},
		"public static final short CharLower(short ch)":{
			"methodBody":"{\n    if (IsUnicode)\n        return CharLowerW(ch);\n    return CharLowerA(ch);\n}",
			"comments":"",
			"methodName":"public static final short CharLower(short ch)"
		},
		"public static final native int GetDoubleClickTime()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDoubleClickTime()"
		},
		"public static final native boolean InsertMenuItemW(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean InsertMenuItemW(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native boolean SetWindowTextW(int hWnd, char[] lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetWindowTextW(int hWnd, char[] lpString)"
		},
		"public static final native boolean GetWindowRect(int hWnd, RECT lpRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetWindowRect(int hWnd, RECT lpRect)"
		},
		"public static final native void MoveMemory(EXTLOGPEN Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(EXTLOGPEN Destination, int Source, int Length)"
		},
		"public static final native boolean ReleaseCapture()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ReleaseCapture()"
		},
		"public static final native int GetTickCount()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetTickCount()"
		},
		"public static final native boolean GetCharABCWidthsA(int hdc, int iFirstChar, int iLastChar, int[] lpabc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetCharABCWidthsA(int hdc, int iFirstChar, int iLastChar, int[] lpabc)"
		},
		"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, int[] pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, int[] pvParam, int fWinIni)"
		},
		"public static final int RegQueryValueEx(int hKey, TCHAR lpValueName, int lpReserved, int[] lpType, int[] lpData, int[] lpcbData)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpValueName1 = lpValueName == null ? null : lpValueName.chars;\n        return RegQueryValueExW(hKey, lpValueName1, lpReserved, lpType, lpData, lpcbData);\n    }\n    byte[] lpValueName1 = lpValueName == null ? null : lpValueName.bytes;\n    return RegQueryValueExA(hKey, lpValueName1, lpReserved, lpType, lpData, lpcbData);\n}",
			"comments":"",
			"methodName":"public static final int RegQueryValueEx(int hKey, TCHAR lpValueName, int lpReserved, int[] lpType, int[] lpData, int[] lpcbData)"
		},
		"public static final int RegEnumKeyEx(int hKey, int dwIndex, TCHAR lpName, int[] lpcName, int[] lpReserved, TCHAR lpClass, int[] lpcClass, FILETIME lpftLastWriteTime)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpName1 = lpName == null ? null : lpName.chars;\n        char[] lpClass1 = lpClass == null ? null : lpClass.chars;\n        return RegEnumKeyExW(hKey, dwIndex, lpName1, lpcName, lpReserved, lpClass1, lpcClass, lpftLastWriteTime);\n    }\n    byte[] lpName1 = lpName == null ? null : lpName.bytes;\n    byte[] lpClass1 = lpClass == null ? null : lpClass.bytes;\n    return RegEnumKeyExA(hKey, dwIndex, lpName1, lpcName, lpReserved, lpClass1, lpcClass, lpftLastWriteTime);\n}",
			"comments":"",
			"methodName":"public static final int RegEnumKeyEx(int hKey, int dwIndex, TCHAR lpName, int[] lpcName, int[] lpReserved, TCHAR lpClass, int[] lpcClass, FILETIME lpftLastWriteTime)"
		},
		"public static final native int GetDeviceCaps(int hdc, int nIndex)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDeviceCaps(int hdc, int nIndex)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, SIZE lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, SIZE lParam)"
		},
		"public static final native int GetModuleHandleW(char[] lpModuleName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetModuleHandleW(char[] lpModuleName)"
		},
		"public static final native boolean TransparentImage(int hdcDest, int DstX, int DstY, int DstCx, int DstCy, int hSrc, int SrcX, int SrcY, int SrcCx, int SrcCy, int TransparentColor)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean TransparentImage(int hdcDest, int DstX, int DstY, int DstCx, int DstCy, int hSrc, int SrcX, int SrcY, int SrcCx, int SrcCy, int TransparentColor)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, RECT lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, RECT lParam)"
		},
		"public static final native int BeginPaint(int hWnd, PAINTSTRUCT lpPaint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int BeginPaint(int hWnd, PAINTSTRUCT lpPaint)"
		},
		"public static final native int GetObjectW(int hgdiobj, int cbBuffer, int lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectW(int hgdiobj, int cbBuffer, int lpvObject)"
		},
		"public static final native int GetBkColor(int hDC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetBkColor(int hDC)"
		},
		"public static final native boolean SetForegroundWindow(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetForegroundWindow(int hWnd)"
		},
		"public static final native boolean BeginPath(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean BeginPath(int hdc)"
		},
		"public static final native boolean IsWindowEnabled(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsWindowEnabled(int hWnd)"
		},
		"public static final native int GetClassNameA(int hWnd, byte[] lpClassName, int nMaxCount)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetClassNameA(int hWnd, byte[] lpClassName, int nMaxCount)"
		},
		"public static final native void OleUninitialize()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void OleUninitialize()"
		},
		"public static final native int RegEnumKeyExA(int hKey, int dwIndex, byte[] lpName, int[] lpcName, int[] lpReserved, byte[] lpClass, int[] lpcClass, FILETIME lpftLastWriteTime)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegEnumKeyExA(int hKey, int dwIndex, byte[] lpName, int[] lpcName, int[] lpReserved, byte[] lpClass, int[] lpcClass, FILETIME lpftLastWriteTime)"
		},
		"public static final native boolean PtInRect(RECT rect, POINT pt)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PtInRect(RECT rect, POINT pt)"
		},
		"public static final native boolean ImmGetOpenStatus(int hIMC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmGetOpenStatus(int hIMC)"
		},
		"public static final native boolean CloseClipboard()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean CloseClipboard()"
		},
		"public static final native int CreateRectRgn(int left, int top, int right, int bottom)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateRectRgn(int left, int top, int right, int bottom)"
		},
		"public static final native boolean ShellExecuteExW(SHELLEXECUTEINFO lpExecInfo)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ShellExecuteExW(SHELLEXECUTEINFO lpExecInfo)"
		},
		"public static final int GetCharacterPlacement(int hdc, TCHAR lpString, int nCount, int nMaxExtent, GCP_RESULTS lpResults, int dwFlags)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return GetCharacterPlacementW(hdc, lpString1, nCount, nMaxExtent, lpResults, dwFlags);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return GetCharacterPlacementA(hdc, lpString1, nCount, nMaxExtent, lpResults, dwFlags);\n}",
			"comments":"",
			"methodName":"public static final int GetCharacterPlacement(int hdc, TCHAR lpString, int nCount, int nMaxExtent, GCP_RESULTS lpResults, int dwFlags)"
		},
		"public static final native int RegisterClassA(WNDCLASS lpWndClass)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegisterClassA(WNDCLASS lpWndClass)"
		},
		"public static final native int GetACP()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetACP()"
		},
		"public static final int FindWindow(TCHAR lpClassName, TCHAR lpWindowName)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpClassName1 = lpClassName == null ? null : lpClassName.chars;\n        char[] lpWindowName1 = lpWindowName == null ? null : lpWindowName.chars;\n        return FindWindowW(lpClassName1, lpWindowName1);\n    }\n    byte[] lpClassName1 = lpClassName == null ? null : lpClassName.bytes;\n    byte[] lpWindowName1 = lpWindowName == null ? null : lpWindowName.bytes;\n    return FindWindowA(lpClassName1, lpWindowName1);\n}",
			"comments":"",
			"methodName":"public static final int FindWindow(TCHAR lpClassName, TCHAR lpWindowName)"
		},
		"public static final native int ReleaseDC(int hWnd, int hDC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ReleaseDC(int hWnd, int hDC)"
		},
		"public static final native void MoveMemory(SCRIPT_ITEM Destination, int SourcePtr, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(SCRIPT_ITEM Destination, int SourcePtr, int Length)"
		},
		"public static final int GetProfileString(TCHAR lpAppName, TCHAR lpKeyName, TCHAR lpDefault, TCHAR lpReturnedString, int nSize)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpAppName1 = lpAppName == null ? null : lpAppName.chars;\n        char[] lpKeyName1 = lpKeyName == null ? null : lpKeyName.chars;\n        char[] lpDefault1 = lpDefault == null ? null : lpDefault.chars;\n        char[] lpReturnedString1 = lpReturnedString == null ? null : lpReturnedString.chars;\n        return GetProfileStringW(lpAppName1, lpKeyName1, lpDefault1, lpReturnedString1, nSize);\n    }\n    byte[] lpAppName1 = lpAppName == null ? null : lpAppName.bytes;\n    byte[] lpKeyName1 = lpKeyName == null ? null : lpKeyName.bytes;\n    byte[] lpDefault1 = lpDefault == null ? null : lpDefault.bytes;\n    byte[] lpReturnedString1 = lpReturnedString == null ? null : lpReturnedString.bytes;\n    return GetProfileStringA(lpAppName1, lpKeyName1, lpDefault1, lpReturnedString1, nSize);\n}",
			"comments":"",
			"methodName":"public static final int GetProfileString(TCHAR lpAppName, TCHAR lpKeyName, TCHAR lpDefault, TCHAR lpReturnedString, int nSize)"
		},
		"public static final boolean GetMessage(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetMessageW(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);\n    return GetMessageA(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);\n}",
			"comments":"",
			"methodName":"public static final boolean GetMessage(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax)"
		},
		"public static final int MessageBox(int hWnd, TCHAR lpText, TCHAR lpCaption, int uType)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpText1 = lpText == null ? null : lpText.chars;\n        char[] lpCaption1 = lpCaption == null ? null : lpCaption.chars;\n        return MessageBoxW(hWnd, lpText1, lpCaption1, uType);\n    }\n    byte[] lpText1 = lpText == null ? null : lpText.bytes;\n    byte[] lpCaption1 = lpCaption == null ? null : lpCaption.bytes;\n    return MessageBoxA(hWnd, lpText1, lpCaption1, uType);\n}",
			"comments":"",
			"methodName":"public static final int MessageBox(int hWnd, TCHAR lpText, TCHAR lpCaption, int uType)"
		},
		"public static final native int ImageList_GetIcon(int himl, int i, int flags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImageList_GetIcon(int himl, int i, int flags)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LVITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LVITEM lParam)"
		},
		"public static final native int CreateStreamOnHGlobal(int hGlobal, boolean fDeleteOnRelease, int[] ppstm)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateStreamOnHGlobal(int hGlobal, boolean fDeleteOnRelease, int[] ppstm)"
		},
		"public static final native void MoveMemory(int DestinationPtr, float[] Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int DestinationPtr, float[] Source, int Length)"
		},
		"public static final boolean InsertMenuItem(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"{\n    if (IsUnicode)\n        return InsertMenuItemW(hMenu, uItem, fByPosition, lpmii);\n    return InsertMenuItemA(hMenu, uItem, fByPosition, lpmii);\n}",
			"comments":"",
			"methodName":"public static final boolean InsertMenuItem(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native int WideCharToMultiByte(int CodePage, int dwFlags, char[] lpWideCharStr, int cchWideChar, int lpMultiByteStr, int cchMultiByte, byte[] lpDefaultChar, boolean[] lpUsedDefaultChar)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int WideCharToMultiByte(int CodePage, int dwFlags, char[] lpWideCharStr, int cchWideChar, int lpMultiByteStr, int cchMultiByte, byte[] lpDefaultChar, boolean[] lpUsedDefaultChar)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int[] wParam, int[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int[] wParam, int[] lParam)"
		},
		"public static final native int SetActiveWindow(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetActiveWindow(int hWnd)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, LITEM lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, LITEM lParam)"
		},
		"public static final native boolean Shell_NotifyIconW(int dwMessage, NOTIFYICONDATAW lpData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Shell_NotifyIconW(int dwMessage, NOTIFYICONDATAW lpData)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int[] wParam, int[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int[] wParam, int[] lParam)"
		},
		"public static final native boolean AdjustWindowRectEx(RECT lpRect, int dwStyle, boolean bMenu, int dwExStyle)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean AdjustWindowRectEx(RECT lpRect, int dwStyle, boolean bMenu, int dwExStyle)"
		},
		"public static final native int MultiByteToWideChar(int CodePage, int dwFlags, byte[] lpMultiByteStr, int cchMultiByte, char[] lpWideCharStr, int cchWideChar)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MultiByteToWideChar(int CodePage, int dwFlags, byte[] lpMultiByteStr, int cchMultiByte, char[] lpWideCharStr, int cchWideChar)"
		},
		"public static final native int SetBkColor(int hdc, int colorRef)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetBkColor(int hdc, int colorRef)"
		},
		"public static final native boolean GetIconInfo(int hIcon, ICONINFO piconinfo)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetIconInfo(int hIcon, ICONINFO piconinfo)"
		},
		"public static final int LoadImage(int hinst, int lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)":{
			"methodBody":"{\n    if (IsUnicode)\n        return LoadImageW(hinst, lpszName, uType, cxDesired, cyDesired, fuLoad);\n    return LoadImageA(hinst, lpszName, uType, cxDesired, cyDesired, fuLoad);\n}",
			"comments":"",
			"methodName":"public static final int LoadImage(int hinst, int lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)"
		},
		"public static final native int DefMDIChildProcA(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DefMDIChildProcA(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native int GetClipboardFormatNameA(int format, byte[] lpszFormatName, int cchMaxCount)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetClipboardFormatNameA(int format, byte[] lpszFormatName, int cchMaxCount)"
		},
		"public static final native boolean IsWindowVisible(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsWindowVisible(int hWnd)"
		},
		"public static final native void NotifyWinEvent(int event, int hwnd, int idObject, int idChild)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void NotifyWinEvent(int event, int hwnd, int idObject, int idChild)"
		},
		"public static final native int ScriptItemize(char[] pwcInChars, int cInChars, int cMaxItems, SCRIPT_CONTROL psControl, SCRIPT_STATE psState, int pItems, int[] pcItems)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptItemize(char[] pwcInChars, int cInChars, int cMaxItems, SCRIPT_CONTROL psControl, SCRIPT_STATE psState, int pItems, int[] pcItems)"
		},
		"public static final native int SetWindowsHookExW(int idHook, int lpfn, int hMod, int dwThreadId)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetWindowsHookExW(int idHook, int lpfn, int hMod, int dwThreadId)"
		},
		"public static final native int GetWindowTextA(int hWnd, byte[] lpString, int nMaxCount)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowTextA(int hWnd, byte[] lpString, int nMaxCount)"
		},
		"public static final native int OpenThemeData(int hwnd, char[] pszClassList)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int OpenThemeData(int hwnd, char[] pszClassList)"
		},
		"public static final native int CallWindowProcW(int lpPrevWndFunc, int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CallWindowProcW(int lpPrevWndFunc, int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final boolean SetMenuItemInfo(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SetMenuItemInfoW(hMenu, uItem, fByPosition, lpmii);\n    return SetMenuItemInfoA(hMenu, uItem, fByPosition, lpmii);\n}",
			"comments":"",
			"methodName":"public static final boolean SetMenuItemInfo(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native int GetMessagePos()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetMessagePos()"
		},
		"public static final native int GetObjectA(int hgdiobj, int cbBuffer, DIBSECTION lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectA(int hgdiobj, int cbBuffer, DIBSECTION lpvObject)"
		},
		"public static final native void MoveMemory(DRAWITEMSTRUCT Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(DRAWITEMSTRUCT Destination, int Source, int Length)"
		},
		"public static final native boolean ImmSetCompositionWindow(int hIMC, COMPOSITIONFORM lpCompForm)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmSetCompositionWindow(int hIMC, COMPOSITIONFORM lpCompForm)"
		},
		"public static final int ExtractIconEx(TCHAR lpszFile, int nIconIndex, int[] phiconLarge, int[] phiconSmall, int nIcons)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpszFile1 = lpszFile == null ? null : lpszFile.chars;\n        return ExtractIconExW(lpszFile1, nIconIndex, phiconLarge, phiconSmall, nIcons);\n    }\n    byte[] lpszFile1 = lpszFile == null ? null : lpszFile.bytes;\n    return ExtractIconExA(lpszFile1, nIconIndex, phiconLarge, phiconSmall, nIcons);\n}",
			"comments":"",
			"methodName":"public static final int ExtractIconEx(TCHAR lpszFile, int nIconIndex, int[] phiconLarge, int[] phiconSmall, int nIcons)"
		},
		"public static final native int CombineRgn(int hrgnDest, int hrgnSrc1, int hrgnSrc2, int fnCombineMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CombineRgn(int hrgnDest, int hrgnSrc1, int hrgnSrc2, int fnCombineMode)"
		},
		"public static final void MoveMemory(NMTTDISPINFO Destination, int Source, int Length)":{
			"methodBody":"{\n    if (IsUnicode) {\n        MoveMemory((NMTTDISPINFOW) Destination, Source, Length);\n    } else {\n        MoveMemory((NMTTDISPINFOA) Destination, Source, Length);\n    }\n}",
			"comments":"",
			"methodName":"public static final void MoveMemory(NMTTDISPINFO Destination, int Source, int Length)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TVITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TVITEM lParam)"
		},
		"public static final native int SetClipboardData(int uFormat, int hMem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetClipboardData(int uFormat, int hMem)"
		},
		"public static final native int OleInitialize(int pvReserved)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int OleInitialize(int pvReserved)"
		},
		"public static final native int GetTextCharset(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetTextCharset(int hdc)"
		},
		"public static final boolean GetSaveFileName(OPENFILENAME lpofn)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetSaveFileNameW(lpofn);\n    return GetSaveFileNameA(lpofn);\n}",
			"comments":"",
			"methodName":"public static final boolean GetSaveFileName(OPENFILENAME lpofn)"
		},
		"public static final native boolean DrawFrameControl(int hdc, RECT lprc, int uType, int uState)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DrawFrameControl(int hdc, RECT lprc, int uType, int uState)"
		},
		"public static final native int RegQueryInfoKeyA(int hKey, int lpClass, int[] lpcbClass, int lpReserved, int[] lpSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, int[] lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int lpftLastWriteTime)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegQueryInfoKeyA(int hKey, int lpClass, int[] lpcbClass, int lpReserved, int[] lpSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, int[] lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int lpftLastWriteTime)"
		},
		"public static final native boolean GetWindowPlacement(int hWnd, WINDOWPLACEMENT lpwndpl)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetWindowPlacement(int hWnd, WINDOWPLACEMENT lpwndpl)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TVINSERTSTRUCT lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TVINSERTSTRUCT lParam)"
		},
		"public static final native int CallWindowProcA(int lpPrevWndFunc, int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CallWindowProcA(int lpPrevWndFunc, int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean SetMenu(int hWnd, int hMenu)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetMenu(int hWnd, int hMenu)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TBBUTTONINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TBBUTTONINFO lParam)"
		},
		"public static final native boolean Pie(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXStartArc, int nYStartArc, int nXEndArc, int nYEndArc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Pie(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXStartArc, int nYStartArc, int nXEndArc, int nYEndArc)"
		},
		"public static final native int GetDCEx(int hWnd, int hrgnClip, int flags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDCEx(int hWnd, int hrgnClip, int flags)"
		},
		"public static final native boolean GetSaveFileNameW(OPENFILENAME lpofn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetSaveFileNameW(OPENFILENAME lpofn)"
		},
		"public static final native void MoveMemory(int Destination, GRADIENT_RECT Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, GRADIENT_RECT Source, int Length)"
		},
		"public static final int RegQueryValueEx(int hKey, TCHAR lpValueName, int lpReserved, int[] lpType, TCHAR lpData, int[] lpcbData)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpValueName1 = lpValueName == null ? null : lpValueName.chars;\n        char[] lpData1 = lpData == null ? null : lpData.chars;\n        return RegQueryValueExW(hKey, lpValueName1, lpReserved, lpType, lpData1, lpcbData);\n    }\n    byte[] lpValueName1 = lpValueName == null ? null : lpValueName.bytes;\n    byte[] lpData1 = lpData == null ? null : lpData.bytes;\n    return RegQueryValueExA(hKey, lpValueName1, lpReserved, lpType, lpData1, lpcbData);\n}",
			"comments":"",
			"methodName":"public static final int RegQueryValueEx(int hKey, TCHAR lpValueName, int lpReserved, int[] lpType, TCHAR lpData, int[] lpcbData)"
		},
		"public static final native int RegCloseKey(int hKey)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegCloseKey(int hKey)"
		},
		"public static final native int GetObjectW(int hgdiobj, int cbBuffer, DIBSECTION lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectW(int hgdiobj, int cbBuffer, DIBSECTION lpvObject)"
		},
		"public static final int TranslateAccelerator(int hWnd, int hAccTable, MSG lpMsg)":{
			"methodBody":"{\n    if (IsUnicode)\n        return TranslateAcceleratorW(hWnd, hAccTable, lpMsg);\n    return TranslateAcceleratorA(hWnd, hAccTable, lpMsg);\n}",
			"comments":"",
			"methodName":"public static final int TranslateAccelerator(int hWnd, int hAccTable, MSG lpMsg)"
		},
		"public static final native boolean SHSipPreference(int hwnd, int st)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SHSipPreference(int hwnd, int st)"
		},
		"public static final native int CloseThemeData(int hTheme)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CloseThemeData(int hTheme)"
		},
		"public static final native int DefFrameProcA(int hWnd, int hWndMDIClient, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DefFrameProcA(int hWnd, int hWndMDIClient, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean Polyline(int hdc, int[] points, int nPoints)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Polyline(int hdc, int[] points, int nPoints)"
		},
		"public static final native boolean ImageList_Destroy(int himl)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImageList_Destroy(int himl)"
		},
		"public static final native boolean ImmDisableTextFrameService(int idThread)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmDisableTextFrameService(int idThread)"
		},
		"public static final native int SetGraphicsMode(int hdc, int iMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetGraphicsMode(int hdc, int iMode)"
		},
		"public static final native boolean SetCaretPos(int X, int Y)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetCaretPos(int X, int Y)"
		},
		"public static final native void MoveMemory(int[] Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int[] Destination, int Source, int Length)"
		},
		"public static final native int GetObjectW(int hgdiobj, int cbBuffer, LOGPEN lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectW(int hgdiobj, int cbBuffer, LOGPEN lpvObject)"
		},
		"public static final native boolean SHGetPathFromIDListW(int pidl, char[] pszPath)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SHGetPathFromIDListW(int pidl, char[] pszPath)"
		},
		"public static final int RegOpenKeyEx(int hKey, TCHAR lpSubKey, int ulOptions, int samDesired, int[] phkResult)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpSubKey1 = lpSubKey == null ? null : lpSubKey.chars;\n        return RegOpenKeyExW(hKey, lpSubKey1, ulOptions, samDesired, phkResult);\n    }\n    byte[] lpSubKey1 = lpSubKey == null ? null : lpSubKey.bytes;\n    return RegOpenKeyExA(hKey, lpSubKey1, ulOptions, samDesired, phkResult);\n}",
			"comments":"",
			"methodName":"public static final int RegOpenKeyEx(int hKey, TCHAR lpSubKey, int ulOptions, int samDesired, int[] phkResult)"
		},
		"public static final native void MoveMemory(int Destination, MINMAXINFO Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, MINMAXINFO Source, int Length)"
		},
		"public static final native int RegisterClipboardFormatW(char[] lpszFormat)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegisterClipboardFormatW(char[] lpszFormat)"
		},
		"public static final native int FillRect(int hDC, RECT lprc, int hbr)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int FillRect(int hDC, RECT lprc, int hbr)"
		},
		"public static final native int GetModuleHandleA(byte[] lpModuleName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetModuleHandleA(byte[] lpModuleName)"
		},
		"public static final native boolean InitCommonControlsEx(INITCOMMONCONTROLSEX lpInitCtrls)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean InitCommonControlsEx(INITCOMMONCONTROLSEX lpInitCtrls)"
		},
		"public static final native int MonitorFromWindow(int hwnd, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MonitorFromWindow(int hwnd, int dwFlags)"
		},
		"public static final native int LoadImageA(int hinst, byte[] lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadImageA(int hinst, byte[] lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)"
		},
		"public static final boolean GetMenuItemInfo(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetMenuItemInfoW(hMenu, uItem, fByPosition, lpmii);\n    return GetMenuItemInfoA(hMenu, uItem, fByPosition, lpmii);\n}",
			"comments":"",
			"methodName":"public static final boolean GetMenuItemInfo(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native int GetCurrentObject(int hdc, int uObjectType)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetCurrentObject(int hdc, int uObjectType)"
		},
		"public static final native int GetPropA(int hWnd, int lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetPropA(int hWnd, int lpString)"
		},
		"public static final native int SHGetMalloc(int[] ppMalloc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SHGetMalloc(int[] ppMalloc)"
		},
		"public static final native int GetMetaRgn(int hdc, int hrgn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetMetaRgn(int hdc, int hrgn)"
		},
		"public static final native boolean PtInRegion(int hrgn, int X, int Y)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PtInRegion(int hrgn, int X, int Y)"
		},
		"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, NONCLIENTMETRICSW pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, NONCLIENTMETRICSW pvParam, int fWinIni)"
		},
		"public static final native int MultiByteToWideChar(int CodePage, int dwFlags, int lpMultiByteStr, int cchMultiByte, char[] lpWideCharStr, int cchWideChar)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MultiByteToWideChar(int CodePage, int dwFlags, int lpMultiByteStr, int cchMultiByte, char[] lpWideCharStr, int cchWideChar)"
		},
		"public static final int SetWindowsHookEx(int idHook, int lpfn, int hMod, int dwThreadId)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SetWindowsHookExW(idHook, lpfn, hMod, dwThreadId);\n    return SetWindowsHookExA(idHook, lpfn, hMod, dwThreadId);\n}",
			"comments":"",
			"methodName":"public static final int SetWindowsHookEx(int idHook, int lpfn, int hMod, int dwThreadId)"
		},
		"public static final native boolean ImageList_SetIconSize(int himl, int cx, int cy)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImageList_SetIconSize(int himl, int cx, int cy)"
		},
		"public static final native int CreateWindowExW(int dwExStyle, char[] lpClassName, char[] lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, int hWndParent, int hMenu, int hInstance, CREATESTRUCT lpParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateWindowExW(int dwExStyle, char[] lpClassName, char[] lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, int hWndParent, int hMenu, int hInstance, CREATESTRUCT lpParam)"
		},
		"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, HIGHCONTRAST pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, HIGHCONTRAST pvParam, int fWinIni)"
		},
		"public static final int GetObject(int hgdiobj, int cbBuffer, EXTLOGPEN lpvObject)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetObjectW(hgdiobj, cbBuffer, lpvObject);\n    return GetObjectA(hgdiobj, cbBuffer, lpvObject);\n}",
			"comments":"",
			"methodName":"public static final int GetObject(int hgdiobj, int cbBuffer, EXTLOGPEN lpvObject)"
		},
		"public static final native int RegisterWindowMessageA(byte[] lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegisterWindowMessageA(byte[] lpString)"
		},
		"public static final native int CreateDIBSection(int hdc, byte[] pbmi, int iUsage, int[] ppvBits, int hSection, int dwOffset)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateDIBSection(int hdc, byte[] pbmi, int iUsage, int[] ppvBits, int hSection, int dwOffset)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TBBUTTONINFO lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TBBUTTONINFO lParam)"
		},
		"public static final native int ToUnicode(int wVirtKey, int wScanCode, byte[] lpKeyState, char[] pwszBuff, int cchBuff, int wFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ToUnicode(int wVirtKey, int wScanCode, byte[] lpKeyState, char[] pwszBuff, int cchBuff, int wFlags)"
		},
		"public static final native int ScriptXtoCP(int iX, int cChars, int cGlyphs, int pwLogClust, int psva, int piAdvance, SCRIPT_ANALYSIS psa, int[] piCP, int[] piTrailing)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptXtoCP(int iX, int cChars, int cGlyphs, int pwLogClust, int psva, int piAdvance, SCRIPT_ANALYSIS psa, int[] piCP, int[] piTrailing)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, REBARBANDINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, REBARBANDINFO lParam)"
		},
		"public static final native int RemovePropW(int hWnd, int lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RemovePropW(int hWnd, int lpString)"
		},
		"public static final native boolean GetComboBoxInfo(int hwndCombo, COMBOBOXINFO pcbi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetComboBoxInfo(int hwndCombo, COMBOBOXINFO pcbi)"
		},
		"public static final native void MoveMemory(NMREBARCHEVRON Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMREBARCHEVRON Destination, int Source, int Length)"
		},
		"public static final native boolean ChooseColorW(CHOOSECOLOR lpcc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ChooseColorW(CHOOSECOLOR lpcc)"
		},
		"public static final native boolean SetMenuDefaultItem(int hMenu, int uItem, int fByPos)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetMenuDefaultItem(int hMenu, int uItem, int fByPos)"
		},
		"public static final native boolean TranslateCharsetInfo(int lpSrc, int[] lpCs, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean TranslateCharsetInfo(int lpSrc, int[] lpCs, int dwFlags)"
		},
		"public static final native int SetBkMode(int hdc, int mode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetBkMode(int hdc, int mode)"
		},
		"public static final boolean GetMonitorInfo(int hmonitor, MONITORINFO lpmi)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetMonitorInfoW(hmonitor, lpmi);\n    return GetMonitorInfoA(hmonitor, lpmi);\n}",
			"comments":"",
			"methodName":"public static final boolean GetMonitorInfo(int hmonitor, MONITORINFO lpmi)"
		},
		"public static final native void MoveMemory(LOGFONTA Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(LOGFONTA Destination, int Source, int Length)"
		},
		"public static final native int EnumFontFamiliesExW(int hdc, LOGFONTW lpLogfont, int lpEnumFontFamExProc, int lParam, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int EnumFontFamiliesExW(int hdc, LOGFONTW lpLogfont, int lpEnumFontFamExProc, int lParam, int dwFlags)"
		},
		"public static final boolean PostMessage(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return PostMessageW(hWnd, Msg, wParam, lParam);\n    return PostMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final boolean PostMessage(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean GlobalUnlock(int hMem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GlobalUnlock(int hMem)"
		},
		"public static final native int RegQueryValueExA(int hKey, byte[] lpValueName, int lpReserved, int[] lpType, byte[] lpData, int[] lpcbData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegQueryValueExA(int hKey, byte[] lpValueName, int lpReserved, int[] lpType, byte[] lpData, int[] lpcbData)"
		},
		"public static final native int CreateWindowExA(int dwExStyle, byte[] lpClassName, byte[] lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, int hWndParent, int hMenu, int hInstance, CREATESTRUCT lpParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateWindowExA(int dwExStyle, byte[] lpClassName, byte[] lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, int hWndParent, int hMenu, int hInstance, CREATESTRUCT lpParam)"
		},
		"public static final native boolean EnableMenuItem(int hMenu, int uIDEnableItem, int uEnable)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnableMenuItem(int hMenu, int uIDEnableItem, int uEnable)"
		},
		"public static final native int ImageList_GetImageCount(int himl)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImageList_GetImageCount(int himl)"
		},
		"public static final boolean PeekMessage(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg)":{
			"methodBody":"{\n    if (IsUnicode)\n        return PeekMessageW(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);\n    return PeekMessageA(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);\n}",
			"comments":"",
			"methodName":"public static final boolean PeekMessage(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg)"
		},
		"public static final native int SetWindowRgn(int hWnd, int hRgn, boolean bRedraw)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetWindowRgn(int hWnd, int hRgn, boolean bRedraw)"
		},
		"public static final native boolean PostMessageA(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PostMessageA(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean IsIconic(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsIconic(int hWnd)"
		},
		"public static final native void MoveMemory(NMTOOLBAR Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMTOOLBAR Destination, int Source, int Length)"
		},
		"public static final native int ImageList_ReplaceIcon(int himl, int i, int hicon)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImageList_ReplaceIcon(int himl, int i, int hicon)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TCITEM lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TCITEM lParam)"
		},
		"public static final int LoadImage(int hinst, TCHAR lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpszName1 = lpszName == null ? null : lpszName.chars;\n        return LoadImageW(hinst, lpszName1, uType, cxDesired, cyDesired, fuLoad);\n    }\n    byte[] lpszName1 = lpszName == null ? null : lpszName.bytes;\n    return LoadImageA(hinst, lpszName1, uType, cxDesired, cyDesired, fuLoad);\n}",
			"comments":"",
			"methodName":"public static final int LoadImage(int hinst, TCHAR lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)"
		},
		"public static final native int VtblCall(int fnNumber, int ppVtbl)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int VtblCall(int fnNumber, int ppVtbl)"
		},
		"public static final native int HeapAlloc(int hHeap, int dwFlags, int dwBytes)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int HeapAlloc(int hHeap, int dwFlags, int dwBytes)"
		},
		"public static final int RegisterClass(WNDCLASS lpWndClass)":{
			"methodBody":"{\n    if (IsUnicode)\n        return RegisterClassW(lpWndClass);\n    return RegisterClassA(lpWndClass);\n}",
			"comments":"",
			"methodName":"public static final int RegisterClass(WNDCLASS lpWndClass)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int[] wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int[] wParam, int lParam)"
		},
		"public static final native int VtblCall(int fnNumber, int ppVtbl, int arg0)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int VtblCall(int fnNumber, int ppVtbl, int arg0)"
		},
		"public static final native int BeginDeferWindowPos(int nNumWindows)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int BeginDeferWindowPos(int nNumWindows)"
		},
		"public static final native void MoveMemory(int Destination, DROPFILES Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, DROPFILES Source, int Length)"
		},
		"public static final native int TranslateAcceleratorW(int hWnd, int hAccTable, MSG lpMsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int TranslateAcceleratorW(int hWnd, int hAccTable, MSG lpMsg)"
		},
		"public static final int SHBrowseForFolder(BROWSEINFO lpbi)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SHBrowseForFolderW(lpbi);\n    return SHBrowseForFolderA(lpbi);\n}",
			"comments":"",
			"methodName":"public static final int SHBrowseForFolder(BROWSEINFO lpbi)"
		},
		"public static final native int SHBrowseForFolderA(BROWSEINFO lpbi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SHBrowseForFolderA(BROWSEINFO lpbi)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, int[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, int[] lParam)"
		},
		"public static final native int WindowFromDC(int hDC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int WindowFromDC(int hDC)"
		},
		"public static final native int CreateMenu()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateMenu()"
		},
		"public static final native int GetPropW(int hWnd, int lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetPropW(int hWnd, int lpString)"
		},
		"public static final native boolean SetWindowPlacement(int hWnd, WINDOWPLACEMENT lpwndpl)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetWindowPlacement(int hWnd, WINDOWPLACEMENT lpwndpl)"
		},
		"public static final boolean ExtTextOut(int hdc, int X, int Y, int fuOptions, RECT lprc, TCHAR lpString, int cbCount, int[] lpDx)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return ExtTextOutW(hdc, X, Y, fuOptions, lprc, lpString1, cbCount, lpDx);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return ExtTextOutA(hdc, X, Y, fuOptions, lprc, lpString1, cbCount, lpDx);\n}",
			"comments":"",
			"methodName":"public static final boolean ExtTextOut(int hdc, int X, int Y, int fuOptions, RECT lprc, TCHAR lpString, int cbCount, int[] lpDx)"
		},
		"public static final native boolean HideCaret(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean HideCaret(int hWnd)"
		},
		"public static final native int GetDIBColorTable(int hdc, int uStartIndex, int cEntries, byte[] pColors)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDIBColorTable(int hdc, int uStartIndex, int cEntries, byte[] pColors)"
		},
		"public static final native int GetKeyNameTextA(int lParam, byte[] lpString, int nSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetKeyNameTextA(int lParam, byte[] lpString, int nSize)"
		},
		"public static boolean SetProp(int hWnd, int lpString, int hData)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SetPropW(hWnd, lpString, hData);\n    return SetPropA(hWnd, lpString, hData);\n}",
			"comments":"",
			"methodName":"public static boolean SetProp(int hWnd, int lpString, int hData)"
		},
		"public static final native int LoadIconA(int hInstance, int lpIconName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadIconA(int hInstance, int lpIconName)"
		},
		"public static final native int ScrollWindowEx(int hWnd, int dx, int dy, RECT prcScroll, RECT prcClip, int hrgnUpdate, RECT prcUpdate, int flags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScrollWindowEx(int hWnd, int dx, int dy, RECT prcScroll, RECT prcClip, int hrgnUpdate, RECT prcUpdate, int flags)"
		},
		"public static final native short VkKeyScanW(short ch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short VkKeyScanW(short ch)"
		},
		"public static final int GetClassName(int hWnd, TCHAR lpClassName, int nMaxCount)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpClassName1 = lpClassName == null ? null : lpClassName.chars;\n        return GetClassNameW(hWnd, lpClassName1, nMaxCount);\n    }\n    byte[] lpClassName1 = lpClassName == null ? null : lpClassName.bytes;\n    return GetClassNameA(hWnd, lpClassName1, nMaxCount);\n}",
			"comments":"",
			"methodName":"public static final int GetClassName(int hWnd, TCHAR lpClassName, int nMaxCount)"
		},
		"public static final native boolean DrawFocusRect(int hDC, RECT lpRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DrawFocusRect(int hDC, RECT lpRect)"
		},
		"public static final native void MoveMemory(int Destination, NMTTDISPINFOA Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, NMTTDISPINFOA Source, int Length)"
		},
		"public static final native int LoadLibraryW(char[] lpLibFileName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadLibraryW(char[] lpLibFileName)"
		},
		"public static final native int GetFocus()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetFocus()"
		},
		"public static final native int GetMessageTime()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetMessageTime()"
		},
		"public static final boolean GetClassInfo(int hInstance, TCHAR lpClassName, WNDCLASS lpWndClass)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpClassName1 = lpClassName == null ? null : lpClassName.chars;\n        return GetClassInfoW(hInstance, lpClassName1, lpWndClass);\n    }\n    byte[] lpClassName1 = lpClassName == null ? null : lpClassName.bytes;\n    return GetClassInfoA(hInstance, lpClassName1, lpWndClass);\n}",
			"comments":"",
			"methodName":"public static final boolean GetClassInfo(int hInstance, TCHAR lpClassName, WNDCLASS lpWndClass)"
		},
		"public static final native boolean SetMenuItemInfoA(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetMenuItemInfoA(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, char[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, char[] lParam)"
		},
		"public static final native boolean FillPath(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean FillPath(int hdc)"
		},
		"public static final native int CreateFontIndirectW(LOGFONTW lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateFontIndirectW(LOGFONTW lplf)"
		},
		"public static final native boolean SHGetPathFromIDListA(int pidl, byte[] pszPath)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SHGetPathFromIDListA(int pidl, byte[] pszPath)"
		},
		"public static final native void MoveMemory(LOGFONTW Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(LOGFONTW Destination, int Source, int Length)"
		},
		"public static final native int GetFontLanguageInfo(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetFontLanguageInfo(int hdc)"
		},
		"public static final native boolean Arc(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXStartArc, int nYStartArc, int nXEndArc, int nYEndArc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Arc(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXStartArc, int nYStartArc, int nXEndArc, int nYEndArc)"
		},
		"public static final native int LoadLibraryA(byte[] lpLibFileName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadLibraryA(byte[] lpLibFileName)"
		},
		"public static final native boolean MoveToEx(int hdc, int x1, int x2, int lPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean MoveToEx(int hdc, int x1, int x2, int lPoint)"
		},
		"public static final native int SelectPalette(int hDC, int hpal, boolean bForceBackground)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SelectPalette(int hDC, int hpal, boolean bForceBackground)"
		},
		"public static final native boolean DeleteDC(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DeleteDC(int hdc)"
		},
		"public static final native int SetCapture(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetCapture(int hWnd)"
		},
		"public static final native int CreatePen(int fnPenStyle, int nWidth, int crColor)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreatePen(int fnPenStyle, int nWidth, int crColor)"
		},
		"public static final boolean SetWindowText(int hWnd, TCHAR lpString)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return SetWindowTextW(hWnd, lpString1);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return SetWindowTextA(hWnd, lpString1);\n}",
			"comments":"",
			"methodName":"public static final boolean SetWindowText(int hWnd, TCHAR lpString)"
		},
		"public static final native int Call(int address, DLLVERSIONINFO arg0)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int Call(int address, DLLVERSIONINFO arg0)"
		},
		"public static final native int ImageList_AddMasked(int himl, int hbmImage, int crMask)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImageList_AddMasked(int himl, int hbmImage, int crMask)"
		},
		"public static final native int SetTextColor(int hdc, int colorRef)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetTextColor(int hdc, int colorRef)"
		},
		"public static final native int SetCursor(int hCursor)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetCursor(int hCursor)"
		},
		"public static final native boolean EndPath(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EndPath(int hdc)"
		},
		"public static final void MoveMemory(LOGFONT Destination, int Source, int Length)":{
			"methodBody":"{\n    if (IsUnicode) {\n        MoveMemory((LOGFONTW) Destination, Source, Length);\n    } else {\n        MoveMemory((LOGFONTA) Destination, Source, Length);\n    }\n}",
			"comments":"",
			"methodName":"public static final void MoveMemory(LOGFONT Destination, int Source, int Length)"
		},
		"public static final native boolean RestoreDC(int hdc, int nSavedDC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean RestoreDC(int hdc, int nSavedDC)"
		},
		"public static final native void MoveMemory(int Destination, TRIVERTEX Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, TRIVERTEX Source, int Length)"
		},
		"public static final native int GetTextColor(int hDC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetTextColor(int hDC)"
		},
		"public static final native int GetRgnBox(int hrgn, RECT lprc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetRgnBox(int hrgn, RECT lprc)"
		},
		"public static final native boolean RoundRect(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidth, int nHeight)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean RoundRect(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidth, int nHeight)"
		},
		"public static final native void SHSendBackToFocusWindow(int uMsg, int wp, int lp)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void SHSendBackToFocusWindow(int uMsg, int wp, int lp)"
		},
		"public static final native boolean GradientFill(int hdc, int pVertex, int dwNumVertex, int pMesh, int dwNumMesh, int dwMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GradientFill(int hdc, int pVertex, int dwNumVertex, int pMesh, int dwNumMesh, int dwMode)"
		},
		"public static final native void MoveMemory(int DestinationPtr, double[] Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int DestinationPtr, double[] Source, int Length)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, UDACCEL lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, UDACCEL lParam)"
		},
		"public static final native boolean GetGUIThreadInfo(int idThread, GUITHREADINFO lpgui)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetGUIThreadInfo(int idThread, GUITHREADINFO lpgui)"
		},
		"public static final native int GetPixel(int hdc, int x, int y)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetPixel(int hdc, int x, int y)"
		},
		"public static final native int GlobalAddAtomA(byte[] lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GlobalAddAtomA(byte[] lpString)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, HDLAYOUT lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, HDLAYOUT lParam)"
		},
		"public static final native int CommandBar_Create(int hInst, int hwndParent, int idCmdBar)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CommandBar_Create(int hInst, int hwndParent, int idCmdBar)"
		},
		"public static final native int TranslateAcceleratorA(int hWnd, int hAccTable, MSG lpMsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int TranslateAcceleratorA(int hWnd, int hAccTable, MSG lpMsg)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TOOLINFO lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TOOLINFO lParam)"
		},
		"public static final int EnumFontFamilies(int hdc, TCHAR lpszFamily, int lpEnumFontFamProc, int lParam)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpszFamily1 = lpszFamily == null ? null : lpszFamily.chars;\n        return EnumFontFamiliesW(hdc, lpszFamily1, lpEnumFontFamProc, lParam);\n    }\n    byte[] lpszFamily1 = lpszFamily == null ? null : lpszFamily.bytes;\n    return EnumFontFamiliesA(hdc, lpszFamily1, lpEnumFontFamProc, lParam);\n}",
			"comments":"",
			"methodName":"public static final int EnumFontFamilies(int hdc, TCHAR lpszFamily, int lpEnumFontFamProc, int lParam)"
		},
		"public static final boolean GetOpenFileName(OPENFILENAME lpofn)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetOpenFileNameW(lpofn);\n    return GetOpenFileNameA(lpofn);\n}",
			"comments":"",
			"methodName":"public static final boolean GetOpenFileName(OPENFILENAME lpofn)"
		},
		"public static final native void MoveMemory(NMTBHOTITEM Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMTBHOTITEM Destination, int Source, int Length)"
		},
		"public static final native void MoveMemory(int Destination, int[] Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, int[] Source, int Length)"
		},
		"public static final native int strlen(int s)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int strlen(int s)"
		},
		"public static final int LoadBitmap(int hInstance, int lpBitmapName)":{
			"methodBody":"{\n    if (IsUnicode)\n        return LoadBitmapW(hInstance, lpBitmapName);\n    return LoadBitmapA(hInstance, lpBitmapName);\n}",
			"comments":"",
			"methodName":"public static final int LoadBitmap(int hInstance, int lpBitmapName)"
		},
		"public static final native int SetWindowsHookExA(int idHook, int lpfn, int hMod, int dwThreadId)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetWindowsHookExA(int idHook, int lpfn, int hMod, int dwThreadId)"
		},
		"public static final native short GetKeyState(int nVirtKey)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short GetKeyState(int nVirtKey)"
		},
		"public static final native boolean ImmSetCompositionFontA(int hIMC, LOGFONTA lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmSetCompositionFontA(int hIMC, LOGFONTA lplf)"
		},
		"public static final native void MoveMemory(int Destination, KEYBDINPUT Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, KEYBDINPUT Source, int Length)"
		},
		"public static final native boolean InsertMenuW(int hMenu, int uPosition, int uFlags, int uIDNewItem, char[] lpNewItem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean InsertMenuW(int hMenu, int uPosition, int uFlags, int uIDNewItem, char[] lpNewItem)"
		},
		"public static final native boolean GetCursorPos(POINT lpPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetCursorPos(POINT lpPoint)"
		},
		"public static final native int DragQueryFileA(int hDrop, int iFile, byte[] lpszFile, int cch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DragQueryFileA(int hDrop, int iFile, byte[] lpszFile, int cch)"
		},
		"public static final native int GetProcessHeap()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetProcessHeap()"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, UDACCEL lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, UDACCEL lParam)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, HDITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, HDITEM lParam)"
		},
		"public static final native void MoveMemory(NMTVCUSTOMDRAW Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMTVCUSTOMDRAW Destination, int Source, int Length)"
		},
		"public static final boolean ShellExecuteEx(SHELLEXECUTEINFO lpExecInfo)":{
			"methodBody":"{\n    if (IsUnicode)\n        return ShellExecuteExW(lpExecInfo);\n    return ShellExecuteExA(lpExecInfo);\n}",
			"comments":"",
			"methodName":"public static final boolean ShellExecuteEx(SHELLEXECUTEINFO lpExecInfo)"
		},
		"public static final native void CommandBar_Destroy(int hwndCB)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void CommandBar_Destroy(int hwndCB)"
		},
		"public static final native void MoveMemory(NMTVDISPINFO Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMTVDISPINFO Destination, int Source, int Length)"
		},
		"public static final native int GetWindow(int hWnd, int uCmd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindow(int hWnd, int uCmd)"
		},
		"public static final native int GetWindowThreadProcessId(int hWnd, int[] lpdwProcessId)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowThreadProcessId(int hWnd, int[] lpdwProcessId)"
		},
		"public static final native boolean DestroyCursor(int hCursor)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DestroyCursor(int hCursor)"
		},
		"public static final native int GetWindowLongA(int hWnd, int nIndex)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowLongA(int hWnd, int nIndex)"
		},
		"public static final native boolean SetWindowPos(int hWnd, int hWndInsertAfter, int X, int Y, int cx, int cy, int uFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetWindowPos(int hWnd, int hWndInsertAfter, int X, int Y, int cx, int cy, int uFlags)"
		},
		"public static final native int FormatMessageW(int dwFlags, int lpSource, int dwMessageId, int dwLanguageId, int[] lpBuffer, int nSize, int Arguments)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int FormatMessageW(int dwFlags, int lpSource, int dwMessageId, int dwLanguageId, int[] lpBuffer, int nSize, int Arguments)"
		},
		"public static final int SetWindowLong(int hWnd, int nIndex, int dwNewLong)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SetWindowLongW(hWnd, nIndex, dwNewLong);\n    return SetWindowLongA(hWnd, nIndex, dwNewLong);\n}",
			"comments":"",
			"methodName":"public static final int SetWindowLong(int hWnd, int nIndex, int dwNewLong)"
		},
		"public static final native int SendInput(int nInputs, int pInputs, int cbSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendInput(int nInputs, int pInputs, int cbSize)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TCITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TCITEM lParam)"
		},
		"public static final native int MapWindowPoints(int hWndFrom, int hWndTo, POINT lpPoints, int cPoints)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MapWindowPoints(int hWndFrom, int hWndTo, POINT lpPoints, int cPoints)"
		},
		"public static final native int ScriptBreak(char[] pwcChars, int cChars, SCRIPT_ANALYSIS psa, int psla)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptBreak(char[] pwcChars, int cChars, SCRIPT_ANALYSIS psa, int psla)"
		},
		"public static final short VkKeyScan(short ch)":{
			"methodBody":"{\n    if (IsUnicode)\n        return VkKeyScanW(ch);\n    return VkKeyScanA(ch);\n}",
			"comments":"",
			"methodName":"public static final short VkKeyScan(short ch)"
		},
		"public static final native int GetLocaleInfoA(int Locale, int LCType, byte[] lpLCData, int cchData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetLocaleInfoA(int Locale, int LCType, byte[] lpLCData, int cchData)"
		},
		"public static final native int GetLastActivePopup(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetLastActivePopup(int hWnd)"
		},
		"public static final native int RegQueryInfoKeyW(int hKey, int lpClass, int[] lpcbClass, int lpReserved, int[] lpSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, int[] lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int lpftLastWriteTime)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegQueryInfoKeyW(int hKey, int lpClass, int[] lpcbClass, int lpReserved, int[] lpSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, int[] lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int lpftLastWriteTime)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, HDLAYOUT lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, HDLAYOUT lParam)"
		},
		"public static final int GetObject(int hgdiobj, int cbBuffer, LOGBRUSH lpvObject)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetObjectW(hgdiobj, cbBuffer, lpvObject);\n    return GetObjectA(hgdiobj, cbBuffer, lpvObject);\n}",
			"comments":"",
			"methodName":"public static final int GetObject(int hgdiobj, int cbBuffer, LOGBRUSH lpvObject)"
		},
		"public static final native boolean IsZoomed(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsZoomed(int hWnd)"
		},
		"public static final native int CreateCompatibleDC(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateCompatibleDC(int hdc)"
		},
		"public static final int FormatMessage(int dwFlags, int lpSource, int dwMessageId, int dwLanguageId, int[] lpBuffer, int nSize, int Arguments)":{
			"methodBody":"{\n    if (IsUnicode) {\n        return FormatMessageW(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments);\n    }\n    return FormatMessageA(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments);\n}",
			"comments":"",
			"methodName":"public static final int FormatMessage(int dwFlags, int lpSource, int dwMessageId, int dwLanguageId, int[] lpBuffer, int nSize, int Arguments)"
		},
		"public static final boolean PrintDlg(PRINTDLG lppd)":{
			"methodBody":"{\n    if (IsUnicode)\n        return PrintDlgW(lppd);\n    return PrintDlgA(lppd);\n}",
			"comments":"",
			"methodName":"public static final boolean PrintDlg(PRINTDLG lppd)"
		},
		"public static final native boolean ImmSetOpenStatus(int hIMC, boolean fOpen)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmSetOpenStatus(int hIMC, boolean fOpen)"
		},
		"public static final boolean EnumSystemLocales(int lpLocaleEnumProc, int dwFlags)":{
			"methodBody":"{\n    if (IsUnicode)\n        return EnumSystemLocalesW(lpLocaleEnumProc, dwFlags);\n    return EnumSystemLocalesA(lpLocaleEnumProc, dwFlags);\n}",
			"comments":"",
			"methodName":"public static final boolean EnumSystemLocales(int lpLocaleEnumProc, int dwFlags)"
		},
		"public static final native int CreateAcceleratorTableW(byte[] lpaccl, int cEntries)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateAcceleratorTableW(byte[] lpaccl, int cEntries)"
		},
		"public static final native boolean GetCaretPos(POINT lpPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetCaretPos(POINT lpPoint)"
		},
		"public static final native boolean GetTextExtentPoint32A(int hdc, byte[] lpString, int cbString, SIZE lpSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetTextExtentPoint32A(int hdc, byte[] lpString, int cbString, SIZE lpSize)"
		},
		"public static final boolean GetTextExtentPoint32(int hdc, TCHAR lpString, int cbString, SIZE lpSize)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return GetTextExtentPoint32W(hdc, lpString1, cbString, lpSize);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return GetTextExtentPoint32A(hdc, lpString1, cbString, lpSize);\n}",
			"comments":"",
			"methodName":"public static final boolean GetTextExtentPoint32(int hdc, TCHAR lpString, int cbString, SIZE lpSize)"
		},
		"public static final native boolean PeekMessageA(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PeekMessageA(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, SIZE lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, SIZE lParam)"
		},
		"public static final native boolean DrawMenuBar(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DrawMenuBar(int hWnd)"
		},
		"public static final native int LoadImageA(int hinst, int lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadImageA(int hinst, int lpszName, int uType, int cxDesired, int cyDesired, int fuLoad)"
		},
		"public static final native int DragQueryFileW(int hDrop, int iFile, char[] lpszFile, int cch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DragQueryFileW(int hDrop, int iFile, char[] lpszFile, int cch)"
		},
		"public static final native int GetNearestPaletteIndex(int hPal, int crColor)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetNearestPaletteIndex(int hPal, int crColor)"
		},
		"public static final native int GetSysColor(int nIndex)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetSysColor(int nIndex)"
		},
		"public static final native int StartDocW(int hdc, DOCINFO lpdi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int StartDocW(int hdc, DOCINFO lpdi)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LITEM lParam)"
		},
		"public static final native boolean GetScrollInfo(int hwnd, int flags, SCROLLINFO info)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetScrollInfo(int hwnd, int flags, SCROLLINFO info)"
		},
		"public static final native boolean SetWindowOrgEx(int hdc, int X, int Y, POINT lpPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetWindowOrgEx(int hdc, int X, int Y, POINT lpPoint)"
		},
		"public static final native boolean GetTextMetricsW(int hdc, TEXTMETRICW lptm)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetTextMetricsW(int hdc, TEXTMETRICW lptm)"
		},
		"public static final native boolean GetTextMetricsA(int hdc, TEXTMETRICA lptm)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetTextMetricsA(int hdc, TEXTMETRICA lptm)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, SIZE lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, SIZE lParam)"
		},
		"public static final native int CreatePatternBrush(int colorRef)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreatePatternBrush(int colorRef)"
		},
		"public static final native int SetWindowLongA(int hWnd, int nIndex, int dwNewLong)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetWindowLongA(int hWnd, int nIndex, int dwNewLong)"
		},
		"public static final native int IIDFromString(char[] lpsz, byte[] lpiid)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int IIDFromString(char[] lpsz, byte[] lpiid)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, BUTTON_IMAGELIST lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, BUTTON_IMAGELIST lParam)"
		},
		"public static final native boolean CheckMenuItem(int hmenu, int uIDCheckItem, int uCheck)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean CheckMenuItem(int hmenu, int uIDCheckItem, int uCheck)"
		},
		"public static final native int GetCurrentThreadId()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetCurrentThreadId()"
		},
		"public static final native void InitCommonControls()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void InitCommonControls()"
		},
		"public static final native void MoveMemory(byte[] Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(byte[] Destination, int Source, int Length)"
		},
		"public static final native short VkKeyScanA(short ch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short VkKeyScanA(short ch)"
		},
		"public static final native boolean IsAppThemed()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsAppThemed()"
		},
		"public static final native int LoadIconW(int hInstance, int lpIconName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadIconW(int hInstance, int lpIconName)"
		},
		"public static final native boolean DestroyMenu(int hMenu)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DestroyMenu(int hMenu)"
		},
		"public static final native int GetCapture()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetCapture()"
		},
		"public static final native boolean TranslateMessage(MSG lpmsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean TranslateMessage(MSG lpmsg)"
		},
		"public static final native boolean DragDetect(int hwnd, POINT pt)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DragDetect(int hwnd, POINT pt)"
		},
		"public static final native boolean GetMenuBarInfo(int hWnd, int idObject, int idItem, MENUBARINFO pmbi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMenuBarInfo(int hWnd, int idObject, int idItem, MENUBARINFO pmbi)"
		},
		"public static final int GetObject(int hgdiobj, int cbBuffer, BITMAP lpvObject)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetObjectW(hgdiobj, cbBuffer, lpvObject);\n    return GetObjectA(hgdiobj, cbBuffer, lpvObject);\n}",
			"comments":"",
			"methodName":"public static final int GetObject(int hgdiobj, int cbBuffer, BITMAP lpvObject)"
		},
		"public static final native int GetWindowRgn(int hWnd, int hRgn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowRgn(int hWnd, int hRgn)"
		},
		"public static final native int ExcludeClipRect(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ExcludeClipRect(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)"
		},
		"public static final native int GetDIBits(int hdc, int hbmp, int uStartScan, int cScanLines, int lpvBits, byte[] lpbi, int uUsage)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDIBits(int hdc, int hbmp, int uStartScan, int cScanLines, int lpvBits, byte[] lpbi, int uUsage)"
		},
		"public static final native int RegEnumKeyExW(int hKey, int dwIndex, char[] lpName, int[] lpcName, int[] lpReserved, char[] lpClass, int[] lpcClass, FILETIME lpftLastWriteTime)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegEnumKeyExW(int hKey, int dwIndex, char[] lpName, int[] lpcName, int[] lpReserved, char[] lpClass, int[] lpcClass, FILETIME lpftLastWriteTime)"
		},
		"public static final native int SetPaletteEntries(int hPal, int iStart, int cEntries, byte[] lppe)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetPaletteEntries(int hPal, int iStart, int cEntries, byte[] lppe)"
		},
		"public static final native void MoveMemory(int Destination, NMTVDISPINFO Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, NMTVDISPINFO Source, int Length)"
		},
		"public static final native void MoveMemory(NMCUSTOMDRAW Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMCUSTOMDRAW Destination, int Source, int Length)"
		},
		"public static final native int SetErrorMode(int uMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetErrorMode(int uMode)"
		},
		"public static final native boolean Ellipse(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Ellipse(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)"
		},
		"public static final native int GlobalAlloc(int uFlags, int dwBytes)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GlobalAlloc(int uFlags, int dwBytes)"
		},
		"public static final native boolean SetRectRgn(int hrgn, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetRectRgn(int hrgn, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)"
		},
		"public static final native int GetObjectW(int hgdiobj, int cbBuffer, EXTLOGPEN lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectW(int hgdiobj, int cbBuffer, EXTLOGPEN lpvObject)"
		},
		"public static final native boolean IntersectRect(RECT lprcDst, RECT lprcSrc1, RECT lprcSrc2)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IntersectRect(RECT lprcDst, RECT lprcSrc1, RECT lprcSrc2)"
		},
		"public static final native int GetObjectA(int hgdiobj, int cbBuffer, BITMAP lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectA(int hgdiobj, int cbBuffer, BITMAP lpvObject)"
		},
		"public static final native boolean RemoveMenu(int hMenu, int uPosition, int uFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean RemoveMenu(int hMenu, int uPosition, int uFlags)"
		},
		"public static final short CharUpper(short ch)":{
			"methodBody":"{\n    if (IsUnicode)\n        return CharUpperW(ch);\n    return CharUpperA(ch);\n}",
			"comments":"",
			"methodName":"public static final short CharUpper(short ch)"
		},
		"public static final int ExpandEnvironmentStrings(TCHAR lpSrc, TCHAR lpDst, int nSize)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpSrc1 = lpSrc == null ? null : lpSrc.chars;\n        char[] lpDst1 = lpDst == null ? null : lpDst.chars;\n        return ExpandEnvironmentStringsW(lpSrc1, lpDst1, nSize);\n    }\n    byte[] lpSrc1 = lpSrc == null ? null : lpSrc.bytes;\n    byte[] lpDst1 = lpDst == null ? null : lpDst.bytes;\n    return ExpandEnvironmentStringsA(lpSrc1, lpDst1, nSize);\n}",
			"comments":"",
			"methodName":"public static final int ExpandEnvironmentStrings(TCHAR lpSrc, TCHAR lpDst, int nSize)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TVITEM lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TVITEM lParam)"
		},
		"public static final void MoveMemory(int Destination, TCHAR Source, int Length)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] Source1 = Source == null ? null : Source.chars;\n        MoveMemory(Destination, Source1, Length);\n    } else {\n        byte[] Source1 = Source == null ? null : Source.bytes;\n        MoveMemory(Destination, Source1, Length);\n    }\n}",
			"comments":"",
			"methodName":"public static final void MoveMemory(int Destination, TCHAR Source, int Length)"
		},
		"public static final native int StartPage(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int StartPage(int hdc)"
		},
		"public static final void MoveMemory(TEXTMETRIC Destination, int Source, int Length)":{
			"methodBody":"{\n    if (IsUnicode) {\n        MoveMemory((TEXTMETRICW) Destination, Source, Length);\n    } else {\n        MoveMemory((TEXTMETRICA) Destination, Source, Length);\n    }\n}",
			"comments":"",
			"methodName":"public static final void MoveMemory(TEXTMETRIC Destination, int Source, int Length)"
		},
		"public static final native int FormatMessageA(int dwFlags, int lpSource, int dwMessageId, int dwLanguageId, int[] lpBuffer, int nSize, int Arguments)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int FormatMessageA(int dwFlags, int lpSource, int dwMessageId, int dwLanguageId, int[] lpBuffer, int nSize, int Arguments)"
		},
		"public static final native boolean GetKeyboardState(byte[] lpKeyState)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetKeyboardState(byte[] lpKeyState)"
		},
		"public static final native int IntersectClipRect(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int IntersectClipRect(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)"
		},
		"public static final native int AbortDoc(int hdc)":{
			"methodBody":"",
			"comments":"/** Natives */\n",
			"methodName":"public static final native int AbortDoc(int hdc)"
		},
		"public static final native boolean DeleteObject(int hGdiObj)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DeleteObject(int hGdiObj)"
		},
		"public static final native short CharLowerA(short ch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short CharLowerA(short ch)"
		},
		"public static final native void MoveMemory(NMTTDISPINFOW Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMTTDISPINFOW Destination, int Source, int Length)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int[] wParam, int[] lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int[] wParam, int[] lParam)"
		},
		"public static final native boolean EnableScrollBar(int hWnd, int wSBflags, int wArrows)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnableScrollBar(int hWnd, int wSBflags, int wArrows)"
		},
		"public static final native int GetDialogBaseUnits()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDialogBaseUnits()"
		},
		"public static final native int CreateDCW(char[] lpszDriver, char[] lpszDevice, int lpszOutput, int lpInitData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateDCW(char[] lpszDriver, char[] lpszDevice, int lpszOutput, int lpInitData)"
		},
		"public static final native boolean RedrawWindow(int hWnd, RECT lprcUpdate, int hrgnUpdate, int flags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean RedrawWindow(int hWnd, RECT lprcUpdate, int hrgnUpdate, int flags)"
		},
		"public static final native int GetClipboardData(int uFormat)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetClipboardData(int uFormat)"
		},
		"public static final native int ExpandEnvironmentStringsA(byte[] lpSrc, byte[] lsDst, int nSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ExpandEnvironmentStringsA(byte[] lpSrc, byte[] lsDst, int nSize)"
		},
		"public static final native boolean KillTimer(int hWnd, int uIDEvent)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean KillTimer(int hWnd, int uIDEvent)"
		},
		"public static final native int SetLayout(int hdc, int dwLayout)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetLayout(int hdc, int dwLayout)"
		},
		"public static final native boolean IsHungAppWindow(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsHungAppWindow(int hWnd)"
		},
		"public static final int CallWindowProc(int lpPrevWndFunc, int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return CallWindowProcW(lpPrevWndFunc, hWnd, Msg, wParam, lParam);\n    return CallWindowProcA(lpPrevWndFunc, hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int CallWindowProc(int lpPrevWndFunc, int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native int CreateFontIndirectW(int lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateFontIndirectW(int lplf)"
		},
		"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, int[] pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, int[] pvParam, int fWinIni)"
		},
		"public static final native int SetWindowLongW(int hWnd, int nIndex, int dwNewLong)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetWindowLongW(int hWnd, int nIndex, int dwNewLong)"
		},
		"public static final boolean GetCharWidth(int hdc, int iFirstChar, int iLastChar, int[] lpabc)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetCharWidthW(hdc, iFirstChar, iLastChar, lpabc);\n    return GetCharWidthA(hdc, iFirstChar, iLastChar, lpabc);\n}",
			"comments":"",
			"methodName":"public static final boolean GetCharWidth(int hdc, int iFirstChar, int iLastChar, int[] lpabc)"
		},
		"public static final native boolean GetMenuInfo(int hmenu, MENUINFO lpcmi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMenuInfo(int hmenu, MENUINFO lpcmi)"
		},
		"public static final native int GetWindowTextW(int hWnd, char[] lpString, int nMaxCount)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowTextW(int hWnd, char[] lpString, int nMaxCount)"
		},
		"public static final native boolean PrintDlgW(PRINTDLG lppd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PrintDlgW(PRINTDLG lppd)"
		},
		"public static final native boolean ShowScrollBar(int hWnd, int wBar, boolean bShow)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ShowScrollBar(int hWnd, int wBar, boolean bShow)"
		},
		"public static final native int SetROP2(int hdc, int fnDrawMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetROP2(int hdc, int fnDrawMode)"
		},
		"public static final native int GetStockObject(int fnObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetStockObject(int fnObject)"
		},
		"public static final native int GetUpdateRgn(int hWnd, int hRgn, boolean bErase)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetUpdateRgn(int hWnd, int hRgn, boolean bErase)"
		},
		"public static final native boolean ChooseColorA(CHOOSECOLOR lpcc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ChooseColorA(CHOOSECOLOR lpcc)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TVINSERTSTRUCT lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TVINSERTSTRUCT lParam)"
		},
		"public static final native int SetTextAlign(int hdc, int fMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetTextAlign(int hdc, int fMode)"
		},
		"public static final native boolean GetCharABCWidthsW(int hdc, int iFirstChar, int iLastChar, int[] lpabc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetCharABCWidthsW(int hdc, int iFirstChar, int iLastChar, int[] lpabc)"
		},
		"public static final native void MoveMemory(short[] Destination, int SourcePtr, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(short[] Destination, int SourcePtr, int Length)"
		},
		"public static final int DefFrameProc(int hWnd, int hWndMDIClient, int Msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return DefFrameProcW(hWnd, hWndMDIClient, Msg, wParam, lParam);\n    return DefFrameProcA(hWnd, hWndMDIClient, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int DefFrameProc(int hWnd, int hWndMDIClient, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, RECT pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, RECT pvParam, int fWinIni)"
		},
		"public static final native boolean GetOpenFileNameW(OPENFILENAME lpofn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetOpenFileNameW(OPENFILENAME lpofn)"
		},
		"public static final native boolean PostMessageW(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PostMessageW(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean SetWorldTransform(int hdc, float[] lpXform)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetWorldTransform(int hdc, float[] lpXform)"
		},
		"public static final native boolean ImmDestroyContext(int hIMC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmDestroyContext(int hIMC)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, RECT lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, RECT lParam)"
		},
		"public static final native boolean Shell_NotifyIconA(int dwMessage, NOTIFYICONDATAA lpData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Shell_NotifyIconA(int dwMessage, NOTIFYICONDATAA lpData)"
		},
		"public static final native boolean IsPPC()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsPPC()"
		},
		"public static final int MapVirtualKey(int uCode, int uMapType)":{
			"methodBody":"{\n    if (IsUnicode)\n        return MapVirtualKeyW(uCode, uMapType);\n    return MapVirtualKeyA(uCode, uMapType);\n}",
			"comments":"",
			"methodName":"public static final int MapVirtualKey(int uCode, int uMapType)"
		},
		"public static final native boolean DeleteMenu(int hMenu, int uPosition, int uFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DeleteMenu(int hMenu, int uPosition, int uFlags)"
		},
		"public static final boolean SystemParametersInfo(int uiAction, int uiParam, int[] pvParam, int fWinIni)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SystemParametersInfoW(uiAction, uiParam, pvParam, fWinIni);\n    return SystemParametersInfoA(uiAction, uiParam, pvParam, fWinIni);\n}",
			"comments":"",
			"methodName":"public static final boolean SystemParametersInfo(int uiAction, int uiParam, int[] pvParam, int fWinIni)"
		},
		"public static final native int MessageBoxA(int hWnd, byte[] lpText, byte[] lpCaption, int uType)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MessageBoxA(int hWnd, byte[] lpText, byte[] lpCaption, int uType)"
		},
		"public static final native boolean GetVersionExW(OSVERSIONINFOW lpVersionInfo)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetVersionExW(OSVERSIONINFOW lpVersionInfo)"
		},
		"public static final native boolean RectInRegion(int hrgn, RECT lprc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean RectInRegion(int hrgn, RECT lprc)"
		},
		"public static final native int GetSystemMenu(int hWnd, boolean bRevert)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetSystemMenu(int hWnd, boolean bRevert)"
		},
		"public static final native int RealizePalette(int hDC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RealizePalette(int hDC)"
		},
		"public static final boolean Shell_NotifyIcon(int dwMessage, NOTIFYICONDATA lpData)":{
			"methodBody":"{\n    if (IsUnicode)\n        return Shell_NotifyIconW(dwMessage, (NOTIFYICONDATAW) lpData);\n    return Shell_NotifyIconA(dwMessage, (NOTIFYICONDATAA) lpData);\n}",
			"comments":"",
			"methodName":"public static final boolean Shell_NotifyIcon(int dwMessage, NOTIFYICONDATA lpData)"
		},
		"public static final int CreateFontIndirect(int lplf)":{
			"methodBody":"{\n    if (IsUnicode)\n        return CreateFontIndirectW(lplf);\n    return CreateFontIndirectA(lplf);\n}",
			"comments":"",
			"methodName":"public static final int CreateFontIndirect(int lplf)"
		},
		"public static final int GetObject(int hgdiobj, int cbBuffer, LOGPEN lpvObject)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetObjectW(hgdiobj, cbBuffer, lpvObject);\n    return GetObjectA(hgdiobj, cbBuffer, lpvObject);\n}",
			"comments":"",
			"methodName":"public static final int GetObject(int hgdiobj, int cbBuffer, LOGPEN lpvObject)"
		},
		"public static final native void MoveMemory(TEXTMETRICW Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(TEXTMETRICW Destination, int Source, int Length)"
		},
		"public static final native int ExtractIconExA(byte[] lpszFile, int nIconIndex, int[] phiconLarge, int[] phiconSmall, int nIcons)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ExtractIconExA(byte[] lpszFile, int nIconIndex, int[] phiconLarge, int[] phiconSmall, int nIcons)"
		},
		"public static final native void MoveMemory(int Destination, MSG Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, MSG Source, int Length)"
		},
		"public static final void MoveMemory(int Destination, LOGFONT Source, int Length)":{
			"methodBody":"{\n    if (IsUnicode) {\n        MoveMemory(Destination, (LOGFONTW) Source, Length);\n    } else {\n        MoveMemory(Destination, (LOGFONTA) Source, Length);\n    }\n}",
			"comments":"",
			"methodName":"public static final void MoveMemory(int Destination, LOGFONT Source, int Length)"
		},
		"public static final native int StartDocA(int hdc, DOCINFO lpdi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int StartDocA(int hdc, DOCINFO lpdi)"
		},
		"public static final native boolean GetMenuItemInfoA(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMenuItemInfoA(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native int GetLastError()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetLastError()"
		},
		"public static final native int CreateBitmap(int nWidth, int nHeight, int cPlanes, int cBitsPerPel, byte[] lpvBits)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateBitmap(int nWidth, int nHeight, int cPlanes, int cBitsPerPel, byte[] lpvBits)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, REBARBANDINFO lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, REBARBANDINFO lParam)"
		},
		"public static final native boolean GetMenuItemRect(int hWnd, int hMenu, int uItem, RECT lprcItem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMenuItemRect(int hWnd, int hMenu, int uItem, RECT lprcItem)"
		},
		"public static final native boolean HeapFree(int hHeap, int dwFlags, int lpMem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean HeapFree(int hHeap, int dwFlags, int lpMem)"
		},
		"public static final native int GetClassNameW(int hWnd, char[] lpClassName, int nMaxCount)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetClassNameW(int hWnd, char[] lpClassName, int nMaxCount)"
		},
		"public static final native int VtblCall(int fnNumber, int ppVtbl, char[] arg0, int arg1, int arg2, int[] arg3, int[] arg4)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int VtblCall(int fnNumber, int ppVtbl, char[] arg0, int arg1, int arg2, int[] arg3, int[] arg4)"
		},
		"public static final native int SetFocus(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetFocus(int hWnd)"
		},
		"public static final native int GetClipRgn(int hdc, int hrgn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetClipRgn(int hdc, int hrgn)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TOOLINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TOOLINFO lParam)"
		},
		"public static final native boolean PeekMessageW(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PeekMessageW(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax, int wRemoveMsg)"
		},
		"public static final native boolean SHSetAppKeyWndAssoc(byte bVk, int hwnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SHSetAppKeyWndAssoc(byte bVk, int hwnd)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, int[] lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, int[] lParam)"
		},
		"public static final boolean GetCharABCWidths(int hdc, int iFirstChar, int iLastChar, int[] lpabc)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetCharABCWidthsW(hdc, iFirstChar, iLastChar, lpabc);\n    return GetCharABCWidthsA(hdc, iFirstChar, iLastChar, lpabc);\n}",
			"comments":"",
			"methodName":"public static final boolean GetCharABCWidths(int hdc, int iFirstChar, int iLastChar, int[] lpabc)"
		},
		"public static final native void MoveMemory(NMTTDISPINFOA Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMTTDISPINFOA Destination, int Source, int Length)"
		},
		"public static final native int FindWindowA(byte[] lpClassName, byte[] lpWindowName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int FindWindowA(byte[] lpClassName, byte[] lpWindowName)"
		},
		"public static final native int SelectObject(int hDC, int HGDIObj)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SelectObject(int hDC, int HGDIObj)"
		},
		"public static final native int ScriptGetLogicalWidths(SCRIPT_ANALYSIS psa, int cChars, int cGlyphs, int piGlyphWidth, int pwLogClust, int psva, int[] piDx)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptGetLogicalWidths(SCRIPT_ANALYSIS psa, int cChars, int cGlyphs, int piGlyphWidth, int pwLogClust, int psva, int[] piDx)"
		},
		"public static final native void MoveMemory(NMUPDOWN Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMUPDOWN Destination, int Source, int Length)"
		},
		"public static final native boolean GetVersionExA(OSVERSIONINFOA lpVersionInfo)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetVersionExA(OSVERSIONINFOA lpVersionInfo)"
		},
		"public static final native boolean IsSP()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsSP()"
		},
		"public static final int GetObject(int hgdiobj, int cbBuffer, LOGFONT lpvObject)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetObjectW(hgdiobj, cbBuffer, (LOGFONTW) lpvObject);\n    return GetObjectA(hgdiobj, cbBuffer, (LOGFONTA) lpvObject);\n}",
			"comments":"",
			"methodName":"public static final int GetObject(int hgdiobj, int cbBuffer, LOGFONT lpvObject)"
		},
		"public static final native int GetParent(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetParent(int hWnd)"
		},
		"public static final native int DispatchMessageA(MSG lpmsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DispatchMessageA(MSG lpmsg)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LVHITTESTINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LVHITTESTINFO lParam)"
		},
		"public static final native short CharUpperA(short ch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short CharUpperA(short ch)"
		},
		"public static final native int RegQueryValueExA(int hKey, byte[] lpValueName, int lpReserved, int[] lpType, int[] lpData, int[] lpcbData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegQueryValueExA(int hKey, byte[] lpValueName, int lpReserved, int[] lpType, int[] lpData, int[] lpcbData)"
		},
		"public static final int DragQueryFile(int hDrop, int iFile, TCHAR lpszFile, int cch)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpszFile1 = lpszFile == null ? null : lpszFile.chars;\n        return DragQueryFileW(hDrop, iFile, lpszFile1, cch);\n    }\n    byte[] lpszFile1 = lpszFile == null ? null : lpszFile.bytes;\n    return DragQueryFileA(hDrop, iFile, lpszFile1, cch);\n}",
			"comments":"",
			"methodName":"public static final int DragQueryFile(int hDrop, int iFile, TCHAR lpszFile, int cch)"
		},
		"public static final native int GetRegionData(int hRgn, int dwCount, int[] lpRgnData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetRegionData(int hRgn, int dwCount, int[] lpRgnData)"
		},
		"public static final native boolean SHCreateMenuBar(SHMENUBARINFO pmb)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SHCreateMenuBar(SHMENUBARINFO pmb)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native int GetObjectA(int hgdiobj, int cbBuffer, LOGFONTA lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectA(int hgdiobj, int cbBuffer, LOGFONTA lpvObject)"
		},
		"public static final native boolean TrackPopupMenu(int hMenu, int uFlags, int x, int y, int nReserved, int hWnd, RECT prcRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean TrackPopupMenu(int hMenu, int uFlags, int x, int y, int nReserved, int hWnd, RECT prcRect)"
		},
		"public static final int EnumFontFamiliesEx(int hdc, LOGFONT lpLogfont, int lpEnumFontFamExProc, int lParam, int dwFlags)":{
			"methodBody":"{\n    if (IsUnicode)\n        return EnumFontFamiliesExW(hdc, (LOGFONTW) lpLogfont, lpEnumFontFamExProc, lParam, dwFlags);\n    return EnumFontFamiliesExA(hdc, (LOGFONTA) lpLogfont, lpEnumFontFamExProc, lParam, dwFlags);\n}",
			"comments":"",
			"methodName":"public static final int EnumFontFamiliesEx(int hdc, LOGFONT lpLogfont, int lpEnumFontFamExProc, int lParam, int dwFlags)"
		},
		"public static final native boolean ValidateRect(int hWnd, RECT lpRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ValidateRect(int hWnd, RECT lpRect)"
		},
		"public static final native int GetObjectW(int hgdiobj, int cbBuffer, LOGBRUSH lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectW(int hgdiobj, int cbBuffer, LOGBRUSH lpvObject)"
		},
		"public static final native boolean UnhookWindowsHookEx(int hhk)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean UnhookWindowsHookEx(int hhk)"
		},
		"public static final native int GetObjectW(int hgdiobj, int cbBuffer, LOGFONTW lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectW(int hgdiobj, int cbBuffer, LOGFONTW lpvObject)"
		},
		"public static final native boolean EqualRect(RECT lprc1, RECT lprc2)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EqualRect(RECT lprc1, RECT lprc2)"
		},
		"public static final native boolean ShowOwnedPopups(int hWnd, boolean fShow)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ShowOwnedPopups(int hWnd, boolean fShow)"
		},
		"public static final native boolean EnumSystemLocalesA(int lpLocaleEnumProc, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnumSystemLocalesA(int lpLocaleEnumProc, int dwFlags)"
		},
		"public static final int CreateDC(TCHAR lpszDriver, TCHAR lpszDevice, int lpszOutput, int lpInitData)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpszDriver1 = lpszDriver == null ? null : lpszDriver.chars;\n        char[] lpszDevice1 = lpszDevice == null ? null : lpszDevice.chars;\n        return CreateDCW(lpszDriver1, lpszDevice1, lpszOutput, lpInitData);\n    }\n    byte[] lpszDriver1 = lpszDriver == null ? null : lpszDriver.bytes;\n    byte[] lpszDevice1 = lpszDevice == null ? null : lpszDevice.bytes;\n    return CreateDCA(lpszDriver1, lpszDevice1, lpszOutput, lpInitData);\n}",
			"comments":"",
			"methodName":"public static final int CreateDC(TCHAR lpszDriver, TCHAR lpszDevice, int lpszOutput, int lpInitData)"
		},
		"public static final native int GetObjectA(int hgdiobj, int cbBuffer, LOGBRUSH lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectA(int hgdiobj, int cbBuffer, LOGBRUSH lpvObject)"
		},
		"public static final native int VtblCall(int fnNumber, int ppVtbl, int arg0, int arg1, int arg2, int[] arg3)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int VtblCall(int fnNumber, int ppVtbl, int arg0, int arg1, int arg2, int[] arg3)"
		},
		"public static final native int GetObjectA(int hgdiobj, int cbBuffer, LOGPEN lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectA(int hgdiobj, int cbBuffer, LOGPEN lpvObject)"
		},
		"public static final native int MessageBoxW(int hWnd, char[] lpText, char[] lpCaption, int uType)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MessageBoxW(int hWnd, char[] lpText, char[] lpCaption, int uType)"
		},
		"public static final native boolean SipGetInfo(SIPINFO pSipInfo)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SipGetInfo(SIPINFO pSipInfo)"
		},
		"public static final native void MoveMemory(float[] Destination, int SourcePtr, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(float[] Destination, int SourcePtr, int Length)"
		},
		"public static final int LoadIcon(int hInstance, int lpIconName)":{
			"methodBody":"{\n    if (IsUnicode)\n        return LoadIconW(hInstance, lpIconName);\n    return LoadIconA(hInstance, lpIconName);\n}",
			"comments":"",
			"methodName":"public static final int LoadIcon(int hInstance, int lpIconName)"
		},
		"public static final native int CommandBar_Height(int hdnwCB)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CommandBar_Height(int hdnwCB)"
		},
		"public static final native boolean TransparentBlt(int hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int hHeightDest, int hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int crTransparent)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean TransparentBlt(int hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int hHeightDest, int hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int crTransparent)"
		},
		"public static final native boolean UnregisterClassA(byte[] lpClassName, int hInstance)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean UnregisterClassA(byte[] lpClassName, int hInstance)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TVHITTESTINFO lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TVHITTESTINFO lParam)"
		},
		"public static final native int GetKeyboardLayout(int idThread)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetKeyboardLayout(int idThread)"
		},
		"public static final native void MoveMemory(HELPINFO Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(HELPINFO Destination, int Source, int Length)"
		},
		"public static final native boolean ImmSetConversionStatus(int hIMC, int fdwConversion, int dwSentence)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmSetConversionStatus(int hIMC, int fdwConversion, int dwSentence)"
		},
		"public static final native int ExtCreatePen(int dwPenStyle, int dwWidth, LOGBRUSH lplb, int dwStyleCount, int[] lpStyle)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ExtCreatePen(int dwPenStyle, int dwWidth, LOGBRUSH lplb, int dwStyleCount, int[] lpStyle)"
		},
		"public static final native int ScriptGetProperties(int[] ppSp, int[] piNumScripts)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptGetProperties(int[] ppSp, int[] piNumScripts)"
		},
		"public static final native int GetWindowTextLengthW(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowTextLengthW(int hWnd)"
		},
		"public static final native void MoveMemory(int Destination, byte[] Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, byte[] Source, int Length)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, HDLAYOUT lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, HDLAYOUT lParam)"
		},
		"public static final native int CreateFontIndirectA(LOGFONTA lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateFontIndirectA(LOGFONTA lplf)"
		},
		"public static final native int ScriptLayout(int cRuns, byte[] pbLevel, int[] piVisualToLogical, int[] piLogicalToVisual)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptLayout(int cRuns, byte[] pbLevel, int[] piVisualToLogical, int[] piLogicalToVisual)"
		},
		"public static final native int EndPaint(int hWnd, PAINTSTRUCT lpPaint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int EndPaint(int hWnd, PAINTSTRUCT lpPaint)"
		},
		"public static final int RegQueryInfoKey(int hKey, int lpClass, int[] lpcbClass, int lpReserved, int[] lpSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, int[] lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int lpftLastWriteTime)":{
			"methodBody":"{\n    if (IsUnicode)\n        return RegQueryInfoKeyW(hKey, lpClass, lpcbClass, lpReserved, lpSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);\n    return RegQueryInfoKeyA(hKey, lpClass, lpcbClass, lpReserved, lpSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);\n}",
			"comments":"",
			"methodName":"public static final int RegQueryInfoKey(int hKey, int lpClass, int[] lpcbClass, int lpReserved, int[] lpSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, int[] lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int lpftLastWriteTime)"
		},
		"public static final native int MapWindowPoints(int hWndFrom, int hWndTo, RECT lpPoints, int cPoints)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MapWindowPoints(int hWndFrom, int hWndTo, RECT lpPoints, int cPoints)"
		},
		"public static final native boolean DestroyIcon(int hIcon)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DestroyIcon(int hIcon)"
		},
		"public static final native int LoadCursorW(int hInstance, int lpCursorName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadCursorW(int hInstance, int lpCursorName)"
		},
		"public static final native boolean SHHandleWMSettingChange(int hwnd, int wParam, int lParam, SHACTIVATEINFO psai)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SHHandleWMSettingChange(int hwnd, int wParam, int lParam, SHACTIVATEINFO psai)"
		},
		"public static final native boolean ImmSetCompositionFontW(int hIMC, LOGFONTW lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmSetCompositionFontW(int hIMC, LOGFONTW lplf)"
		},
		"public static final native boolean PrintDlgA(PRINTDLG lppd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PrintDlgA(PRINTDLG lppd)"
		},
		"public static final int DrawText(int hDC, TCHAR lpString, int nCount, RECT lpRect, int uFormat)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return DrawTextW(hDC, lpString1, nCount, lpRect, uFormat);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return DrawTextA(hDC, lpString1, nCount, lpRect, uFormat);\n}",
			"comments":"",
			"methodName":"public static final int DrawText(int hDC, TCHAR lpString, int nCount, RECT lpRect, int uFormat)"
		},
		"public static final native void MoveMemory(NMLISTVIEW Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMLISTVIEW Destination, int Source, int Length)"
		},
		"public static final native int LoadBitmapW(int hInstance, int lpBitmapName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadBitmapW(int hInstance, int lpBitmapName)"
		},
		"public static final native int SelectClipRgn(int hdc, int hrgn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SelectClipRgn(int hdc, int hrgn)"
		},
		"public static final native void MoveMemory(MSG Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(MSG Destination, int Source, int Length)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TBBUTTONINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TBBUTTONINFO lParam)"
		},
		"public static final int GetClipboardFormatName(int format, TCHAR lpszFormatName, int cchMaxCount)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpszFormatName1 = lpszFormatName == null ? null : lpszFormatName.chars;\n        return GetClipboardFormatNameW(format, lpszFormatName1, cchMaxCount);\n    }\n    byte[] lpszFormatName1 = lpszFormatName == null ? null : lpszFormatName.bytes;\n    return GetClipboardFormatNameA(format, lpszFormatName1, cchMaxCount);\n}",
			"comments":"",
			"methodName":"public static final int GetClipboardFormatName(int format, TCHAR lpszFormatName, int cchMaxCount)"
		},
		"public static final native void MoveMemory(int Destination, NMLVCUSTOMDRAW Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, NMLVCUSTOMDRAW Source, int Length)"
		},
		"public static final int LoadString(int hinst, int uID, TCHAR lpBuffer, int nBufferMax)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpBuffer1 = lpBuffer == null ? null : lpBuffer.chars;\n        return LoadStringW(hinst, uID, lpBuffer1, nBufferMax);\n    }\n    byte[] lpBuffer1 = lpBuffer == null ? null : lpBuffer.bytes;\n    return LoadStringA(hinst, uID, lpBuffer1, nBufferMax);\n}",
			"comments":"",
			"methodName":"public static final int LoadString(int hinst, int uID, TCHAR lpBuffer, int nBufferMax)"
		},
		"public static int VERSION(int major, int minor)":{
			"methodBody":"{\n    return major << 16 | minor;\n}",
			"comments":"",
			"methodName":"public static int VERSION(int major, int minor)"
		},
		"public static final int LoadLibrary(TCHAR lpLibFileName)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpLibFileName1 = lpLibFileName == null ? null : lpLibFileName.chars;\n        return LoadLibraryW(lpLibFileName1);\n    }\n    byte[] lpLibFileName1 = lpLibFileName == null ? null : lpLibFileName.bytes;\n    return LoadLibraryA(lpLibFileName1);\n}",
			"comments":"",
			"methodName":"public static final int LoadLibrary(TCHAR lpLibFileName)"
		},
		"public static final native int MapVirtualKeyW(int uCode, int uMapType)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MapVirtualKeyW(int uCode, int uMapType)"
		},
		"public static final native int ImageList_Create(int cx, int cy, int flags, int cInitial, int cGrow)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImageList_Create(int cx, int cy, int flags, int cInitial, int cGrow)"
		},
		"public static final native void MoveMemory(NMRGINFO Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMRGINFO Destination, int Source, int Length)"
		},
		"public static final native boolean GetUpdateRect(int hWnd, RECT lpRect, boolean bErase)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetUpdateRect(int hWnd, RECT lpRect, boolean bErase)"
		},
		"public static final native boolean LineTo(int hdc, int x1, int x2)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean LineTo(int hdc, int x1, int x2)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TBBUTTON lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TBBUTTON lParam)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, RECT lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, RECT lParam)"
		},
		"public static final native boolean EnumSystemLanguageGroupsW(int pLangGroupEnumProc, int dwFlags, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnumSystemLanguageGroupsW(int pLangGroupEnumProc, int dwFlags, int lParam)"
		},
		"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, RECT pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoW(int uiAction, int uiParam, RECT pvParam, int fWinIni)"
		},
		"public static final native boolean AlphaBlend(int hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, int hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, BLENDFUNCTION blendFunction)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean AlphaBlend(int hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, int hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, BLENDFUNCTION blendFunction)"
		},
		"public static final native void MoveMemory(int Destination, NMTVCUSTOMDRAW Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, NMTVCUSTOMDRAW Source, int Length)"
		},
		"public static final native int GetMenuDefaultItem(int hMenu, int fByPos, int gmdiFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetMenuDefaultItem(int hMenu, int fByPos, int gmdiFlags)"
		},
		"public static final native int RegQueryValueExW(int hKey, char[] lpValueName, int lpReserved, int[] lpType, char[] lpData, int[] lpcbData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegQueryValueExW(int hKey, char[] lpValueName, int lpReserved, int[] lpType, char[] lpData, int[] lpcbData)"
		},
		"public static final native void MoveMemory(NMLINK Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMLINK Destination, int Source, int Length)"
		},
		"public static final native boolean EndDeferWindowPos(int hWinPosInfo)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EndDeferWindowPos(int hWinPosInfo)"
		},
		"public static final native int WindowFromPoint(POINT lpPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int WindowFromPoint(POINT lpPoint)"
		},
		"public static final native void MoveMemory(int Destination, LOGFONTA Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, LOGFONTA Source, int Length)"
		},
		"public static final native int GetSystemMetrics(int nIndex)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetSystemMetrics(int nIndex)"
		},
		"public static final native boolean DrawStateA(int hdc, int hbr, int lpOutputFunc, int lData, int wData, int x, int y, int cx, int cy, int fuFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DrawStateA(int hdc, int hbr, int lpOutputFunc, int lData, int wData, int x, int y, int cx, int cy, int fuFlags)"
		},
		"public static final native int ScriptShape(int hdc, int psc, char[] pwcChars, int cChars, int cMaxGlyphs, SCRIPT_ANALYSIS psa, int pwOutGlyphs, int pwLogClust, int psva, int[] pcGlyphs)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptShape(int hdc, int psc, char[] pwcChars, int cChars, int cMaxGlyphs, SCRIPT_ANALYSIS psa, int pwOutGlyphs, int pwLogClust, int psva, int[] pcGlyphs)"
		},
		"public static final native boolean EnumDisplayMonitors(int hdc, RECT lprcClip, int lpfnEnum, int dwData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnumDisplayMonitors(int hdc, RECT lprcClip, int lpfnEnum, int dwData)"
		},
		"public static final native int DefWindowProcW(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DefWindowProcW(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean ImmGetCompositionFontW(int hIMC, LOGFONTW lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmGetCompositionFontW(int hIMC, LOGFONTW lplf)"
		},
		"public static final native boolean EqualRgn(int hSrcRgn1, int hSrcRgn2)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EqualRgn(int hSrcRgn1, int hSrcRgn2)"
		},
		"public static final native boolean ExtTextOutA(int hdc, int X, int Y, int fuOptions, RECT lprc, byte[] lpString, int cbCount, int[] lpDx)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ExtTextOutA(int hdc, int X, int Y, int fuOptions, RECT lprc, byte[] lpString, int cbCount, int[] lpDx)"
		},
		"public static final native void MoveMemory(int DestinationPtr, short[] Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int DestinationPtr, short[] Source, int Length)"
		},
		"public static final native int CreateCursor(int hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, byte[] pvANDPlane, byte[] pvXORPlane)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateCursor(int hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, byte[] pvANDPlane, byte[] pvXORPlane)"
		},
		"public static final native void MoveMemory(int Destination, MOUSEINPUT Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, MOUSEINPUT Source, int Length)"
		},
		"public static final native int LoadStringA(int hinst, int uID, byte[] lpBuffer, int nBufferMax)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadStringA(int hinst, int uID, byte[] lpBuffer, int nBufferMax)"
		},
		"public static final native void MoveMemory(SCRIPT_LOGATTR Destination, int SourcePtr, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(SCRIPT_LOGATTR Destination, int SourcePtr, int Length)"
		},
		"public static final native int GetRandomRgn(int hdc, int hrgn, int iNum)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetRandomRgn(int hdc, int hrgn, int iNum)"
		},
		"public static final native boolean CreateCaret(int hWnd, int hBitmap, int nWidth, int nHeight)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean CreateCaret(int hWnd, int hBitmap, int nWidth, int nHeight)"
		},
		"public static final native void MoveMemory(NMLVDISPINFO Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMLVDISPINFO Destination, int Source, int Length)"
		},
		"public static final native boolean GetCharWidthA(int hdc, int iFirstChar, int iLastChar, int[] lpBuffer)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetCharWidthA(int hdc, int iFirstChar, int iLastChar, int[] lpBuffer)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, REBARBANDINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, REBARBANDINFO lParam)"
		},
		"public static final native int CreateAcceleratorTableA(byte[] lpaccl, int cEntries)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateAcceleratorTableA(byte[] lpaccl, int cEntries)"
		},
		"public static final native boolean CommandBar_AddAdornments(int hwndCB, int dwFlags, int dwReserved)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean CommandBar_AddAdornments(int hwndCB, int dwFlags, int dwReserved)"
		},
		"public static final native void MoveMemory(byte[] Destination, BITMAPINFOHEADER Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(byte[] Destination, BITMAPINFOHEADER Source, int Length)"
		},
		"public static final native boolean SetMenuInfo(int hmenu, MENUINFO lpcmi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetMenuInfo(int hmenu, MENUINFO lpcmi)"
		},
		"public static final int RemoveProp(int hWnd, int lpString)":{
			"methodBody":"{\n    if (IsUnicode)\n        return RemovePropW(hWnd, lpString);\n    return RemovePropA(hWnd, lpString);\n}",
			"comments":"",
			"methodName":"public static final int RemoveProp(int hWnd, int lpString)"
		},
		"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, HIGHCONTRAST pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, HIGHCONTRAST pvParam, int fWinIni)"
		},
		"public static final native int EnumFontFamiliesExA(int hdc, LOGFONTA lpLogfont, int lpEnumFontFamExProc, int lParam, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int EnumFontFamiliesExA(int hdc, LOGFONTA lpLogfont, int lpEnumFontFamExProc, int lParam, int dwFlags)"
		},
		"public static final native int LoadBitmapA(int hInstance, int lpBitmapName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadBitmapA(int hInstance, int lpBitmapName)"
		},
		"public static final native boolean ExtTextOutW(int hdc, int X, int Y, int fuOptions, RECT lprc, char[] lpString, int cbCount, int[] lpDx)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ExtTextOutW(int hdc, int X, int Y, int fuOptions, RECT lprc, char[] lpString, int cbCount, int[] lpDx)"
		},
		"public static final native int GetObjectA(int hgdiobj, int cbBuffer, EXTLOGPEN lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectA(int hgdiobj, int cbBuffer, EXTLOGPEN lpvObject)"
		},
		"public static final native int ScriptPlace(int hdc, int psc, int pwGlyphs, int cGlyphs, int psva, SCRIPT_ANALYSIS psa, int piAdvance, int pGoffset, int[] pABC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptPlace(int hdc, int psc, int pwGlyphs, int cGlyphs, int psva, SCRIPT_ANALYSIS psa, int piAdvance, int pGoffset, int[] pABC)"
		},
		"public static final int DefWindowProc(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return DefWindowProcW(hWnd, Msg, wParam, lParam);\n    return DefWindowProcA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int DefWindowProc(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native boolean SetScrollInfo(int hwnd, int flags, SCROLLINFO info, boolean fRedraw)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetScrollInfo(int hwnd, int flags, SCROLLINFO info, boolean fRedraw)"
		},
		"public static final int DispatchMessage(MSG lpmsg)":{
			"methodBody":"{\n    if (IsUnicode)\n        return DispatchMessageW(lpmsg);\n    return DispatchMessageA(lpmsg);\n}",
			"comments":"",
			"methodName":"public static final int DispatchMessage(MSG lpmsg)"
		},
		"public static final native boolean GetMenuItemInfoW(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMenuItemInfoW(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final int CreateAcceleratorTable(byte[] lpaccl, int cEntries)":{
			"methodBody":"{\n    if (IsUnicode)\n        return CreateAcceleratorTableW(lpaccl, cEntries);\n    return CreateAcceleratorTableA(lpaccl, cEntries);\n}",
			"comments":"",
			"methodName":"public static final int CreateAcceleratorTable(byte[] lpaccl, int cEntries)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, UDACCEL lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, UDACCEL lParam)"
		},
		"public static final native int ScriptCacheGetHeight(int hdc, int psc, int[] tmHeight)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptCacheGetHeight(int hdc, int psc, int[] tmHeight)"
		},
		"public static final native int GetKeyNameTextW(int lParam, char[] lpString, int nSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetKeyNameTextW(int lParam, char[] lpString, int nSize)"
		},
		"public static final native int GetWindowTextLengthA(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowTextLengthA(int hWnd)"
		},
		"public static final native int SetPixel(int hdc, int X, int Y, int crColor)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetPixel(int hdc, int X, int Y, int crColor)"
		},
		"public static final native void MoveMemory(int Destination, UDACCEL Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, UDACCEL Source, int Length)"
		},
		"public static final native void MoveMemory(NMLVFINDITEM Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMLVFINDITEM Destination, int Source, int Length)"
		},
		"public static final native boolean UpdateWindow(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean UpdateWindow(int hWnd)"
		},
		"public static final native int ImageList_Add(int himl, int hbmImage, int hbmMask)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImageList_Add(int himl, int hbmImage, int hbmMask)"
		},
		"public static final native int GetClipboardFormatNameW(int format, char[] lpszFormatName, int cchMaxCount)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetClipboardFormatNameW(int format, char[] lpszFormatName, int cchMaxCount)"
		},
		"public static final native void MoveMemory(int Destination, NMTTDISPINFOW Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, NMTTDISPINFOW Source, int Length)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, LVHITTESTINFO lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, LVHITTESTINFO lParam)"
		},
		"public static final native boolean FreeLibrary(int hLibModule)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean FreeLibrary(int hLibModule)"
		},
		"public static final native boolean ImageList_Remove(int himl, int i)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImageList_Remove(int himl, int i)"
		},
		"public static final native boolean ShowCaret(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ShowCaret(int hWnd)"
		},
		"public static final native int WideCharToMultiByte(int CodePage, int dwFlags, char[] lpWideCharStr, int cchWideChar, byte[] lpMultiByteStr, int cchMultiByte, byte[] lpDefaultChar, boolean[] lpUsedDefaultChar)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int WideCharToMultiByte(int CodePage, int dwFlags, char[] lpWideCharStr, int cchWideChar, byte[] lpMultiByteStr, int cchMultiByte, byte[] lpDefaultChar, boolean[] lpUsedDefaultChar)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TCITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TCITEM lParam)"
		},
		"public static final native int GlobalAddAtomW(char[] lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GlobalAddAtomW(char[] lpString)"
		},
		"public static final boolean InsertMenu(int hMenu, int uPosition, int uFlags, int uIDNewItem, TCHAR lpNewItem)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpNewItem1 = lpNewItem == null ? null : lpNewItem.chars;\n        return InsertMenuW(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem1);\n    }\n    byte[] lpNewItem1 = lpNewItem == null ? null : lpNewItem.bytes;\n    return InsertMenuA(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem1);\n}",
			"comments":"",
			"methodName":"public static final boolean InsertMenu(int hMenu, int uPosition, int uFlags, int uIDNewItem, TCHAR lpNewItem)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, BUTTON_IMAGELIST lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, BUTTON_IMAGELIST lParam)"
		},
		"public static final int RegisterClipboardFormat(TCHAR lpszFormat)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpszFormat1 = lpszFormat == null ? null : lpszFormat.chars;\n        return RegisterClipboardFormatW(lpszFormat1);\n    }\n    byte[] lpszFormat1 = lpszFormat == null ? null : lpszFormat.bytes;\n    return RegisterClipboardFormatA(lpszFormat1);\n}",
			"comments":"",
			"methodName":"public static final int RegisterClipboardFormat(TCHAR lpszFormat)"
		},
		"public static final native int GlobalLock(int hMem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GlobalLock(int hMem)"
		},
		"public static final native boolean SetPropW(int hWnd, int lpString, int hData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetPropW(int hWnd, int lpString, int hData)"
		},
		"public static final native int GetMenuItemCount(int hMenu)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetMenuItemCount(int hMenu)"
		},
		"public static final native int SetStretchBltMode(int hdc, int iStretchMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetStretchBltMode(int hdc, int iStretchMode)"
		},
		"public static final int DefMDIChildProc(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return DefMDIChildProcW(hWnd, Msg, wParam, lParam);\n    return DefMDIChildProcA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int DefMDIChildProc(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, LVCOLUMN lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, LVCOLUMN lParam)"
		},
		"public static final native void MoveMemory(NMHDR Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMHDR Destination, int Source, int Length)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TVHITTESTINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TVHITTESTINFO lParam)"
		},
		"public static final native int GetCharacterPlacementW(int hdc, char[] lpString, int nCount, int nMaxExtent, GCP_RESULTS lpResults, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetCharacterPlacementW(int hdc, char[] lpString, int nCount, int nMaxExtent, GCP_RESULTS lpResults, int dwFlags)"
		},
		"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, NONCLIENTMETRICSA pvParam, int fWinIni)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SystemParametersInfoA(int uiAction, int uiParam, NONCLIENTMETRICSA pvParam, int fWinIni)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, HDITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, HDITEM lParam)"
		},
		"public static final native int DefFrameProcW(int hWnd, int hWndMDIClient, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DefFrameProcW(int hWnd, int hWndMDIClient, int Msg, int wParam, int lParam)"
		},
		"public static final native int RegisterWindowMessageW(char[] lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegisterWindowMessageW(char[] lpString)"
		},
		"public static final boolean ChooseFont(CHOOSEFONT chooseFont)":{
			"methodBody":"{\n    if (IsUnicode)\n        return ChooseFontW(chooseFont);\n    return ChooseFontA(chooseFont);\n}",
			"comments":"",
			"methodName":"public static final boolean ChooseFont(CHOOSEFONT chooseFont)"
		},
		"public static final native boolean GetClassInfoA(int hInstance, byte[] lpClassName, WNDCLASS lpWndClass)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetClassInfoA(int hInstance, byte[] lpClassName, WNDCLASS lpWndClass)"
		},
		"public static final native boolean IsDBCSLeadByte(byte TestChar)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean IsDBCSLeadByte(byte TestChar)"
		},
		"public static final native int GetSystemPaletteEntries(int hdc, int iStartIndex, int nEntries, byte[] lppe)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetSystemPaletteEntries(int hdc, int iStartIndex, int nEntries, byte[] lppe)"
		},
		"public static final native int RegOpenKeyExW(int hKey, char[] lpSubKey, int ulOptions, int samDesired, int[] phkResult)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegOpenKeyExW(int hKey, char[] lpSubKey, int ulOptions, int samDesired, int[] phkResult)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LVCOLUMN lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, LVCOLUMN lParam)"
		},
		"public static final native void MoveMemory(TVITEM Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(TVITEM Destination, int Source, int Length)"
		},
		"public static final native boolean SetRect(RECT lprc, int xLeft, int yTop, int xRight, int yBottom)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetRect(RECT lprc, int xLeft, int yTop, int xRight, int yBottom)"
		},
		"public static final boolean EnumSystemLanguageGroups(int pLangGroupEnumProc, int dwFlags, int lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return EnumSystemLanguageGroupsW(pLangGroupEnumProc, dwFlags, lParam);\n    return EnumSystemLanguageGroupsA(pLangGroupEnumProc, dwFlags, lParam);\n}",
			"comments":"",
			"methodName":"public static final boolean EnumSystemLanguageGroups(int pLangGroupEnumProc, int dwFlags, int lParam)"
		},
		"public static final boolean ImmGetCompositionFont(int hIMC, LOGFONT lplf)":{
			"methodBody":"{\n    if (IsUnicode)\n        return ImmGetCompositionFontW(hIMC, (LOGFONTW) lplf);\n    return ImmGetCompositionFontA(hIMC, (LOGFONTA) lplf);\n}",
			"comments":"",
			"methodName":"public static final boolean ImmGetCompositionFont(int hIMC, LOGFONT lplf)"
		},
		"public static final native boolean CommandBar_DrawMenuBar(int hwndCB, int iButton)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean CommandBar_DrawMenuBar(int hwndCB, int iButton)"
		},
		"public static final native int DrawTextA(int hDC, byte[] lpString, int nCount, RECT lpRect, int uFormat)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DrawTextA(int hDC, byte[] lpString, int nCount, RECT lpRect, int uFormat)"
		},
		"public static final native void MoveMemory(int Destination, NMLVDISPINFO Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, NMLVDISPINFO Source, int Length)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TVITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TVITEM lParam)"
		},
		"public static final native boolean SetWindowTextA(int hWnd, byte[] lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetWindowTextA(int hWnd, byte[] lpString)"
		},
		"public static final native boolean GetCharWidthW(int hdc, int iFirstChar, int iLastChar, int[] lpBuffer)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetCharWidthW(int hdc, int iFirstChar, int iLastChar, int[] lpBuffer)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LVHITTESTINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LVHITTESTINFO lParam)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, BUTTON_IMAGELIST lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, BUTTON_IMAGELIST lParam)"
		},
		"public static int GetProp(int hWnd, int lpString)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetPropW(hWnd, lpString);\n    return GetPropA(hWnd, lpString);\n}",
			"comments":"",
			"methodName":"public static int GetProp(int hWnd, int lpString)"
		},
		"public static final native int EnumFontFamiliesA(int hdc, byte[] lpszFamily, int lpEnumFontFamProc, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int EnumFontFamiliesA(int hdc, byte[] lpszFamily, int lpEnumFontFamProc, int lParam)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int[] wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int[] wParam, int lParam)"
		},
		"public static final native int GetProcAddress(int hModule, byte[] lpProcName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetProcAddress(int hModule, byte[] lpProcName)"
		},
		"public static final native boolean ShellExecuteExA(SHELLEXECUTEINFO lpExecInfo)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ShellExecuteExA(SHELLEXECUTEINFO lpExecInfo)"
		},
		"public static final native boolean CommandBar_Show(int hwndCB, boolean fShow)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean CommandBar_Show(int hwndCB, boolean fShow)"
		},
		"public static final native boolean DestroyAcceleratorTable(int hAccel)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DestroyAcceleratorTable(int hAccel)"
		},
		"public static final native boolean OpenClipboard(int hWndNewOwner)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean OpenClipboard(int hWndNewOwner)"
		},
		"public static final int CreateFontIndirect(LOGFONT lplf)":{
			"methodBody":"{\n    if (IsUnicode)\n        return CreateFontIndirectW((LOGFONTW) lplf);\n    return CreateFontIndirectA((LOGFONTA) lplf);\n}",
			"comments":"",
			"methodName":"public static final int CreateFontIndirect(LOGFONT lplf)"
		},
		"public static final native int SHRecognizeGesture(SHRGINFO shrg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SHRecognizeGesture(SHRGINFO shrg)"
		},
		"public static final native int CreateCompatibleBitmap(int hdc, int nWidth, int nHeight)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateCompatibleBitmap(int hdc, int nWidth, int nHeight)"
		},
		"public static final native boolean BitBlt(int hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, int hdcSrc, int nXSrc, int nYSrc, int dwRop)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean BitBlt(int hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, int hdcSrc, int nXSrc, int nYSrc, int dwRop)"
		},
		"public static final void MoveMemory(int Destination, NMTTDISPINFO Source, int Length)":{
			"methodBody":"{\n    if (IsUnicode) {\n        MoveMemory(Destination, (NMTTDISPINFOW) Source, Length);\n    } else {\n        MoveMemory(Destination, (NMTTDISPINFOA) Source, Length);\n    }\n}",
			"comments":"",
			"methodName":"public static final void MoveMemory(int Destination, NMTTDISPINFO Source, int Length)"
		},
		"public static final native int GetActiveWindow()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetActiveWindow()"
		},
		"public static final native int RegOpenKeyExA(int hKey, byte[] lpSubKey, int ulOptions, int samDesired, int[] phkResult)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegOpenKeyExA(int hKey, byte[] lpSubKey, int ulOptions, int samDesired, int[] phkResult)"
		},
		"public static final native int OffsetRgn(int hrgn, int nXOffset, int nYOffset)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int OffsetRgn(int hrgn, int nXOffset, int nYOffset)"
		},
		"public static final native boolean DestroyWindow(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DestroyWindow(int hWnd)"
		},
		"public static final native int EndPage(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int EndPage(int hdc)"
		},
		"public static final native boolean DestroyCaret()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DestroyCaret()"
		},
		"public static final native int SetParent(int hWndChild, int hWndNewParent)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetParent(int hWndChild, int hWndNewParent)"
		},
		"public static final native int GetObjectA(int hgdiobj, int cbBuffer, int lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectA(int hgdiobj, int cbBuffer, int lpvObject)"
		},
		"public static final native void MoveMemory(SCRIPT_PROPERTIES Destination, int SourcePtr, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(SCRIPT_PROPERTIES Destination, int SourcePtr, int Length)"
		},
		"public static final native int wcslen(int string)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int wcslen(int string)"
		},
		"public static final int GetObject(int hgdiobj, int cbBuffer, DIBSECTION lpvObject)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetObjectW(hgdiobj, cbBuffer, lpvObject);\n    return GetObjectA(hgdiobj, cbBuffer, lpvObject);\n}",
			"comments":"",
			"methodName":"public static final int GetObject(int hgdiobj, int cbBuffer, DIBSECTION lpvObject)"
		},
		"public static final native int CopyImage(int hImage, int uType, int cxDesired, int cyDesired, int fuFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CopyImage(int hImage, int uType, int cxDesired, int cyDesired, int fuFlags)"
		},
		"public static final native int CreateDCA(byte[] lpszDriver, byte[] lpszDevice, int lpszOutput, int lpInitData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateDCA(byte[] lpszDriver, byte[] lpszDevice, int lpszOutput, int lpInitData)"
		},
		"public static final int GlobalAddAtom(TCHAR lpString)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return GlobalAddAtomW(lpString1);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return GlobalAddAtomA(lpString1);\n}",
			"comments":"",
			"methodName":"public static final int GlobalAddAtom(TCHAR lpString)"
		},
		"public static final native short CharUpperW(short ch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short CharUpperW(short ch)"
		},
		"public static final native boolean GetMessageA(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMessageA(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax)"
		},
		"public static final boolean ChooseColor(CHOOSECOLOR lpcc)":{
			"methodBody":"{\n    if (IsUnicode)\n        return ChooseColorW(lpcc);\n    return ChooseColorA(lpcc);\n}",
			"comments":"",
			"methodName":"public static final boolean ChooseColor(CHOOSECOLOR lpcc)"
		},
		"public static final native boolean ImmReleaseContext(int hWnd, int hIMC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmReleaseContext(int hWnd, int hIMC)"
		},
		"public static final native int ScriptTextOut(int hdc, int psc, int x, int y, int fuOptions, RECT lprc, SCRIPT_ANALYSIS psa, int pwcReserved, int iReserved, int pwGlyphs, int cGlyphs, int piAdvance, int[] piJustify, int pGoffset)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptTextOut(int hdc, int psc, int x, int y, int fuOptions, RECT lprc, SCRIPT_ANALYSIS psa, int pwcReserved, int iReserved, int pwGlyphs, int cGlyphs, int piAdvance, int[] piJustify, int pGoffset)"
		},
		"public static final native boolean EnumSystemLanguageGroupsA(int pLangGroupEnumProc, int dwFlags, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnumSystemLanguageGroupsA(int pLangGroupEnumProc, int dwFlags, int lParam)"
		},
		"public static final native int GetProfileStringW(char[] lpAppName, char[] lpKeyName, char[] lpDefault, char[] lpReturnedString, int nSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetProfileStringW(char[] lpAppName, char[] lpKeyName, char[] lpDefault, char[] lpReturnedString, int nSize)"
		},
		"public static final native int DefMDIChildProcW(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DefMDIChildProcW(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native void MoveMemory(int Destination, WINDOWPOS Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, WINDOWPOS Source, int Length)"
		},
		"public static final native boolean SetMenuItemInfoW(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetMenuItemInfoW(int hMenu, int uItem, boolean fByPosition, MENUITEMINFO lpmii)"
		},
		"public static final native int GetCurrentProcessId()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetCurrentProcessId()"
		},
		"public static final native boolean ImmGetCompositionFontA(int hIMC, LOGFONTA lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmGetCompositionFontA(int hIMC, LOGFONTA lplf)"
		},
		"public static final native int CreateSolidBrush(int colorRef)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateSolidBrush(int colorRef)"
		},
		"public static final native boolean DrawIconEx(int hdc, int xLeft, int yTop, int hIcon, int cxWidth, int cyWidth, int istepIfAniCur, int hbrFlickerFreeDraw, int diFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DrawIconEx(int hdc, int xLeft, int yTop, int hIcon, int cxWidth, int cyWidth, int istepIfAniCur, int hbrFlickerFreeDraw, int diFlags)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TCHAR lParam)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lParam1 = lParam == null ? null : lParam.chars;\n        return SendMessageW(hWnd, Msg, wParam, lParam1);\n    }\n    byte[] lParam1 = lParam == null ? null : lParam.bytes;\n    return SendMessageA(hWnd, Msg, wParam, lParam1);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TCHAR lParam)"
		},
		"public static final native int GetDlgItem(int hDlg, int nIDDlgItem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDlgItem(int hDlg, int nIDDlgItem)"
		},
		"public static final native void MoveMemory(MINMAXINFO Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(MINMAXINFO Destination, int Source, int Length)"
		},
		"public static final native boolean InvalidateRgn(int hWnd, int hRgn, boolean bErase)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean InvalidateRgn(int hWnd, int hRgn, boolean bErase)"
		},
		"public static final native boolean DrawStateW(int hdc, int hbr, int lpOutputFunc, int lData, int wData, int x, int y, int cx, int cy, int fuFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DrawStateW(int hdc, int hbr, int lpOutputFunc, int lData, int wData, int x, int y, int cx, int cy, int fuFlags)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, HDITEM lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, HDITEM lParam)"
		},
		"public static final native boolean BringWindowToTop(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean BringWindowToTop(int hWnd)"
		},
		"public static final native boolean DrawEdge(int hdc, RECT qrc, int edge, int grfFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean DrawEdge(int hdc, RECT qrc, int edge, int grfFlags)"
		},
		"public static final native int GetForegroundWindow()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetForegroundWindow()"
		},
		"public static final boolean UnregisterClass(TCHAR lpClassName, int hInstance)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpClassName1 = lpClassName == null ? null : lpClassName.chars;\n        return UnregisterClassW(lpClassName1, hInstance);\n    }\n    byte[] lpClassName1 = lpClassName == null ? null : lpClassName.bytes;\n    return UnregisterClassA(lpClassName1, hInstance);\n}",
			"comments":"",
			"methodName":"public static final boolean UnregisterClass(TCHAR lpClassName, int hInstance)"
		},
		"public static final native void MoveMemory(char[] Destination, int SourcePtr, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(char[] Destination, int SourcePtr, int Length)"
		},
		"public static final native int ScriptFreeCache(int psc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptFreeCache(int psc)"
		},
		"public static final native void MoveMemory(byte[] Destination, ACCEL Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(byte[] Destination, ACCEL Source, int Length)"
		},
		"public static final native boolean SetPropA(int hWnd, int lpString, int hData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean SetPropA(int hWnd, int lpString, int hData)"
		},
		"public static final native boolean GetMessageW(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMessageW(MSG lpMsg, int hWnd, int wMsgFilterMin, int wMsgFilterMax)"
		},
		"public static final int ImmGetCompositionString(int hIMC, int dwIndex, TCHAR lpBuf, int dwBufLen)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpBuf1 = lpBuf == null ? null : lpBuf.chars;\n        return ImmGetCompositionStringW(hIMC, dwIndex, lpBuf1, dwBufLen);\n    }\n    byte[] lpBuf1 = lpBuf == null ? null : lpBuf.bytes;\n    return ImmGetCompositionStringA(hIMC, dwIndex, lpBuf1, dwBufLen);\n}",
			"comments":"",
			"methodName":"public static final int ImmGetCompositionString(int hIMC, int dwIndex, TCHAR lpBuf, int dwBufLen)"
		},
		"public static final native boolean StretchBlt(int hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, int hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean StretchBlt(int hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, int hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop)"
		},
		"public static final native boolean OffsetRect(RECT lprc, int dx, int dy)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean OffsetRect(RECT lprc, int dx, int dy)"
		},
		"public static final int GetObject(int hgdiobj, int cbBuffer, int lpvObject)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetObjectW(hgdiobj, cbBuffer, lpvObject);\n    return GetObjectA(hgdiobj, cbBuffer, lpvObject);\n}",
			"comments":"",
			"methodName":"public static final int GetObject(int hgdiobj, int cbBuffer, int lpvObject)"
		},
		"public static final native void MoveMemory(TEXTMETRICA Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(TEXTMETRICA Destination, int Source, int Length)"
		},
		"public static final void MoveMemory(TCHAR Destination, int Source, int Length)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] Destination1 = Destination == null ? null : Destination.chars;\n        MoveMemory(Destination1, Source, Length);\n    } else {\n        byte[] Destination1 = Destination == null ? null : Destination.bytes;\n        MoveMemory(Destination1, Source, Length);\n    }\n}",
			"comments":"",
			"methodName":"public static final void MoveMemory(TCHAR Destination, int Source, int Length)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TOOLINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TOOLINFO lParam)"
		},
		"public static final native int RegisterClipboardFormatA(byte[] lpszFormat)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegisterClipboardFormatA(byte[] lpszFormat)"
		},
		"public static final native int ToAscii(int uVirtKey, int uScanCode, byte[] lpKeyState, short[] lpChar, int uFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ToAscii(int uVirtKey, int uScanCode, byte[] lpKeyState, short[] lpChar, int uFlags)"
		},
		"public static final boolean SystemParametersInfo(int uiAction, int uiParam, NONCLIENTMETRICS pvParam, int fWinIni)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SystemParametersInfoW(uiAction, uiParam, (NONCLIENTMETRICSW) pvParam, fWinIni);\n    return SystemParametersInfoA(uiAction, uiParam, (NONCLIENTMETRICSA) pvParam, fWinIni);\n}",
			"comments":"",
			"methodName":"public static final boolean SystemParametersInfo(int uiAction, int uiParam, NONCLIENTMETRICS pvParam, int fWinIni)"
		},
		"public static final boolean DrawState(int hdc, int hbr, int lpOutputFunc, int lData, int wData, int x, int y, int cx, int cy, int fuFlags)":{
			"methodBody":"{\n    if (IsUnicode)\n        return DrawStateW(hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy, fuFlags);\n    return DrawStateA(hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy, fuFlags);\n}",
			"comments":"",
			"methodName":"public static final boolean DrawState(int hdc, int hbr, int lpOutputFunc, int lData, int wData, int x, int y, int cx, int cy, int fuFlags)"
		},
		"public static final native int LoadCursorA(int hInstance, int lpCursorName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadCursorA(int hInstance, int lpCursorName)"
		},
		"public static final native int GetSysColorBrush(int nIndex)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetSysColorBrush(int nIndex)"
		},
		"public static final native int ExtCreateRegion(float[] lpXform, int nCount, int[] lpRgnData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ExtCreateRegion(float[] lpXform, int nCount, int[] lpRgnData)"
		},
		"public static final int GetWindowText(int hWnd, TCHAR lpString, int nMaxCount)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return GetWindowTextW(hWnd, lpString1, nMaxCount);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return GetWindowTextA(hWnd, lpString1, nMaxCount);\n}",
			"comments":"",
			"methodName":"public static final int GetWindowText(int hWnd, TCHAR lpString, int nMaxCount)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, MARGINS lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, MARGINS lParam)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, short[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, short[] lParam)"
		},
		"public static final native int LocalFree(int hMem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LocalFree(int hMem)"
		},
		"public static final native int GetLayout(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetLayout(int hdc)"
		},
		"public static final native void MoveMemory(NMLVCUSTOMDRAW Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(NMLVCUSTOMDRAW Destination, int Source, int Length)"
		},
		"public static final native int SetTimer(int hWnd, int nIDEvent, int Elapse, int lpTimerFunc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetTimer(int hWnd, int nIDEvent, int Elapse, int lpTimerFunc)"
		},
		"public static final boolean ImmSetCompositionFont(int hIMC, LOGFONT lplf)":{
			"methodBody":"{\n    if (IsUnicode)\n        return ImmSetCompositionFontW(hIMC, (LOGFONTW) lplf);\n    return ImmSetCompositionFontA(hIMC, (LOGFONTA) lplf);\n}",
			"comments":"",
			"methodName":"public static final boolean ImmSetCompositionFont(int hIMC, LOGFONT lplf)"
		},
		"public static final native int CreateFontIndirectA(int lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateFontIndirectA(int lplf)"
		},
		"public static final native boolean ImageList_Replace(int himl, int i, int hbmImage, int hbmMask)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImageList_Replace(int himl, int i, int hbmImage, int hbmMask)"
		},
		"public static final native int LoadStringW(int hinst, int uID, char[] lpBuffer, int nBufferMax)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int LoadStringW(int hinst, int uID, char[] lpBuffer, int nBufferMax)"
		},
		"public static final native int SaveDC(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SaveDC(int hdc)"
		},
		"public static final native int CreatePolygonRgn(int[] lppt, int cPoints, int fnPolyFillMode)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreatePolygonRgn(int[] lppt, int cPoints, int fnPolyFillMode)"
		},
		"public static final native int GetCharacterPlacementA(int hdc, byte[] lpString, int nCount, int nMaxExtent, GCP_RESULTS lpResults, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetCharacterPlacementA(int hdc, byte[] lpString, int nCount, int nMaxExtent, GCP_RESULTS lpResults, int dwFlags)"
		},
		"public static final native boolean PostThreadMessageW(int idThread, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PostThreadMessageW(int idThread, int Msg, int wParam, int lParam)"
		},
		"public static final native int ExpandEnvironmentStringsW(char[] lpSrc, char[] lsDst, int nSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ExpandEnvironmentStringsW(char[] lpSrc, char[] lsDst, int nSize)"
		},
		"public static final native int GetDesktopWindow()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetDesktopWindow()"
		},
		"public static final native short CharLowerW(short ch)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short CharLowerW(short ch)"
		},
		"public static final native short PRIMARYLANGID(short lgid)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short PRIMARYLANGID(short lgid)"
		},
		"public static final native int SetDIBColorTable(int hdc, int uStartIndex, int cEntries, byte[] pColors)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SetDIBColorTable(int hdc, int uStartIndex, int cEntries, byte[] pColors)"
		},
		"public static final native int CreateIconIndirect(ICONINFO lplf)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CreateIconIndirect(ICONINFO lplf)"
		},
		"public static final native boolean GetClientRect(int hWnd, RECT lpRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetClientRect(int hWnd, RECT lpRect)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LITEM lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, LITEM lParam)"
		},
		"public static final native boolean ImageList_GetIconSize(int himl, int[] cx, int[] cy)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImageList_GetIconSize(int himl, int[] cx, int[] cy)"
		},
		"public static final native boolean GetMonitorInfoW(int hmonitor, MONITORINFO lpmi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetMonitorInfoW(int hmonitor, MONITORINFO lpmi)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, int[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, int[] lParam)"
		},
		"public static final native int GetWindowLongW(int hWnd, int nIndex)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetWindowLongW(int hWnd, int nIndex)"
		},
		"public static final int StartDoc(int hdc, DOCINFO lpdi)":{
			"methodBody":"{\n    if (IsUnicode)\n        return StartDocW(hdc, lpdi);\n    return StartDocA(hdc, lpdi);\n}",
			"comments":"",
			"methodName":"public static final int StartDoc(int hdc, DOCINFO lpdi)"
		},
		"public static final native int GetObjectW(int hgdiobj, int cbBuffer, BITMAP lpvObject)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetObjectW(int hgdiobj, int cbBuffer, BITMAP lpvObject)"
		},
		"public static final native boolean ChooseFontA(CHOOSEFONT chooseFont)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ChooseFontA(CHOOSEFONT chooseFont)"
		},
		"public static final native int CommDlgExtendedError()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CommDlgExtendedError()"
		},
		"public static final native int MapVirtualKeyA(int uCode, int uMapType)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MapVirtualKeyA(int uCode, int uMapType)"
		},
		"public static final native void MoveMemory(int Destination, LOGFONTW Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, LOGFONTW Source, int Length)"
		},
		"public static final native int GetKeyboardLayoutList(int nBuff, int[] lpList)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetKeyboardLayoutList(int nBuff, int[] lpList)"
		},
		"public static final native boolean ChooseFontW(CHOOSEFONT chooseFont)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ChooseFontW(CHOOSEFONT chooseFont)"
		},
		"public static final native boolean EnableWindow(int hWnd, boolean bEnable)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnableWindow(int hWnd, boolean bEnable)"
		},
		"public static final native int GetPolyFillMode(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetPolyFillMode(int hdc)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TVHITTESTINFO lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TVHITTESTINFO lParam)"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, short[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, short[] lParam)"
		},
		"public static final native int ImmGetCompositionStringA(int hIMC, int dwIndex, byte[] lpBuf, int dwBufLen)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImmGetCompositionStringA(int hIMC, int dwIndex, byte[] lpBuf, int dwBufLen)"
		},
		"public static final native int GetClipBox(int hdc, RECT lprc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetClipBox(int hdc, RECT lprc)"
		},
		"public static final native boolean ScreenToClient(int hWnd, POINT lpPoint)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ScreenToClient(int hWnd, POINT lpPoint)"
		},
		"public static final native int ImmGetContext(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImmGetContext(int hWnd)"
		},
		"public static final native void MoveMemory(MEASUREITEMSTRUCT Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(MEASUREITEMSTRUCT Destination, int Source, int Length)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TVINSERTSTRUCT lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, TVINSERTSTRUCT lParam)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native int FindWindowW(char[] lpClassName, char[] lpWindowName)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int FindWindowW(char[] lpClassName, char[] lpWindowName)"
		},
		"public static final native boolean InvalidateRect(int hWnd, RECT lpRect, boolean bErase)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean InvalidateRect(int hWnd, RECT lpRect, boolean bErase)"
		},
		"public static final native int GetLibraryHandle()":{
			"methodBody":"",
			"comments":"/* returns the instance handle to the swt library */\n",
			"methodName":"public static final native int GetLibraryHandle()"
		},
		"public static final native void MoveMemory(WINDOWPOS Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(WINDOWPOS Destination, int Source, int Length)"
		},
		"public static final native void DragFinish(int hDrop)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void DragFinish(int hDrop)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, TBBUTTON lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, TBBUTTON lParam)"
		},
		"public static final native boolean TranslateMDISysAccel(int hWndClient, MSG lpMsg)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean TranslateMDISysAccel(int hWndClient, MSG lpMsg)"
		},
		"public static final native boolean MessageBeep(int uType)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean MessageBeep(int uType)"
		},
		"public static final native int SHBrowseForFolderW(BROWSEINFO lpbi)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SHBrowseForFolderW(BROWSEINFO lpbi)"
		},
		"public static final native int DefWindowProcA(int hWnd, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DefWindowProcA(int hWnd, int Msg, int wParam, int lParam)"
		},
		"public static final native int ImmGetDefaultIMEWnd(int hWnd)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImmGetDefaultIMEWnd(int hWnd)"
		},
		"public static final native int RemovePropA(int hWnd, int lpString)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RemovePropA(int hWnd, int lpString)"
		},
		"public static final native int GetProfileStringA(byte[] lpAppName, byte[] lpKeyName, byte[] lpDefault, byte[] lpReturnedString, int nSize)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetProfileStringA(byte[] lpAppName, byte[] lpKeyName, byte[] lpDefault, byte[] lpReturnedString, int nSize)"
		},
		"public static final native void MoveMemory(UDACCEL Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(UDACCEL Destination, int Source, int Length)"
		},
		"public static final native boolean PatBlt(int hdc, int x1, int x2, int w, int h, int rop)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PatBlt(int hdc, int x1, int x2, int w, int h, int rop)"
		},
		"public static final native boolean EnumSystemLocalesW(int lpLocaleEnumProc, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean EnumSystemLocalesW(int lpLocaleEnumProc, int dwFlags)"
		},
		"public static final native void MoveMemory(double[] Destination, int SourcePtr, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(double[] Destination, int SourcePtr, int Length)"
		},
		"public static final native int GetCursor()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetCursor()"
		},
		"public static final int RegisterWindowMessage(TCHAR lpString)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return RegisterWindowMessageW(lpString1);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return RegisterWindowMessageA(lpString1);\n}",
			"comments":"",
			"methodName":"public static final int RegisterWindowMessage(TCHAR lpString)"
		},
		"public static final native boolean CommandBar_InsertMenubarEx(int hwndCB, int hInst, int pszMenu, int iButton)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean CommandBar_InsertMenubarEx(int hwndCB, int hInst, int pszMenu, int iButton)"
		},
		"public static final native int GetPaletteEntries(int hPalette, int iStartIndex, int nEntries, byte[] logPalette)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GetPaletteEntries(int hPalette, int iStartIndex, int nEntries, byte[] logPalette)"
		},
		"public static final native int RegisterClassW(WNDCLASS lpWndClass)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegisterClassW(WNDCLASS lpWndClass)"
		},
		"public static final native int DrawTextW(int hDC, char[] lpString, int nCount, RECT lpRect, int uFormat)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DrawTextW(int hDC, char[] lpString, int nCount, RECT lpRect, int uFormat)"
		},
		"public static final native boolean Rectangle(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean Rectangle(int hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)"
		},
		"public static final native int CallNextHookEx(int hhk, int nCode, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int CallNextHookEx(int hhk, int nCode, int wParam, int lParam)"
		},
		"public static final native boolean GetWorldTransform(int hdc, float[] lpXform)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetWorldTransform(int hdc, float[] lpXform)"
		},
		"public static final native boolean ImmGetConversionStatus(int hIMC, int[] lpfdwConversion, int[] lpfdwSentence)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean ImmGetConversionStatus(int hIMC, int[] lpfdwConversion, int[] lpfdwSentence)"
		},
		"public static final native int RegQueryValueExW(int hKey, char[] lpValueName, int lpReserved, int[] lpType, int[] lpData, int[] lpcbData)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int RegQueryValueExW(int hKey, char[] lpValueName, int lpReserved, int[] lpType, int[] lpData, int[] lpcbData)"
		},
		"public static final native boolean GetSaveFileNameA(OPENFILENAME lpofn)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean GetSaveFileNameA(OPENFILENAME lpofn)"
		},
		"public static final native int GlobalFree(int hMem)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int GlobalFree(int hMem)"
		},
		"public static final int GetWindowTextLength(int hWnd)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetWindowTextLengthW(hWnd);\n    return GetWindowTextLengthA(hWnd);\n}",
			"comments":"",
			"methodName":"public static final int GetWindowTextLength(int hWnd)"
		},
		"public static final native int ImmAssociateContext(int hWnd, int hIMC)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ImmAssociateContext(int hWnd, int hIMC)"
		},
		"public static final int SendMessage(int hWnd, int Msg, int wParam, LVITEM lParam)":{
			"methodBody":"{\n    if (IsUnicode)\n        return SendMessageW(hWnd, Msg, wParam, lParam);\n    return SendMessageA(hWnd, Msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"public static final int SendMessage(int hWnd, int Msg, int wParam, LVITEM lParam)"
		},
		"public static final native boolean PostThreadMessageA(int idThread, int Msg, int wParam, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean PostThreadMessageA(int idThread, int Msg, int wParam, int lParam)"
		},
		"public static final native void MoveMemory(HDITEM Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(HDITEM Destination, int Source, int Length)"
		},
		"public static final native int MsgWaitForMultipleObjectsEx(int nCount, int pHandles, int dwMilliseconds, int dwWakeMask, int dwFlags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int MsgWaitForMultipleObjectsEx(int nCount, int pHandles, int dwMilliseconds, int dwWakeMask, int dwFlags)"
		},
		"public static final native int ActivateKeyboardLayout(int hkl, int Flags)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ActivateKeyboardLayout(int hkl, int Flags)"
		},
		"public static final native boolean StrokePath(int hdc)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native boolean StrokePath(int hdc)"
		},
		"public static final native int DrawThemeBackground(int hTheme, int hdc, int iPartId, int iStateId, RECT pRect, RECT pClipRect)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int DrawThemeBackground(int hTheme, int hdc, int iPartId, int iStateId, RECT pRect, RECT pClipRect)"
		},
		"public static final boolean GetTextMetrics(int hdc, TEXTMETRIC lptm)":{
			"methodBody":"{\n    if (IsUnicode)\n        return GetTextMetricsW(hdc, (TEXTMETRICW) lptm);\n    return GetTextMetricsA(hdc, (TEXTMETRICA) lptm);\n}",
			"comments":"",
			"methodName":"public static final boolean GetTextMetrics(int hdc, TEXTMETRIC lptm)"
		},
		"public static final native void MoveMemory(int Destination, char[] Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(int Destination, char[] Source, int Length)"
		},
		"public static final native int ScriptGetFontProperties(int hdc, int psc, SCRIPT_FONTPROPERTIES sfp)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int ScriptGetFontProperties(int hdc, int psc, SCRIPT_FONTPROPERTIES sfp)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, MARGINS lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, MARGINS lParam)"
		},
		"public static final native void MoveMemory(POINT Destination, int Source, int Length)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native void MoveMemory(POINT Destination, int Source, int Length)"
		},
		"public static final native int SendMessageA(int hWnd, int Msg, int wParam, byte[] lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageA(int hWnd, int Msg, int wParam, byte[] lParam)"
		},
		"public static final int GetKeyNameText(int lParam, TCHAR lpString, int nSize)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpString1 = lpString == null ? null : lpString.chars;\n        return GetKeyNameTextW(lParam, lpString1, nSize);\n    }\n    byte[] lpString1 = lpString == null ? null : lpString.bytes;\n    return GetKeyNameTextA(lParam, lpString1, nSize);\n}",
			"comments":"",
			"methodName":"public static final int GetKeyNameText(int lParam, TCHAR lpString, int nSize)"
		},
		"public static final int CreateWindowEx(int dwExStyle, TCHAR lpClassName, TCHAR lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, int hWndParent, int hMenu, int hInstance, CREATESTRUCT lpParam)":{
			"methodBody":"{\n    if (IsUnicode) {\n        char[] lpClassName1 = lpClassName == null ? null : lpClassName.chars;\n        char[] lpWindowName1 = lpWindowName == null ? null : lpWindowName.chars;\n        return CreateWindowExW(dwExStyle, lpClassName1, lpWindowName1, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);\n    }\n    byte[] lpClassName1 = lpClassName == null ? null : lpClassName.bytes;\n    byte[] lpWindowName1 = lpWindowName == null ? null : lpWindowName.bytes;\n    return CreateWindowExA(dwExStyle, lpClassName1, lpWindowName1, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);\n}",
			"comments":"",
			"methodName":"public static final int CreateWindowEx(int dwExStyle, TCHAR lpClassName, TCHAR lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, int hWndParent, int hMenu, int hInstance, CREATESTRUCT lpParam)"
		},
		"public static final native short GetSystemDefaultUILanguage()":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native short GetSystemDefaultUILanguage()"
		},
		"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TBBUTTON lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int SendMessageW(int hWnd, int Msg, int wParam, TBBUTTON lParam)"
		},
		"public static final native int EnumFontFamiliesW(int hdc, char[] lpszFamily, int lpEnumFontFamProc, int lParam)":{
			"methodBody":"",
			"comments":"",
			"methodName":"public static final native int EnumFontFamiliesW(int hdc, char[] lpszFamily, int lpEnumFontFamProc, int lParam)"
		}
	},
	"ClassORInterfaceName":[
		"OS"
	]
}
