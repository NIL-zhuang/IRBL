{
	"variables":[
		"control",
		"controlListener",
		"transferAgents",
		"iDropSource",
		"iDataObject",
		"refCount",
		"dataEffect",
		"DRAGSOURCEID",
		"CFSTR_PERFORMEDDROPEFFECT",
		"typedListener",
		"name",
		"validName",
		"event",
		"pdwEffect",
		"operations",
		"result",
		"operation",
		"allowedDataTypes",
		"i",
		"formats",
		"newAllowedDataTypes",
		"enumFORMATETC",
		"formats",
		"i",
		"transferData",
		"event",
		"transfer",
		"i",
		"mask",
		"osOperation",
		"operation",
		"transferData",
		"i",
		"guid",
		"formatetc",
		"stgmedium",
		"ptrEffect",
		"effect",
		"DND",
		"Transfer",
		"control",
		"style",
		"control",
		"control",
		"DRAGSOURCEID",
		"DND",
		"DND",
		"control",
		"DRAGSOURCEID",
		"controlListener",
		"event",
		"SWT",
		"DragSource",
		"DragSource",
		"event",
		"SWT",
		"DragSource",
		"DragSource",
		"control",
		"SWT",
		"controlListener",
		"control",
		"SWT",
		"controlListener",
		"SWT",
		"DragSource",
		"style",
		"SWT",
		"DND",
		"style",
		"listener",
		"DND",
		"SWT",
		"listener",
		"DND",
		"typedListener",
		"DND",
		"typedListener",
		"DND",
		"typedListener",
		"refCount",
		"refCount",
		"iDropSource",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iDataObject",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"validName",
		"name",
		"DND",
		"SWT",
		"iDropSource",
		"iDropSource",
		"iDropSource",
		"iDataObject",
		"iDataObject",
		"iDataObject",
		"event",
		"event",
		"OS",
		"event",
		"DND",
		"event",
		"event",
		"transferAgents",
		"transferAgents",
		"COM",
		"iDataObject",
		"iDropSource",
		"operations",
		"pdwEffect",
		"pdwEffect",
		"dataEffect",
		"DND",
		"operation",
		"operation",
		"DND",
		"operation",
		"DND",
		"DND",
		"DND",
		"dataEffect",
		"DND",
		"operation",
		"dataEffect",
		"event",
		"event",
		"event",
		"OS",
		"event",
		"result",
		"COM",
		"event",
		"operation",
		"DND",
		"event",
		"dataEffect",
		"DND",
		"dwDirection",
		"COM",
		"COM",
		"i",
		"transferAgents",
		"i",
		"transferAgents",
		"i",
		"allowedDataTypes",
		"formats",
		"System",
		"allowedDataTypes",
		"newAllowedDataTypes",
		"allowedDataTypes",
		"System",
		"formats",
		"newAllowedDataTypes",
		"allowedDataTypes",
		"formats",
		"allowedDataTypes",
		"newAllowedDataTypes",
		"enumFORMATETC",
		"allowedDataTypes",
		"i",
		"formats",
		"i",
		"formats",
		"i",
		"allowedDataTypes",
		"i",
		"enumFORMATETC",
		"formats",
		"OS",
		"ppenumFormatetc",
		"enumFORMATETC",
		"COM",
		"control",
		"pFormatetc",
		"pmedium",
		"COM",
		"pFormatetc",
		"COM",
		"COM",
		"transferData",
		"COM",
		"transferData",
		"pFormatetc",
		"FORMATETC",
		"transferData",
		"transferData",
		"transferData",
		"transferData",
		"COM",
		"event",
		"event",
		"OS",
		"event",
		"transferData",
		"DND",
		"event",
		"i",
		"transferAgents",
		"i",
		"transferAgents",
		"i",
		"transferData",
		"transfer",
		"transferAgents",
		"i",
		"transfer",
		"COM",
		"transfer",
		"event",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"COM",
		"pmedium",
		"transferData",
		"STGMEDIUM",
		"transferData",
		"transferAgents",
		"COM",
		"fEscapePressed",
		"COM",
		"OS",
		"OS",
		"OS",
		"OS",
		"OS",
		"grfKeyState",
		"mask",
		"COM",
		"COM",
		"control",
		"controlListener",
		"control",
		"SWT",
		"controlListener",
		"control",
		"SWT",
		"controlListener",
		"controlListener",
		"control",
		"DRAGSOURCEID",
		"control",
		"transferAgents",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"osOperation",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"operation",
		"transferAgents",
		"COM",
		"transferData",
		"COM",
		"transferData",
		"pFormatetc",
		"FORMATETC",
		"transferData",
		"transferData",
		"i",
		"transferAgents",
		"i",
		"transferAgents",
		"i",
		"transferData",
		"COM",
		"COM",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"guid",
		"COM",
		"OS",
		"ppvObject",
		"iDropSource",
		"COM",
		"COM",
		"guid",
		"COM",
		"OS",
		"ppvObject",
		"iDataObject",
		"COM",
		"OS",
		"ppvObject",
		"COM",
		"refCount",
		"refCount",
		"COM",
		"refCount",
		"listener",
		"DND",
		"SWT",
		"DND",
		"listener",
		"DND",
		"listener",
		"DND",
		"listener",
		"pFormatetc",
		"pmedium",
		"COM",
		"COM",
		"formatetc",
		"pFormatetc",
		"FORMATETC",
		"formatetc",
		"CFSTR_PERFORMEDDROPEFFECT",
		"formatetc",
		"COM",
		"COM",
		"stgmedium",
		"pmedium",
		"STGMEDIUM",
		"OS",
		"ptrEffect",
		"stgmedium",
		"OS",
		"effect",
		"ptrEffect",
		"dataEffect",
		"effect",
		"fRelease",
		"COM",
		"pmedium",
		"COM",
		"transferAgents",
		"DROP_NONE",
		"control",
		"ERROR_CANNOT_INIT_DRAG",
		"type",
		"Dispose",
		"type",
		"DragDetect",
		"Dispose",
		"DragDetect",
		"Dispose",
		"NONE",
		"DROP_MOVE",
		"ERROR_NULL_ARGUMENT",
		"DragStart",
		"DragSetData",
		"DragEnd",
		"ERROR_INVALID_SUBCLASS",
		"widget",
		"time",
		"doit",
		"DragStart",
		"doit",
		"length",
		"DROP_MOVE",
		"DROP_NONE",
		"DROP_COPY",
		"DROP_TARGET_MOVE",
		"DROP_MOVE",
		"DROP_NONE",
		"widget",
		"time",
		"doit",
		"DRAGDROP_S_DROP",
		"detail",
		"DragEnd",
		"DROP_NONE",
		"DATADIR_SET",
		"E_NOTIMPL",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"formatetc",
		"S_OK",
		"E_INVALIDARG",
		"S_OK",
		"DV_E_FORMATETC",
		"formatetc",
		"formatetc",
		"sizeof",
		"type",
		"cfFormat",
		"formatetc",
		"stgmedium",
		"result",
		"E_FAIL",
		"widget",
		"time",
		"dataType",
		"DragSetData",
		"length",
		"DV_E_FORMATETC",
		"data",
		"result",
		"S_OK",
		"result",
		"stgmedium",
		"sizeof",
		"result",
		"DRAGDROP_S_USEDEFAULTCURSORS",
		"DRAGDROP_S_CANCEL",
		"MK_LBUTTON",
		"MK_MBUTTON",
		"MK_RBUTTON",
		"MK_XBUTTON1",
		"MK_XBUTTON2",
		"DRAGDROP_S_DROP",
		"S_OK",
		"Dispose",
		"DragDetect",
		"DROP_COPY",
		"DROPEFFECT_COPY",
		"DROP_LINK",
		"DROPEFFECT_LINK",
		"DROP_MOVE",
		"DROPEFFECT_MOVE",
		"DROPEFFECT_COPY",
		"DROP_COPY",
		"DROPEFFECT_LINK",
		"DROP_LINK",
		"DROPEFFECT_MOVE",
		"DROP_MOVE",
		"E_FAIL",
		"formatetc",
		"formatetc",
		"sizeof",
		"type",
		"cfFormat",
		"formatetc",
		"length",
		"S_OK",
		"DV_E_FORMATETC",
		"E_INVALIDARG",
		"sizeof",
		"IIDIUnknown",
		"IIDIDropSource",
		"S_OK",
		"IIDIDataObject",
		"S_OK",
		"E_NOINTERFACE",
		"ERROR_NULL_ARGUMENT",
		"DragStart",
		"DragSetData",
		"DragEnd",
		"E_INVALIDARG",
		"sizeof",
		"cfFormat",
		"tymed",
		"TYMED_HGLOBAL",
		"sizeof",
		"unionField",
		"S_OK",
		"transferAgents",
		"control",
		"style",
		"event",
		"e",
		"style",
		"listener",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"dwDirection",
		"ppenumFormatetc",
		"pFormatetc",
		"pmedium",
		"dwEffect",
		"fEscapePressed",
		"grfKeyState",
		"operation",
		"osOperation",
		"pFormatetc",
		"riid",
		"ppvObject",
		"listener",
		"pFormatetc",
		"pmedium",
		"fRelease",
		"transferAgents"
	],
	"extendORImplementFiles":[
		"Widget"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"handleEvent",
		"handleEvent",
		"checkStyle",
		"addDragListener",
		"AddRef",
		"createCOMInterfaces",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"method0",
		"method1",
		"method2",
		"method3",
		"method5",
		"method7",
		"method8",
		"checkSubclass",
		"disposeCOMInterfaces",
		"drag",
		"EnumFormatEtc",
		"getControl",
		"GetData",
		"getTransfer",
		"GiveFeedback",
		"QueryContinueDrag",
		"onDispose",
		"opToOs",
		"osToOp",
		"QueryGetData",
		"QueryInterface",
		"Release",
		"removeDragListener",
		"SetData",
		"setTransfer",
		"registerType",
		"checkStyle",
		"getData",
		"error",
		"setData",
		"createCOMInterfaces",
		"AddRef",
		"isDisposed",
		"dispose",
		"isDisposed",
		"drag",
		"addListener",
		"addListener",
		"addListener",
		"onDispose",
		"error",
		"addListener",
		"addListener",
		"addListener",
		"QueryInterface",
		"AddRef",
		"Release",
		"QueryContinueDrag",
		"GiveFeedback",
		"QueryInterface",
		"AddRef",
		"Release",
		"GetData",
		"QueryGetData",
		"SetData",
		"EnumFormatEtc",
		"getName",
		"getClass",
		"getName",
		"equals",
		"error",
		"dispose",
		"dispose",
		"GetMessageTime",
		"notifyListeners",
		"opToOs",
		"getStyle",
		"DoDragDrop",
		"getAddress",
		"getAddress",
		"osToOp",
		"GetMessageTime",
		"notifyListeners",
		"getSupportedTypes",
		"arraycopy",
		"arraycopy",
		"AddRef",
		"setFormats",
		"MoveMemory",
		"getAddress",
		"QueryGetData",
		"MoveMemory",
		"GetMessageTime",
		"notifyListeners",
		"isSupportedType",
		"javaToNative",
		"MoveMemory",
		"Release",
		"removeListener",
		"removeListener",
		"setData",
		"MoveMemory",
		"isSupportedType",
		"MoveMemory",
		"IsEqualGUID",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"disposeCOMInterfaces",
		"CoFreeUnusedLibraries",
		"error",
		"removeListener",
		"removeListener",
		"removeListener",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"osToOp",
		"ReleaseStgMedium",
		"Listener",
		"Listener",
		"DNDListener",
		"COMObject",
		"COMObject",
		"DNDEvent",
		"DNDEvent",
		"OleEnumFORMATETC",
		"TransferData",
		"FORMATETC",
		"STGMEDIUM",
		"DNDEvent",
		"TransferData",
		"FORMATETC",
		"GUID",
		"FORMATETC",
		"STGMEDIUM"
	],
	"methodsBody":{
		"private int EnumFormatEtc(int dwDirection, int ppenumFormatetc)":{
			"methodBody":"{\n    \n    if (dwDirection == COM.DATADIR_SET)\n        return COM.E_NOTIMPL;\n    \n    TransferData[] allowedDataTypes = new TransferData[0];\n    for (int i = 0; i < transferAgents.length; i++) {\n        TransferData[] formats = transferAgents[i].getSupportedTypes();\n        TransferData[] newAllowedDataTypes = new TransferData[allowedDataTypes.length + formats.length];\n        System.arraycopy(allowedDataTypes, 0, newAllowedDataTypes, 0, allowedDataTypes.length);\n        System.arraycopy(formats, 0, newAllowedDataTypes, allowedDataTypes.length, formats.length);\n        allowedDataTypes = newAllowedDataTypes;\n    }\n    OleEnumFORMATETC enumFORMATETC = new OleEnumFORMATETC();\n    enumFORMATETC.AddRef();\n    FORMATETC[] formats = new FORMATETC[allowedDataTypes.length];\n    for (int i = 0; i < formats.length; i++) {\n        formats[i] = allowedDataTypes[i].formatetc;\n    }\n    enumFORMATETC.setFormats(formats);\n    OS.MoveMemory(ppenumFormatetc, new int[] { enumFORMATETC.getAddress() }, 4);\n    return COM.S_OK;\n}",
			"comments":"// only allow getting of data - SetData is not currently supported\n// what types have been registered?\n",
			"methodName":"private int EnumFormatEtc(int dwDirection, int ppenumFormatetc)"
		},
		"public void addDragListener(DragSourceListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        DND.error(SWT.ERROR_NULL_ARGUMENT);\n    DNDListener typedListener = new DNDListener(listener);\n    addListener(DND.DragStart, typedListener);\n    addListener(DND.DragSetData, typedListener);\n    addListener(DND.DragEnd, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when a drag and drop operation is in progress, by sending\n* it one of the messages defined in the <code>DragSourceListener</code>\n* interface.\n*\n* <p><ul>\n* <li><code>dragStart</code> is called when the user has begun the actions required to drag the widget.\n* This event gives the application the chance to decide if a drag should be started.\n* <li><code>dragSetData</code> is called when the data is required from the drag source.\n* <li><code>dragFinished</code> is called when the drop has successfully completed (mouse up\n* over a valid target) or has been terminated (such as hitting the ESC key). Perform cleanup\n* such as removing data from the source side on a successful move operation.\n* </ul></p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see DragSourceListener\n* @see #removeDragListener\n* @see DragSourceEvent\n*/\n",
			"methodName":"public void addDragListener(DragSourceListener listener)"
		},
		"public int method4(int[] args)":{
			"methodBody":"{\n    return GiveFeedback(args[0]);\n}",
			"comments":"",
			"methodName":"public int method4(int[] args)"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    String name = getClass().getName();\n    String validName = DragSource.class.getName();\n    if (!validName.equals(name)) {\n        DND.error(SWT.ERROR_INVALID_SUBCLASS);\n    }\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"public int method5(int[] args)":{
			"methodBody":"{\n    return QueryGetData(args[0]);\n}",
			"comments":"// method4 GetDataHere - not implemented\n",
			"methodName":"public int method5(int[] args)"
		},
		"private int opToOs(int operation)":{
			"methodBody":"{\n    int osOperation = 0;\n    if ((operation & DND.DROP_COPY) != 0) {\n        osOperation |= COM.DROPEFFECT_COPY;\n    }\n    if ((operation & DND.DROP_LINK) != 0) {\n        osOperation |= COM.DROPEFFECT_LINK;\n    }\n    if ((operation & DND.DROP_MOVE) != 0) {\n        osOperation |= COM.DROPEFFECT_MOVE;\n    }\n    return osOperation;\n}",
			"comments":"",
			"methodName":"private int opToOs(int operation)"
		},
		"public void removeDragListener(DragSourceListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        DND.error(SWT.ERROR_NULL_ARGUMENT);\n    removeListener(DND.DragStart, listener);\n    removeListener(DND.DragSetData, listener);\n    removeListener(DND.DragEnd, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when a drag and drop operation is in progress.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see DragSourceListener\n* @see #addDragListener\n*/\n",
			"methodName":"public void removeDragListener(DragSourceListener listener)"
		},
		"private void createCOMInterfaces()":{
			"methodBody":"{\n    \n    iDropSource = new COMObject(new int[] { 2, 0, 0, 2, 1 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return QueryContinueDrag(args[0], args[1]);\n        }\n\n        public int method4(int[] args) {\n            return GiveFeedback(args[0]);\n        }\n    };\n    iDataObject = new COMObject(new int[] { 2, 0, 0, 2, 2, 1, 2, 3, 2, 4, 1, 1 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return GetData(args[0], args[1]);\n        }\n\n        \n        public int method5(int[] args) {\n            return QueryGetData(args[0]);\n        }\n\n        \n        public int method7(int[] args) {\n            return SetData(args[0], args[1], args[2]);\n        }\n\n        public int method8(int[] args) {\n            return EnumFormatEtc(args[0], args[1]);\n        }\n    };\n}",
			"comments":"// register each of the interfaces that this object implements\n// method4 GetDataHere - not implemented\n// method6 GetCanonicalFormatEtc - not implemented\n// method9 DAdvise - not implemented\n// method10 DUnadvise - not implemented\n// method11 EnumDAdvise - not implemented\n",
			"methodName":"private void createCOMInterfaces()"
		},
		"private int Release()":{
			"methodBody":"{\n    refCount--;\n    if (refCount == 0) {\n        disposeCOMInterfaces();\n        COM.CoFreeUnusedLibraries();\n    }\n    return refCount;\n}",
			"comments":"",
			"methodName":"private int Release()"
		},
		"public int method7(int[] args)":{
			"methodBody":"{\n    return SetData(args[0], args[1], args[2]);\n}",
			"comments":"// method6 GetCanonicalFormatEtc - not implemented\n",
			"methodName":"public int method7(int[] args)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    if (style == SWT.NONE)\n        return DND.DROP_MOVE;\n    return style;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"private int SetData(int pFormatetc, int pmedium, int fRelease)":{
			"methodBody":"{\n    if (pFormatetc == 0 || pmedium == 0)\n        return COM.E_INVALIDARG;\n    FORMATETC formatetc = new FORMATETC();\n    COM.MoveMemory(formatetc, pFormatetc, FORMATETC.sizeof);\n    if (formatetc.cfFormat == CFSTR_PERFORMEDDROPEFFECT && formatetc.tymed == COM.TYMED_HGLOBAL) {\n        STGMEDIUM stgmedium = new STGMEDIUM();\n        COM.MoveMemory(stgmedium, pmedium, STGMEDIUM.sizeof);\n        int[] ptrEffect = new int[1];\n        OS.MoveMemory(ptrEffect, stgmedium.unionField, 4);\n        int[] effect = new int[1];\n        OS.MoveMemory(effect, ptrEffect[0], 4);\n        dataEffect = osToOp(effect[0]);\n    }\n    if (fRelease == 1) {\n        COM.ReleaseStgMedium(pmedium);\n    }\n    return COM.S_OK;\n}",
			"comments":"",
			"methodName":"private int SetData(int pFormatetc, int pmedium, int fRelease)"
		},
		"private int QueryContinueDrag(int fEscapePressed, int grfKeyState)":{
			"methodBody":"{\n    if (fEscapePressed != 0)\n        return COM.DRAGDROP_S_CANCEL;\n    int mask = OS.MK_LBUTTON | OS.MK_MBUTTON | OS.MK_RBUTTON | OS.MK_XBUTTON1 | OS.MK_XBUTTON2;\n    if ((grfKeyState & mask) == 0)\n        return COM.DRAGDROP_S_DROP;\n    return COM.S_OK;\n}",
			"comments":"",
			"methodName":"private int QueryContinueDrag(int fEscapePressed, int grfKeyState)"
		},
		"public int method8(int[] args)":{
			"methodBody":"{\n    return EnumFormatEtc(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method8(int[] args)"
		},
		"public void handleEvent(Event event)":{
			"methodBody":"{\n    if (event.type == SWT.Dispose) {\n        if (!DragSource.this.isDisposed()) {\n            DragSource.this.dispose();\n        }\n    }\n    if (event.type == SWT.DragDetect) {\n        if (!DragSource.this.isDisposed()) {\n            DragSource.this.drag();\n        }\n    }\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event event)"
		},
		"public void setTransfer(Transfer[] transferAgents)":{
			"methodBody":"{\n    this.transferAgents = transferAgents;\n}",
			"comments":"/**\n* Specifies the list of data types that can be transferred by this DragSource.\n* The application must be able to provide data to match each of these types when\n* a successful drop has occurred.\n*\n* @param transferAgents a list of Transfer objects which define the types of data that can be\n* dragged from this source\n*/\n",
			"methodName":"public void setTransfer(Transfer[] transferAgents)"
		},
		"private int osToOp(int osOperation)":{
			"methodBody":"{\n    int operation = 0;\n    if ((osOperation & COM.DROPEFFECT_COPY) != 0) {\n        operation |= DND.DROP_COPY;\n    }\n    if ((osOperation & COM.DROPEFFECT_LINK) != 0) {\n        operation |= DND.DROP_LINK;\n    }\n    if ((osOperation & COM.DROPEFFECT_MOVE) != 0) {\n        operation |= DND.DROP_MOVE;\n    }\n    return operation;\n}",
			"comments":"",
			"methodName":"private int osToOp(int osOperation)"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    DragSource.this.onDispose();\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"public Control getControl()":{
			"methodBody":"{\n    return control;\n}",
			"comments":"/**\n* Returns the Control which is registered for this DragSource.  This is the control that the\n* user clicks in to initiate dragging.\n*\n* @return the Control which is registered for this DragSource\n*/\n",
			"methodName":"public Control getControl()"
		},
		"private int AddRef()":{
			"methodBody":"{\n    refCount++;\n    return refCount;\n}",
			"comments":"",
			"methodName":"private int AddRef()"
		},
		"private int QueryInterface(int riid, int ppvObject)":{
			"methodBody":"{\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_INVALIDARG;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIUnknown) || COM.IsEqualGUID(guid, COM.IIDIDropSource)) {\n        OS.MoveMemory(ppvObject, new int[] { iDropSource.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    if (COM.IsEqualGUID(guid, COM.IIDIDataObject)) {\n        OS.MoveMemory(ppvObject, new int[] { iDataObject.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    OS.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"private int QueryInterface(int riid, int ppvObject)"
		},
		"public Transfer[] getTransfer()":{
			"methodBody":"{\n    return transferAgents;\n}",
			"comments":"/**\n* Returns the list of data types that can be transferred by this DragSource.\n*\n* @return the list of data types that can be transferred by this DragSource\n*/\n",
			"methodName":"public Transfer[] getTransfer()"
		},
		"private int GiveFeedback(int dwEffect)":{
			"methodBody":"{\n    return COM.DRAGDROP_S_USEDEFAULTCURSORS;\n}",
			"comments":"",
			"methodName":"private int GiveFeedback(int dwEffect)"
		},
		"public int method3(int[] args)":{
			"methodBody":"{\n    return GetData(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method3(int[] args)"
		},
		"private int QueryGetData(int pFormatetc)":{
			"methodBody":"{\n    if (transferAgents == null)\n        return COM.E_FAIL;\n    TransferData transferData = new TransferData();\n    transferData.formatetc = new FORMATETC();\n    COM.MoveMemory(transferData.formatetc, pFormatetc, FORMATETC.sizeof);\n    transferData.type = transferData.formatetc.cfFormat;\n    \n    for (int i = 0; i < transferAgents.length; i++) {\n        if (transferAgents[i].isSupportedType(transferData))\n            return COM.S_OK;\n    }\n    return COM.DV_E_FORMATETC;\n}",
			"comments":"// is this type supported by the transfer agent?\n",
			"methodName":"private int QueryGetData(int pFormatetc)"
		},
		"public int method2(int[] args)":{
			"methodBody":"{\n    return Release();\n}",
			"comments":"",
			"methodName":"public int method2(int[] args)"
		},
		"private void disposeCOMInterfaces()":{
			"methodBody":"{\n    if (iDropSource != null)\n        iDropSource.dispose();\n    iDropSource = null;\n    if (iDataObject != null)\n        iDataObject.dispose();\n    iDataObject = null;\n}",
			"comments":"",
			"methodName":"private void disposeCOMInterfaces()"
		},
		"public int method1(int[] args)":{
			"methodBody":"{\n    return AddRef();\n}",
			"comments":"",
			"methodName":"public int method1(int[] args)"
		},
		"private void drag()":{
			"methodBody":"{\n    DNDEvent event = new DNDEvent();\n    event.widget = this;\n    event.time = OS.GetMessageTime();\n    event.doit = true;\n    notifyListeners(DND.DragStart, event);\n    if (!event.doit || transferAgents == null || transferAgents.length == 0)\n        return;\n    int[] pdwEffect = new int[1];\n    int operations = opToOs(getStyle());\n    int result = COM.DoDragDrop(iDataObject.getAddress(), iDropSource.getAddress(), operations, pdwEffect);\n    int operation = osToOp(pdwEffect[0]);\n    if (dataEffect == DND.DROP_MOVE) {\n        operation = (operation == DND.DROP_NONE || operation == DND.DROP_COPY) ? DND.DROP_TARGET_MOVE : DND.DROP_MOVE;\n    } else {\n        if (dataEffect != DND.DROP_NONE) {\n            operation = dataEffect;\n        }\n    }\n    event = new DNDEvent();\n    event.widget = this;\n    event.time = OS.GetMessageTime();\n    event.doit = (result == COM.DRAGDROP_S_DROP);\n    event.detail = operation;\n    notifyListeners(DND.DragEnd, event);\n    dataEffect = DND.DROP_NONE;\n}",
			"comments":"",
			"methodName":"private void drag()"
		},
		"private int GetData(int pFormatetc, int pmedium)":{
			"methodBody":"{\n    \n    if (pFormatetc == 0 || pmedium == 0)\n        return COM.E_INVALIDARG;\n    if (QueryGetData(pFormatetc) != COM.S_OK)\n        return COM.DV_E_FORMATETC;\n    TransferData transferData = new TransferData();\n    transferData.formatetc = new FORMATETC();\n    COM.MoveMemory(transferData.formatetc, pFormatetc, FORMATETC.sizeof);\n    transferData.type = transferData.formatetc.cfFormat;\n    transferData.stgmedium = new STGMEDIUM();\n    transferData.result = COM.E_FAIL;\n    DNDEvent event = new DNDEvent();\n    event.widget = this;\n    event.time = OS.GetMessageTime();\n    event.dataType = transferData;\n    notifyListeners(DND.DragSetData, event);\n    \n    Transfer transfer = null;\n    for (int i = 0; i < transferAgents.length; i++) {\n        if (transferAgents[i].isSupportedType(transferData)) {\n            transfer = transferAgents[i];\n            break;\n        }\n    }\n    if (transfer == null)\n        return COM.DV_E_FORMATETC;\n    transfer.javaToNative(event.data, transferData);\n    if (transferData.result != COM.S_OK)\n        return transferData.result;\n    COM.MoveMemory(pmedium, transferData.stgmedium, STGMEDIUM.sizeof);\n    return transferData.result;\n}",
			"comments":"/* Called by a data consumer to obtain data from a source data object.\nThe GetData method renders the data described in the specified FORMATETC\nstructure and transfers it through the specified STGMEDIUM structure.\nThe caller then assumes responsibility for releasing the STGMEDIUM structure.\n*/\n// get matching transfer agent to perform conversion\n",
			"methodName":"private int GetData(int pFormatetc, int pmedium)"
		},
		"private void onDispose()":{
			"methodBody":"{\n    if (control == null)\n        return;\n    this.Release();\n    if (controlListener != null) {\n        control.removeListener(SWT.Dispose, controlListener);\n        control.removeListener(SWT.DragDetect, controlListener);\n    }\n    controlListener = null;\n    control.setData(DRAGSOURCEID, null);\n    control = null;\n    transferAgents = null;\n}",
			"comments":"",
			"methodName":"private void onDispose()"
		},
		"public int method0(int[] args)":{
			"methodBody":"{\n    return QueryInterface(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method0(int[] args)"
		}
	},
	"ClassORInterfaceName":[
		"DragSource"
	]
}
