{
	"variables":[
		"allTables",
		"tableClass",
		"tableIdentifier",
		"dhMaxCodes",
		"dhMinCodes",
		"dhValPtrs",
		"dhValues",
		"ehCodes",
		"ehCodeLengths",
		"DCLuminanceTable",
		"DCChrominanceTable",
		"ACLuminanceTable",
		"ACChrominanceTable",
		"result",
		"result",
		"result",
		"result",
		"totalLength",
		"ofs",
		"bits",
		"huffTables",
		"huffTableCount",
		"tc",
		"tid",
		"count",
		"i",
		"bCount",
		"huffVals",
		"i",
		"huffCodeLengths",
		"huffCodeLengthsIndex",
		"i",
		"j",
		"newHuffCodeLengths",
		"newHuffCodeLengths",
		"huffCodes",
		"huffCodesIndex",
		"k",
		"code",
		"si",
		"p",
		"newHuffCodes",
		"newHuffCodes",
		"maxCodes",
		"minCodes",
		"valPtrs",
		"i",
		"bSize",
		"eHuffCodes",
		"eHuffSize",
		"i",
		"dhtTable",
		"reference",
		"byteStream",
		"allTables",
		"ACChrominanceTable",
		"result",
		"result",
		"ACLuminanceTable",
		"result",
		"result",
		"DCChrominanceTable",
		"result",
		"result",
		"DCLuminanceTable",
		"result",
		"result",
		"dhMaxCodes",
		"dhMinCodes",
		"dhValPtrs",
		"dhValues",
		"tableClass",
		"tableIdentifier",
		"totalLength",
		"reference",
		"ofs",
		"reference",
		"ofs",
		"ofs",
		"i",
		"bits",
		"i",
		"reference",
		"ofs",
		"i",
		"bits",
		"i",
		"bCount",
		"count",
		"bCount",
		"ofs",
		"totalLength",
		"count",
		"i",
		"count",
		"i",
		"huffVals",
		"i",
		"reference",
		"ofs",
		"i",
		"ofs",
		"count",
		"totalLength",
		"count",
		"i",
		"i",
		"j",
		"bits",
		"i",
		"j",
		"huffCodeLengthsIndex",
		"huffCodeLengths",
		"huffCodeLengths",
		"System",
		"huffCodeLengths",
		"newHuffCodeLengths",
		"huffCodeLengths",
		"huffCodeLengths",
		"newHuffCodeLengths",
		"huffCodeLengths",
		"huffCodeLengthsIndex",
		"i",
		"huffCodeLengthsIndex",
		"huffCodeLengthsIndex",
		"huffCodeLengths",
		"huffCodeLengthsIndex",
		"System",
		"huffCodeLengths",
		"newHuffCodeLengths",
		"huffCodeLengthsIndex",
		"huffCodeLengths",
		"newHuffCodeLengths",
		"huffCodeLengths",
		"p",
		"huffCodeLengthsIndex",
		"p",
		"huffCodeLengthsIndex",
		"huffCodeLengths",
		"p",
		"si",
		"huffCodesIndex",
		"huffCodes",
		"huffCodes",
		"System",
		"huffCodes",
		"newHuffCodes",
		"huffCodes",
		"huffCodes",
		"newHuffCodes",
		"huffCodes",
		"huffCodesIndex",
		"code",
		"huffCodesIndex",
		"code",
		"p",
		"code",
		"si",
		"huffCodesIndex",
		"huffCodes",
		"huffCodesIndex",
		"System",
		"huffCodes",
		"newHuffCodes",
		"huffCodesIndex",
		"huffCodes",
		"newHuffCodes",
		"k",
		"i",
		"i",
		"bits",
		"i",
		"bSize",
		"maxCodes",
		"i",
		"valPtrs",
		"i",
		"k",
		"minCodes",
		"i",
		"huffCodes",
		"k",
		"k",
		"bSize",
		"maxCodes",
		"i",
		"huffCodes",
		"k",
		"i",
		"huffCodesIndex",
		"i",
		"eHuffCodes",
		"huffVals",
		"i",
		"huffCodes",
		"i",
		"eHuffSize",
		"huffVals",
		"i",
		"huffCodeLengths",
		"i",
		"reference",
		"dhtTable",
		"tc",
		"dhtTable",
		"tid",
		"dhtTable",
		"huffVals",
		"dhtTable",
		"minCodes",
		"dhtTable",
		"maxCodes",
		"dhtTable",
		"valPtrs",
		"dhtTable",
		"eHuffCodes",
		"dhtTable",
		"eHuffSize",
		"huffTables",
		"huffTableCount",
		"dhtTable",
		"huffTableCount",
		"allTables",
		"huffTableCount",
		"System",
		"huffTables",
		"allTables",
		"huffTableCount",
		"JPEGFileFormat",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"tableClass",
		"tableIdentifier",
		"dhValues",
		"dhMinCodes",
		"dhMaxCodes",
		"dhValPtrs",
		"ehCodes",
		"ehCodeLengths",
		"DHT",
		"reference",
		"byteStream"
	],
	"extendORImplementFiles":[
		"JPEGVariableSizeSegment"
	],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[],
	"methods":[
		"getAllTables",
		"getDefaultACChrominanceTable",
		"getDefaultACLuminanceTable",
		"getDefaultDCChrominanceTable",
		"getDefaultDCLuminanceTable",
		"getDhMaxCodes",
		"getDhMinCodes",
		"getDhValPtrs",
		"getDhValues",
		"getTableClass",
		"getTableIdentifier",
		"initialize",
		"signature",
		"initialize",
		"initialize",
		"initialize",
		"initialize",
		"initialize",
		"getSegmentLength",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"JPEGHuffmanTable",
		"JPEGHuffmanTable",
		"JPEGHuffmanTable",
		"JPEGHuffmanTable",
		"JPEGHuffmanTable"
	],
	"methodsBody":{
		"public static JPEGHuffmanTable getDefaultACChrominanceTable()":{
			"methodBody":"{\n    JPEGHuffmanTable result = new JPEGHuffmanTable(ACChrominanceTable);\n    result.initialize();\n    return result;\n}",
			"comments":"",
			"methodName":"public static JPEGHuffmanTable getDefaultACChrominanceTable()"
		},
		"public int[] getDhMinCodes()":{
			"methodBody":"{\n    return dhMinCodes;\n}",
			"comments":"",
			"methodName":"public int[] getDhMinCodes()"
		},
		"public int[] getDhMaxCodes()":{
			"methodBody":"{\n    return dhMaxCodes;\n}",
			"comments":"",
			"methodName":"public int[] getDhMaxCodes()"
		},
		"public static JPEGHuffmanTable getDefaultDCChrominanceTable()":{
			"methodBody":"{\n    JPEGHuffmanTable result = new JPEGHuffmanTable(DCChrominanceTable);\n    result.initialize();\n    return result;\n}",
			"comments":"",
			"methodName":"public static JPEGHuffmanTable getDefaultDCChrominanceTable()"
		},
		"void initialize()":{
			"methodBody":"{\n    int totalLength = getSegmentLength() - 2;\n    int ofs = 4;\n    int[] bits = new int[16];\n    \n    JPEGHuffmanTable[] huffTables = new JPEGHuffmanTable[8];\n    int huffTableCount = 0;\n    while (totalLength > 0) {\n        \n        int tc = (reference[ofs] & 0xFF) / 16;\n        \n        int tid = (reference[ofs] & 0xFF) % 16;\n        ofs++;\n        \n        int count = 0;\n        for (int i = 0; i < bits.length; i++) {\n            int bCount = reference[ofs + i] & 0xFF;\n            bits[i] = bCount;\n            count += bCount;\n        }\n        ofs += 16;\n        totalLength -= 17;\n        \n        int[] huffVals = new int[count];\n        for (int i = 0; i < count; i++) {\n            huffVals[i] = reference[ofs + i] & 0xFF;\n        }\n        ofs += count;\n        totalLength -= count;\n        \n        \n        int[] huffCodeLengths = new int[50];\n        int huffCodeLengthsIndex = 0;\n        for (int i = 0; i < 16; i++) {\n            for (int j = 0; j < bits[i]; j++) {\n                if (huffCodeLengthsIndex >= huffCodeLengths.length) {\n                    int[] newHuffCodeLengths = new int[huffCodeLengths.length + 50];\n                    System.arraycopy(huffCodeLengths, 0, newHuffCodeLengths, 0, huffCodeLengths.length);\n                    huffCodeLengths = newHuffCodeLengths;\n                }\n                huffCodeLengths[huffCodeLengthsIndex] = i + 1;\n                huffCodeLengthsIndex++;\n            }\n        }\n        \n        if (huffCodeLengthsIndex < huffCodeLengths.length) {\n            int[] newHuffCodeLengths = new int[huffCodeLengthsIndex];\n            System.arraycopy(huffCodeLengths, 0, newHuffCodeLengths, 0, huffCodeLengthsIndex);\n            huffCodeLengths = newHuffCodeLengths;\n        }\n        \n        \n        int[] huffCodes = new int[50];\n        int huffCodesIndex = 0;\n        int k = 1;\n        int code = 0;\n        int si = huffCodeLengths[0];\n        int p = 0;\n        while (p < huffCodeLengthsIndex) {\n            while ((p < huffCodeLengthsIndex) && (huffCodeLengths[p] == si)) {\n                if (huffCodesIndex >= huffCodes.length) {\n                    int[] newHuffCodes = new int[huffCodes.length + 50];\n                    System.arraycopy(huffCodes, 0, newHuffCodes, 0, huffCodes.length);\n                    huffCodes = newHuffCodes;\n                }\n                huffCodes[huffCodesIndex] = code;\n                huffCodesIndex++;\n                code++;\n                p++;\n            }\n            code *= 2;\n            si++;\n        }\n        \n        if (huffCodesIndex < huffCodes.length) {\n            int[] newHuffCodes = new int[huffCodesIndex];\n            System.arraycopy(huffCodes, 0, newHuffCodes, 0, huffCodesIndex);\n            huffCodes = newHuffCodes;\n        }\n        \n        k = 0;\n        int[] maxCodes = new int[16];\n        int[] minCodes = new int[16];\n        int[] valPtrs = new int[16];\n        for (int i = 0; i < 16; i++) {\n            int bSize = bits[i];\n            if (bSize == 0) {\n                maxCodes[i] = -1;\n            } else {\n                valPtrs[i] = k;\n                minCodes[i] = huffCodes[k];\n                k += bSize;\n                maxCodes[i] = huffCodes[k - 1];\n            }\n        }\n        \n        int[] eHuffCodes = new int[256];\n        byte[] eHuffSize = new byte[256];\n        for (int i = 0; i < huffCodesIndex; i++) {\n            eHuffCodes[huffVals[i]] = huffCodes[i];\n            eHuffSize[huffVals[i]] = (byte) huffCodeLengths[i];\n        }\n        \n        JPEGHuffmanTable dhtTable = new JPEGHuffmanTable(reference);\n        dhtTable.tableClass = tc;\n        dhtTable.tableIdentifier = tid;\n        dhtTable.dhValues = huffVals;\n        dhtTable.dhMinCodes = minCodes;\n        dhtTable.dhMaxCodes = maxCodes;\n        dhtTable.dhValPtrs = valPtrs;\n        dhtTable.ehCodes = eHuffCodes;\n        dhtTable.ehCodeLengths = eHuffSize;\n        huffTables[huffTableCount] = dhtTable;\n        huffTableCount++;\n    }\n    allTables = new JPEGHuffmanTable[huffTableCount];\n    System.arraycopy(huffTables, 0, allTables, 0, huffTableCount);\n}",
			"comments":"// maximum is 4 AC + 4 DC\n// table class: AC (1) or DC (0)\n// table id: 0-1 baseline, 0-3 prog/ext\n/* Read the 16 count bytes and add them together to get the table size. */\n/* Read the table. */\n/* Calculate the lengths. */\n// start with 50 and increment as needed\n/* Truncate huffCodeLengths to the correct size. */\n/* Calculate the Huffman codes. */\n// start with 50 and increment as needed\n/* Truncate huffCodes to the correct size. */\n/* Calculate the maximum and minimum codes */\n/* Calculate the eHuffman codes and lengths. */\n/* Create the new JPEGHuffmanTable and add it to the allTables array. */\n",
			"methodName":"void initialize()"
		},
		"public int getTableClass()":{
			"methodBody":"{\n    return tableClass;\n}",
			"comments":"",
			"methodName":"public int getTableClass()"
		},
		"public int signature()":{
			"methodBody":"{\n    return JPEGFileFormat.DHT;\n}",
			"comments":"",
			"methodName":"public int signature()"
		},
		"public static JPEGHuffmanTable getDefaultDCLuminanceTable()":{
			"methodBody":"{\n    JPEGHuffmanTable result = new JPEGHuffmanTable(DCLuminanceTable);\n    result.initialize();\n    return result;\n}",
			"comments":"",
			"methodName":"public static JPEGHuffmanTable getDefaultDCLuminanceTable()"
		},
		"public int[] getDhValues()":{
			"methodBody":"{\n    return dhValues;\n}",
			"comments":"",
			"methodName":"public int[] getDhValues()"
		},
		"public JPEGHuffmanTable[] getAllTables()":{
			"methodBody":"{\n    return allTables;\n}",
			"comments":"",
			"methodName":"public JPEGHuffmanTable[] getAllTables()"
		},
		"public static JPEGHuffmanTable getDefaultACLuminanceTable()":{
			"methodBody":"{\n    JPEGHuffmanTable result = new JPEGHuffmanTable(ACLuminanceTable);\n    result.initialize();\n    return result;\n}",
			"comments":"",
			"methodName":"public static JPEGHuffmanTable getDefaultACLuminanceTable()"
		},
		"public int[] getDhValPtrs()":{
			"methodBody":"{\n    return dhValPtrs;\n}",
			"comments":"",
			"methodName":"public int[] getDhValPtrs()"
		},
		"public int getTableIdentifier()":{
			"methodBody":"{\n    return tableIdentifier;\n}",
			"comments":"",
			"methodName":"public int getTableIdentifier()"
		}
	},
	"ClassORInterfaceName":[
		"JPEGHuffmanTable"
	]
}
