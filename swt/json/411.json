{
	"variables":[
		"S_FALSE",
		"S_OK",
		"E_FAIL",
		"E_INVALIDARG",
		"E_NOINTERFACE",
		"E_NOTIMPL",
		"IID_IUNKNOWN",
		"IID_IDISPATCH",
		"OLEIVERB_DISCARDUNDOSTATE",
		"OLEIVERB_HIDE",
		"OLEIVERB_INPLACEACTIVATE",
		"OLEIVERB_OPEN",
		"OLEIVERB_PRIMARY",
		"OLEIVERB_PROPERTIES",
		"OLEIVERB_SHOW",
		"OLEIVERB_UIACTIVATE",
		"PROPERTY_CHANGING",
		"PROPERTY_CHANGED",
		"HRESULT_UNSPECIFIED",
		"ERROR_CANNOT_CREATE_FILE",
		"ERROR_CANNOT_CREATE_OBJECT",
		"ERROR_CANNOT_OPEN_FILE",
		"ERROR_INTERFACE_NOT_FOUND",
		"ERROR_INVALID_CLASSID",
		"ERROR_CANNOT_ACCESS_CLASSFACTORY",
		"ERROR_CANNOT_CREATE_LICENSED_OBJECT",
		"ERROR_OUT_OF_MEMORY",
		"ERROR_CANNOT_CHANGE_VARIANT_TYPE",
		"ERROR_INVALID_INTERFACE_ADDRESS",
		"ERROR_APPLICATION_NOT_FOUND",
		"ERROR_ACTION_NOT_PERFORMED",
		"OLECMDF_SUPPORTED",
		"OLECMDF_ENABLED",
		"OLECMDF_LATCHED",
		"OLECMDF_NINCHED",
		"OLECMDTEXTF_NONE",
		"OLECMDTEXTF_NAME",
		"OLECMDTEXTF_STATUS",
		"OLECMDEXECOPT_DODEFAULT",
		"OLECMDEXECOPT_PROMPTUSER",
		"OLECMDEXECOPT_DONTPROMPTUSER",
		"OLECMDEXECOPT_SHOWHELP",
		"OLECMDID_OPEN",
		"OLECMDID_NEW",
		"OLECMDID_SAVE",
		"OLECMDID_SAVEAS",
		"OLECMDID_SAVECOPYAS",
		"OLECMDID_PRINT",
		"OLECMDID_PRINTPREVIEW",
		"OLECMDID_PAGESETUP",
		"OLECMDID_SPELL",
		"OLECMDID_PROPERTIES",
		"OLECMDID_CUT",
		"OLECMDID_COPY",
		"OLECMDID_PASTE",
		"OLECMDID_PASTESPECIAL",
		"OLECMDID_UNDO",
		"OLECMDID_REDO",
		"OLECMDID_SELECTALL",
		"OLECMDID_CLEARSELECTION",
		"OLECMDID_ZOOM",
		"OLECMDID_GETZOOMRANGE",
		"OLECMDID_UPDATECOMMANDS",
		"OLECMDID_REFRESH",
		"OLECMDID_STOP",
		"OLECMDID_HIDETOOLBARS",
		"OLECMDID_SETPROGRESSMAX",
		"OLECMDID_SETPROGRESSPOS",
		"OLECMDID_SETPROGRESSTEXT",
		"OLECMDID_SETTITLE",
		"OLECMDID_SETDOWNLOADSTATE",
		"OLECMDID_STOPDOWNLOAD",
		"VARFLAG_FREADONLY",
		"VARFLAG_FSOURCE",
		"VARFLAG_FBINDABLE",
		"VARFLAG_FREQUESTEDIT",
		"VARFLAG_FDISPLAYBIND",
		"VARFLAG_FDEFAULTBIND",
		"VARFLAG_FHIDDEN",
		"VARFLAG_FRESTRICTED",
		"VARFLAG_FDEFAULTCOLLELEM",
		"VARFLAG_FUIDEFAULT",
		"VARFLAG_FNONBROWSABLE",
		"VARFLAG_FREPLACEABLE",
		"VARFLAG_FIMMEDIATEBIND",
		"VAR_PERINSTANCE",
		"VAR_STATIC",
		"VAR_CONST",
		"VAR_DISPATCH",
		"IDLFLAG_NONE",
		"IDLFLAG_FIN",
		"IDLFLAG_FOUT",
		"IDLFLAG_FLCID",
		"IDLFLAG_FRETVAL",
		"VT_BOOL",
		"VT_BSTR",
		"VT_BYREF",
		"VT_CY",
		"VT_DATE",
		"VT_DISPATCH",
		"VT_EMPTY",
		"VT_ERROR",
		"VT_I2",
		"VT_I4",
		"VT_NULL",
		"VT_R4",
		"VT_R8",
		"VT_UI1",
		"VT_UI4",
		"VT_UNKNOWN",
		"VT_VARIANT",
		"VT_PTR",
		"VT_USERDEFINED",
		"VT_HRESULT",
		"VT_DECIMAL",
		"VT_I1",
		"VT_UI2",
		"VT_I8",
		"VT_UI8",
		"VT_INT",
		"VT_UINT",
		"VT_VOID",
		"VT_SAFEARRAY",
		"VT_CARRAY",
		"VT_LPSTR",
		"VT_LPWSTR",
		"VT_RECORD",
		"VT_FILETIME",
		"VT_BLOB",
		"VT_STREAM",
		"VT_STORAGE",
		"VT_STREAMED_OBJECT",
		"VT_STORED_OBJECT",
		"VT_BLOB_OBJECT",
		"VT_CF",
		"VT_CLSID",
		"VT_VERSIONED_STREAM",
		"VT_BSTR_BLOB",
		"VT_VECTOR",
		"VT_ARRAY",
		"INVOKE_FUNC",
		"INVOKE_PROPERTYGET",
		"INVOKE_PROPERTYPUT",
		"INVOKE_PROPERTYPUTREF",
		"FUNC_VIRTUAL",
		"FUNC_PUREVIRTUAL",
		"FUNC_NONVIRTUAL",
		"FUNC_STATIC",
		"FUNC_DISPATCH",
		"FUNCFLAG_FRESTRICTED",
		"FUNCFLAG_FSOURCE",
		"FUNCFLAG_FBINDABLE",
		"FUNCFLAG_FREQUESTEDIT",
		"FUNCFLAG_FDISPLAYBIND",
		"FUNCFLAG_FDEFAULTBIND",
		"FUNCFLAG_FHIDDEN",
		"FUNCFLAG_FUSESGETLASTERROR",
		"FUNCFLAG_FDEFAULTCOLLELEM",
		"FUNCFLAG_FUIDEFAULT",
		"FUNCFLAG_FNONBROWSABLE",
		"FUNCFLAG_FREPLACEABLE",
		"FUNCFLAG_FIMMEDIATEBIND",
		"CC_FASTCALL",
		"CC_CDECL",
		"CC_MSCPASCAL",
		"CC_PASCAL",
		"CC_MACPASCAL",
		"CC_STDCALL",
		"CC_FPFASTCALL",
		"CC_SYSCALL",
		"CC_MPWCDECL",
		"CC_MPWPASCAL",
		"CC_MAX",
		"ERROR_NOT_IMPLEMENTED_MSG",
		"ERROR_CANNOT_CREATE_FILE_MSG",
		"ERROR_CANNOT_CREATE_OBJECT_MSG",
		"ERROR_CANNOT_OPEN_FILE_MSG",
		"ERROR_INTERFACE_NOT_FOUND_MSG",
		"ERROR_INVALID_CLASSID_MSG",
		"ERROR_CANNOT_ACCESS_CLASSFACTORY_MSG",
		"ERROR_CANNOT_CREATE_LICENSED_OBJECT_MSG",
		"ERROR_OUT_OF_MEMORY_MSG",
		"ERROR_CANNOT_CHANGE_VARIANT_TYPE_MSG",
		"ERROR_INVALID_INTERFACE_ADDRESS_MSG",
		"ERROR_APPLICATION_NOT_FOUND_MSG",
		"ERROR_ACTION_NOT_PERFORMED_MSG",
		"msg",
		"msg",
		"msg",
		"msg",
		"msg",
		"msg",
		"msg",
		"msg",
		"msg",
		"msg",
		"msg",
		"extensionKey",
		"result",
		"notInsertableKey",
		"insertableKey",
		"serverKey",
		"phkResult",
		"result",
		"lpcbData",
		"length",
		"lpData",
		"phkResult",
		"code",
		"code",
		"ERROR_INVALID_INTERFACE_ADDRESS",
		"ERROR_INVALID_INTERFACE_ADDRESS_MSG",
		"ERROR_CANNOT_CREATE_FILE",
		"ERROR_CANNOT_CREATE_FILE_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_CANNOT_CREATE_OBJECT",
		"ERROR_CANNOT_CREATE_OBJECT_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_CANNOT_OPEN_FILE",
		"ERROR_CANNOT_OPEN_FILE_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_INTERFACE_NOT_FOUND",
		"ERROR_INTERFACE_NOT_FOUND_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_INVALID_CLASSID",
		"ERROR_INVALID_CLASSID_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_CANNOT_ACCESS_CLASSFACTORY",
		"ERROR_CANNOT_ACCESS_CLASSFACTORY_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_CANNOT_CREATE_LICENSED_OBJECT",
		"ERROR_CANNOT_CREATE_LICENSED_OBJECT_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_CANNOT_CHANGE_VARIANT_TYPE",
		"ERROR_CANNOT_CHANGE_VARIANT_TYPE_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_APPLICATION_NOT_FOUND",
		"ERROR_APPLICATION_NOT_FOUND_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_ACTION_NOT_PERFORMED",
		"ERROR_ACTION_NOT_PERFORMED_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"ERROR_OUT_OF_MEMORY",
		"ERROR_ACTION_NOT_PERFORMED_MSG",
		"hresult",
		"msg",
		"hresult",
		"code",
		"msg",
		"SWT",
		"code",
		"extension",
		"SWT",
		"SWT",
		"extension",
		"extension",
		"extension",
		"extension",
		"extension",
		"extensionKey",
		"result",
		"result",
		"notInsertableKey",
		"result",
		"insertableKey",
		"result",
		"result",
		"serverKey",
		"result",
		"OS",
		"OS",
		"key",
		"OS",
		"phkResult",
		"OS",
		"phkResult",
		"lpcbData",
		"lpcbData",
		"TCHAR",
		"length",
		"result",
		"length",
		"OS",
		"phkResult",
		"lpData",
		"lpcbData",
		"length",
		"Math",
		"lpData",
		"result",
		"lpData",
		"length",
		"phkResult",
		"OS",
		"phkResult",
		"result",
		"OS",
		"OS",
		"key",
		"OS",
		"phkResult",
		"phkResult",
		"OS",
		"phkResult",
		"file",
		"file",
		"file",
		"COM",
		"file",
		"COM",
		"ERROR_NULL_ARGUMENT",
		"HKEY_CLASSES_ROOT",
		"KEY_READ",
		"sizeof",
		"HKEY_CLASSES_ROOT",
		"KEY_READ",
		"S_OK",
		"code",
		"code",
		"hresult",
		"extension",
		"key",
		"key",
		"file"
	],
	"extendORImplementFiles":[
		"SWT"
	],
	"package":[
		"org.eclipse.swt.ole.win32"
	],
	"import":[
		"org.eclipse.swt",
		"java.io.File",
		"org.eclipse.swt.internal.ole.win32.COM",
		"org.eclipse.swt.internal.win32.OS",
		"org.eclipse.swt.internal.win32.TCHAR"
	],
	"methods":[
		"error",
		"error",
		"findProgramID",
		"getKeyValue",
		"getKeyExists",
		"isOleFile",
		"error",
		"error",
		"error",
		"length",
		"charAt",
		"getKeyValue",
		"getKeyExists",
		"getKeyExists",
		"getKeyExists",
		"RegOpenKeyEx",
		"RegQueryValueEx",
		"RegQueryValueEx",
		"max",
		"length",
		"toString",
		"RegCloseKey",
		"RegOpenKeyEx",
		"RegCloseKey",
		"exists",
		"isDirectory",
		"StgIsStorageFile",
		"toCharArray",
		"getAbsolutePath",
		"IllegalArgumentException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTException",
		"SWTError",
		"TCHAR",
		"TCHAR",
		"TCHAR",
		"TCHAR",
		"TCHAR"
	],
	"methodsBody":{
		"public static void error(int code)":{
			"methodBody":"{\n    error(code, 0);\n}",
			"comments":"",
			"methodName":"public static void error(int code)"
		},
		"private static boolean getKeyExists(TCHAR key)":{
			"methodBody":"{\n    int[] phkResult = new int[1];\n    if (OS.RegOpenKeyEx(OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) != 0) {\n        return false;\n    }\n    if (phkResult[0] != 0)\n        OS.RegCloseKey(phkResult[0]);\n    return true;\n}",
			"comments":"",
			"methodName":"private static boolean getKeyExists(TCHAR key)"
		},
		"public static void error(int code, int hresult)":{
			"methodBody":"{\n    switch(code) {\n        \n        case ERROR_INVALID_INTERFACE_ADDRESS:\n            {\n                throw new IllegalArgumentException(ERROR_INVALID_INTERFACE_ADDRESS_MSG);\n            }\n        \n        case ERROR_CANNOT_CREATE_FILE:\n            {\n                String msg = ERROR_CANNOT_CREATE_FILE_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_CANNOT_CREATE_OBJECT:\n            {\n                String msg = ERROR_CANNOT_CREATE_OBJECT_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                \n                throw new SWTException(code, msg);\n            }\n        case ERROR_CANNOT_OPEN_FILE:\n            {\n                String msg = ERROR_CANNOT_OPEN_FILE_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_INTERFACE_NOT_FOUND:\n            {\n                String msg = ERROR_INTERFACE_NOT_FOUND_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_INVALID_CLASSID:\n            {\n                String msg = ERROR_INVALID_CLASSID_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_CANNOT_ACCESS_CLASSFACTORY:\n            {\n                String msg = ERROR_CANNOT_ACCESS_CLASSFACTORY_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_CANNOT_CREATE_LICENSED_OBJECT:\n            {\n                String msg = ERROR_CANNOT_CREATE_LICENSED_OBJECT_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_CANNOT_CHANGE_VARIANT_TYPE:\n            {\n                String msg = ERROR_CANNOT_CHANGE_VARIANT_TYPE_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_APPLICATION_NOT_FOUND:\n            {\n                String msg = ERROR_APPLICATION_NOT_FOUND_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        case ERROR_ACTION_NOT_PERFORMED:\n            {\n                String msg = ERROR_ACTION_NOT_PERFORMED_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTException(code, msg);\n            }\n        \n        case ERROR_OUT_OF_MEMORY:\n            {\n                String msg = ERROR_ACTION_NOT_PERFORMED_MSG;\n                \n                if (hresult != 0)\n                    msg += \" result = \" + hresult;\n                throw new SWTError(code, msg);\n            }\n    }\n    \n    SWT.error(code);\n}",
			"comments":"/* Illegal Arguments (non-fatal) */\n/* SWT Errors (non-fatal) */\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n//$NON-NLS-1$\n/* OS Failure/Limit (fatal, may occur only on some platforms) */\n//$NON-NLS-1$\n/* Unknown/Undefined Error */\n",
			"methodName":"public static void error(int code, int hresult)"
		},
		"public static boolean isOleFile(File file)":{
			"methodBody":"{\n    if (file == null || !file.exists() || file.isDirectory())\n        return false;\n    return (COM.StgIsStorageFile((file.getAbsolutePath() + \"\\0\").toCharArray()) == COM.S_OK);\n}",
			"comments":"/**\n* Returns true if the specified file has an OLE Storage format.\n*\n* Note all empty files (regardless of extension) will return false.\n*\n* @param file the file to be checked\n*\n* @return true if this file has an OLE Storage format\n*/\n",
			"methodName":"public static boolean isOleFile(File file)"
		},
		"public static String findProgramID(String extension)":{
			"methodBody":"{\n    if (extension == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    \n    if (extension.length() == 0)\n        return \"\";\n    \n    if (extension.charAt(0) != '.')\n        extension = \".\" + extension;\n    \n    TCHAR extensionKey = new TCHAR(0, extension, true);\n    String result = getKeyValue(extensionKey);\n    if (result != null) {\n        \n        \n        TCHAR notInsertableKey = new TCHAR(0, result + \"\\\\NotInsertable\", true);\n        \n        if (getKeyExists(notInsertableKey))\n            return \"\";\n        \n        \n        TCHAR insertableKey = new TCHAR(0, result + \"\\\\Insertable\", true);\n        if (getKeyExists(insertableKey))\n            return result;\n        \n        \n        TCHAR serverKey = new TCHAR(0, result + \"\\\\protocol\\\\StdFileEditing\\\\server\", true);\n        if (getKeyExists(serverKey))\n            return result;\n    }\n    \n    return \"\";\n}",
			"comments":"/*\n* Finds the OLE program id that is associated with an extension.\n* The extension may or may not begin with a '.'.  On platforms\n* that do not support OLE, an empty string is returned.\n*\n* @param extension the program extension\n* @return a string that is the OLE program id or an empty string\n*\n* @exception IllegalArgumentException <ul>\n*\t\t<li>ERROR_NULL_ARGUMENT when extension is null</li>\n*\t</ul>\n*/\n//$NON-NLS-1$\n//$NON-NLS-1$\n/* Use the character encoding for the default locale */\n// look for \"<programID>\\NotInsertable\"\n//$NON-NLS-1$\n//$NON-NLS-1$\n// look for \"<programID>\\Insertable\"\n//$NON-NLS-1$\n// look for \"<programID>\\protocol\\StdFileEditing\\server\"\n//$NON-NLS-1$\n//$NON-NLS-1$\n",
			"methodName":"public static String findProgramID(String extension)"
		},
		"static String getKeyValue(TCHAR key)":{
			"methodBody":"{\n    int[] phkResult = new int[1];\n    if (OS.RegOpenKeyEx(OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) != 0) {\n        return null;\n    }\n    String result = null;\n    int[] lpcbData = new int[1];\n    if (OS.RegQueryValueEx(phkResult[0], (TCHAR) null, 0, null, (TCHAR) null, lpcbData) == 0) {\n        int length = lpcbData[0] / TCHAR.sizeof;\n        if (length == 0) {\n            result = \"\";\n        } else {\n            \n            TCHAR lpData = new TCHAR(0, length);\n            if (OS.RegQueryValueEx(phkResult[0], null, 0, null, lpData, lpcbData) == 0) {\n                length = Math.max(0, lpData.length() - 1);\n                result = lpData.toString(0, length);\n            }\n        }\n    }\n    if (phkResult[0] != 0)\n        OS.RegCloseKey(phkResult[0]);\n    return result;\n}",
			"comments":"/* Use the character encoding for the default locale */\n",
			"methodName":"static String getKeyValue(TCHAR key)"
		}
	},
	"ClassORInterfaceName":[
		"OLE"
	]
}
