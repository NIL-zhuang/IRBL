{
	"variables":[
		"SASH_WIDTH",
		"sashStyle",
		"sashes",
		"background",
		"foreground",
		"controls",
		"maxControl",
		"sashListener",
		"DRAG_MINIMUM",
		"mask",
		"style",
		"cArray",
		"ratios",
		"i",
		"data",
		"children",
		"result",
		"i",
		"newResult",
		"sash",
		"sashIndex",
		"i",
		"c1",
		"c2",
		"b1",
		"b2",
		"sashBounds",
		"area",
		"correction",
		"totalWidth",
		"shift",
		"data1",
		"data2",
		"totalHeight",
		"shift",
		"data1",
		"data2",
		"i",
		"i",
		"i",
		"i",
		"i",
		"cArray",
		"total",
		"i",
		"i",
		"data",
		"parent",
		"style",
		"sashStyle",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"sashStyle",
		"SWT",
		"style",
		"SWT",
		"sashStyle",
		"SWT",
		"sashListener",
		"e",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"mask",
		"sashStyle",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"sashStyle",
		"SWT",
		"style",
		"SWT",
		"style",
		"cArray",
		"i",
		"cArray",
		"i",
		"cArray",
		"i",
		"data",
		"data",
		"ratios",
		"i",
		"data",
		"ratios",
		"i",
		"ratios",
		"i",
		"children",
		"i",
		"children",
		"i",
		"onlyVisible",
		"children",
		"i",
		"result",
		"System",
		"result",
		"newResult",
		"result",
		"newResult",
		"result",
		"children",
		"i",
		"result",
		"newResult",
		"result",
		"event",
		"i",
		"sashes",
		"i",
		"sashes",
		"i",
		"sash",
		"sashIndex",
		"i",
		"sashIndex",
		"controls",
		"sashIndex",
		"controls",
		"sashIndex",
		"c1",
		"c2",
		"sash",
		"SWT",
		"correction",
		"b1",
		"DRAG_MINIMUM",
		"b2",
		"DRAG_MINIMUM",
		"b2",
		"b2",
		"b1",
		"event",
		"sashBounds",
		"b1",
		"shift",
		"b2",
		"shift",
		"b2",
		"shift",
		"b1",
		"DRAG_MINIMUM",
		"b1",
		"DRAG_MINIMUM",
		"b2",
		"b1",
		"b1",
		"sashBounds",
		"b2",
		"totalWidth",
		"b2",
		"event",
		"b1",
		"b1",
		"event",
		"b2",
		"DRAG_MINIMUM",
		"b1",
		"totalWidth",
		"DRAG_MINIMUM",
		"sashBounds",
		"b2",
		"b1",
		"b1",
		"sashBounds",
		"b2",
		"DRAG_MINIMUM",
		"event",
		"b1",
		"b1",
		"event",
		"c1",
		"data1",
		"data1",
		"data1",
		"c1",
		"data1",
		"c2",
		"data2",
		"data2",
		"data2",
		"c2",
		"data2",
		"data1",
		"b1",
		"area",
		"area",
		"data2",
		"b2",
		"area",
		"area",
		"correction",
		"b1",
		"DRAG_MINIMUM",
		"b2",
		"DRAG_MINIMUM",
		"b2",
		"b2",
		"b1",
		"event",
		"sashBounds",
		"b1",
		"shift",
		"b2",
		"shift",
		"b2",
		"shift",
		"b1",
		"DRAG_MINIMUM",
		"b1",
		"DRAG_MINIMUM",
		"b2",
		"b1",
		"b1",
		"sashBounds",
		"b2",
		"totalHeight",
		"b2",
		"event",
		"b1",
		"b1",
		"event",
		"b2",
		"DRAG_MINIMUM",
		"b1",
		"totalHeight",
		"DRAG_MINIMUM",
		"sashBounds",
		"b2",
		"b1",
		"b1",
		"sashBounds",
		"b2",
		"DRAG_MINIMUM",
		"event",
		"b1",
		"b1",
		"event",
		"c1",
		"data1",
		"data1",
		"data1",
		"c1",
		"data1",
		"c2",
		"data2",
		"data2",
		"data2",
		"c2",
		"data2",
		"data1",
		"b1",
		"area",
		"area",
		"data2",
		"b2",
		"area",
		"area",
		"correction",
		"event",
		"event",
		"SWT",
		"c1",
		"b1",
		"sash",
		"event",
		"event",
		"event",
		"event",
		"c2",
		"b2",
		"orientation",
		"orientation",
		"SWT",
		"orientation",
		"SWT",
		"SWT",
		"SWT",
		"sashStyle",
		"SWT",
		"SWT",
		"sashStyle",
		"orientation",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"sashes",
		"i",
		"sashes",
		"i",
		"sashes",
		"i",
		"sashStyle",
		"sashes",
		"i",
		"background",
		"sashes",
		"i",
		"foreground",
		"sashes",
		"i",
		"SWT",
		"sashListener",
		"color",
		"background",
		"color",
		"i",
		"sashes",
		"i",
		"sashes",
		"i",
		"background",
		"color",
		"foreground",
		"color",
		"i",
		"sashes",
		"i",
		"sashes",
		"i",
		"foreground",
		"control",
		"maxControl",
		"i",
		"sashes",
		"i",
		"sashes",
		"i",
		"i",
		"sashes",
		"i",
		"sashes",
		"i",
		"maxControl",
		"control",
		"weights",
		"weights",
		"cArray",
		"SWT",
		"SWT",
		"i",
		"weights",
		"i",
		"weights",
		"i",
		"SWT",
		"SWT",
		"total",
		"weights",
		"i",
		"total",
		"SWT",
		"SWT",
		"i",
		"cArray",
		"i",
		"cArray",
		"i",
		"data",
		"data",
		"data",
		"cArray",
		"i",
		"data",
		"data",
		"weights",
		"i",
		"total",
		"total",
		"VERTICAL",
		"HORIZONTAL",
		"VERTICAL",
		"BORDER",
		"BORDER",
		"SMOOTH",
		"SMOOTH",
		"BORDER",
		"LEFT_TO_RIGHT",
		"RIGHT_TO_LEFT",
		"VERTICAL",
		"HORIZONTAL",
		"VERTICAL",
		"VERTICAL",
		"VERTICAL",
		"HORIZONTAL",
		"SMOOTH",
		"SMOOTH",
		"maxControl",
		"length",
		"length",
		"weight",
		"length",
		"length",
		"length",
		"length",
		"widget",
		"length",
		"HORIZONTAL",
		"width",
		"width",
		"x",
		"width",
		"x",
		"x",
		"x",
		"width",
		"x",
		"width",
		"width",
		"width",
		"x",
		"x",
		"width",
		"width",
		"width",
		"x",
		"x",
		"x",
		"width",
		"doit",
		"width",
		"width",
		"width",
		"x",
		"x",
		"width",
		"width",
		"width",
		"x",
		"x",
		"width",
		"doit",
		"weight",
		"width",
		"width",
		"width",
		"weight",
		"width",
		"width",
		"width",
		"height",
		"height",
		"y",
		"height",
		"y",
		"y",
		"y",
		"height",
		"y",
		"height",
		"height",
		"height",
		"y",
		"y",
		"height",
		"height",
		"height",
		"y",
		"y",
		"y",
		"height",
		"doit",
		"height",
		"height",
		"height",
		"y",
		"y",
		"height",
		"height",
		"height",
		"y",
		"y",
		"height",
		"doit",
		"weight",
		"height",
		"height",
		"height",
		"weight",
		"height",
		"height",
		"height",
		"doit",
		"detail",
		"DRAG",
		"x",
		"y",
		"width",
		"height",
		"HORIZONTAL",
		"VERTICAL",
		"ERROR_INVALID_ARGUMENT",
		"HORIZONTAL",
		"VERTICAL",
		"VERTICAL",
		"HORIZONTAL",
		"VERTICAL",
		"length",
		"Selection",
		"length",
		"length",
		"maxControl",
		"length",
		"length",
		"length",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"length",
		"weight",
		"parent",
		"style",
		"e",
		"style",
		"onlyVisible",
		"event",
		"orientation",
		"color",
		"color",
		"layout",
		"control",
		"weights"
	],
	"extendORImplementFiles":[
		"Composite"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"handleEvent",
		"checkStyle",
		"getOrientation",
		"getStyle",
		"getMaximizedControl",
		"getWeights",
		"getControls",
		"onDragSash",
		"setOrientation",
		"setBackground",
		"setForeground",
		"setLayout",
		"setMaximizedControl",
		"setWeights",
		"checkStyle",
		"setLayout",
		"onDragSash",
		"getStyle",
		"getOrientation",
		"checkWidget",
		"getControls",
		"getLayoutData",
		"getChildren",
		"getVisible",
		"arraycopy",
		"getBounds",
		"getBounds",
		"getBounds",
		"getClientArea",
		"getOrientation",
		"getLayoutData",
		"setLayoutData",
		"getLayoutData",
		"setLayoutData",
		"getLayoutData",
		"setLayoutData",
		"getLayoutData",
		"setLayoutData",
		"setBounds",
		"setBounds",
		"setBounds",
		"checkWidget",
		"getOrientation",
		"error",
		"dispose",
		"setBackground",
		"setForeground",
		"addListener",
		"layout",
		"setBackground",
		"setBackground",
		"setForeground",
		"setForeground",
		"checkWidget",
		"checkWidget",
		"layout",
		"setVisible",
		"setVisible",
		"layout",
		"checkWidget",
		"getControls",
		"error",
		"error",
		"error",
		"getLayoutData",
		"setLayoutData",
		"layout",
		"SashFormLayout",
		"Listener",
		"SashFormData",
		"SashFormData",
		"SashFormData",
		"SashFormData",
		"Sash",
		"SashFormData"
	],
	"methodsBody":{
		"public void setOrientation(int orientation)":{
			"methodBody":"{\n    checkWidget();\n    if (getOrientation() == orientation)\n        return;\n    if (orientation != SWT.HORIZONTAL && orientation != SWT.VERTICAL) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    sashStyle &= ~(SWT.HORIZONTAL | SWT.VERTICAL);\n    sashStyle |= orientation == SWT.VERTICAL ? SWT.HORIZONTAL : SWT.VERTICAL;\n    for (int i = 0; i < sashes.length; i++) {\n        sashes[i].dispose();\n        sashes[i] = new Sash(this, sashStyle);\n        sashes[i].setBackground(background);\n        sashes[i].setForeground(foreground);\n        sashes[i].addListener(SWT.Selection, sashListener);\n    }\n    layout(false);\n}",
			"comments":"/**\n* If orientation is SWT.HORIZONTAL, lay the controls in the SashForm\n* out side by side.  If orientation is SWT.VERTICAL, lay the\n* controls in the SashForm out top to bottom.\n*\n* @param orientation SWT.HORIZONTAL or SWT.VERTICAL\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the value of orientation is not SWT.HORIZONTAL or SWT.VERTICAL\n* </ul>\n*/\n",
			"methodName":"public void setOrientation(int orientation)"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    onDragSash(e);\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"void onDragSash(Event event)":{
			"methodBody":"{\n    Sash sash = (Sash) event.widget;\n    int sashIndex = -1;\n    for (int i = 0; i < sashes.length; i++) {\n        if (sashes[i] == sash) {\n            sashIndex = i;\n            break;\n        }\n    }\n    if (sashIndex == -1)\n        return;\n    Control c1 = controls[sashIndex];\n    Control c2 = controls[sashIndex + 1];\n    Rectangle b1 = c1.getBounds();\n    Rectangle b2 = c2.getBounds();\n    Rectangle sashBounds = sash.getBounds();\n    Rectangle area = getClientArea();\n    boolean correction = false;\n    if (getOrientation() == SWT.HORIZONTAL) {\n        correction = b1.width < DRAG_MINIMUM || b2.width < DRAG_MINIMUM;\n        int totalWidth = b2.x + b2.width - b1.x;\n        int shift = event.x - sashBounds.x;\n        b1.width += shift;\n        b2.x += shift;\n        b2.width -= shift;\n        if (b1.width < DRAG_MINIMUM) {\n            b1.width = DRAG_MINIMUM;\n            b2.x = b1.x + b1.width + sashBounds.width;\n            b2.width = totalWidth - b2.x;\n            event.x = b1.x + b1.width;\n            event.doit = false;\n        }\n        if (b2.width < DRAG_MINIMUM) {\n            b1.width = totalWidth - DRAG_MINIMUM - sashBounds.width;\n            b2.x = b1.x + b1.width + sashBounds.width;\n            b2.width = DRAG_MINIMUM;\n            event.x = b1.x + b1.width;\n            event.doit = false;\n        }\n        Object data1 = c1.getLayoutData();\n        if (data1 == null || !(data1 instanceof SashFormData)) {\n            data1 = new SashFormData();\n            c1.setLayoutData(data1);\n        }\n        Object data2 = c2.getLayoutData();\n        if (data2 == null || !(data2 instanceof SashFormData)) {\n            data2 = new SashFormData();\n            c2.setLayoutData(data2);\n        }\n        ((SashFormData) data1).weight = (((long) b1.width << 16) + area.width - 1) / area.width;\n        ((SashFormData) data2).weight = (((long) b2.width << 16) + area.width - 1) / area.width;\n    } else {\n        correction = b1.height < DRAG_MINIMUM || b2.height < DRAG_MINIMUM;\n        int totalHeight = b2.y + b2.height - b1.y;\n        int shift = event.y - sashBounds.y;\n        b1.height += shift;\n        b2.y += shift;\n        b2.height -= shift;\n        if (b1.height < DRAG_MINIMUM) {\n            b1.height = DRAG_MINIMUM;\n            b2.y = b1.y + b1.height + sashBounds.height;\n            b2.height = totalHeight - b2.y;\n            event.y = b1.y + b1.height;\n            event.doit = false;\n        }\n        if (b2.height < DRAG_MINIMUM) {\n            b1.height = totalHeight - DRAG_MINIMUM - sashBounds.height;\n            b2.y = b1.y + b1.height + sashBounds.height;\n            b2.height = DRAG_MINIMUM;\n            event.y = b1.y + b1.height;\n            event.doit = false;\n        }\n        Object data1 = c1.getLayoutData();\n        if (data1 == null || !(data1 instanceof SashFormData)) {\n            data1 = new SashFormData();\n            c1.setLayoutData(data1);\n        }\n        Object data2 = c2.getLayoutData();\n        if (data2 == null || !(data2 instanceof SashFormData)) {\n            data2 = new SashFormData();\n            c2.setLayoutData(data2);\n        }\n        ((SashFormData) data1).weight = (((long) b1.height << 16) + area.height - 1) / area.height;\n        ((SashFormData) data2).weight = (((long) b2.height << 16) + area.height - 1) / area.height;\n    }\n    if (correction || (event.doit && event.detail != SWT.DRAG)) {\n        c1.setBounds(b1);\n        sash.setBounds(event.x, event.y, event.width, event.height);\n        c2.setBounds(b2);\n    }\n}",
			"comments":"",
			"methodName":"void onDragSash(Event event)"
		},
		"public void setWeights(int[] weights)":{
			"methodBody":"{\n    checkWidget();\n    Control[] cArray = getControls(false);\n    if (weights == null || weights.length != cArray.length) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int total = 0;\n    for (int i = 0; i < weights.length; i++) {\n        if (weights[i] < 0) {\n            SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n        }\n        total += weights[i];\n    }\n    if (total == 0) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    for (int i = 0; i < cArray.length; i++) {\n        Object data = cArray[i].getLayoutData();\n        if (data == null || !(data instanceof SashFormData)) {\n            data = new SashFormData();\n            cArray[i].setLayoutData(data);\n        }\n        ((SashFormData) data).weight = (((long) weights[i] << 16) + total - 1) / total;\n    }\n    layout(false);\n}",
			"comments":"/**\n* Specify the relative weight of each child in the SashForm.  This will determine\n* what percent of the total width (if SashForm has Horizontal orientation) or\n* total height (if SashForm has Vertical orientation) each control will occupy.\n* The weights must be positive values and there must be an entry for each\n* non-sash child of the SashForm.\n*\n* @param weights the relative weight of each child\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the weights value is null or of incorrect length (must match the number of children)</li>\n* </ul>\n*/\n",
			"methodName":"public void setWeights(int[] weights)"
		},
		"Control[] getControls(boolean onlyVisible)":{
			"methodBody":"{\n    Control[] children = getChildren();\n    Control[] result = new Control[0];\n    for (int i = 0; i < children.length; i++) {\n        if (children[i] instanceof Sash)\n            continue;\n        if (onlyVisible && !children[i].getVisible())\n            continue;\n        Control[] newResult = new Control[result.length + 1];\n        System.arraycopy(result, 0, newResult, 0, result.length);\n        newResult[result.length] = children[i];\n        result = newResult;\n    }\n    return result;\n}",
			"comments":"",
			"methodName":"Control[] getControls(boolean onlyVisible)"
		},
		"public int getStyle()":{
			"methodBody":"{\n    int style = super.getStyle();\n    style |= getOrientation() == SWT.VERTICAL ? SWT.VERTICAL : SWT.HORIZONTAL;\n    if ((sashStyle & SWT.SMOOTH) != 0)\n        style |= SWT.SMOOTH;\n    return style;\n}",
			"comments":"",
			"methodName":"public int getStyle()"
		},
		"public Control getMaximizedControl()":{
			"methodBody":"{\n    \n    return this.maxControl;\n}",
			"comments":"/**\n* Answer the control that currently is maximized in the SashForm.\n* This value may be null.\n*\n* @return the control that currently is maximized or null\n*/\n//checkWidget();\n",
			"methodName":"public Control getMaximizedControl()"
		},
		"public int getOrientation()":{
			"methodBody":"{\n    \n    return (sashStyle & SWT.VERTICAL) != 0 ? SWT.HORIZONTAL : SWT.VERTICAL;\n}",
			"comments":"/**\n* Returns SWT.HORIZONTAL if the controls in the SashForm are laid out side by side\n* or SWT.VERTICAL   if the controls in the SashForm are laid out top to bottom.\n*\n* @return SWT.HORIZONTAL or SWT.VERTICAL\n*/\n//checkWidget();\n",
			"methodName":"public int getOrientation()"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    int mask = SWT.BORDER | SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;\n    return style & mask;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void setMaximizedControl(Control control)":{
			"methodBody":"{\n    checkWidget();\n    if (control == null) {\n        if (maxControl != null) {\n            this.maxControl = null;\n            layout(false);\n            for (int i = 0; i < sashes.length; i++) {\n                sashes[i].setVisible(true);\n            }\n        }\n        return;\n    }\n    for (int i = 0; i < sashes.length; i++) {\n        sashes[i].setVisible(false);\n    }\n    maxControl = control;\n    layout(false);\n}",
			"comments":"/**\n* Specify the control that should take up the entire client area of the SashForm.\n* If one control has been maximized, and this method is called with a different control,\n* the previous control will be minimized and the new control will be maximized..\n* if the value of control is null, the SashForm will minimize all controls and return to\n* the default layout where all controls are laid out separated by sashes.\n*\n* @param control the control to be maximized or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMaximizedControl(Control control)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    super.setForeground(color);\n    foreground = color;\n    for (int i = 0; i < sashes.length; i++) {\n        sashes[i].setForeground(foreground);\n    }\n}",
			"comments":"",
			"methodName":"public void setForeground(Color color)"
		},
		"public void setLayout(Layout layout)":{
			"methodBody":"{\n    checkWidget();\n    return;\n}",
			"comments":"/**\n* Sets the layout which is associated with the receiver to be\n* the argument which may be null.\n* <p>\n* Note : No Layout can be set on this Control because it already\n* manages the size and position of its children.\n* </p>\n*\n* @param layout the receiver's new layout or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setLayout(Layout layout)"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    super.setBackground(color);\n    background = color;\n    for (int i = 0; i < sashes.length; i++) {\n        sashes[i].setBackground(background);\n    }\n}",
			"comments":"",
			"methodName":"public void setBackground(Color color)"
		},
		"public int[] getWeights()":{
			"methodBody":"{\n    checkWidget();\n    Control[] cArray = getControls(false);\n    int[] ratios = new int[cArray.length];\n    for (int i = 0; i < cArray.length; i++) {\n        Object data = cArray[i].getLayoutData();\n        if (data != null && data instanceof SashFormData) {\n            ratios[i] = (int) (((SashFormData) data).weight * 1000 >> 16);\n        } else {\n            ratios[i] = 200;\n        }\n    }\n    return ratios;\n}",
			"comments":"",
			"methodName":"public int[] getWeights()"
		}
	},
	"ClassORInterfaceName":[
		"SashForm"
	]
}
