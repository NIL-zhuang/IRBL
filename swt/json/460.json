{
	"variables":[
		"dragging",
		"startX",
		"startY",
		"lastX",
		"lastY",
		"INCREMENT",
		"PAGE_INCREMENT",
		"typedListener",
		"border",
		"width",
		"height",
		"hwndTrack",
		"bits",
		"stippleBitmap",
		"stippleBrush",
		"hDC",
		"oldBrush",
		"result",
		"result",
		"step",
		"pt",
		"hwndTrack",
		"rect",
		"clientRect",
		"width",
		"height",
		"clientWidth",
		"clientHeight",
		"newX",
		"newY",
		"cursorPt",
		"event",
		"result",
		"hwndTrack",
		"pt",
		"rect",
		"width",
		"height",
		"event",
		"flags",
		"result",
		"rect",
		"width",
		"height",
		"event",
		"result",
		"pt",
		"hwndTrack",
		"rect",
		"clientRect",
		"width",
		"height",
		"newX",
		"newY",
		"clientWidth",
		"clientHeight",
		"event",
		"flags",
		"result",
		"hitTest",
		"hCursor",
		"parent",
		"style",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"handle",
		"OS",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"SWT",
		"SWT",
		"border",
		"border",
		"style",
		"SWT",
		"width",
		"DEFAULT_WIDTH",
		"height",
		"width",
		"height",
		"DEFAULT_HEIGHT",
		"wHint",
		"SWT",
		"width",
		"wHint",
		"border",
		"hHint",
		"SWT",
		"height",
		"hHint",
		"border",
		"width",
		"height",
		"style",
		"SWT",
		"parent",
		"OS",
		"bits",
		"OS",
		"stippleBitmap",
		"OS",
		"hwndTrack",
		"OS",
		"OS",
		"hDC",
		"stippleBrush",
		"OS",
		"hDC",
		"x",
		"y",
		"width",
		"height",
		"OS",
		"OS",
		"hDC",
		"oldBrush",
		"OS",
		"hwndTrack",
		"hDC",
		"OS",
		"stippleBrush",
		"OS",
		"stippleBitmap",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"display",
		"display",
		"wParam",
		"lParam",
		"result",
		"result",
		"wParam",
		"LRESULT",
		"wParam",
		"lParam",
		"result",
		"result",
		"wParam",
		"OS",
		"OS",
		"OS",
		"OS",
		"OS",
		"OS",
		"result",
		"OS",
		"OS",
		"INCREMENT",
		"PAGE_INCREMENT",
		"style",
		"SWT",
		"wParam",
		"OS",
		"wParam",
		"OS",
		"pt",
		"wParam",
		"OS",
		"step",
		"step",
		"wParam",
		"OS",
		"wParam",
		"OS",
		"pt",
		"wParam",
		"OS",
		"step",
		"step",
		"parent",
		"OS",
		"handle",
		"hwndTrack",
		"pt",
		"OS",
		"handle",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"OS",
		"hwndTrack",
		"clientRect",
		"clientRect",
		"clientRect",
		"clientRect",
		"clientRect",
		"lastX",
		"lastY",
		"style",
		"SWT",
		"newX",
		"Math",
		"Math",
		"pt",
		"startX",
		"clientWidth",
		"width",
		"newY",
		"Math",
		"Math",
		"pt",
		"startY",
		"clientHeight",
		"height",
		"newX",
		"lastX",
		"newY",
		"lastY",
		"result",
		"cursorPt",
		"pt",
		"cursorPt",
		"pt",
		"OS",
		"hwndTrack",
		"cursorPt",
		"style",
		"SWT",
		"cursorPt",
		"height",
		"cursorPt",
		"width",
		"OS",
		"cursorPt",
		"cursorPt",
		"event",
		"newX",
		"event",
		"newY",
		"event",
		"width",
		"event",
		"height",
		"SWT",
		"event",
		"LRESULT",
		"event",
		"style",
		"SWT",
		"event",
		"event",
		"width",
		"height",
		"result",
		"result",
		"OS",
		"wParam",
		"lParam",
		"parent",
		"pt",
		"lParam",
		"pt",
		"lParam",
		"OS",
		"handle",
		"rect",
		"OS",
		"handle",
		"pt",
		"startX",
		"pt",
		"rect",
		"startY",
		"pt",
		"rect",
		"OS",
		"hwndTrack",
		"rect",
		"lastX",
		"rect",
		"lastY",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"event",
		"lastX",
		"event",
		"lastY",
		"event",
		"width",
		"event",
		"height",
		"style",
		"SWT",
		"event",
		"SWT",
		"SWT",
		"event",
		"LRESULT",
		"event",
		"dragging",
		"lastX",
		"event",
		"lastY",
		"event",
		"LRESULT",
		"OS",
		"OS",
		"hwndTrack",
		"OS",
		"OS",
		"OS",
		"hwndTrack",
		"flags",
		"event",
		"event",
		"width",
		"height",
		"style",
		"SWT",
		"event",
		"event",
		"width",
		"height",
		"result",
		"wParam",
		"lParam",
		"dragging",
		"result",
		"dragging",
		"OS",
		"handle",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"event",
		"lastX",
		"event",
		"lastY",
		"event",
		"width",
		"event",
		"height",
		"event",
		"event",
		"width",
		"height",
		"SWT",
		"event",
		"result",
		"event",
		"style",
		"SWT",
		"event",
		"event",
		"width",
		"height",
		"result",
		"wParam",
		"lParam",
		"result",
		"result",
		"dragging",
		"wParam",
		"OS",
		"result",
		"pt",
		"lParam",
		"pt",
		"lParam",
		"parent",
		"OS",
		"handle",
		"hwndTrack",
		"pt",
		"OS",
		"handle",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"OS",
		"hwndTrack",
		"clientRect",
		"lastX",
		"lastY",
		"style",
		"SWT",
		"clientRect",
		"clientRect",
		"newX",
		"Math",
		"Math",
		"pt",
		"startX",
		"clientWidth",
		"width",
		"clientRect",
		"clientRect",
		"newY",
		"Math",
		"Math",
		"pt",
		"startY",
		"clientHeight",
		"height",
		"newX",
		"lastX",
		"newY",
		"lastY",
		"result",
		"lastX",
		"lastY",
		"width",
		"height",
		"event",
		"newX",
		"event",
		"newY",
		"event",
		"width",
		"event",
		"height",
		"style",
		"SWT",
		"event",
		"SWT",
		"SWT",
		"event",
		"LRESULT",
		"event",
		"lastX",
		"event",
		"lastY",
		"event",
		"OS",
		"OS",
		"hwndTrack",
		"OS",
		"OS",
		"OS",
		"hwndTrack",
		"flags",
		"lastX",
		"lastY",
		"width",
		"height",
		"style",
		"SWT",
		"lastX",
		"lastY",
		"width",
		"height",
		"result",
		"wParam",
		"lParam",
		"result",
		"result",
		"lParam",
		"hitTest",
		"OS",
		"style",
		"SWT",
		"hCursor",
		"OS",
		"OS",
		"hCursor",
		"OS",
		"OS",
		"OS",
		"hCursor",
		"LRESULT",
		"result",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"HORIZONTAL",
		"VERTICAL",
		"HORIZONTAL",
		"DEFAULT",
		"DEFAULT",
		"SMOOTH",
		"handle",
		"DCX_CACHE",
		"PATINVERT",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"windowClass",
		"windowProc",
		"ONE",
		"VK_LEFT",
		"VK_RIGHT",
		"VK_UP",
		"VK_DOWN",
		"VK_LBUTTON",
		"VK_CONTROL",
		"VERTICAL",
		"VK_UP",
		"VK_DOWN",
		"x",
		"VK_LEFT",
		"VK_LEFT",
		"VK_RIGHT",
		"y",
		"VK_UP",
		"handle",
		"right",
		"left",
		"bottom",
		"top",
		"right",
		"left",
		"bottom",
		"top",
		"VERTICAL",
		"x",
		"y",
		"x",
		"x",
		"y",
		"y",
		"VERTICAL",
		"y",
		"x",
		"x",
		"y",
		"x",
		"y",
		"width",
		"height",
		"Selection",
		"ZERO",
		"doit",
		"SMOOTH",
		"x",
		"y",
		"DLGC_STATIC",
		"handle",
		"x",
		"y",
		"x",
		"left",
		"y",
		"top",
		"left",
		"top",
		"right",
		"left",
		"bottom",
		"top",
		"x",
		"y",
		"width",
		"height",
		"SMOOTH",
		"detail",
		"DRAG",
		"Selection",
		"ZERO",
		"doit",
		"x",
		"y",
		"ZERO",
		"IsWinCE",
		"RDW_UPDATENOW",
		"RDW_ALLCHILDREN",
		"x",
		"y",
		"SMOOTH",
		"x",
		"y",
		"right",
		"left",
		"bottom",
		"top",
		"x",
		"y",
		"width",
		"height",
		"x",
		"y",
		"Selection",
		"doit",
		"SMOOTH",
		"x",
		"y",
		"MK_LBUTTON",
		"x",
		"y",
		"handle",
		"right",
		"left",
		"bottom",
		"top",
		"VERTICAL",
		"right",
		"left",
		"x",
		"bottom",
		"top",
		"y",
		"x",
		"y",
		"width",
		"height",
		"SMOOTH",
		"detail",
		"DRAG",
		"Selection",
		"ZERO",
		"doit",
		"x",
		"y",
		"IsWinCE",
		"RDW_UPDATENOW",
		"RDW_ALLCHILDREN",
		"SMOOTH",
		"HTCLIENT",
		"HORIZONTAL",
		"IDC_SIZENS",
		"IDC_SIZEWE",
		"ONE",
		"parent",
		"style",
		"listener",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"wHint",
		"hHint",
		"changed",
		"x",
		"y",
		"width",
		"height",
		"listener",
		"wParam",
		"lParam",
		"wParam",
		"lParam",
		"wParam",
		"lParam",
		"wParam",
		"lParam",
		"wParam",
		"lParam",
		"wParam",
		"lParam",
		"wParam",
		"lParam"
	],
	"extendORImplementFiles":[
		"Control"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.events"
	],
	"methods":[
		"addSelectionListener",
		"callWindowProc",
		"checkStyle",
		"computeSize",
		"drawBand",
		"removeSelectionListener",
		"windowClass",
		"windowProc",
		"WM_ERASEBKGND",
		"WM_KEYDOWN",
		"WM_GETDLGCODE",
		"WM_LBUTTONDOWN",
		"WM_LBUTTONUP",
		"WM_MOUSEMOVE",
		"WM_SETCURSOR",
		"checkStyle",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"DefWindowProc",
		"checkBits",
		"checkWidget",
		"getBorderWidth",
		"CreateBitmap",
		"CreatePatternBrush",
		"GetDCEx",
		"SelectObject",
		"PatBlt",
		"SelectObject",
		"ReleaseDC",
		"DeleteObject",
		"DeleteObject",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"WM_ERASEBKGND",
		"drawBackground",
		"WM_KEYDOWN",
		"GetKeyState",
		"GetKeyState",
		"MapWindowPoints",
		"GetWindowRect",
		"GetClientRect",
		"min",
		"max",
		"min",
		"max",
		"ClientToScreen",
		"SetCursorPos",
		"sendEvent",
		"isDisposed",
		"setBounds",
		"WM_LBUTTONDOWN",
		"GetWindowRect",
		"MapWindowPoints",
		"MapWindowPoints",
		"sendEvent",
		"isDisposed",
		"bringToTop",
		"menuShell",
		"isDisposed",
		"UpdateWindow",
		"RedrawWindow",
		"drawBand",
		"setBounds",
		"WM_LBUTTONUP",
		"GetWindowRect",
		"drawBand",
		"sendEvent",
		"isDisposed",
		"setBounds",
		"WM_MOUSEMOVE",
		"MapWindowPoints",
		"GetWindowRect",
		"GetClientRect",
		"min",
		"max",
		"min",
		"max",
		"drawBand",
		"sendEvent",
		"isDisposed",
		"UpdateWindow",
		"RedrawWindow",
		"drawBand",
		"setBounds",
		"WM_SETCURSOR",
		"LoadCursor",
		"LoadCursor",
		"SetCursor",
		"TypedListener",
		"Point",
		"POINT",
		"RECT",
		"RECT",
		"POINT",
		"Event",
		"LRESULT",
		"POINT",
		"RECT",
		"Event",
		"RECT",
		"Event",
		"POINT",
		"RECT",
		"RECT",
		"Event"
	],
	"methodsBody":{
		"TCHAR windowClass()":{
			"methodBody":"{\n    return display.windowClass;\n}",
			"comments":"",
			"methodName":"TCHAR windowClass()"
		},
		"LRESULT WM_ERASEBKGND(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_ERASEBKGND(wParam, lParam);\n    if (result != null)\n        return result;\n    drawBackground(wParam);\n    return LRESULT.ONE;\n}",
			"comments":"",
			"methodName":"LRESULT WM_ERASEBKGND(int wParam, int lParam)"
		},
		"void drawBand(int x, int y, int width, int height)":{
			"methodBody":"{\n    if ((style & SWT.SMOOTH) != 0)\n        return;\n    int hwndTrack = parent.handle;\n    byte[] bits = { -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0 };\n    int stippleBitmap = OS.CreateBitmap(8, 8, 1, 1, bits);\n    int stippleBrush = OS.CreatePatternBrush(stippleBitmap);\n    int hDC = OS.GetDCEx(hwndTrack, 0, OS.DCX_CACHE);\n    int oldBrush = OS.SelectObject(hDC, stippleBrush);\n    OS.PatBlt(hDC, x, y, width, height, OS.PATINVERT);\n    OS.SelectObject(hDC, oldBrush);\n    OS.ReleaseDC(hwndTrack, hDC);\n    OS.DeleteObject(stippleBrush);\n    OS.DeleteObject(stippleBitmap);\n}",
			"comments":"",
			"methodName":"void drawBand(int x, int y, int width, int height)"
		},
		"LRESULT WM_MOUSEMOVE(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_MOUSEMOVE(wParam, lParam);\n    if (result != null)\n        return result;\n    if (!dragging || (wParam & OS.MK_LBUTTON) == 0)\n        return result;\n    \n    POINT pt = new POINT();\n    pt.x = (short) (lParam & 0xFFFF);\n    pt.y = (short) (lParam >> 16);\n    int hwndTrack = parent.handle;\n    OS.MapWindowPoints(handle, hwndTrack, pt, 1);\n    RECT rect = new RECT(), clientRect = new RECT();\n    OS.GetWindowRect(handle, rect);\n    int width = rect.right - rect.left;\n    int height = rect.bottom - rect.top;\n    OS.GetClientRect(hwndTrack, clientRect);\n    int newX = lastX, newY = lastY;\n    if ((style & SWT.VERTICAL) != 0) {\n        int clientWidth = clientRect.right - clientRect.left;\n        newX = Math.min(Math.max(0, pt.x - startX), clientWidth - width);\n    } else {\n        int clientHeight = clientRect.bottom - clientRect.top;\n        newY = Math.min(Math.max(0, pt.y - startY), clientHeight - height);\n    }\n    if (newX == lastX && newY == lastY)\n        return result;\n    drawBand(lastX, lastY, width, height);\n    \n    Event event = new Event();\n    event.x = newX;\n    event.y = newY;\n    event.width = width;\n    event.height = height;\n    if ((style & SWT.SMOOTH) == 0) {\n        event.detail = SWT.DRAG;\n    }\n    sendEvent(SWT.Selection, event);\n    if (isDisposed())\n        return LRESULT.ZERO;\n    if (event.doit) {\n        lastX = event.x;\n        lastY = event.y;\n    }\n    if (OS.IsWinCE) {\n        OS.UpdateWindow(hwndTrack);\n    } else {\n        int flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;\n        OS.RedrawWindow(hwndTrack, null, 0, flags);\n    }\n    drawBand(lastX, lastY, width, height);\n    if ((style & SWT.SMOOTH) != 0) {\n        setBounds(lastX, lastY, width, height);\n    \n    }\n    return result;\n}",
			"comments":"/* Compute the banding rectangle */\n/* The event must be sent because doit flag is used */\n// widget could be disposed at this point\n",
			"methodName":"LRESULT WM_MOUSEMOVE(int wParam, int lParam)"
		},
		"LRESULT WM_GETDLGCODE(int wParam, int lParam)":{
			"methodBody":"{\n    return new LRESULT(OS.DLGC_STATIC);\n}",
			"comments":"",
			"methodName":"LRESULT WM_GETDLGCODE(int wParam, int lParam)"
		},
		"LRESULT WM_LBUTTONUP(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_LBUTTONUP(wParam, lParam);\n    \n    if (!dragging)\n        return result;\n    dragging = false;\n    RECT rect = new RECT();\n    OS.GetWindowRect(handle, rect);\n    int width = rect.right - rect.left;\n    int height = rect.bottom - rect.top;\n    \n    Event event = new Event();\n    event.x = lastX;\n    event.y = lastY;\n    event.width = width;\n    event.height = height;\n    drawBand(event.x, event.y, width, height);\n    sendEvent(SWT.Selection, event);\n    if (isDisposed())\n        return result;\n    if (event.doit) {\n        if ((style & SWT.SMOOTH) != 0) {\n            setBounds(event.x, event.y, width, height);\n        \n        }\n    }\n    return result;\n}",
			"comments":"/* Compute the banding rectangle */\n/* The event must be sent because doit flag is used */\n// widget could be disposed at this point\n",
			"methodName":"LRESULT WM_LBUTTONUP(int wParam, int lParam)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    return checkBits(style, SWT.HORIZONTAL, SWT.VERTICAL, 0, 0, 0, 0);\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"int windowProc()":{
			"methodBody":"{\n    return display.windowProc;\n}",
			"comments":"",
			"methodName":"int windowProc()"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Selection, listener);\n    eventTable.unhook(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the control is selected.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"LRESULT WM_LBUTTONDOWN(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_LBUTTONDOWN(wParam, lParam);\n    \n    int hwndTrack = parent.handle;\n    POINT pt = new POINT();\n    pt.x = (short) (lParam & 0xFFFF);\n    pt.y = (short) (lParam >> 16);\n    RECT rect = new RECT();\n    OS.GetWindowRect(handle, rect);\n    OS.MapWindowPoints(handle, 0, pt, 1);\n    startX = pt.x - rect.left;\n    startY = pt.y - rect.top;\n    OS.MapWindowPoints(0, hwndTrack, rect, 2);\n    lastX = rect.left;\n    lastY = rect.top;\n    int width = rect.right - rect.left;\n    int height = rect.bottom - rect.top;\n    \n    Event event = new Event();\n    event.x = lastX;\n    event.y = lastY;\n    event.width = width;\n    event.height = height;\n    if ((style & SWT.SMOOTH) == 0) {\n        event.detail = SWT.DRAG;\n    }\n    sendEvent(SWT.Selection, event);\n    if (isDisposed())\n        return LRESULT.ZERO;\n    \n    if (event.doit) {\n        dragging = true;\n        lastX = event.x;\n        lastY = event.y;\n        menuShell().bringToTop();\n        if (isDisposed())\n            return LRESULT.ZERO;\n        if (OS.IsWinCE) {\n            OS.UpdateWindow(hwndTrack);\n        } else {\n            int flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;\n            OS.RedrawWindow(hwndTrack, null, 0, flags);\n        }\n        drawBand(event.x, event.y, width, height);\n        if ((style & SWT.SMOOTH) != 0) {\n            setBounds(event.x, event.y, width, height);\n        \n        }\n    }\n    return result;\n}",
			"comments":"/* Compute the banding rectangle */\n/* The event must be sent because doit flag is used */\n/* Draw the banding rectangle */\n// widget could be disposed at this point\n",
			"methodName":"LRESULT WM_LBUTTONDOWN(int wParam, int lParam)"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the control is selected, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* When <code>widgetSelected</code> is called, the x, y, width, and height fields of the event object are valid.\n* If the reciever is being dragged, the event object detail field contains the value <code>SWT.DRAG</code>.\n* <code>widgetDefaultSelected</code> is not called.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"int callWindowProc(int hwnd, int msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (handle == 0)\n        return 0;\n    return OS.DefWindowProc(hwnd, msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"int callWindowProc(int hwnd, int msg, int wParam, int lParam)"
		},
		"public Point computeSize(int wHint, int hHint, boolean changed)":{
			"methodBody":"{\n    checkWidget();\n    int border = getBorderWidth();\n    int width = border * 2, height = border * 2;\n    if ((style & SWT.HORIZONTAL) != 0) {\n        width += DEFAULT_WIDTH;\n        height += 3;\n    } else {\n        width += 3;\n        height += DEFAULT_HEIGHT;\n    }\n    if (wHint != SWT.DEFAULT)\n        width = wHint + (border * 2);\n    if (hHint != SWT.DEFAULT)\n        height = hHint + (border * 2);\n    return new Point(width, height);\n}",
			"comments":"",
			"methodName":"public Point computeSize(int wHint, int hHint, boolean changed)"
		},
		"LRESULT WM_SETCURSOR(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_SETCURSOR(wParam, lParam);\n    if (result != null)\n        return result;\n    int hitTest = lParam & 0xFFFF;\n    if (hitTest == OS.HTCLIENT) {\n        int hCursor = 0;\n        if ((style & SWT.HORIZONTAL) != 0) {\n            hCursor = OS.LoadCursor(0, OS.IDC_SIZENS);\n        } else {\n            hCursor = OS.LoadCursor(0, OS.IDC_SIZEWE);\n        }\n        OS.SetCursor(hCursor);\n        return LRESULT.ONE;\n    }\n    return result;\n}",
			"comments":"",
			"methodName":"LRESULT WM_SETCURSOR(int wParam, int lParam)"
		},
		"LRESULT WM_KEYDOWN(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_KEYDOWN(wParam, lParam);\n    if (result != null)\n        return result;\n    switch(wParam) {\n        case OS.VK_LEFT:\n        case OS.VK_RIGHT:\n        case OS.VK_UP:\n        case OS.VK_DOWN:\n            \n            if (OS.GetKeyState(OS.VK_LBUTTON) < 0)\n                return result;\n            int step = OS.GetKeyState(OS.VK_CONTROL) < 0 ? INCREMENT : PAGE_INCREMENT;\n            POINT pt = new POINT();\n            if ((style & SWT.VERTICAL) != 0) {\n                if (wParam == OS.VK_UP || wParam == OS.VK_DOWN)\n                    break;\n                pt.x = wParam == OS.VK_LEFT ? -step : step;\n            } else {\n                if (wParam == OS.VK_LEFT || wParam == OS.VK_RIGHT)\n                    break;\n                pt.y = wParam == OS.VK_UP ? -step : step;\n            }\n            int hwndTrack = parent.handle;\n            OS.MapWindowPoints(handle, hwndTrack, pt, 1);\n            RECT rect = new RECT(), clientRect = new RECT();\n            OS.GetWindowRect(handle, rect);\n            int width = rect.right - rect.left;\n            int height = rect.bottom - rect.top;\n            OS.GetClientRect(hwndTrack, clientRect);\n            int clientWidth = clientRect.right - clientRect.left;\n            int clientHeight = clientRect.bottom - clientRect.top;\n            int newX = lastX, newY = lastY;\n            if ((style & SWT.VERTICAL) != 0) {\n                newX = Math.min(Math.max(0, pt.x - startX), clientWidth - width);\n            } else {\n                newY = Math.min(Math.max(0, pt.y - startY), clientHeight - height);\n            }\n            if (newX == lastX && newY == lastY)\n                return result;\n            \n            POINT cursorPt = new POINT();\n            cursorPt.x = pt.x;\n            cursorPt.y = pt.y;\n            OS.ClientToScreen(hwndTrack, cursorPt);\n            if ((style & SWT.VERTICAL) != 0) {\n                cursorPt.y += height / 2;\n            } else {\n                cursorPt.x += width / 2;\n            }\n            OS.SetCursorPos(cursorPt.x, cursorPt.y);\n            Event event = new Event();\n            event.x = newX;\n            event.y = newY;\n            event.width = width;\n            event.height = height;\n            sendEvent(SWT.Selection, event);\n            if (isDisposed())\n                return LRESULT.ZERO;\n            if (event.doit) {\n                if ((style & SWT.SMOOTH) != 0) {\n                    setBounds(event.x, event.y, width, height);\n                }\n            }\n            return result;\n    }\n    return result;\n}",
			"comments":"/* Calculate the new x or y position */\n/* Update the pointer position */\n",
			"methodName":"LRESULT WM_KEYDOWN(int wParam, int lParam)"
		}
	},
	"ClassORInterfaceName":[
		"Sash"
	]
}
