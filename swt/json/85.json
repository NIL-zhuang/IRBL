{
	"variables":[
		"marginWidth",
		"marginHeight",
		"horizontalSpacing",
		"verticalSpacing",
		"borderInsideRGB",
		"borderMiddleRGB",
		"borderOutsideRGB",
		"topLeft",
		"topCenter",
		"topRight",
		"content",
		"separateTopCenter",
		"showBorder",
		"separator",
		"borderTop",
		"borderBottom",
		"borderLeft",
		"borderRight",
		"highlight",
		"oldSize",
		"selectionBackground",
		"OFFSCREEN",
		"BORDER1_COLOR",
		"SELECTION_BACKGROUND",
		"listener",
		"events",
		"i",
		"mask",
		"trimX",
		"trimY",
		"trimWidth",
		"trimHeight",
		"clientArea",
		"gcForeground",
		"size",
		"border",
		"x1",
		"y1",
		"x2",
		"y2",
		"shape",
		"highlightColor",
		"size",
		"width",
		"height",
		"size",
		"size",
		"size",
		"SWT",
		"SWT",
		"parent",
		"style",
		"style",
		"SWT",
		"e",
		"SWT",
		"SWT",
		"e",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"events",
		"i",
		"events",
		"i",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"mask",
		"SWT",
		"x",
		"borderLeft",
		"highlight",
		"y",
		"borderTop",
		"highlight",
		"width",
		"borderLeft",
		"borderRight",
		"highlight",
		"height",
		"borderTop",
		"borderBottom",
		"highlight",
		"trimX",
		"trimY",
		"trimWidth",
		"trimHeight",
		"clientArea",
		"borderLeft",
		"clientArea",
		"borderTop",
		"clientArea",
		"borderLeft",
		"borderRight",
		"clientArea",
		"borderTop",
		"borderBottom",
		"clientArea",
		"content",
		"topCenter",
		"topLeft",
		"topRight",
		"topLeft",
		"topCenter",
		"topRight",
		"content",
		"oldSize",
		"selectionBackground",
		"gc",
		"BORDER1_COLOR",
		"showBorder",
		"gc",
		"border",
		"gc",
		"size",
		"size",
		"highlight",
		"size",
		"size",
		"x1",
		"y1",
		"x2",
		"y1",
		"x2",
		"y2",
		"x1",
		"y2",
		"x1",
		"y1",
		"highlight",
		"x1",
		"highlight",
		"y1",
		"highlight",
		"x1",
		"highlight",
		"y2",
		"highlight",
		"x2",
		"highlight",
		"y2",
		"highlight",
		"x2",
		"highlight",
		"y1",
		"highlight",
		"x1",
		"y1",
		"highlight",
		"SWT",
		"gc",
		"highlightColor",
		"gc",
		"shape",
		"separator",
		"gc",
		"border",
		"gc",
		"borderLeft",
		"highlight",
		"separator",
		"size",
		"borderLeft",
		"borderRight",
		"highlight",
		"separator",
		"gc",
		"gcForeground",
		"oldSize",
		"oldSize",
		"oldSize",
		"oldSize",
		"size",
		"width",
		"size",
		"oldSize",
		"borderRight",
		"highlight",
		"oldSize",
		"size",
		"width",
		"borderRight",
		"highlight",
		"size",
		"width",
		"width",
		"size",
		"oldSize",
		"size",
		"height",
		"size",
		"oldSize",
		"borderBottom",
		"highlight",
		"oldSize",
		"size",
		"height",
		"borderBottom",
		"highlight",
		"size",
		"height",
		"size",
		"height",
		"oldSize",
		"size",
		"content",
		"content",
		"SWT",
		"SWT",
		"OFFSCREEN",
		"OFFSCREEN",
		"content",
		"selectionBackground",
		"color",
		"color",
		"color",
		"SELECTION_BACKGROUND",
		"selectionBackground",
		"color",
		"topCenter",
		"topCenter",
		"SWT",
		"SWT",
		"OFFSCREEN",
		"size",
		"OFFSCREEN",
		"size",
		"topCenter",
		"c",
		"c",
		"SWT",
		"SWT",
		"OFFSCREEN",
		"size",
		"OFFSCREEN",
		"size",
		"c",
		"c",
		"c",
		"SWT",
		"SWT",
		"OFFSCREEN",
		"size",
		"OFFSCREEN",
		"size",
		"c",
		"showBorder",
		"show",
		"showBorder",
		"show",
		"showBorder",
		"borderLeft",
		"borderTop",
		"borderRight",
		"borderBottom",
		"SWT",
		"highlight",
		"borderBottom",
		"borderTop",
		"borderLeft",
		"borderRight",
		"highlight",
		"separateTopCenter",
		"show",
		"COLOR_WIDGET_NORMAL_SHADOW",
		"COLOR_LIST_BACKGROUND",
		"BORDER",
		"type",
		"Dispose",
		"Paint",
		"gc",
		"Resize",
		"Dispose",
		"Paint",
		"Resize",
		"length",
		"FLAT",
		"LEFT_TO_RIGHT",
		"RIGHT_TO_LEFT",
		"NO_REDRAW_RESIZE",
		"x",
		"y",
		"width",
		"height",
		"x",
		"y",
		"x",
		"y",
		"COLOR_LIST_SELECTION",
		"x",
		"x",
		"y",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"x",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"x",
		"ERROR_INVALID_ARGUMENT",
		"content",
		"content",
		"content",
		"content",
		"ERROR_INVALID_ARGUMENT",
		"topCenter",
		"topCenter",
		"topCenter",
		"topCenter",
		"x",
		"y",
		"topCenter",
		"ERROR_INVALID_ARGUMENT",
		"topLeft",
		"topLeft",
		"topLeft",
		"topLeft",
		"x",
		"y",
		"topLeft",
		"ERROR_INVALID_ARGUMENT",
		"topRight",
		"topRight",
		"topRight",
		"topRight",
		"x",
		"y",
		"topRight",
		"FLAT",
		"parent",
		"style",
		"e",
		"style",
		"x",
		"y",
		"width",
		"height",
		"gc",
		"content",
		"layout",
		"color",
		"topCenter",
		"c",
		"c",
		"show",
		"show"
	],
	"extendORImplementFiles":[
		"Composite"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt"
	],
	"methods":[
		"handleEvent",
		"checkStyle",
		"computeTrim",
		"getClientArea",
		"getContent",
		"getTopCenter",
		"getTopLeft",
		"getTopRight",
		"onDispose",
		"onPaint",
		"onResize",
		"setContent",
		"setLayout",
		"setSelectionBackground",
		"setTopCenter",
		"setTopLeft",
		"setTopRight",
		"setBorderVisible",
		"setTopCenterSeparate",
		"checkStyle",
		"setLayout",
		"setBorderVisible",
		"onDispose",
		"onPaint",
		"onResize",
		"addListener",
		"checkWidget",
		"checkWidget",
		"getClientArea",
		"getForeground",
		"getSize",
		"getSystemColor",
		"getDisplay",
		"setForeground",
		"drawRectangle",
		"getSystemColor",
		"getDisplay",
		"setBackground",
		"fillPolygon",
		"setForeground",
		"drawLine",
		"setForeground",
		"getSize",
		"redraw",
		"redraw",
		"redraw",
		"checkWidget",
		"getParent",
		"error",
		"isDisposed",
		"setBounds",
		"layout",
		"checkWidget",
		"checkWidget",
		"getSystemColor",
		"getDisplay",
		"redraw",
		"checkWidget",
		"getParent",
		"error",
		"isDisposed",
		"getSize",
		"setLocation",
		"layout",
		"checkWidget",
		"getParent",
		"error",
		"isDisposed",
		"getSize",
		"setLocation",
		"layout",
		"checkWidget",
		"getParent",
		"error",
		"isDisposed",
		"getSize",
		"setLocation",
		"layout",
		"checkWidget",
		"getStyle",
		"layout",
		"redraw",
		"checkWidget",
		"layout",
		"RGB",
		"RGB",
		"RGB",
		"ViewFormLayout",
		"Listener",
		"Rectangle"
	],
	"methodsBody":{
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    switch(e.type) {\n        case SWT.Dispose:\n            onDispose();\n            break;\n        case SWT.Paint:\n            onPaint(e.gc);\n            break;\n        case SWT.Resize:\n            onResize();\n            break;\n    }\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"public Control getTopLeft()":{
			"methodBody":"{\n    \n    return topLeft;\n}",
			"comments":"/**\n* Returns the Control that appears in the top left corner of the pane.\n* Typically this is a label such as CLabel.\n*\n* @return the control in the top left corner of the pane or null\n*/\n//checkWidget();\n",
			"methodName":"public Control getTopLeft()"
		},
		"public void setTopCenter(Control topCenter)":{
			"methodBody":"{\n    checkWidget();\n    if (topCenter != null && topCenter.getParent() != this) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (this.topCenter != null && !this.topCenter.isDisposed()) {\n        Point size = this.topCenter.getSize();\n        this.topCenter.setLocation(OFFSCREEN - size.x, OFFSCREEN - size.y);\n    }\n    this.topCenter = topCenter;\n    layout(false);\n}",
			"comments":"/**\n* Set the control that appears in the top center of the pane.\n* Typically this is a toolbar.\n* The topCenter is optional.  Setting the topCenter to null will remove it from\n* the pane - however, the creator of the topCenter must dispose of the topCenter.\n*\n* @param topCenter the control to be displayed in the top center or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the control is not a child of this ViewForm</li>\n* </ul>\n*/\n",
			"methodName":"public void setTopCenter(Control topCenter)"
		},
		"public Control getContent()":{
			"methodBody":"{\n    \n    return content;\n}",
			"comments":"/**\n* Returns the content area.\n*\n* @return the control in the content area of the pane or null\n*/\n//checkWidget();\n",
			"methodName":"public Control getContent()"
		},
		"public Control getTopRight()":{
			"methodBody":"{\n    \n    return topRight;\n}",
			"comments":"/**\n* Returns the control in the top right corner of the pane.\n* Typically this is a Close button or a composite with a Menu and Close button.\n*\n* @return the control in the top right corner of the pane or null\n*/\n//checkWidget();\n",
			"methodName":"public Control getTopRight()"
		},
		"void onDispose()":{
			"methodBody":"{\n    topLeft = null;\n    topCenter = null;\n    topRight = null;\n    content = null;\n    oldSize = null;\n    selectionBackground = null;\n}",
			"comments":"",
			"methodName":"void onDispose()"
		},
		"public Control getTopCenter()":{
			"methodBody":"{\n    \n    return topCenter;\n}",
			"comments":"/**\n* Returns Control that appears in the top center of the pane.\n* Typically this is a toolbar.\n*\n* @return the control in the top center of the pane or null\n*/\n//checkWidget();\n",
			"methodName":"public Control getTopCenter()"
		},
		"void onPaint(GC gc)":{
			"methodBody":"{\n    Color gcForeground = gc.getForeground();\n    Point size = getSize();\n    Color border = getDisplay().getSystemColor(BORDER1_COLOR);\n    if (showBorder) {\n        gc.setForeground(border);\n        gc.drawRectangle(0, 0, size.x - 1, size.y - 1);\n        if (highlight > 0) {\n            int x1 = 1;\n            int y1 = 1;\n            int x2 = size.x - 1;\n            int y2 = size.y - 1;\n            int[] shape = new int[] { x1, y1, x2, y1, x2, y2, x1, y2, x1, y1 + highlight, x1 + highlight, y1 + highlight, x1 + highlight, y2 - highlight, x2 - highlight, y2 - highlight, x2 - highlight, y1 + highlight, x1, y1 + highlight };\n            Color highlightColor = getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);\n            gc.setBackground(highlightColor);\n            gc.fillPolygon(shape);\n        }\n    }\n    if (separator > -1) {\n        gc.setForeground(border);\n        gc.drawLine(borderLeft + highlight, separator, size.x - borderLeft - borderRight - highlight, separator);\n    }\n    gc.setForeground(gcForeground);\n}",
			"comments":"",
			"methodName":"void onPaint(GC gc)"
		},
		"public Rectangle getClientArea()":{
			"methodBody":"{\n    checkWidget();\n    Rectangle clientArea = super.getClientArea();\n    clientArea.x += borderLeft;\n    clientArea.y += borderTop;\n    clientArea.width -= borderLeft + borderRight;\n    clientArea.height -= borderTop + borderBottom;\n    return clientArea;\n}",
			"comments":"",
			"methodName":"public Rectangle getClientArea()"
		},
		"public Rectangle computeTrim(int x, int y, int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    int trimX = x - borderLeft - highlight;\n    int trimY = y - borderTop - highlight;\n    int trimWidth = width + borderLeft + borderRight + 2 * highlight;\n    int trimHeight = height + borderTop + borderBottom + 2 * highlight;\n    return new Rectangle(trimX, trimY, trimWidth, trimHeight);\n}",
			"comments":"",
			"methodName":"public Rectangle computeTrim(int x, int y, int width, int height)"
		},
		"public void setTopCenterSeparate(boolean show)":{
			"methodBody":"{\n    checkWidget();\n    separateTopCenter = show;\n    layout(false);\n}",
			"comments":"/**\n* If true, the topCenter will always appear on a separate line by itself, otherwise the\n* topCenter will appear in the top row if there is room and will be moved to the second row if\n* required.\n*\n* @param show true if the topCenter will always appear on a separate line by itself\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setTopCenterSeparate(boolean show)"
		},
		"public void setContent(Control content)":{
			"methodBody":"{\n    checkWidget();\n    if (content != null && content.getParent() != this) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (this.content != null && !this.content.isDisposed()) {\n        this.content.setBounds(OFFSCREEN, OFFSCREEN, 0, 0);\n    }\n    this.content = content;\n    layout(false);\n}",
			"comments":"/**\n* Sets the content.\n* Setting the content to null will remove it from\n* the pane - however, the creator of the content must dispose of the content.\n*\n* @param content the control to be displayed in the content area or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the control is not a child of this ViewForm</li>\n* </ul>\n*/\n",
			"methodName":"public void setContent(Control content)"
		},
		"public void setTopRight(Control c)":{
			"methodBody":"{\n    checkWidget();\n    if (c != null && c.getParent() != this) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (this.topRight != null && !this.topRight.isDisposed()) {\n        Point size = this.topRight.getSize();\n        this.topRight.setLocation(OFFSCREEN - size.x, OFFSCREEN - size.y);\n    }\n    this.topRight = c;\n    layout(false);\n}",
			"comments":"/**\n* Set the control that appears in the top right corner of the pane.\n* Typically this is a Close button or a composite with a Menu and Close button.\n* The topRight is optional.  Setting the top right control to null will remove it from\n* the pane - however, the creator of the control must dispose of the control.\n*\n* @param c the control to be displayed in the top right corner or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the control is not a child of this ViewForm</li>\n* </ul>\n*/\n",
			"methodName":"public void setTopRight(Control c)"
		},
		"public void setBorderVisible(boolean show)":{
			"methodBody":"{\n    checkWidget();\n    if (showBorder == show)\n        return;\n    showBorder = show;\n    if (showBorder) {\n        borderLeft = borderTop = borderRight = borderBottom = 1;\n        if ((getStyle() & SWT.FLAT) == 0)\n            highlight = 2;\n    } else {\n        borderBottom = borderTop = borderLeft = borderRight = 0;\n        highlight = 0;\n    }\n    layout(false);\n    redraw();\n}",
			"comments":"/**\n* Specify whether the border should be displayed or not.\n*\n* @param show true if the border should be displayed\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setBorderVisible(boolean show)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    int mask = SWT.FLAT | SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;\n    return style & mask | SWT.NO_REDRAW_RESIZE;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void setTopLeft(Control c)":{
			"methodBody":"{\n    checkWidget();\n    if (c != null && c.getParent() != this) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (this.topLeft != null && !this.topLeft.isDisposed()) {\n        Point size = this.topLeft.getSize();\n        this.topLeft.setLocation(OFFSCREEN - size.x, OFFSCREEN - size.y);\n    }\n    this.topLeft = c;\n    layout(false);\n}",
			"comments":"/**\n* Set the control that appears in the top left corner of the pane.\n* Typically this is a label such as CLabel.\n* The topLeft is optional.  Setting the top left control to null will remove it from\n* the pane - however, the creator of the control must dispose of the control.\n*\n* @param c the control to be displayed in the top left corner or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the control is not a child of this ViewForm</li>\n* </ul>\n*/\n",
			"methodName":"public void setTopLeft(Control c)"
		},
		"public void setLayout(Layout layout)":{
			"methodBody":"{\n    checkWidget();\n    return;\n}",
			"comments":"/**\n* Sets the layout which is associated with the receiver to be\n* the argument which may be null.\n* <p>\n* Note : No Layout can be set on this Control because it already\n* manages the size and position of its children.\n* </p>\n*\n* @param layout the receiver's new layout or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setLayout(Layout layout)"
		},
		"void onResize()":{
			"methodBody":"{\n    Point size = getSize();\n    if (oldSize == null || oldSize.x == 0 || oldSize.y == 0) {\n        redraw();\n    } else {\n        int width = 0;\n        if (oldSize.x < size.x) {\n            width = size.x - oldSize.x + borderRight + highlight;\n        } else if (oldSize.x > size.x) {\n            width = borderRight + highlight;\n        }\n        redraw(size.x - width, 0, width, size.y, false);\n        int height = 0;\n        if (oldSize.y < size.y) {\n            height = size.y - oldSize.y + borderBottom + highlight;\n        }\n        if (oldSize.y > size.y) {\n            height = borderBottom + highlight;\n        }\n        redraw(0, size.y - height, size.x, height, false);\n    }\n    oldSize = size;\n}",
			"comments":"",
			"methodName":"void onResize()"
		},
		"void setSelectionBackground(Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (selectionBackground == color)\n        return;\n    if (color == null)\n        color = getDisplay().getSystemColor(SELECTION_BACKGROUND);\n    selectionBackground = color;\n    redraw();\n}",
			"comments":"",
			"methodName":"void setSelectionBackground(Color color)"
		}
	},
	"ClassORInterfaceName":[
		"ViewForm"
	]
}
