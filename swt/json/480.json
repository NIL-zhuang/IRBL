{
	"variables":[
		"parent",
		"resizable",
		"typedListener",
		"typedListener",
		"index",
		"hwndHeader",
		"hdItem",
		"index",
		"columnWidth",
		"hwnd",
		"hDC",
		"oldFont",
		"newFont",
		"cp",
		"rect",
		"flags",
		"tvItem",
		"hItem",
		"item",
		"imageWidth",
		"textWidth",
		"image",
		"bounds",
		"string",
		"buffer",
		"buffer",
		"headerWidth",
		"margin",
		"hwndHeader",
		"bounds",
		"index",
		"hwndHeader",
		"hdItem",
		"hwnd",
		"rect",
		"itemRect",
		"index",
		"hwndHeader",
		"hdItem",
		"index",
		"hHeap",
		"buffer",
		"byteCount",
		"pszText",
		"hwndHeader",
		"hdItem",
		"result",
		"index",
		"hwndHeader",
		"hdItem",
		"parent",
		"style",
		"resizable",
		"parent",
		"parent",
		"parent",
		"parent",
		"style",
		"resizable",
		"parent",
		"parent",
		"index",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"resizable",
		"parent",
		"index",
		"parent",
		"hwndHeader",
		"hdItem",
		"OS",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"hdItem",
		"hdItem",
		"parent",
		"index",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"hwnd",
		"OS",
		"newFont",
		"oldFont",
		"OS",
		"hDC",
		"newFont",
		"parent",
		"OS",
		"OS",
		"tvItem",
		"OS",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hItem",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"OS",
		"hItem",
		"tvItem",
		"hItem",
		"OS",
		"hwnd",
		"OS",
		"tvItem",
		"parent",
		"tvItem",
		"index",
		"rect",
		"item",
		"OS",
		"hwnd",
		"OS",
		"rect",
		"columnWidth",
		"Math",
		"columnWidth",
		"rect",
		"item",
		"item",
		"index",
		"image",
		"image",
		"imageWidth",
		"bounds",
		"item",
		"item",
		"index",
		"string",
		"cp",
		"string",
		"OS",
		"hDC",
		"buffer",
		"buffer",
		"rect",
		"flags",
		"textWidth",
		"rect",
		"rect",
		"columnWidth",
		"Math",
		"columnWidth",
		"imageWidth",
		"textWidth",
		"Tree",
		"cp",
		"text",
		"OS",
		"hDC",
		"buffer",
		"buffer",
		"rect",
		"flags",
		"rect",
		"rect",
		"Tree",
		"image",
		"parent",
		"hwndHeader",
		"OS",
		"OS",
		"margin",
		"OS",
		"hwndHeader",
		"OS",
		"margin",
		"OS",
		"OS",
		"image",
		"headerWidth",
		"bounds",
		"margin",
		"newFont",
		"OS",
		"hDC",
		"oldFont",
		"OS",
		"hwnd",
		"hDC",
		"Math",
		"headerWidth",
		"columnWidth",
		"parent",
		"parent",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"alignment",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"index",
		"index",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"alignment",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"hwndHeader",
		"hdItem",
		"OS",
		"OS",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"hdItem",
		"hdItem",
		"OS",
		"style",
		"SWT",
		"SWT",
		"hdItem",
		"OS",
		"style",
		"SWT",
		"SWT",
		"hdItem",
		"OS",
		"style",
		"SWT",
		"SWT",
		"hdItem",
		"OS",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"hdItem",
		"index",
		"parent",
		"OS",
		"hwnd",
		"rect",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"itemRect",
		"rect",
		"itemRect",
		"rect",
		"itemRect",
		"OS",
		"hwnd",
		"rect",
		"image",
		"image",
		"SWT",
		"parent",
		"index",
		"image",
		"parent",
		"hwndHeader",
		"hdItem",
		"OS",
		"OS",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"hdItem",
		"image",
		"hdItem",
		"OS",
		"hdItem",
		"parent",
		"image",
		"hdItem",
		"OS",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"hdItem",
		"resizable",
		"string",
		"SWT",
		"parent",
		"index",
		"string",
		"OS",
		"parent",
		"string",
		"buffer",
		"TCHAR",
		"OS",
		"hHeap",
		"OS",
		"byteCount",
		"OS",
		"pszText",
		"buffer",
		"byteCount",
		"parent",
		"hwndHeader",
		"hdItem",
		"OS",
		"hdItem",
		"pszText",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"hdItem",
		"pszText",
		"OS",
		"hHeap",
		"pszText",
		"result",
		"SWT",
		"parent",
		"index",
		"parent",
		"hwndHeader",
		"hdItem",
		"OS",
		"hdItem",
		"width",
		"OS",
		"hwndHeader",
		"OS",
		"index",
		"hdItem",
		"parent",
		"parent",
		"parent",
		"ERROR_NULL_ARGUMENT",
		"Resize",
		"Move",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"LEFT",
		"CENTER",
		"RIGHT",
		"ERROR_INVALID_SUBCLASS",
		"LEFT",
		"LEFT",
		"CENTER",
		"CENTER",
		"RIGHT",
		"RIGHT",
		"LEFT",
		"hwndHeader",
		"mask",
		"HDI_WIDTH",
		"HDM_GETITEM",
		"cxy",
		"handle",
		"WM_GETFONT",
		"DT_CALCRECT",
		"DT_NOPREFIX",
		"mask",
		"TVIF_PARAM",
		"TVM_GETNEXTITEM",
		"TVGN_ROOT",
		"TVM_GETNEXTITEM",
		"TVGN_NEXTVISIBLE",
		"hItem",
		"TVM_GETITEM",
		"items",
		"lParam",
		"left",
		"handle",
		"TVM_GETITEMRECT",
		"right",
		"images",
		"images",
		"width",
		"strings",
		"strings",
		"right",
		"left",
		"INSET",
		"right",
		"left",
		"HEADER_MARGIN",
		"hwndHeader",
		"COMCTL32_VERSION",
		"HDM_GETBITMAPMARGIN",
		"SM_CXEDGE",
		"width",
		"ERROR_NULL_ARGUMENT",
		"Move",
		"Resize",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"LEFT",
		"RIGHT",
		"CENTER",
		"LEFT",
		"RIGHT",
		"CENTER",
		"LEFT",
		"RIGHT",
		"CENTER",
		"hwndHeader",
		"mask",
		"HDI_FORMAT",
		"HDI_IMAGE",
		"HDM_GETITEM",
		"fmt",
		"HDF_JUSTIFYMASK",
		"LEFT",
		"LEFT",
		"fmt",
		"HDF_LEFT",
		"CENTER",
		"CENTER",
		"fmt",
		"HDF_CENTER",
		"RIGHT",
		"RIGHT",
		"fmt",
		"HDF_RIGHT",
		"HDM_SETITEM",
		"handle",
		"HDM_GETITEMRECT",
		"left",
		"left",
		"right",
		"right",
		"ERROR_INVALID_ARGUMENT",
		"hwndHeader",
		"mask",
		"HDI_FORMAT",
		"HDI_IMAGE",
		"HDM_GETITEM",
		"fmt",
		"LVCFMT_IMAGE",
		"iImage",
		"fmt",
		"LVCFMT_IMAGE",
		"HDM_SETITEM",
		"resizable",
		"ERROR_NULL_ARGUMENT",
		"sizeof",
		"HEAP_ZERO_MEMORY",
		"hwndHeader",
		"mask",
		"HDI_TEXT",
		"pszText",
		"HDM_SETITEM",
		"ERROR_CANNOT_SET_TEXT",
		"hwndHeader",
		"mask",
		"HDI_WIDTH",
		"cxy",
		"HDM_SETITEM",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"listener",
		"listener",
		"style",
		"listener",
		"listener",
		"alignment",
		"image",
		"resizable",
		"string",
		"width"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.events"
	],
	"methods":[
		"addControlListener",
		"addSelectionListener",
		"checkStyle",
		"checkSubclass",
		"getAlignment",
		"getNameText",
		"getParent",
		"getResizable",
		"getWidth",
		"pack",
		"releaseChild",
		"releaseWidget",
		"removeControlListener",
		"removeSelectionListener",
		"setAlignment",
		"setImage",
		"setResizable",
		"setText",
		"setWidth",
		"checkStyle",
		"createItem",
		"getColumnCount",
		"checkStyle",
		"createItem",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"checkBits",
		"isValidSubclass",
		"error",
		"checkWidget",
		"getText",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"checkWidget",
		"indexOf",
		"GetDC",
		"SendMessage",
		"SelectObject",
		"getCodePage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"max",
		"getBounds",
		"DrawText",
		"length",
		"max",
		"DrawText",
		"length",
		"VERSION",
		"SendMessage",
		"GetSystemMetrics",
		"getBounds",
		"SelectObject",
		"ReleaseDC",
		"setWidth",
		"max",
		"releaseChild",
		"destroyItem",
		"releaseWidget",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"SendMessage",
		"GetClientRect",
		"SendMessage",
		"InvalidateRect",
		"checkWidget",
		"isDisposed",
		"error",
		"indexOf",
		"setImage",
		"SendMessage",
		"imageIndex",
		"SendMessage",
		"checkWidget",
		"checkWidget",
		"error",
		"indexOf",
		"setText",
		"GetProcessHeap",
		"getCodePage",
		"fixMnemonic",
		"length",
		"HeapAlloc",
		"MoveMemory",
		"SendMessage",
		"HeapFree",
		"error",
		"checkWidget",
		"indexOf",
		"SendMessage",
		"setScrollWidth",
		"TypedListener",
		"TypedListener",
		"HDITEM",
		"RECT",
		"TVITEM",
		"TCHAR",
		"TCHAR",
		"HDITEM",
		"RECT",
		"RECT",
		"HDITEM",
		"TCHAR",
		"HDITEM",
		"HDITEM"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    super.setText(string);\n    \n    int hHeap = OS.GetProcessHeap();\n    TCHAR buffer = new TCHAR(parent.getCodePage(), fixMnemonic(string), true);\n    int byteCount = buffer.length() * TCHAR.sizeof;\n    int pszText = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\n    OS.MoveMemory(pszText, buffer, byteCount);\n    int hwndHeader = parent.hwndHeader;\n    if (hwndHeader == 0)\n        return;\n    HDITEM hdItem = new HDITEM();\n    hdItem.mask = OS.HDI_TEXT;\n    hdItem.pszText = pszText;\n    int result = OS.SendMessage(hwndHeader, OS.HDM_SETITEM, index, hdItem);\n    if (pszText != 0)\n        OS.HeapFree(hHeap, 0, pszText);\n    if (result == 0)\n        error(SWT.ERROR_CANNOT_SET_TEXT);\n}",
			"comments":"/*\n* Bug in Windows.  When a column header contains a\n* mnemonic character, Windows does not measure the\n* text properly.  This causes '...' to always appear\n* at the end of the text.  The fix is to remove\n* mnemonic characters and replace doubled mnemonics\n* with spaces.\n*/\n",
			"methodName":"public void setText(String string)"
		},
		"public int getWidth()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return 0;\n    int hwndHeader = parent.hwndHeader;\n    if (hwndHeader == 0)\n        return 0;\n    HDITEM hdItem = new HDITEM();\n    hdItem.mask = OS.HDI_WIDTH;\n    OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem);\n    return hdItem.cxy;\n}",
			"comments":"/**\n* Gets the width of the receiver.\n*\n* @return the width\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getWidth()"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed()) {\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    super.setImage(image);\n    int hwndHeader = parent.hwndHeader;\n    if (hwndHeader == 0)\n        return;\n    HDITEM hdItem = new HDITEM();\n    hdItem.mask = OS.HDI_FORMAT | OS.HDI_IMAGE;\n    OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem);\n    if (image != null) {\n        hdItem.fmt |= OS.LVCFMT_IMAGE;\n        hdItem.iImage = parent.imageIndex(image);\n    } else {\n        hdItem.fmt &= ~OS.LVCFMT_IMAGE;\n    }\n    OS.SendMessage(hwndHeader, OS.HDM_SETITEM, index, hdItem);\n}",
			"comments":"",
			"methodName":"public void setImage(Image image)"
		},
		"public void removeControlListener(ControlListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Move, listener);\n    eventTable.unhook(SWT.Resize, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the control is moved or resized.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ControlListener\n* @see #addControlListener\n*/\n",
			"methodName":"public void removeControlListener(ControlListener listener)"
		},
		"public void pack()":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    int columnWidth = 0;\n    int hwnd = parent.handle;\n    int hDC = OS.GetDC(hwnd);\n    int oldFont = 0, newFont = OS.SendMessage(hwnd, OS.WM_GETFONT, 0, 0);\n    if (newFont != 0)\n        oldFont = OS.SelectObject(hDC, newFont);\n    int cp = parent.getCodePage();\n    RECT rect = new RECT();\n    int flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;\n    TVITEM tvItem = new TVITEM();\n    tvItem.mask = OS.TVIF_PARAM;\n    int hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0);\n    while (hItem != 0) {\n        hItem = OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hItem);\n        tvItem.hItem = hItem;\n        OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem);\n        TreeItem item = parent.items[tvItem.lParam];\n        if (index == 0) {\n            rect.left = item.handle;\n            if (OS.SendMessage(hwnd, OS.TVM_GETITEMRECT, 1, rect) != 0) {\n                columnWidth = Math.max(columnWidth, rect.right);\n            }\n        } else {\n            int imageWidth = 0, textWidth = 0;\n            Image image = item.images != null ? item.images[index] : null;\n            if (image != null) {\n                Rectangle bounds = image.getBounds();\n                imageWidth = bounds.width;\n            }\n            String string = item.strings != null ? item.strings[index] : null;\n            if (string != null) {\n                TCHAR buffer = new TCHAR(cp, string, false);\n                OS.DrawText(hDC, buffer, buffer.length(), rect, flags);\n                textWidth = rect.right - rect.left;\n            }\n            columnWidth = Math.max(columnWidth, imageWidth + textWidth + Tree.INSET * 3);\n        }\n    }\n    TCHAR buffer = new TCHAR(cp, text, true);\n    OS.DrawText(hDC, buffer, buffer.length(), rect, flags);\n    int headerWidth = rect.right - rect.left + Tree.HEADER_MARGIN;\n    if (image != null) {\n        int margin = 0, hwndHeader = parent.hwndHeader;\n        if (hwndHeader != 0 && OS.COMCTL32_VERSION >= OS.VERSION(5, 80)) {\n            margin = OS.SendMessage(hwndHeader, OS.HDM_GETBITMAPMARGIN, 0, 0);\n        } else {\n            margin = OS.GetSystemMetrics(OS.SM_CXEDGE) * 3;\n        }\n        Rectangle bounds = image.getBounds();\n        headerWidth += bounds.width + margin * 2;\n    }\n    if (newFont != 0)\n        OS.SelectObject(hDC, oldFont);\n    OS.ReleaseDC(hwnd, hDC);\n    setWidth(Math.max(headerWidth, columnWidth));\n}",
			"comments":"/**\n* Causes the receiver to be resized to its preferred size.\n* For a composite, this involves computing the preferred size\n* from its layout, if there is one.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n*/\n",
			"methodName":"public void pack()"
		},
		"public void addControlListener(ControlListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Resize, typedListener);\n    addListener(SWT.Move, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the control is moved or resized, by sending\n* it one of the messages defined in the <code>ControlListener</code>\n* interface.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ControlListener\n* @see #removeControlListener\n*/\n",
			"methodName":"public void addControlListener(ControlListener listener)"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    if (!isValidSubclass())\n        error(SWT.ERROR_INVALID_SUBCLASS);\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"String getNameText()":{
			"methodBody":"{\n    return getText();\n}",
			"comments":"",
			"methodName":"String getNameText()"
		},
		"public void setAlignment(int alignment)":{
			"methodBody":"{\n    checkWidget();\n    if ((alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER)) == 0)\n        return;\n    int index = parent.indexOf(this);\n    if (index == -1 || index == 0)\n        return;\n    style &= ~(SWT.LEFT | SWT.RIGHT | SWT.CENTER);\n    style |= alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER);\n    int hwndHeader = parent.hwndHeader;\n    if (hwndHeader == 0)\n        return;\n    HDITEM hdItem = new HDITEM();\n    hdItem.mask = OS.HDI_FORMAT | OS.HDI_IMAGE;\n    OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem);\n    hdItem.fmt &= ~OS.HDF_JUSTIFYMASK;\n    if ((style & SWT.LEFT) == SWT.LEFT)\n        hdItem.fmt |= OS.HDF_LEFT;\n    if ((style & SWT.CENTER) == SWT.CENTER)\n        hdItem.fmt |= OS.HDF_CENTER;\n    if ((style & SWT.RIGHT) == SWT.RIGHT)\n        hdItem.fmt |= OS.HDF_RIGHT;\n    OS.SendMessage(hwndHeader, OS.HDM_SETITEM, index, hdItem);\n    if (index != 0) {\n        int hwnd = parent.handle;\n        RECT rect = new RECT(), itemRect = new RECT();\n        OS.GetClientRect(hwnd, rect);\n        OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, itemRect);\n        rect.left = itemRect.left;\n        rect.right = itemRect.right;\n        OS.InvalidateRect(hwnd, rect, true);\n    }\n}",
			"comments":"/**\n* Controls how text and images will be displayed in the receiver.\n* The argument should be one of <code>LEFT</code>, <code>RIGHT</code>\n* or <code>CENTER</code>.\n*\n* @param alignment the new alignment\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setAlignment(int alignment)"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    parent = null;\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public void setWidth(int width)":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    int hwndHeader = parent.hwndHeader;\n    if (hwndHeader == 0)\n        return;\n    HDITEM hdItem = new HDITEM();\n    hdItem.mask = OS.HDI_WIDTH;\n    hdItem.cxy = width;\n    OS.SendMessage(hwndHeader, OS.HDM_SETITEM, index, hdItem);\n    parent.setScrollWidth();\n}",
			"comments":"/**\n* Sets the width of the receiver.\n*\n* @param width the new width\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setWidth(int width)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    return checkBits(style, SWT.LEFT, SWT.CENTER, SWT.RIGHT, 0, 0, 0);\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Selection, listener);\n    eventTable.unhook(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the control is selected.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    parent.destroyItem(this);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"public void setResizable(boolean resizable)":{
			"methodBody":"{\n    checkWidget();\n    this.resizable = resizable;\n}",
			"comments":"/**\n* Sets the resizable attribute.  A column that is\n* not resizable cannot be dragged by the user but\n* may be resized by the programmer.\n*\n* @param resizable the resize attribute\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setResizable(boolean resizable)"
		},
		"public int getAlignment()":{
			"methodBody":"{\n    checkWidget();\n    if ((style & SWT.LEFT) != 0)\n        return SWT.LEFT;\n    if ((style & SWT.CENTER) != 0)\n        return SWT.CENTER;\n    if ((style & SWT.RIGHT) != 0)\n        return SWT.RIGHT;\n    return SWT.LEFT;\n}",
			"comments":"/**\n* Returns a value which describes the position of the\n* text or image in the receiver. The value will be one of\n* <code>LEFT</code>, <code>RIGHT</code> or <code>CENTER</code>.\n*\n* @return the alignment\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getAlignment()"
		},
		"public Tree getParent()":{
			"methodBody":"{\n    checkWidget();\n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>Tree</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Tree getParent()"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the control is selected, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* <code>widgetSelected</code> is called when the column header is selected.\n* <code>widgetDefaultSelected</code> is not called.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"public boolean getResizable()":{
			"methodBody":"{\n    checkWidget();\n    return resizable;\n}",
			"comments":"/**\n* Gets the resizable attribute. A column that is\n* not resizable cannot be dragged by the user but\n* may be resized by the programmer.\n*\n* @return the resizable attribute\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getResizable()"
		}
	},
	"ClassORInterfaceName":[
		"TreeColumn"
	]
}
