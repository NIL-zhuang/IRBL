{
	"variables":[
		"itemCount",
		"items",
		"newItems",
		"index",
		"result",
		"i",
		"item",
		"display",
		"display",
		"Display",
		"display",
		"display",
		"Display",
		"display",
		"SWT",
		"display",
		"index",
		"index",
		"itemCount",
		"SWT",
		"itemCount",
		"items",
		"items",
		"System",
		"items",
		"newItems",
		"items",
		"items",
		"newItems",
		"System",
		"items",
		"index",
		"items",
		"index",
		"itemCount",
		"index",
		"items",
		"index",
		"item",
		"index",
		"itemCount",
		"items",
		"index",
		"item",
		"index",
		"index",
		"itemCount",
		"System",
		"items",
		"index",
		"items",
		"index",
		"itemCount",
		"index",
		"items",
		"itemCount",
		"index",
		"index",
		"itemCount",
		"SWT",
		"items",
		"index",
		"itemCount",
		"itemCount",
		"System",
		"items",
		"result",
		"result",
		"result",
		"display",
		"display",
		"i",
		"items",
		"i",
		"items",
		"i",
		"item",
		"item",
		"item",
		"items",
		"ERROR_THREAD_INVALID_ACCESS",
		"display",
		"ERROR_INVALID_RANGE",
		"length",
		"length",
		"length",
		"ERROR_INVALID_RANGE",
		"length",
		"tray",
		"tray",
		"length",
		"display",
		"style",
		"item",
		"index",
		"item",
		"index"
	],
	"extendORImplementFiles":[
		"Widget"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt"
	],
	"methods":[
		"createItem",
		"destroyItem",
		"getItem",
		"getItemCount",
		"getItems",
		"releaseChild",
		"releaseWidget",
		"getCurrent",
		"getDefault",
		"isValidThread",
		"error",
		"error",
		"arraycopy",
		"arraycopy",
		"arraycopy",
		"checkWidget",
		"error",
		"checkWidget",
		"checkWidget",
		"arraycopy",
		"releaseChild",
		"isDisposed",
		"releaseResources",
		"releaseWidget"
	],
	"methodsBody":{
		"void releaseWidget()":{
			"methodBody":"{\n    for (int i = 0; i < items.length; i++) {\n        TrayItem item = items[i];\n        if (item != null && !item.isDisposed()) {\n            item.releaseResources();\n        }\n    }\n    items = null;\n    super.releaseWidget();\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public TrayItem[] getItems()":{
			"methodBody":"{\n    checkWidget();\n    TrayItem[] result = new TrayItem[itemCount];\n    System.arraycopy(items, 0, result, 0, result.length);\n    return result;\n}",
			"comments":"/**\n* Returns an array of <code>TrayItem</code>s which are the items\n* in the receiver.\n* <p>\n* Note: This is not the actual structure used by the receiver\n* to maintain its list of items, so modifying the array will\n* not affect the receiver.\n* </p>\n*\n* @return the items in the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public TrayItem[] getItems()"
		},
		"void destroyItem(TrayItem item)":{
			"methodBody":"{\n    int index = 0;\n    while (index < itemCount) {\n        if (items[index] == item)\n            break;\n        index++;\n    }\n    if (index == itemCount)\n        return;\n    System.arraycopy(items, index + 1, items, index, --itemCount - index);\n    items[itemCount] = null;\n}",
			"comments":"",
			"methodName":"void destroyItem(TrayItem item)"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    if (display.tray == this)\n        display.tray = null;\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"void createItem(TrayItem item, int index)":{
			"methodBody":"{\n    if (!(0 <= index && index <= itemCount))\n        error(SWT.ERROR_INVALID_RANGE);\n    if (itemCount == items.length) {\n        TrayItem[] newItems = new TrayItem[items.length + 4];\n        System.arraycopy(items, 0, newItems, 0, items.length);\n        items = newItems;\n    }\n    System.arraycopy(items, index, items, index + 1, itemCount++ - index);\n    items[index] = item;\n}",
			"comments":"",
			"methodName":"void createItem(TrayItem item, int index)"
		},
		"public TrayItem getItem(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (!(0 <= index && index < itemCount))\n        error(SWT.ERROR_INVALID_RANGE);\n    return items[index];\n}",
			"comments":"/**\n* Returns the item at the given, zero-relative index in the\n* receiver. Throws an exception if the index is out of range.\n*\n* @param index the index of the item to return\n* @return the item at the given index\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public TrayItem getItem(int index)"
		},
		"public int getItemCount()":{
			"methodBody":"{\n    checkWidget();\n    return itemCount;\n}",
			"comments":"/**\n* Returns the number of items contained in the receiver.\n*\n* @return the number of items\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getItemCount()"
		}
	},
	"ClassORInterfaceName":[
		"Tray"
	]
}
