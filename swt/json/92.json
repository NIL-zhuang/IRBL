{
	"variables":[
		"event",
		"event",
		"event",
		"event",
		"event",
		"event",
		"event",
		"event",
		"event",
		"listener",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"DND",
		"e",
		"eventListener",
		"event",
		"event",
		"e",
		"type",
		"DragStart",
		"DragEnd",
		"DragSetData",
		"DragEnter",
		"DragLeave",
		"DragOver",
		"Drop",
		"DropAccept",
		"DragOperationChanged",
		"listener",
		"e"
	],
	"extendORImplementFiles":[
		"TypedListener"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt.internal",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"handleEvent",
		"dragStart",
		"updateEvent",
		"dragFinished",
		"updateEvent",
		"dragSetData",
		"updateEvent",
		"dragEnter",
		"updateEvent",
		"dragLeave",
		"updateEvent",
		"dragOver",
		"updateEvent",
		"drop",
		"updateEvent",
		"dropAccept",
		"updateEvent",
		"dragOperationChanged",
		"updateEvent",
		"DragSourceEvent",
		"DragSourceEvent",
		"DragSourceEvent",
		"DropTargetEvent",
		"DropTargetEvent",
		"DropTargetEvent",
		"DropTargetEvent",
		"DropTargetEvent",
		"DropTargetEvent"
	],
	"methodsBody":{
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    switch(e.type) {\n        case DND.DragStart:\n            {\n                DragSourceEvent event = new DragSourceEvent((DNDEvent) e);\n                ((DragSourceListener) eventListener).dragStart(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.DragEnd:\n            {\n                DragSourceEvent event = new DragSourceEvent((DNDEvent) e);\n                ((DragSourceListener) eventListener).dragFinished(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.DragSetData:\n            {\n                DragSourceEvent event = new DragSourceEvent((DNDEvent) e);\n                ((DragSourceListener) eventListener).dragSetData(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.DragEnter:\n            {\n                DropTargetEvent event = new DropTargetEvent((DNDEvent) e);\n                ((DropTargetListener) eventListener).dragEnter(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.DragLeave:\n            {\n                DropTargetEvent event = new DropTargetEvent((DNDEvent) e);\n                ((DropTargetListener) eventListener).dragLeave(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.DragOver:\n            {\n                DropTargetEvent event = new DropTargetEvent((DNDEvent) e);\n                ((DropTargetListener) eventListener).dragOver(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.Drop:\n            {\n                DropTargetEvent event = new DropTargetEvent((DNDEvent) e);\n                ((DropTargetListener) eventListener).drop(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.DropAccept:\n            {\n                DropTargetEvent event = new DropTargetEvent((DNDEvent) e);\n                ((DropTargetListener) eventListener).dropAccept(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n        case DND.DragOperationChanged:\n            {\n                DropTargetEvent event = new DropTargetEvent((DNDEvent) e);\n                ((DropTargetListener) eventListener).dragOperationChanged(event);\n                event.updateEvent((DNDEvent) e);\n                break;\n            }\n    }\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		}
	},
	"ClassORInterfaceName":[
		"DNDListener"
	]
}
