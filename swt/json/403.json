{
	"variables":[
		"type",
		"marginWidth",
		"marginHeight",
		"spacing",
		"children",
		"count",
		"maxWidth",
		"maxHeight",
		"i",
		"child",
		"w",
		"h",
		"size",
		"width",
		"height",
		"data",
		"size",
		"trimX",
		"trimY",
		"rect",
		"w",
		"h",
		"data",
		"string",
		"index",
		"rect",
		"children",
		"count",
		"width",
		"height",
		"x",
		"extra",
		"y",
		"cellWidth",
		"i",
		"child",
		"childWidth",
		"x",
		"cellHeight",
		"y",
		"extra",
		"i",
		"child",
		"childHeight",
		"string",
		"SWT",
		"type",
		"composite",
		"children",
		"i",
		"count",
		"i",
		"children",
		"i",
		"wHint",
		"hHint",
		"count",
		"type",
		"SWT",
		"wHint",
		"SWT",
		"w",
		"Math",
		"wHint",
		"count",
		"spacing",
		"count",
		"type",
		"SWT",
		"hHint",
		"SWT",
		"h",
		"Math",
		"hHint",
		"count",
		"spacing",
		"count",
		"child",
		"w",
		"h",
		"flushCache",
		"maxWidth",
		"Math",
		"maxWidth",
		"size",
		"maxHeight",
		"Math",
		"maxHeight",
		"size",
		"type",
		"SWT",
		"width",
		"count",
		"maxWidth",
		"count",
		"width",
		"count",
		"spacing",
		"height",
		"maxHeight",
		"width",
		"maxWidth",
		"height",
		"count",
		"maxHeight",
		"count",
		"height",
		"count",
		"spacing",
		"width",
		"marginWidth",
		"height",
		"marginHeight",
		"wHint",
		"SWT",
		"width",
		"wHint",
		"hHint",
		"SWT",
		"height",
		"hHint",
		"width",
		"height",
		"control",
		"data",
		"data",
		"control",
		"data",
		"wHint",
		"SWT",
		"hHint",
		"SWT",
		"size",
		"data",
		"control",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"control",
		"trimX",
		"rect",
		"trimY",
		"rect",
		"trimX",
		"trimY",
		"control",
		"wHint",
		"SWT",
		"wHint",
		"Math",
		"wHint",
		"trimX",
		"hHint",
		"SWT",
		"hHint",
		"Math",
		"hHint",
		"trimY",
		"size",
		"data",
		"control",
		"w",
		"h",
		"flushCache",
		"size",
		"control",
		"data",
		"data",
		"string",
		"index",
		"string",
		"string",
		"index",
		"string",
		"composite",
		"composite",
		"children",
		"count",
		"rect",
		"marginWidth",
		"rect",
		"marginHeight",
		"type",
		"SWT",
		"width",
		"count",
		"spacing",
		"rect",
		"marginWidth",
		"width",
		"count",
		"rect",
		"marginHeight",
		"width",
		"count",
		"i",
		"count",
		"i",
		"children",
		"i",
		"cellWidth",
		"i",
		"childWidth",
		"extra",
		"i",
		"count",
		"childWidth",
		"extra",
		"child",
		"x",
		"y",
		"childWidth",
		"height",
		"x",
		"childWidth",
		"spacing",
		"height",
		"count",
		"spacing",
		"rect",
		"marginWidth",
		"height",
		"count",
		"rect",
		"marginHeight",
		"height",
		"count",
		"i",
		"count",
		"i",
		"children",
		"i",
		"cellHeight",
		"i",
		"childHeight",
		"extra",
		"i",
		"count",
		"childHeight",
		"extra",
		"child",
		"x",
		"y",
		"width",
		"childHeight",
		"y",
		"childHeight",
		"spacing",
		"string",
		"type",
		"SWT",
		"marginWidth",
		"string",
		"marginWidth",
		"marginHeight",
		"string",
		"marginHeight",
		"spacing",
		"string",
		"spacing",
		"string",
		"string",
		"string",
		"string",
		"HORIZONTAL",
		"type",
		"length",
		"HORIZONTAL",
		"DEFAULT",
		"VERTICAL",
		"DEFAULT",
		"x",
		"y",
		"HORIZONTAL",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"width",
		"height",
		"DEFAULT",
		"DEFAULT",
		"length",
		"width",
		"height",
		"HORIZONTAL",
		"x",
		"y",
		"x",
		"y",
		"VERTICAL",
		"type",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"composite",
		"flushCache"
	],
	"extendORImplementFiles":[
		"Layout"
	],
	"package":[
		"org.eclipse.swt.layout"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"computeSize",
		"computeChildSize",
		"flushCache",
		"getName",
		"layout",
		"toString",
		"getChildren",
		"max",
		"max",
		"computeChildSize",
		"max",
		"max",
		"getLayoutData",
		"setLayoutData",
		"computeSize",
		"computeTrim",
		"getBorderWidth",
		"max",
		"max",
		"computeSize",
		"getLayoutData",
		"flushCache",
		"getName",
		"getClass",
		"lastIndexOf",
		"substring",
		"length",
		"getClientArea",
		"getChildren",
		"setBounds",
		"setBounds",
		"getName",
		"trim",
		"Point",
		"FillData"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    String string = getName() + \" {\";\n    string += \"type=\" + ((type == SWT.VERTICAL) ? \"SWT.VERTICAL\" : \"SWT.HORIZONTAL\") + \" \";\n    if (marginWidth != 0)\n        string += \"marginWidth=\" + marginWidth + \" \";\n    if (marginHeight != 0)\n        string += \"marginHeight=\" + marginHeight + \" \";\n    if (spacing != 0)\n        string += \"spacing=\" + spacing + \" \";\n    string = string.trim();\n    string += \"}\";\n    return string;\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the event\n*/\n",
			"methodName":"public String toString()"
		},
		"protected boolean flushCache(Control control)":{
			"methodBody":"{\n    Object data = control.getLayoutData();\n    if (data != null)\n        ((FillData) data).flushCache();\n    return true;\n}",
			"comments":"",
			"methodName":"protected boolean flushCache(Control control)"
		},
		"String getName()":{
			"methodBody":"{\n    String string = getClass().getName();\n    int index = string.lastIndexOf('.');\n    if (index == -1)\n        return string;\n    return string.substring(index + 1, string.length());\n}",
			"comments":"",
			"methodName":"String getName()"
		},
		"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    Control[] children = composite.getChildren();\n    int count = children.length;\n    int maxWidth = 0, maxHeight = 0;\n    for (int i = 0; i < count; i++) {\n        Control child = children[i];\n        int w = wHint, h = hHint;\n        if (count > 0) {\n            if (type == SWT.HORIZONTAL && wHint != SWT.DEFAULT) {\n                w = Math.max(0, (wHint - (count - 1) * spacing) / count);\n            }\n            if (type == SWT.VERTICAL && hHint != SWT.DEFAULT) {\n                h = Math.max(0, (hHint - (count - 1) * spacing) / count);\n            }\n        }\n        Point size = computeChildSize(child, w, h, flushCache);\n        maxWidth = Math.max(maxWidth, size.x);\n        maxHeight = Math.max(maxHeight, size.y);\n    }\n    int width = 0, height = 0;\n    if (type == SWT.HORIZONTAL) {\n        width = count * maxWidth;\n        if (count != 0)\n            width += (count - 1) * spacing;\n        height = maxHeight;\n    } else {\n        width = maxWidth;\n        height = count * maxHeight;\n        if (count != 0)\n            height += (count - 1) * spacing;\n    }\n    width += marginWidth * 2;\n    height += marginHeight * 2;\n    if (wHint != SWT.DEFAULT)\n        width = wHint;\n    if (hHint != SWT.DEFAULT)\n        height = hHint;\n    return new Point(width, height);\n}",
			"comments":"",
			"methodName":"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)"
		},
		"protected void layout(Composite composite, boolean flushCache)":{
			"methodBody":"{\n    Rectangle rect = composite.getClientArea();\n    Control[] children = composite.getChildren();\n    int count = children.length;\n    if (count == 0)\n        return;\n    int width = rect.width - marginWidth * 2;\n    int height = rect.height - marginHeight * 2;\n    if (type == SWT.HORIZONTAL) {\n        width -= (count - 1) * spacing;\n        int x = rect.x + marginWidth, extra = width % count;\n        int y = rect.y + marginHeight, cellWidth = width / count;\n        for (int i = 0; i < count; i++) {\n            Control child = children[i];\n            int childWidth = cellWidth;\n            if (i == 0) {\n                childWidth += extra / 2;\n            } else {\n                if (i == count - 1)\n                    childWidth += (extra + 1) / 2;\n            }\n            child.setBounds(x, y, childWidth, height);\n            x += childWidth + spacing;\n        }\n    } else {\n        height -= (count - 1) * spacing;\n        int x = rect.x + marginWidth, cellHeight = height / count;\n        int y = rect.y + marginHeight, extra = height % count;\n        for (int i = 0; i < count; i++) {\n            Control child = children[i];\n            int childHeight = cellHeight;\n            if (i == 0) {\n                childHeight += extra / 2;\n            } else {\n                if (i == count - 1)\n                    childHeight += (extra + 1) / 2;\n            }\n            child.setBounds(x, y, width, childHeight);\n            y += childHeight + spacing;\n        }\n    }\n}",
			"comments":"",
			"methodName":"protected void layout(Composite composite, boolean flushCache)"
		},
		"Point computeChildSize(Control control, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    FillData data = (FillData) control.getLayoutData();\n    if (data == null) {\n        data = new FillData();\n        control.setLayoutData(data);\n    }\n    Point size = null;\n    if (wHint == SWT.DEFAULT && hHint == SWT.DEFAULT) {\n        size = data.computeSize(control, wHint, hHint, flushCache);\n    } else {\n        \n        int trimX, trimY;\n        if (control instanceof Scrollable) {\n            Rectangle rect = ((Scrollable) control).computeTrim(0, 0, 0, 0);\n            trimX = rect.width;\n            trimY = rect.height;\n        } else {\n            trimX = trimY = control.getBorderWidth() * 2;\n        }\n        int w = wHint == SWT.DEFAULT ? wHint : Math.max(0, wHint - trimX);\n        int h = hHint == SWT.DEFAULT ? hHint : Math.max(0, hHint - trimY);\n        size = data.computeSize(control, w, h, flushCache);\n    }\n    return size;\n}",
			"comments":"// TEMPORARY CODE\n",
			"methodName":"Point computeChildSize(Control control, int wHint, int hHint, boolean flushCache)"
		}
	},
	"ClassORInterfaceName":[
		"FillLayout"
	]
}
