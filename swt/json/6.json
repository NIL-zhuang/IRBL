{
	"variables":[
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e"
	],
	"extendORImplementFiles":[
		"AccessibleControlListener"
	],
	"package":[
		"org.eclipse.swt.accessibility"
	],
	"import":[],
	"methods":[
		"getChildAtPoint",
		"getLocation",
		"getChild",
		"getChildCount",
		"getDefaultAction",
		"getFocus",
		"getRole",
		"getSelection",
		"getState",
		"getValue",
		"getChildren"
	],
	"methodsBody":{
		"public void getSelection(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the identity of\n* the child or control that is currently selected.\n* The default behavior is to do nothing.\n* <p>\n* Return the identifier of the selected child in the\n* <code>childID</code> field of the event object.\n* Return CHILDID_SELF if the control itself is selected.\n* Return CHILDID_MULTIPLE if multiple children are selected, and return an array of childIDs in the <code>children</code> field.\n* Return CHILDID_NONE if neither the control nor any of its children are selected.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [Typical OUT] - the ID of the selected child, or CHILDID_SELF, or CHILDID_MULTIPLE, or CHILDID_NONE</li>\n*    <li>accessible [Optional OUT] - the accessible object for the control or child may be returned instead of the childID</li>\n* </ul>\n*/\n",
			"methodName":"public void getSelection(AccessibleControlEvent e)"
		},
		"public void getChild(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the accessible object\n* for a child of the control.\n* The default behavior is to do nothing.\n* <p>\n* Return an <code>Accessible</code> for the specified control or\n* child in the <code>accessible</code> field of the event object.\n* Return null if the specified child does not have its own\n* <code>Accessible</code>.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [IN] - an identifier specifying a child of the control</li>\n*    <li>accessible [OUT] - an Accessible for the specified childID, or null if one does not exist</li>\n* </ul>\n*/\n",
			"methodName":"public void getChild(AccessibleControlEvent e)"
		},
		"public void getFocus(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the identity of\n* the child or control that has keyboard focus.\n* The default behavior is to do nothing.\n* <p>\n* Return the identifier of the child that has focus in the\n* <code>childID</code> field of the event object.\n* Return CHILDID_SELF if the control itself has keyboard focus.\n* Return CHILDID_NONE if neither the control nor any of its children has focus.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [Typical OUT] - the ID of the child with focus, or CHILDID_SELF, or CHILDID_NONE</li>\n*    <li>accessible [Optional OUT] - the accessible object for a child may be returned instead of its childID</li>\n* </ul>\n*/\n",
			"methodName":"public void getFocus(AccessibleControlEvent e)"
		},
		"public void getLocation(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the location\n* of the control, or the location of a child of the control.\n* The default behavior is to do nothing.\n* <p>\n* Return a rectangle describing the location of the specified\n* control or child in the <code>x, y, width, and height</code>\n* fields of the event object.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [IN] - an identifier specifying the control or one of its children</li>\n*    <li>x, y, width, height [OUT] - the control or child location in display coordinates</li>\n* </ul>\n*/\n",
			"methodName":"public void getLocation(AccessibleControlEvent e)"
		},
		"public void getDefaultAction(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the default action\n* of the control, or the default action of a child of the control.\n* The default behavior is to do nothing.\n* <p>\n* This string is typically a verb describing what the user does to it.\n* For example, a Push Button's default action is \"Press\", a Check Button's\n* is \"Check\" or \"UnCheck\", and List items have the default action \"Double Click\".\n* </p><p>\n* Return a string describing the default action of the specified\n* control or child in the <code>result</code> field of the event object.\n* Returning null tells the client to use the platform default action string.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [IN] - an identifier specifying the control or one of its children</li>\n*    <li>result [OUT] - the requested default action string, or null</li>\n* </ul>\n*/\n",
			"methodName":"public void getDefaultAction(AccessibleControlEvent e)"
		},
		"public void getValue(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the value\n* of the control, or the value of a child of the control.\n* The default behavior is to do nothing.\n* <p>\n* Many controls do not return a value. Examples of controls\n* that do are: Combo returns the text string, Text returns\n* its contents, ProgressBar returns a string representing a\n* percentage, and Tree items return a string representing\n* their level in the tree.\n* </p><p>\n* Return a string describing the value of the specified control\n* or child in the <code>result</code> field of the event object.\n* Returning null tells the client to use the platform value string.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [IN] - an identifier specifying the control or one of its children</li>\n*    <li>result [OUT] - the requested value string, or null</li>\n* </ul>\n*/\n",
			"methodName":"public void getValue(AccessibleControlEvent e)"
		},
		"public void getChildAtPoint(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the identifier\n* of the control child at the specified display coordinates.\n* The default behavior is to do nothing.\n* <p>\n* Return the identifier of the child at display point (x, y)\n* in the <code>childID</code> field of the event object.\n* Return CHILDID_SELF if point (x, y) is in the control itself\n* and not in any child. Return CHILDID_NONE if point (x, y)\n* is not contained in either the control or any of its children.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>x, y [IN] - the specified point in display coordinates</li>\n*    <li>childID [Typical OUT] - the ID of the child at point, or CHILDID_SELF, or CHILDID_NONE</li>\n*    <li>accessible [Optional OUT] - the accessible object for the control or child may be returned instead of the childID</li>\n* </ul>\n*/\n",
			"methodName":"public void getChildAtPoint(AccessibleControlEvent e)"
		},
		"public void getRole(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the role\n* of the control, or the role of a child of the control.\n* The default behavior is to do nothing.\n* <p>\n* Return a role constant (constant defined in ACC beginning with ROLE_)\n* that describes the role of the specified control or child in the\n* <code>detail</code> field of the event object.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [IN] - an identifier specifying the control or one of its children</li>\n*    <li>detail [OUT] - a role constant describing the role of the control or child</li>\n* </ul>\n*/\n",
			"methodName":"public void getRole(AccessibleControlEvent e)"
		},
		"public void getChildren(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the children of the control.\n* The default behavior is to do nothing.\n* <p>\n* Return the children as an array of childIDs in the <code>children</code>\n* field of the event object.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>children [Typical OUT] - an array of childIDs</li>\n*    <li>accessible [Optional OUT] - an array of accessible objects for the children may be returned instead of the childIDs</li>\n* </ul>\n*/\n",
			"methodName":"public void getChildren(AccessibleControlEvent e)"
		},
		"public void getState(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the state\n* of the control, or the state of a child of the control.\n* The default behavior is to do nothing.\n* <p>\n* Return a state constant (constant defined in ACC beginning with STATE_)\n* that describes the current state of the specified control or child in the\n* <code>detail</code> field of the event object.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>childID [IN] - an identifier specifying the control or one of its children</li>\n*    <li>detail [OUT] - a state constant describing the current state of the control or child</li>\n* </ul>\n*/\n",
			"methodName":"public void getState(AccessibleControlEvent e)"
		},
		"public void getChildCount(AccessibleControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"/**\n* Sent when an accessibility client requests the number of\n* children in the control.\n* The default behavior is to do nothing.\n* <p>\n* Return the number of child items in the <code>detail</code>\n* field of the event object.\n* </p>\n*\n* @param e an event object containing the following fields:<ul>\n*    <li>detail [OUT] - the number of child items in this control</li>\n* </ul>\n*/\n",
			"methodName":"public void getChildCount(AccessibleControlEvent e)"
		}
	},
	"ClassORInterfaceName":[
		"AccessibleControlAdapter"
	]
}
