{
	"variables":[
		"table",
		"scrollIndex",
		"scrollBeginTime",
		"SCROLL_HYSTERESIS",
		"handle",
		"coordinates",
		"pinfo",
		"top",
		"count",
		"index",
		"lvItem",
		"table",
		"effect",
		"DND",
		"effect",
		"effect",
		"DND",
		"DND",
		"effect",
		"DND",
		"effect",
		"effect",
		"DND",
		"effect",
		"effect",
		"effect",
		"table",
		"x",
		"y",
		"coordinates",
		"table",
		"coordinates",
		"pinfo",
		"coordinates",
		"pinfo",
		"coordinates",
		"OS",
		"handle",
		"OS",
		"pinfo",
		"effect",
		"DND",
		"scrollBeginTime",
		"scrollIndex",
		"pinfo",
		"scrollIndex",
		"pinfo",
		"scrollBeginTime",
		"System",
		"scrollBeginTime",
		"Math",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"scrollIndex",
		"top",
		"Math",
		"scrollIndex",
		"Math",
		"count",
		"scrollIndex",
		"OS",
		"handle",
		"OS",
		"index",
		"scrollBeginTime",
		"scrollIndex",
		"scrollBeginTime",
		"System",
		"SCROLL_HYSTERESIS",
		"scrollIndex",
		"pinfo",
		"lvItem",
		"OS",
		"OS",
		"handle",
		"OS",
		"lvItem",
		"pinfo",
		"effect",
		"DND",
		"lvItem",
		"OS",
		"OS",
		"handle",
		"OS",
		"pinfo",
		"lvItem",
		"table",
		"FEEDBACK_SELECT",
		"FEEDBACK_INSERT_AFTER",
		"FEEDBACK_INSERT_BEFORE",
		"FEEDBACK_INSERT_BEFORE",
		"FEEDBACK_INSERT_AFTER",
		"handle",
		"x",
		"x",
		"y",
		"y",
		"LVM_HITTEST",
		"FEEDBACK_SCROLL",
		"iItem",
		"iItem",
		"LVM_GETTOPINDEX",
		"LVM_GETITEMCOUNT",
		"LVM_ENSUREVISIBLE",
		"iItem",
		"stateMask",
		"LVIS_DROPHILITED",
		"LVM_SETITEMSTATE",
		"iItem",
		"FEEDBACK_SELECT",
		"state",
		"LVIS_DROPHILITED",
		"LVM_SETITEMSTATE",
		"iItem",
		"table",
		"effect",
		"effect",
		"x",
		"y"
	],
	"extendORImplementFiles":[
		"DragUnderEffect"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"checkEffect",
		"show",
		"checkEffect",
		"toControl",
		"SendMessage",
		"currentTimeMillis",
		"max",
		"SendMessage",
		"SendMessage",
		"max",
		"min",
		"SendMessage",
		"currentTimeMillis",
		"SendMessage",
		"SendMessage",
		"Point",
		"LVHITTESTINFO",
		"LVITEM"
	],
	"methodsBody":{
		"private int checkEffect(int effect)":{
			"methodBody":"{\n    \n    if ((effect & DND.FEEDBACK_SELECT) != 0)\n        effect = effect & ~DND.FEEDBACK_INSERT_AFTER & ~DND.FEEDBACK_INSERT_BEFORE;\n    if ((effect & DND.FEEDBACK_INSERT_BEFORE) != 0)\n        effect = effect & ~DND.FEEDBACK_INSERT_AFTER;\n    return effect;\n}",
			"comments":"// Some effects are mutually exclusive.  Make sure that only one of the mutually exclusive effects has been specified.\n",
			"methodName":"private int checkEffect(int effect)"
		},
		"public void show(int effect, int x, int y)":{
			"methodBody":"{\n    effect = checkEffect(effect);\n    int handle = table.handle;\n    Point coordinates = new Point(x, y);\n    coordinates = table.toControl(coordinates);\n    LVHITTESTINFO pinfo = new LVHITTESTINFO();\n    pinfo.x = coordinates.x;\n    pinfo.y = coordinates.y;\n    OS.SendMessage(handle, OS.LVM_HITTEST, 0, pinfo);\n    if ((effect & DND.FEEDBACK_SCROLL) == 0) {\n        scrollBeginTime = 0;\n        scrollIndex = -1;\n    } else {\n        if (pinfo.iItem != -1 && scrollIndex == pinfo.iItem && scrollBeginTime != 0) {\n            if (System.currentTimeMillis() >= scrollBeginTime) {\n                int top = Math.max(0, OS.SendMessage(handle, OS.LVM_GETTOPINDEX, 0, 0));\n                int count = OS.SendMessage(handle, OS.LVM_GETITEMCOUNT, 0, 0);\n                int index = (scrollIndex - 1 < top) ? Math.max(0, scrollIndex - 1) : Math.min(count - 1, scrollIndex + 1);\n                OS.SendMessage(handle, OS.LVM_ENSUREVISIBLE, index, 0);\n                scrollBeginTime = 0;\n                scrollIndex = -1;\n            }\n        } else {\n            scrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;\n            scrollIndex = pinfo.iItem;\n        }\n    }\n    LVITEM lvItem = new LVITEM();\n    lvItem.stateMask = OS.LVIS_DROPHILITED;\n    OS.SendMessage(handle, OS.LVM_SETITEMSTATE, -1, lvItem);\n    if (pinfo.iItem != -1 && (effect & DND.FEEDBACK_SELECT) != 0) {\n        lvItem.state = OS.LVIS_DROPHILITED;\n        OS.SendMessage(handle, OS.LVM_SETITEMSTATE, pinfo.iItem, lvItem);\n    }\n    \n    return;\n}",
			"comments":"// Insert mark only supported on Windows XP with manifest\n//\tif (OS.COMCTL32_MAJOR >= 6) {\n//\t\tif ((effect & DND.FEEDBACK_INSERT_BEFORE) != 0 || (effect & DND.FEEDBACK_INSERT_AFTER) != 0) {\n//\t\t\tLVINSERTMARK lvinsertmark = new LVINSERTMARK();\n//\t\t\tlvinsertmark.cbSize = LVINSERTMARK.sizeof;\n//\t\t\tlvinsertmark.dwFlags = (effect & DND.FEEDBACK_INSERT_BEFORE) != 0 ? 0 : OS.LVIM_AFTER;\n//\t\t\tlvinsertmark.iItem = pinfo.iItem == -1 ? 0 : pinfo.iItem;\n//\t\t\tint hItem = pinfo.iItem;\n//\t\t\tOS.SendMessage (handle, OS.LVM_SETINSERTMARK, 0, lvinsertmark);\n//\t\t} else {\n//\t\t\tOS.SendMessage (handle, OS.LVM_SETINSERTMARK, 0, 0);\n//\t\t}\n//\t}\n",
			"methodName":"public void show(int effect, int x, int y)"
		}
	},
	"ClassORInterfaceName":[
		"TableDragUnderEffect"
	]
}
