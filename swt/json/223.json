{
	"variables":[
		"codeLengthInfo",
		"codeValues",
		"MAX_CODE_LENGTH",
		"BAD_CODE",
		"i",
		"i",
		"i",
		"j",
		"tmp",
		"codes",
		"lastLength",
		"code",
		"i",
		"last",
		"i",
		"code",
		"codelength",
		"offset",
		"index",
		"length",
		"max",
		"min",
		"baseIndex",
		"lengths",
		"lengths",
		"codeValues",
		"lengths",
		"i",
		"codeValues",
		"i",
		"codeValues",
		"i",
		"i",
		"codeLengthInfo",
		"MAX_CODE_LENGTH",
		"i",
		"MAX_CODE_LENGTH",
		"i",
		"codeLengthInfo",
		"i",
		"codeLengthInfo",
		"i",
		"i",
		"codeLengthInfo",
		"i",
		"codeLengthInfo",
		"i",
		"BAD_CODE",
		"codeLengthInfo",
		"i",
		"i",
		"lengths",
		"i",
		"i",
		"j",
		"lengths",
		"j",
		"lengths",
		"j",
		"lengths",
		"i",
		"lengths",
		"j",
		"lengths",
		"i",
		"codeValues",
		"j",
		"codeValues",
		"i",
		"tmp",
		"lengths",
		"j",
		"lengths",
		"j",
		"lengths",
		"i",
		"lengths",
		"i",
		"tmp",
		"tmp",
		"codeValues",
		"j",
		"codeValues",
		"j",
		"codeValues",
		"i",
		"codeValues",
		"i",
		"tmp",
		"lengths",
		"i",
		"lengths",
		"i",
		"lastLength",
		"lengths",
		"i",
		"lastLength",
		"code",
		"lastLength",
		"codes",
		"i",
		"code",
		"code",
		"i",
		"lengths",
		"i",
		"last",
		"lengths",
		"i",
		"last",
		"lengths",
		"i",
		"codeLengthInfo",
		"last",
		"i",
		"codeLengthInfo",
		"last",
		"codes",
		"i",
		"last",
		"codeLengthInfo",
		"last",
		"codes",
		"i",
		"stream",
		"codelength",
		"MAX_CODE_LENGTH",
		"code",
		"codeLengthInfo",
		"codelength",
		"code",
		"code",
		"stream",
		"codelength",
		"codelength",
		"MAX_CODE_LENGTH",
		"stream",
		"code",
		"codeLengthInfo",
		"codelength",
		"codeLengthInfo",
		"codelength",
		"offset",
		"codeValues",
		"index",
		"length",
		"length",
		"length",
		"baseIndex",
		"min",
		"max",
		"length",
		"length",
		"length",
		"length",
		"length",
		"baseIndex",
		"min",
		"max",
		"max",
		"min",
		"baseIndex",
		"lengths",
		"lengths",
		"lengths",
		"stream"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[],
	"methods":[
		"initialize",
		"generateTable",
		"getNextValue",
		"initialize",
		"generateTable",
		"getNextIdatBit",
		"getNextIdatBit",
		"error",
		"CodeLengthInfo"
	],
	"methodsBody":{
		"private void generateTable(int[] lengths)":{
			"methodBody":"{\n    \n    for (int i = 0; i < lengths.length - 1; i++) {\n        for (int j = i + 1; j < lengths.length; j++) {\n            if (lengths[j] < lengths[i] || (lengths[j] == lengths[i] && codeValues[j] < codeValues[i])) {\n                int tmp;\n                tmp = lengths[j];\n                lengths[j] = lengths[i];\n                lengths[i] = tmp;\n                tmp = codeValues[j];\n                codeValues[j] = codeValues[i];\n                codeValues[i] = tmp;\n            }\n        }\n    }\n    \n    \n    \n    int[] codes = new int[lengths.length];\n    int lastLength = 0;\n    int code = 0;\n    for (int i = 0; i < lengths.length; i++) {\n        while (lastLength != lengths[i]) {\n            lastLength++;\n            code <<= 1;\n        }\n        if (lastLength != 0) {\n            codes[i] = code;\n            code++;\n        }\n    }\n    int last = 0;\n    for (int i = 0; i < lengths.length; i++) {\n        if (last != lengths[i]) {\n            last = lengths[i];\n            codeLengthInfo[last - 1].baseIndex = i;\n            codeLengthInfo[last - 1].min = codes[i];\n        }\n        if (last != 0)\n            codeLengthInfo[last - 1].max = codes[i];\n    }\n}",
			"comments":"// Sort the values. Primary key is code size. Secondary key is value.\n// These values in these arrays correspond to the elements of the\n// \"values\" array. The Huffman code for codeValues[N] is codes[N]\n// and the length of the code is lengths[N].\n",
			"methodName":"private void generateTable(int[] lengths)"
		},
		"private void initialize(int[] lengths)":{
			"methodBody":"{\n    codeValues = new int[lengths.length];\n    for (int i = 0; i < codeValues.length; i++) {\n        codeValues[i] = i;\n    }\n    \n    \n    \n    codeLengthInfo = new CodeLengthInfo[MAX_CODE_LENGTH];\n    for (int i = 0; i < MAX_CODE_LENGTH; i++) {\n        codeLengthInfo[i] = new CodeLengthInfo();\n        codeLengthInfo[i].length = i;\n        codeLengthInfo[i].baseIndex = 0;\n        codeLengthInfo[i].min = BAD_CODE;\n        codeLengthInfo[i].max = -1;\n    }\n}",
			"comments":"// minCodesByLength[n] : The smallest Huffman code of length n + 1.\n// maxCodesByLength[n] : The largest Huffman code of length n + 1.\n// indexesByLength[n] : Index into the values array. First value with a code of length n + 1.\n",
			"methodName":"private void initialize(int[] lengths)"
		},
		"int getNextValue(PngDecodingDataStream stream)":{
			"methodBody":"{\n    int code = stream.getNextIdatBit();\n    int codelength = 0;\n    \n    while (codelength < MAX_CODE_LENGTH && code > codeLengthInfo[codelength].max) {\n        code = ((code << 1) | stream.getNextIdatBit());\n        codelength++;\n    }\n    if (codelength >= MAX_CODE_LENGTH)\n        stream.error();\n    \n    \n    \n    \n    int offset = code - codeLengthInfo[codelength].min;\n    \n    \n    int index = codeLengthInfo[codelength].baseIndex + offset;\n    return codeValues[index];\n}",
			"comments":"// Here we are taking advantage of the fact that 1 bits are used as\n// a prefix to the longer codeValues.\n// Now we have a Huffman code of length (codelength + 1) that\n// is somewhere in the range\n// minCodesByLength[codelength]..maxCodesByLength[codelength].\n// This code is the (offset + 1)'th code of (codelength + 1);\n// indexesByLength[codelength] is the first code of length (codelength + 1)\n// so now we can look up the value for the Huffman code in the table.\n",
			"methodName":"int getNextValue(PngDecodingDataStream stream)"
		}
	},
	"ClassORInterfaceName":[
		"PngHuffmanTable",
		"CodeLengthInfo"
	]
}
