{
	"variables":[
		"codePage",
		"chars",
		"bytes",
		"byteCount",
		"sizeof",
		"charCount",
		"newChars",
		"cp",
		"length",
		"chars",
		"i",
		"i",
		"ch",
		"bytes",
		"chars",
		"cp",
		"charCount",
		"OS",
		"codePage",
		"OS",
		"chars",
		"length",
		"bytes",
		"byteCount",
		"length",
		"codePage",
		"terminate",
		"ch",
		"ch",
		"codePage",
		"chars",
		"OS",
		"terminate",
		"charCount",
		"charCount",
		"chars",
		"charCount",
		"charCount",
		"System",
		"chars",
		"newChars",
		"charCount",
		"chars",
		"newChars",
		"chars",
		"codePage",
		"codePage",
		"OS",
		"bytes",
		"byteCount",
		"charCount",
		"terminate",
		"byteCount",
		"OS",
		"cp",
		"chars",
		"charCount",
		"bytes",
		"byteCount",
		"terminate",
		"byteCount",
		"codePage",
		"string",
		"terminate",
		"string",
		"length",
		"terminate",
		"string",
		"length",
		"chars",
		"chars",
		"OS",
		"chars",
		"byteCount",
		"OS",
		"i",
		"chars",
		"i",
		"chars",
		"i",
		"i",
		"chars",
		"i",
		"byteCount",
		"i",
		"bytes",
		"i",
		"i",
		"byteCount",
		"OS",
		"chars",
		"index",
		"bytes",
		"index",
		"OS",
		"ch",
		"ch",
		"ch",
		"bytes",
		"index",
		"ch",
		"OS",
		"chars",
		"start",
		"length",
		"start",
		"bytes",
		"length",
		"System",
		"start",
		"bytes",
		"length",
		"length",
		"codePage",
		"codePage",
		"OS",
		"OS",
		"cp",
		"OS",
		"bytes",
		"length",
		"chars",
		"length",
		"chars",
		"charCount",
		"IsUnicode",
		"codePage",
		"IsUnicode",
		"codePage",
		"length",
		"IsUnicode",
		"chars",
		"CP_ACP",
		"IsUnicode",
		"length",
		"IsUnicode",
		"length",
		"length",
		"IsUnicode",
		"IsUnicode",
		"bytes",
		"bytes",
		"CP_ACP",
		"MB_PRECOMPOSED",
		"codePage",
		"length",
		"codePage",
		"ch",
		"terminate",
		"codePage",
		"chars",
		"terminate",
		"codePage",
		"string",
		"terminate",
		"string",
		"terminate",
		"index",
		"start",
		"length"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal.win32"
	],
	"import":[],
	"methods":[
		"getChars",
		"length",
		"strlen",
		"tcharAt",
		"toString",
		"toString",
		"arraycopy",
		"WideCharToMultiByte",
		"getChars",
		"length",
		"getChars",
		"IsDBCSLeadByte",
		"toString",
		"length",
		"arraycopy",
		"MultiByteToWideChar",
		"String",
		"String"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    return toString(0, length());\n}",
			"comments":"",
			"methodName":"public String toString()"
		},
		"public int length()":{
			"methodBody":"{\n    if (OS.IsUnicode) {\n        return chars.length;\n    } else {\n        return byteCount;\n    }\n}",
			"comments":"",
			"methodName":"public int length()"
		},
		"public int tcharAt(int index)":{
			"methodBody":"{\n    if (OS.IsUnicode) {\n        return chars[index];\n    } else {\n        int ch = bytes[index] & 0xFF;\n        if (OS.IsDBCSLeadByte((byte) ch)) {\n            ch = ch << 8 | (bytes[index + 1] & 0xFF);\n        }\n        return ch;\n    }\n}",
			"comments":"",
			"methodName":"public int tcharAt(int index)"
		},
		"static char[] getChars(String string, boolean terminate)":{
			"methodBody":"{\n    int length = string.length();\n    char[] chars = new char[length + (terminate ? 1 : 0)];\n    string.getChars(0, length, chars, 0);\n    return chars;\n}",
			"comments":"",
			"methodName":"static char[] getChars(String string, boolean terminate)"
		},
		"public int strlen()":{
			"methodBody":"{\n    if (OS.IsUnicode) {\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '\\0')\n                return i;\n        }\n        return chars.length;\n    } else {\n        for (int i = 0; i < byteCount; i++) {\n            if (bytes[i] == '\\0')\n                return i;\n        }\n        return byteCount;\n    }\n}",
			"comments":"",
			"methodName":"public int strlen()"
		},
		"public String toString(int start, int length)":{
			"methodBody":"{\n    if (OS.IsUnicode) {\n        return new String(chars, start, length);\n    } else {\n        byte[] bytes = this.bytes;\n        if (start != 0) {\n            bytes = new byte[length];\n            System.arraycopy(this.bytes, start, bytes, 0, length);\n        }\n        char[] chars = new char[length];\n        int cp = codePage != 0 ? codePage : OS.CP_ACP;\n        int charCount = OS.MultiByteToWideChar(cp, OS.MB_PRECOMPOSED, bytes, length, chars, length);\n        return new String(chars, 0, charCount);\n    }\n}",
			"comments":"",
			"methodName":"public String toString(int start, int length)"
		}
	},
	"ClassORInterfaceName":[
		"TCHAR"
	]
}
