{
	"variables":[
		"message",
		"mask",
		"bits",
		"buttonBits",
		"iconBits",
		"modalBits",
		"bits",
		"hwndOwner",
		"oldModal",
		"display",
		"buffer1",
		"buffer2",
		"code",
		"type",
		"parent",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"style",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"mask",
		"bits",
		"SWT",
		"bits",
		"SWT",
		"bits",
		"SWT",
		"SWT",
		"style",
		"bits",
		"SWT",
		"bits",
		"SWT",
		"bits",
		"SWT",
		"SWT",
		"bits",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"bits",
		"SWT",
		"SWT",
		"bits",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"style",
		"style",
		"mask",
		"SWT",
		"style",
		"message",
		"style",
		"SWT",
		"SWT",
		"buttonBits",
		"OS",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"buttonBits",
		"OS",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"buttonBits",
		"OS",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"buttonBits",
		"OS",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"buttonBits",
		"OS",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"buttonBits",
		"OS",
		"buttonBits",
		"buttonBits",
		"OS",
		"style",
		"SWT",
		"iconBits",
		"OS",
		"style",
		"SWT",
		"iconBits",
		"OS",
		"style",
		"SWT",
		"iconBits",
		"OS",
		"style",
		"SWT",
		"iconBits",
		"OS",
		"style",
		"SWT",
		"iconBits",
		"OS",
		"OS",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"modalBits",
		"OS",
		"style",
		"SWT",
		"modalBits",
		"OS",
		"style",
		"SWT",
		"modalBits",
		"OS",
		"style",
		"SWT",
		"modalBits",
		"OS",
		"buttonBits",
		"iconBits",
		"modalBits",
		"style",
		"SWT",
		"bits",
		"OS",
		"style",
		"SWT",
		"SWT",
		"parent",
		"parent",
		"SWT",
		"bits",
		"OS",
		"bits",
		"OS",
		"bits",
		"OS",
		"bits",
		"OS",
		"parent",
		"parent",
		"bits",
		"OS",
		"display",
		"parent",
		"oldModal",
		"display",
		"display",
		"parent",
		"message",
		"title",
		"OS",
		"hwndOwner",
		"buffer1",
		"buffer2",
		"bits",
		"bits",
		"OS",
		"display",
		"oldModal",
		"code",
		"bits",
		"type",
		"OS",
		"SWT",
		"type",
		"OS",
		"code",
		"OS",
		"SWT",
		"SWT",
		"type",
		"OS",
		"code",
		"OS",
		"SWT",
		"SWT",
		"type",
		"OS",
		"code",
		"OS",
		"SWT",
		"code",
		"OS",
		"SWT",
		"SWT",
		"type",
		"OS",
		"code",
		"OS",
		"SWT",
		"SWT",
		"type",
		"OS",
		"code",
		"OS",
		"SWT",
		"code",
		"OS",
		"SWT",
		"SWT",
		"SWT",
		"string",
		"SWT",
		"message",
		"string",
		"OK",
		"ICON_INFORMATION",
		"APPLICATION_MODAL",
		"PRIMARY_MODAL",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"APPLICATION_MODAL",
		"YES",
		"NO",
		"OK",
		"CANCEL",
		"ABORT",
		"RETRY",
		"IGNORE",
		"OK",
		"CANCEL",
		"OK",
		"CANCEL",
		"YES",
		"NO",
		"YES",
		"NO",
		"YES",
		"NO",
		"CANCEL",
		"RETRY",
		"CANCEL",
		"ABORT",
		"RETRY",
		"IGNORE",
		"OK",
		"OK",
		"OK",
		"MB_OK",
		"OK",
		"CANCEL",
		"OK",
		"CANCEL",
		"MB_OKCANCEL",
		"YES",
		"NO",
		"YES",
		"NO",
		"MB_YESNO",
		"YES",
		"NO",
		"CANCEL",
		"YES",
		"NO",
		"CANCEL",
		"MB_YESNOCANCEL",
		"RETRY",
		"CANCEL",
		"RETRY",
		"CANCEL",
		"MB_RETRYCANCEL",
		"ABORT",
		"RETRY",
		"IGNORE",
		"ABORT",
		"RETRY",
		"IGNORE",
		"MB_ABORTRETRYIGNORE",
		"MB_OK",
		"ICON_ERROR",
		"MB_ICONERROR",
		"ICON_INFORMATION",
		"MB_ICONINFORMATION",
		"ICON_QUESTION",
		"MB_ICONQUESTION",
		"ICON_WARNING",
		"MB_ICONWARNING",
		"ICON_WORKING",
		"MB_ICONINFORMATION",
		"IsWinCE",
		"PRIMARY_MODAL",
		"APPLICATION_MODAL",
		"SYSTEM_MODAL",
		"MB_APPLMODAL",
		"PRIMARY_MODAL",
		"MB_APPLMODAL",
		"APPLICATION_MODAL",
		"MB_TASKMODAL",
		"SYSTEM_MODAL",
		"MB_SYSTEMMODAL",
		"RIGHT_TO_LEFT",
		"MB_RTLREADING",
		"LEFT_TO_RIGHT",
		"RIGHT_TO_LEFT",
		"style",
		"MIRRORED",
		"MB_RTLREADING",
		"MB_SYSTEMMODAL",
		"MB_TASKMODAL",
		"MB_SYSTEMMODAL",
		"handle",
		"MB_TASKMODAL",
		"MB_TASKMODAL",
		"MB_OK",
		"OK",
		"MB_OKCANCEL",
		"IDOK",
		"OK",
		"CANCEL",
		"MB_YESNO",
		"IDYES",
		"YES",
		"NO",
		"MB_YESNOCANCEL",
		"IDYES",
		"YES",
		"IDNO",
		"NO",
		"CANCEL",
		"MB_RETRYCANCEL",
		"IDRETRY",
		"RETRY",
		"CANCEL",
		"MB_ABORTRETRYIGNORE",
		"IDRETRY",
		"RETRY",
		"IDABORT",
		"ABORT",
		"IGNORE",
		"CANCEL",
		"ERROR_NULL_ARGUMENT",
		"parent",
		"parent",
		"style",
		"style",
		"string"
	],
	"extendORImplementFiles":[
		"Dialog"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt"
	],
	"methods":[
		"checkStyle",
		"getMessage",
		"open",
		"setMessage",
		"checkStyle",
		"checkSubclass",
		"getDisplay",
		"getModalDialogShell",
		"setModalDialogShell",
		"MessageBox",
		"setModalDialogShell",
		"error",
		"TCHAR",
		"TCHAR"
	],
	"methodsBody":{
		"static int checkStyle(int style)":{
			"methodBody":"{\n    if ((style & (SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) == 0)\n        style |= SWT.APPLICATION_MODAL;\n    int mask = (SWT.YES | SWT.NO | SWT.OK | SWT.CANCEL | SWT.ABORT | SWT.RETRY | SWT.IGNORE);\n    int bits = style & mask;\n    if (bits == SWT.OK || bits == SWT.CANCEL || bits == (SWT.OK | SWT.CANCEL))\n        return style;\n    if (bits == SWT.YES || bits == SWT.NO || bits == (SWT.YES | SWT.NO) || bits == (SWT.YES | SWT.NO | SWT.CANCEL))\n        return style;\n    if (bits == (SWT.RETRY | SWT.CANCEL) || bits == (SWT.ABORT | SWT.RETRY | SWT.IGNORE))\n        return style;\n    style = (style & ~mask) | SWT.OK;\n    return style;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public String getMessage()":{
			"methodBody":"{\n    return message;\n}",
			"comments":"/**\n* Returns the dialog's message, or an empty string if it does not have one.\n* The message is a description of the purpose for which the dialog was opened.\n* This message will be visible in the dialog while it is open.\n*\n* @return the message\n*/\n",
			"methodName":"public String getMessage()"
		},
		"public void setMessage(String string)":{
			"methodBody":"{\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    message = string;\n}",
			"comments":"/**\n* Sets the dialog's message, which is a description of\n* the purpose for which it was opened. This message will be\n* visible on the dialog while it is open.\n*\n* @param string the message\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n*/\n",
			"methodName":"public void setMessage(String string)"
		},
		"public int open()":{
			"methodBody":"{\n    \n    int buttonBits = 0;\n    if ((style & SWT.OK) == SWT.OK)\n        buttonBits = OS.MB_OK;\n    if ((style & (SWT.OK | SWT.CANCEL)) == (SWT.OK | SWT.CANCEL))\n        buttonBits = OS.MB_OKCANCEL;\n    if ((style & (SWT.YES | SWT.NO)) == (SWT.YES | SWT.NO))\n        buttonBits = OS.MB_YESNO;\n    if ((style & (SWT.YES | SWT.NO | SWT.CANCEL)) == (SWT.YES | SWT.NO | SWT.CANCEL))\n        buttonBits = OS.MB_YESNOCANCEL;\n    if ((style & (SWT.RETRY | SWT.CANCEL)) == (SWT.RETRY | SWT.CANCEL))\n        buttonBits = OS.MB_RETRYCANCEL;\n    if ((style & (SWT.ABORT | SWT.RETRY | SWT.IGNORE)) == (SWT.ABORT | SWT.RETRY | SWT.IGNORE))\n        buttonBits = OS.MB_ABORTRETRYIGNORE;\n    if (buttonBits == 0)\n        buttonBits = OS.MB_OK;\n    int iconBits = 0;\n    if ((style & SWT.ICON_ERROR) != 0)\n        iconBits = OS.MB_ICONERROR;\n    if ((style & SWT.ICON_INFORMATION) != 0)\n        iconBits = OS.MB_ICONINFORMATION;\n    if ((style & SWT.ICON_QUESTION) != 0)\n        iconBits = OS.MB_ICONQUESTION;\n    if ((style & SWT.ICON_WARNING) != 0)\n        iconBits = OS.MB_ICONWARNING;\n    if ((style & SWT.ICON_WORKING) != 0)\n        iconBits = OS.MB_ICONINFORMATION;\n    \n    int modalBits = 0;\n    if (OS.IsWinCE) {\n        if ((style & (SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {\n            modalBits = OS.MB_APPLMODAL;\n        }\n    } else {\n        if ((style & SWT.PRIMARY_MODAL) != 0)\n            modalBits = OS.MB_APPLMODAL;\n        if ((style & SWT.APPLICATION_MODAL) != 0)\n            modalBits = OS.MB_TASKMODAL;\n        if ((style & SWT.SYSTEM_MODAL) != 0)\n            modalBits = OS.MB_SYSTEMMODAL;\n    }\n    int bits = buttonBits | iconBits | modalBits;\n    if ((style & SWT.RIGHT_TO_LEFT) != 0)\n        bits |= OS.MB_RTLREADING;\n    if ((style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT)) == 0) {\n        if (parent != null && (parent.style & SWT.MIRRORED) != 0) {\n            bits |= OS.MB_RTLREADING;\n        }\n    }\n    \n    if ((bits & OS.MB_SYSTEMMODAL) != 0) {\n        bits |= OS.MB_TASKMODAL;\n        bits &= ~OS.MB_SYSTEMMODAL;\n    }\n    \n    int hwndOwner = parent != null ? parent.handle : 0;\n    Shell oldModal = null;\n    Display display = null;\n    if ((bits & OS.MB_TASKMODAL) != 0) {\n        display = parent.getDisplay();\n        oldModal = display.getModalDialogShell();\n        display.setModalDialogShell(parent);\n    }\n    \n    \n    TCHAR buffer1 = new TCHAR(0, message, true);\n    TCHAR buffer2 = new TCHAR(0, title, true);\n    int code = OS.MessageBox(hwndOwner, buffer1, buffer2, bits);\n    \n    if ((bits & OS.MB_TASKMODAL) != 0) {\n        display.setModalDialogShell(oldModal);\n    }\n    \n    if (code != 0) {\n        int type = bits & 0x0F;\n        if (type == OS.MB_OK)\n            return SWT.OK;\n        if (type == OS.MB_OKCANCEL) {\n            return (code == OS.IDOK) ? SWT.OK : SWT.CANCEL;\n        }\n        if (type == OS.MB_YESNO) {\n            return (code == OS.IDYES) ? SWT.YES : SWT.NO;\n        }\n        if (type == OS.MB_YESNOCANCEL) {\n            if (code == OS.IDYES)\n                return SWT.YES;\n            if (code == OS.IDNO)\n                return SWT.NO;\n            return SWT.CANCEL;\n        }\n        if (type == OS.MB_RETRYCANCEL) {\n            return (code == OS.IDRETRY) ? SWT.RETRY : SWT.CANCEL;\n        }\n        if (type == OS.MB_ABORTRETRYIGNORE) {\n            if (code == OS.IDRETRY)\n                return SWT.RETRY;\n            if (code == OS.IDABORT)\n                return SWT.ABORT;\n            return SWT.IGNORE;\n        }\n    }\n    return SWT.CANCEL;\n}",
			"comments":"/**\n* Makes the dialog visible and brings it to the front\n* of the display.\n*\n* @return the ID of the button that was selected to dismiss the\n*         message box (e.g. SWT.OK, SWT.CANCEL, etc...)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the dialog has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog</li>\n* </ul>\n*/\n/* Compute the MessageBox style */\n/* Only MB_APPLMODAL is supported on WinCE */\n/*\n* Feature in Windows.  System modal is not supported\n* on Windows 95 and NT.  The fix is to convert system\n* modal to task modal.\n*/\n/*\n* Feature in Windows.  In order for MB_TASKMODAL to work,\n* the parent HWND of the MessageBox () call must be NULL.\n* If the parent is not NULL, MB_TASKMODAL behaves the\n* same as MB_APPLMODAL.  The fix to set the parent HWND\n* anyway and not rely on MB_MODAL to work by making the\n* parent be temporarily modal.\n*/\n/* Open the message box */\n/* Use the character encoding for the default locale */\n/* Clear the temporarily dialog modal parent */\n/*\n* This code is intentionally commented.  On some\n* platforms, the owner window is repainted right\n* away when a dialog window exits.  This behavior\n* is currently unspecified.\n*/\n//\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);\n/* Compute and return the result */\n",
			"methodName":"public int open()"
		}
	},
	"ClassORInterfaceName":[
		"MessageBox"
	]
}
