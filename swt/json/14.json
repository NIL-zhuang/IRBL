{
	"variables":[
		"embeddedFrameClass",
		"loaded",
		"swingInitialized",
		"emptyClass",
		"emptyObject",
		"clazz",
		"method",
		"handle",
		"clazz",
		"className",
		"constructor",
		"value",
		"frame",
		"listener",
		"clientArea",
		"clazz",
		"field",
		"handle",
		"shell",
		"dim",
		"loaded",
		"loaded",
		"Toolkit",
		"System",
		"Library",
		"swingInitialized",
		"swingInitialized",
		"Class",
		"clazz",
		"emptyClass",
		"method",
		"method",
		"clazz",
		"emptyObject",
		"parent",
		"SWT",
		"SWT",
		"parent",
		"SWT",
		"SWT",
		"SWT",
		"parent",
		"embeddedFrameClass",
		"embeddedFrameClass",
		"clazz",
		"Class",
		"className",
		"SWT",
		"SWT",
		"e",
		"constructor",
		"clazz",
		"constructor",
		"clazz",
		"SWT",
		"SWT",
		"e2",
		"value",
		"constructor",
		"handle",
		"SWT",
		"SWT",
		"e",
		"value",
		"frame",
		"e",
		"SWT",
		"parent",
		"EventQueue",
		"frame",
		"SWT",
		"EventQueue",
		"Library",
		"Library",
		"frame",
		"frame",
		"WindowEvent",
		"frame",
		"frame",
		"FocusEvent",
		"frame",
		"frame",
		"WindowEvent",
		"frame",
		"frame",
		"WindowEvent",
		"SWT",
		"EventQueue",
		"Library",
		"Library",
		"frame",
		"frame",
		"WindowEvent",
		"frame",
		"frame",
		"FocusEvent",
		"frame",
		"frame",
		"WindowEvent",
		"frame",
		"frame",
		"WindowEvent",
		"parent",
		"SWT",
		"listener",
		"parent",
		"SWT",
		"listener",
		"parent",
		"SWT",
		"listener",
		"parent",
		"parent",
		"parent",
		"EventQueue",
		"frame",
		"clientArea",
		"clientArea",
		"frame",
		"EventQueue",
		"Class",
		"clazz",
		"field",
		"field",
		"frame",
		"frame",
		"frame",
		"display",
		"SWT",
		"SWT",
		"parent",
		"SWT",
		"SWT",
		"handle",
		"parent",
		"SWT",
		"SWT",
		"e",
		"handle",
		"SWT",
		"SWT",
		"Shell",
		"display",
		"handle",
		"parent",
		"display",
		"parent",
		"shell",
		"dim",
		"dim",
		"shell",
		"shell",
		"ERROR_NULL_ARGUMENT",
		"EMBEDDED",
		"ERROR_INVALID_ARGUMENT",
		"handle",
		"ERROR_NOT_IMPLEMENTED",
		"ERROR_NOT_IMPLEMENTED",
		"ERROR_NOT_IMPLEMENTED",
		"type",
		"Dispose",
		"Activate",
		"JAVA_VERSION",
		"WINDOW_ACTIVATED",
		"FOCUS_GAINED",
		"WINDOW_ACTIVATED",
		"WINDOW_GAINED_FOCUS",
		"Deactivate",
		"JAVA_VERSION",
		"WINDOW_DEACTIVATED",
		"FOCUS_LOST",
		"WINDOW_LOST_FOCUS",
		"WINDOW_DEACTIVATED",
		"Activate",
		"Deactivate",
		"Dispose",
		"width",
		"height",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NOT_IMPLEMENTED",
		"ERROR_INVALID_ARGUMENT",
		"width",
		"height",
		"canvas",
		"e",
		"e",
		"parent",
		"e",
		"e1",
		"e2",
		"e",
		"e",
		"e",
		"display",
		"parent",
		"e",
		"e"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.awt"
	],
	"import":[
		"java.lang.reflect.Constructor",
		"java.lang.reflect.Field",
		"java.lang.reflect.Method",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics.Rectangle",
		"org.eclipse.swt.widgets.Shell",
		"org.eclipse.swt.widgets.Composite",
		"org.eclipse.swt.widgets.Display",
		"org.eclipse.swt.widgets.Listener",
		"org.eclipse.swt.widgets.Event",
		"org.eclipse.swt.internal.Library",
		"java.awt.EventQueue",
		"java.awt.Canvas",
		"java.awt.Frame",
		"java.awt.Dimension",
		"java.awt.Toolkit",
		"java.awt.event.ComponentAdapter",
		"java.awt.event.ComponentEvent",
		"java.awt.event.WindowEvent",
		"java.awt.event.FocusEvent"
	],
	"methods":[
		"getAWTHandle",
		"loadLibrary",
		"initializeSwing",
		"new_Frame",
		"handleEvent",
		"run",
		"run",
		"run",
		"run",
		"run",
		"run",
		"new_Shell",
		"componentResized",
		"run",
		"getDefaultToolkit",
		"loadLibrary",
		"loadLibrary",
		"forName",
		"getMethod",
		"invoke",
		"error",
		"getStyle",
		"error",
		"forName",
		"error",
		"getConstructor",
		"getConstructor",
		"error",
		"initializeSwing",
		"newInstance",
		"error",
		"addNotify",
		"setVisible",
		"invokeLater",
		"dispose",
		"invokeLater",
		"JAVA_VERSION",
		"dispatchEvent",
		"dispatchEvent",
		"dispatchEvent",
		"dispatchEvent",
		"invokeLater",
		"JAVA_VERSION",
		"dispatchEvent",
		"dispatchEvent",
		"dispatchEvent",
		"dispatchEvent",
		"addListener",
		"addListener",
		"addListener",
		"asyncExec",
		"getDisplay",
		"isDisposed",
		"getClientArea",
		"invokeLater",
		"setSize",
		"validate",
		"invokeLater",
		"forName",
		"getDeclaredField",
		"setAccessible",
		"set",
		"getPeer",
		"getGraphicsConfiguration",
		"error",
		"error",
		"loadLibrary",
		"getAWTHandle",
		"error",
		"error",
		"win32_new",
		"addComponentListener",
		"syncExec",
		"getSize",
		"setSize",
		"setVisible",
		"Integer",
		"Listener",
		"Runnable",
		"Runnable",
		"WindowEvent",
		"FocusEvent",
		"WindowEvent",
		"WindowEvent",
		"Runnable",
		"WindowEvent",
		"FocusEvent",
		"WindowEvent",
		"WindowEvent",
		"Runnable",
		"Runnable",
		"Runnable",
		"ComponentAdapter",
		"Runnable"
	],
	"methodsBody":{
		"static synchronized void initializeSwing()":{
			"methodBody":"{\n    if (swingInitialized)\n        return;\n    swingInitialized = true;\n    try {\n        \n        Class[] emptyClass = new Class[0];\n        Object[] emptyObject = new Object[0];\n        Class clazz = Class.forName(\"javax.swing.UIManager\");\n        Method method = clazz.getMethod(\"getDefaults\", emptyClass);\n        if (method != null)\n            method.invoke(clazz, emptyObject);\n    } catch (Throwable e) {\n    }\n}",
			"comments":"/* Initialize the default focus traversal policy */\n",
			"methodName":"static synchronized void initializeSwing()"
		},
		"static final native int getAWTHandle(Canvas canvas)":{
			"methodBody":"",
			"comments":"",
			"methodName":"static final native int getAWTHandle(Canvas canvas)"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    switch(e.type) {\n        case SWT.Dispose:\n            parent.setVisible(false);\n            EventQueue.invokeLater(new Runnable() {\n\n                public void run() {\n                    frame.dispose();\n                }\n            });\n            break;\n        case SWT.Activate:\n            EventQueue.invokeLater(new Runnable() {\n\n                public void run() {\n                    if (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {\n                        frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_ACTIVATED));\n                        frame.dispatchEvent(new FocusEvent(frame, FocusEvent.FOCUS_GAINED));\n                    } else {\n                        frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_ACTIVATED));\n                        frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_GAINED_FOCUS));\n                    }\n                }\n            });\n            break;\n        case SWT.Deactivate:\n            EventQueue.invokeLater(new Runnable() {\n\n                public void run() {\n                    if (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {\n                        frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_DEACTIVATED));\n                        frame.dispatchEvent(new FocusEvent(frame, FocusEvent.FOCUS_LOST));\n                    } else {\n                        frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_LOST_FOCUS));\n                        frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_DEACTIVATED));\n                    }\n                }\n            });\n            break;\n    }\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"static synchronized void loadLibrary()":{
			"methodBody":"{\n    if (loaded)\n        return;\n    loaded = true;\n    Toolkit.getDefaultToolkit();\n    \n    try {\n        System.loadLibrary(\"jawt\");\n    } catch (Throwable e) {\n    }\n    Library.loadLibrary(\"swt-awt\");\n}",
			"comments":"/*\n* Note that the jawt library is loaded explicitily\n* because it cannot be found by the library loader.\n* All exceptions are caught because the library may\n* have been loaded already.\n*/\n",
			"methodName":"static synchronized void loadLibrary()"
		},
		"public static Frame new_Frame(final Composite parent)":{
			"methodBody":"{\n    if (parent == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if ((parent.getStyle() & SWT.EMBEDDED) == 0) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    int handle = parent.handle;\n    \n    Class clazz = null;\n    try {\n        String className = embeddedFrameClass != null ? embeddedFrameClass : \"sun.awt.windows.WEmbeddedFrame\";\n        clazz = Class.forName(className);\n    } catch (Throwable e) {\n        SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e);\n    }\n    Constructor constructor = null;\n    try {\n        constructor = clazz.getConstructor(new Class[] { int.class });\n    } catch (Throwable e1) {\n        try {\n            constructor = clazz.getConstructor(new Class[] { long.class });\n        } catch (Throwable e2) {\n            SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e2);\n        }\n    }\n    initializeSwing();\n    Object value = null;\n    try {\n        value = constructor.newInstance(new Object[] { new Integer(handle) });\n    } catch (Throwable e) {\n        SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e);\n    }\n    final Frame frame = (Frame) value;\n    \n    frame.addNotify();\n    \n    Listener listener = new Listener() {\n\n        public void handleEvent(Event e) {\n            switch(e.type) {\n                case SWT.Dispose:\n                    parent.setVisible(false);\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            frame.dispose();\n                        }\n                    });\n                    break;\n                case SWT.Activate:\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            if (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {\n                                frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_ACTIVATED));\n                                frame.dispatchEvent(new FocusEvent(frame, FocusEvent.FOCUS_GAINED));\n                            } else {\n                                frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_ACTIVATED));\n                                frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_GAINED_FOCUS));\n                            }\n                        }\n                    });\n                    break;\n                case SWT.Deactivate:\n                    EventQueue.invokeLater(new Runnable() {\n\n                        public void run() {\n                            if (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {\n                                frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_DEACTIVATED));\n                                frame.dispatchEvent(new FocusEvent(frame, FocusEvent.FOCUS_LOST));\n                            } else {\n                                frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_LOST_FOCUS));\n                                frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_DEACTIVATED));\n                            }\n                        }\n                    });\n                    break;\n            }\n        }\n    };\n    parent.addListener(SWT.Activate, listener);\n    parent.addListener(SWT.Deactivate, listener);\n    parent.addListener(SWT.Dispose, listener);\n    parent.getDisplay().asyncExec(new Runnable() {\n\n        public void run() {\n            if (parent.isDisposed())\n                return;\n            final Rectangle clientArea = parent.getClientArea();\n            EventQueue.invokeLater(new Runnable() {\n\n                public void run() {\n                    frame.setSize(clientArea.width, clientArea.height);\n                    frame.validate();\n                }\n            });\n        }\n    });\n    \n    EventQueue.invokeLater(new Runnable() {\n\n        public void run() {\n            try {\n                Class clazz = Class.forName(\"sun.awt.windows.WComponentPeer\");\n                Field field = clazz.getDeclaredField(\"winGraphicsConfig\");\n                field.setAccessible(true);\n                field.set(frame.getPeer(), frame.getGraphicsConfiguration());\n            } catch (Throwable e) {\n            }\n        }\n    });\n    return frame;\n}",
			"comments":"/**\n* Creates a new <code>java.awt.Frame</code>. This frame is the root for\n* the AWT components that will be embedded within the composite. In order\n* for the embedding to succeed, the composite must have been created\n* with the SWT.EMBEDDED style.\n* <p>\n* IMPORTANT: As of JDK1.5, the embedded frame does not receive mouse events.\n* When a lightweight component is added as a child of the embedded frame,\n* the cursor does not change. In order to work around both these problems, it is\n* strongly recommended that a heavyweight component such as <code>java.awt.Panel</code>\n* be added to the frame as the root of all components.\n* </p>\n*\n* @param parent the parent <code>Composite</code> of the new <code>java.awt.Frame</code>\n* @return a <code>java.awt.Frame</code> to be the parent of the embedded AWT components\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the parent is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the parent Composite does not have the SWT.EMBEDDED style</li>\n* </ul>\n*\n* @since 3.0\n*/\n/*\n* Some JREs have implemented the embedded frame constructor to take an integer\n* and other JREs take a long.  To handle this binary incompatability, use\n* reflection to create the embedded frame.\n*/\n/*\n* This is necessary to make lightweight components\n* directly added to the frame receive mouse events\n* properly.\n*/\n/*\n* Generate the appropriate events to activate and deactivate\n* the embedded frame. This is needed in order to make keyboard\n* focus work properly for lightweights.\n*/\n/*\n* TEMPORARY CODE\n*\n* For some reason, the graphics configuration of the embedded\n* frame is not initialized properly. This causes an exception\n* when the depth of the screen is changed.\n*/\n",
			"methodName":"public static Frame new_Frame(final Composite parent)"
		},
		"public static Shell new_Shell(final Display display, final Canvas parent)":{
			"methodBody":"{\n    if (display == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (parent == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    int handle = 0;\n    try {\n        loadLibrary();\n        handle = getAWTHandle(parent);\n    } catch (Throwable e) {\n        SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e);\n    }\n    if (handle == 0)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT, null, \" [peer not created]\");\n    final Shell shell = Shell.win32_new(display, handle);\n    parent.addComponentListener(new ComponentAdapter() {\n\n        public void componentResized(ComponentEvent e) {\n            display.syncExec(new Runnable() {\n\n                public void run() {\n                    Dimension dim = parent.getSize();\n                    shell.setSize(dim.width, dim.height);\n                }\n            });\n        }\n    });\n    shell.setVisible(true);\n    return shell;\n}",
			"comments":"/**\n* Creates a new <code>Shell</code>. This Shell is the root for\n* the SWT widgets that will be embedded within the AWT canvas.\n*\n* @param display the display for the new Shell\n* @param parent the parent <code>java.awt.Canvas</code> of the new Shell\n* @return a <code>Shell</code> to be the parent of the embedded SWT widgets\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the display is null</li>\n*    <li>ERROR_NULL_ARGUMENT - if the parent is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the parent's peer is not created</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public static Shell new_Shell(final Display display, final Canvas parent)"
		},
		"public void componentResized(ComponentEvent e)":{
			"methodBody":"{\n    display.syncExec(new Runnable() {\n\n        public void run() {\n            Dimension dim = parent.getSize();\n            shell.setSize(dim.width, dim.height);\n        }\n    });\n}",
			"comments":"",
			"methodName":"public void componentResized(ComponentEvent e)"
		},
		"public void run()":{
			"methodBody":"{\n    Dimension dim = parent.getSize();\n    shell.setSize(dim.width, dim.height);\n}",
			"comments":"",
			"methodName":"public void run()"
		}
	},
	"ClassORInterfaceName":[
		"SWT_AWT"
	]
}
