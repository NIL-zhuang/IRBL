{
	"variables":[
		"parent",
		"control",
		"toolTipText",
		"index",
		"oldControl",
		"newControl",
		"index",
		"index",
		"hwnd",
		"tcItem",
		"index",
		"length",
		"text",
		"i",
		"j",
		"hwnd",
		"hHeap",
		"buffer",
		"byteCount",
		"pszText",
		"tcItem",
		"parent",
		"style",
		"parent",
		"parent",
		"parent",
		"parent",
		"style",
		"parent",
		"parent",
		"index",
		"SWT",
		"control",
		"parent",
		"toolTipText",
		"parent",
		"index",
		"parent",
		"control",
		"control",
		"parent",
		"control",
		"parent",
		"control",
		"control",
		"SWT",
		"control",
		"parent",
		"SWT",
		"control",
		"control",
		"parent",
		"index",
		"parent",
		"newControl",
		"newControl",
		"newControl",
		"newControl",
		"parent",
		"newControl",
		"oldControl",
		"oldControl",
		"parent",
		"index",
		"image",
		"OS",
		"text",
		"text",
		"parent",
		"tcItem",
		"OS",
		"tcItem",
		"parent",
		"image",
		"OS",
		"hwnd",
		"OS",
		"index",
		"tcItem",
		"string",
		"SWT",
		"parent",
		"index",
		"string",
		"OS",
		"image",
		"text",
		"string",
		"length",
		"string",
		"length",
		"text",
		"i",
		"i",
		"length",
		"i",
		"text",
		"i",
		"text",
		"j",
		"text",
		"i",
		"j",
		"i",
		"string",
		"text",
		"j",
		"parent",
		"OS",
		"parent",
		"string",
		"buffer",
		"TCHAR",
		"OS",
		"hHeap",
		"OS",
		"byteCount",
		"OS",
		"pszText",
		"buffer",
		"byteCount",
		"tcItem",
		"OS",
		"tcItem",
		"pszText",
		"OS",
		"hwnd",
		"OS",
		"index",
		"tcItem",
		"OS",
		"hHeap",
		"pszText",
		"toolTipText",
		"string",
		"parent",
		"parent",
		"ERROR_INVALID_SUBCLASS",
		"ERROR_INVALID_ARGUMENT",
		"parent",
		"ERROR_INVALID_PARENT",
		"control",
		"control",
		"control",
		"control",
		"control",
		"COMCTL32_MAJOR",
		"handle",
		"mask",
		"TCIF_IMAGE",
		"iImage",
		"TCM_SETITEM",
		"ERROR_NULL_ARGUMENT",
		"COMCTL32_MAJOR",
		"handle",
		"sizeof",
		"HEAP_ZERO_MEMORY",
		"mask",
		"TCIF_TEXT",
		"pszText",
		"TCM_SETITEM",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"control",
		"image",
		"string",
		"string"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"checkSubclass",
		"getControl",
		"getParent",
		"getToolTipText",
		"releaseChild",
		"releaseWidget",
		"setControl",
		"setImage",
		"setText",
		"setToolTipText",
		"createItem",
		"getItemCount",
		"createItem",
		"isValidSubclass",
		"error",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"releaseChild",
		"indexOf",
		"getSelectionIndex",
		"setVisible",
		"destroyItem",
		"releaseWidget",
		"checkWidget",
		"isDisposed",
		"error",
		"error",
		"isDisposed",
		"indexOf",
		"getSelectionIndex",
		"setVisible",
		"setBounds",
		"getClientArea",
		"setVisible",
		"setVisible",
		"checkWidget",
		"indexOf",
		"setImage",
		"indexOf",
		"setText",
		"imageIndex",
		"SendMessage",
		"checkWidget",
		"error",
		"indexOf",
		"setText",
		"indexOf",
		"length",
		"getChars",
		"GetProcessHeap",
		"getCodePage",
		"length",
		"HeapAlloc",
		"MoveMemory",
		"SendMessage",
		"HeapFree",
		"checkWidget",
		"TCITEM",
		"String",
		"TCHAR",
		"TCITEM"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    super.setText(string);\n    \n    if (OS.COMCTL32_MAJOR >= 6 && image != null) {\n        if (text.indexOf('&') != -1) {\n            int length = string.length();\n            char[] text = new char[length];\n            string.getChars(0, length, text, 0);\n            int i = 0, j = 0;\n            for (i = 0; i < length; i++) {\n                if (text[i] != '&')\n                    text[j++] = text[i];\n            }\n            if (j < i)\n                string = new String(text, 0, j);\n        }\n    }\n    int hwnd = parent.handle;\n    int hHeap = OS.GetProcessHeap();\n    TCHAR buffer = new TCHAR(parent.getCodePage(), string, true);\n    int byteCount = buffer.length() * TCHAR.sizeof;\n    int pszText = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\n    OS.MoveMemory(pszText, buffer, byteCount);\n    TCITEM tcItem = new TCITEM();\n    tcItem.mask = OS.TCIF_TEXT;\n    tcItem.pszText = pszText;\n    OS.SendMessage(hwnd, OS.TCM_SETITEM, index, tcItem);\n    OS.HeapFree(hHeap, 0, pszText);\n}",
			"comments":"/**\n* Sets the receiver's text.  The string may include\n* the mnemonic character.\n* </p>\n* <p>\n* Mnemonics are indicated by an '&amp' that causes the next\n* character to be the mnemonic.  When the user presses a\n* key sequence that matches the mnemonic, a selection\n* event occurs. On most platforms, the mnemonic appears\n* underlined but may be emphasised in a platform specific\n* manner.  The mnemonic indicator character '&amp' can be\n* escaped by doubling it in the string, causing a single\n*'&amp' to be displayed.\n* </p>\n*\n* @param string the new text\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the text is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n*/\n/*\n* Bug in Windows.  In version 6.00 of COMCTL32.DLL, tab\n* items with an image and a label that includes '&' cause\n* the tab to draw incorrectly (even when doubled '&&').\n* The image overlaps the label.  The fix is to remove\n* all '&' characters from the string.\n*/\n",
			"methodName":"public void setText(String string)"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    control = null;\n    parent = null;\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public void setControl(Control control)":{
			"methodBody":"{\n    checkWidget();\n    if (control != null) {\n        if (control.isDisposed())\n            error(SWT.ERROR_INVALID_ARGUMENT);\n        if (control.parent != parent)\n            error(SWT.ERROR_INVALID_PARENT);\n    }\n    if (this.control != null && this.control.isDisposed()) {\n        this.control = null;\n    }\n    Control oldControl = this.control, newControl = control;\n    this.control = control;\n    int index = parent.indexOf(this);\n    if (index != parent.getSelectionIndex()) {\n        if (newControl != null)\n            newControl.setVisible(false);\n        return;\n    }\n    if (newControl != null) {\n        newControl.setBounds(parent.getClientArea());\n        newControl.setVisible(true);\n    }\n    if (oldControl != null)\n        oldControl.setVisible(false);\n}",
			"comments":"/**\n* Sets the control that is used to fill the client area of\n* the tab folder when the user selects the tab item.\n* <p>\n* @param control the new control (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the control has been disposed</li>\n*    <li>ERROR_INVALID_PARENT - if the control is not in the same widget tree</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setControl(Control control)"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    int index = parent.indexOf(this);\n    if (index == -1)\n        return;\n    super.setImage(image);\n    \n    if (OS.COMCTL32_MAJOR >= 6) {\n        if (text.indexOf('&') != -1)\n            setText(text);\n    }\n    int hwnd = parent.handle;\n    TCITEM tcItem = new TCITEM();\n    tcItem.mask = OS.TCIF_IMAGE;\n    tcItem.iImage = parent.imageIndex(image);\n    OS.SendMessage(hwnd, OS.TCM_SETITEM, index, tcItem);\n}",
			"comments":"/*\n* Bug in Windows.  In version 6.00 of COMCTL32.DLL, tab\n* items with an image and a label that includes '&' cause\n* the tab to draw incorrectly (even when doubled '&&').\n* The image overlaps the label.  The fix is to remove\n* all '&' characters from the string.\n*/\n",
			"methodName":"public void setImage(Image image)"
		},
		"public TabFolder getParent()":{
			"methodBody":"{\n    checkWidget();\n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>TabFolder</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public TabFolder getParent()"
		},
		"public String getToolTipText()":{
			"methodBody":"{\n    checkWidget();\n    return toolTipText;\n}",
			"comments":"/**\n* Returns the receiver's tool tip text, or null if it has\n* not been set.\n*\n* @return the receiver's tool tip text\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String getToolTipText()"
		},
		"public Control getControl()":{
			"methodBody":"{\n    checkWidget();\n    return control;\n}",
			"comments":"/**\n* Returns the control that is used to fill the client area of\n* the tab folder when the user selects the tab item.  If no\n* control has been set, return <code>null</code>.\n* <p>\n* @return the control\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Control getControl()"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    int index = parent.indexOf(this);\n    if (index == parent.getSelectionIndex()) {\n        if (control != null)\n            control.setVisible(false);\n    }\n    parent.destroyItem(this);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    if (!isValidSubclass())\n        error(SWT.ERROR_INVALID_SUBCLASS);\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"public void setToolTipText(String string)":{
			"methodBody":"{\n    checkWidget();\n    toolTipText = string;\n}",
			"comments":"/**\n* Sets the receiver's tool tip text to the argument, which\n* may be null indicating that no tool tip text should be shown.\n*\n* @param string the new tool tip text (or null)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setToolTipText(String string)"
		}
	},
	"ClassORInterfaceName":[
		"TabItem"
	]
}
