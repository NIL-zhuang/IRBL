{
	"variables":[
		"iUnknown",
		"iEnumFORMATETC",
		"refCount",
		"index",
		"formats",
		"endIndex",
		"items",
		"i",
		"nextItems",
		"i",
		"guid",
		"refCount",
		"refCount",
		"iUnknown",
		"args",
		"args",
		"iEnumFORMATETC",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iUnknown",
		"iUnknown",
		"iUnknown",
		"iEnumFORMATETC",
		"iEnumFORMATETC",
		"iEnumFORMATETC",
		"iEnumFORMATETC",
		"formats",
		"numItems",
		"index",
		"numItems",
		"endIndex",
		"formats",
		"endIndex",
		"formats",
		"index",
		"endIndex",
		"endIndex",
		"index",
		"i",
		"items",
		"i",
		"items",
		"i",
		"formats",
		"index",
		"index",
		"items",
		"rgelt",
		"COM",
		"pceltFetched",
		"celt",
		"COM",
		"celt",
		"nextItems",
		"i",
		"nextItems",
		"i",
		"COM",
		"rgelt",
		"i",
		"FORMATETC",
		"nextItems",
		"i",
		"FORMATETC",
		"pceltFetched",
		"COM",
		"pceltFetched",
		"nextItems",
		"nextItems",
		"celt",
		"COM",
		"pceltFetched",
		"COM",
		"pceltFetched",
		"COM",
		"rgelt",
		"FORMATETC",
		"COM",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iUnknown",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iEnumFORMATETC",
		"COM",
		"COM",
		"ppvObject",
		"COM",
		"refCount",
		"refCount",
		"COM",
		"refCount",
		"index",
		"COM",
		"formats",
		"newFormats",
		"index",
		"celt",
		"COM",
		"index",
		"celt",
		"index",
		"formats",
		"index",
		"formats",
		"COM",
		"COM",
		"length",
		"length",
		"length",
		"E_INVALIDARG",
		"E_INVALIDARG",
		"length",
		"sizeof",
		"sizeof",
		"length",
		"length",
		"S_OK",
		"sizeof",
		"S_FALSE",
		"E_NOINTERFACE",
		"sizeof",
		"IIDIUnknown",
		"S_OK",
		"IIDIEnumFORMATETC",
		"S_OK",
		"E_NOINTERFACE",
		"S_OK",
		"E_INVALIDARG",
		"length",
		"length",
		"S_FALSE",
		"S_OK",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"numItems",
		"celt",
		"rgelt",
		"pceltFetched",
		"riid",
		"ppvObject",
		"newFormats",
		"celt"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt.internal.ole.win32"
	],
	"methods":[
		"AddRef",
		"createCOMInterfaces",
		"method0",
		"method1",
		"method2",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"method5",
		"disposeCOMInterfaces",
		"getAddress",
		"getNextItems",
		"Next",
		"QueryInterface",
		"Release",
		"Reset",
		"setFormats",
		"Skip",
		"createCOMInterfaces",
		"QueryInterface",
		"AddRef",
		"Release",
		"QueryInterface",
		"AddRef",
		"Release",
		"Next",
		"Skip",
		"Reset",
		"dispose",
		"dispose",
		"getAddress",
		"getNextItems",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"MoveMemory",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"disposeCOMInterfaces",
		"CoFreeUnusedLibraries",
		"COMObject",
		"COMObject",
		"FORMATETC",
		"GUID"
	],
	"methodsBody":{
		"void setFormats(FORMATETC[] newFormats)":{
			"methodBody":"{\n    formats = newFormats;\n    index = 0;\n}",
			"comments":"",
			"methodName":"void setFormats(FORMATETC[] newFormats)"
		},
		"int AddRef()":{
			"methodBody":"{\n    refCount++;\n    return refCount;\n}",
			"comments":"",
			"methodName":"int AddRef()"
		},
		"public int method4(int[] args)":{
			"methodBody":"{\n    return Skip(args[0]);\n}",
			"comments":"",
			"methodName":"public int method4(int[] args)"
		},
		"private int QueryInterface(int riid, int ppvObject)":{
			"methodBody":"{\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_NOINTERFACE;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIUnknown)) {\n        COM.MoveMemory(ppvObject, new int[] { iUnknown.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    if (COM.IsEqualGUID(guid, COM.IIDIEnumFORMATETC)) {\n        COM.MoveMemory(ppvObject, new int[] { iEnumFORMATETC.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    COM.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"private int QueryInterface(int riid, int ppvObject)"
		},
		"public int method5(int[] args)":{
			"methodBody":"{\n    return Reset();\n}",
			"comments":"",
			"methodName":"public int method5(int[] args)"
		},
		"private FORMATETC[] getNextItems(int numItems)":{
			"methodBody":"{\n    if (formats == null || numItems < 1)\n        return null;\n    int endIndex = index + numItems - 1;\n    if (endIndex > (formats.length - 1))\n        endIndex = formats.length - 1;\n    if (index > endIndex)\n        return null;\n    FORMATETC[] items = new FORMATETC[endIndex - index + 1];\n    for (int i = 0; i < items.length; i++) {\n        items[i] = formats[index];\n        index++;\n    }\n    return items;\n}",
			"comments":"",
			"methodName":"private FORMATETC[] getNextItems(int numItems)"
		},
		"private int Next(int celt, int rgelt, int pceltFetched)":{
			"methodBody":"{\n    if (rgelt == 0)\n        return COM.E_INVALIDARG;\n    if (pceltFetched == 0 && celt != 1)\n        return COM.E_INVALIDARG;\n    FORMATETC[] nextItems = getNextItems(celt);\n    if (nextItems != null) {\n        for (int i = 0; i < nextItems.length; i++) {\n            COM.MoveMemory(rgelt + i * FORMATETC.sizeof, nextItems[i], FORMATETC.sizeof);\n        }\n        if (pceltFetched != 0)\n            COM.MoveMemory(pceltFetched, new int[] { nextItems.length }, 4);\n        if (nextItems.length == celt)\n            return COM.S_OK;\n    } else {\n        if (pceltFetched != 0)\n            COM.MoveMemory(pceltFetched, new int[] { 0 }, 4);\n        COM.MoveMemory(rgelt, new FORMATETC(), FORMATETC.sizeof);\n    }\n    return COM.S_FALSE;\n}",
			"comments":"/* Retrieves the next celt items in the enumeration sequence.\nIf there are fewer than the requested number of elements left in the sequence,\nit retrieves the remaining elements.\nThe number of elements actually retrieved is returned through pceltFetched\n(unless the caller passed in NULL for that parameter).\n*/\n",
			"methodName":"private int Next(int celt, int rgelt, int pceltFetched)"
		},
		"private int Reset()":{
			"methodBody":"{\n    \n    index = 0;\n    return COM.S_OK;\n}",
			"comments":"//Resets the enumeration sequence to the beginning.\n",
			"methodName":"private int Reset()"
		},
		"private void createCOMInterfaces()":{
			"methodBody":"{\n    \n    iUnknown = new COMObject(new int[] { 2, 0, 0 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n    };\n    iEnumFORMATETC = new COMObject(new int[] { 2, 0, 0, 3, 1, 0, 1 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return Next(args[0], args[1], args[2]);\n        }\n\n        public int method4(int[] args) {\n            return Skip(args[0]);\n        }\n\n        public int method5(int[] args) {\n            return Reset();\n        }\n    };\n}",
			"comments":"// register each of the interfaces that this object implements\n// method6 Clone - not implemented\n",
			"methodName":"private void createCOMInterfaces()"
		},
		"public int method3(int[] args)":{
			"methodBody":"{\n    return Next(args[0], args[1], args[2]);\n}",
			"comments":"",
			"methodName":"public int method3(int[] args)"
		},
		"public int method2(int[] args)":{
			"methodBody":"{\n    return Release();\n}",
			"comments":"",
			"methodName":"public int method2(int[] args)"
		},
		"private void disposeCOMInterfaces()":{
			"methodBody":"{\n    if (iUnknown != null)\n        iUnknown.dispose();\n    iUnknown = null;\n    if (iEnumFORMATETC != null)\n        iEnumFORMATETC.dispose();\n    iEnumFORMATETC = null;\n}",
			"comments":"",
			"methodName":"private void disposeCOMInterfaces()"
		},
		"private int Skip(int celt)":{
			"methodBody":"{\n    \n    if (celt < 1)\n        return COM.E_INVALIDARG;\n    index += celt;\n    if (index > (formats.length - 1)) {\n        index = formats.length - 1;\n        return COM.S_FALSE;\n    }\n    return COM.S_OK;\n}",
			"comments":"//Skips over the next specified number of elements in the enumeration sequence.\n",
			"methodName":"private int Skip(int celt)"
		},
		"public int method1(int[] args)":{
			"methodBody":"{\n    return AddRef();\n}",
			"comments":"",
			"methodName":"public int method1(int[] args)"
		},
		"int getAddress()":{
			"methodBody":"{\n    return iEnumFORMATETC.getAddress();\n}",
			"comments":"",
			"methodName":"int getAddress()"
		},
		"int Release()":{
			"methodBody":"{\n    refCount--;\n    if (refCount == 0) {\n        disposeCOMInterfaces();\n        COM.CoFreeUnusedLibraries();\n    }\n    return refCount;\n}",
			"comments":"",
			"methodName":"int Release()"
		},
		"public int method0(int[] args)":{
			"methodBody":"{\n    return QueryInterface(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method0(int[] args)"
		}
	},
	"ClassORInterfaceName":[
		"OleEnumFORMATETC"
	]
}
