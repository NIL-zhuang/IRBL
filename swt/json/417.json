{
	"variables":[
		"types",
		"handlers",
		"i",
		"size",
		"newTypes",
		"newHandlers",
		"i",
		"i",
		"listener",
		"i",
		"i",
		"types",
		"types",
		"handlers",
		"handlers",
		"i",
		"types",
		"i",
		"types",
		"i",
		"types",
		"i",
		"eventType",
		"handlers",
		"i",
		"handler",
		"types",
		"size",
		"size",
		"System",
		"types",
		"newTypes",
		"size",
		"System",
		"handlers",
		"newHandlers",
		"size",
		"types",
		"newTypes",
		"handlers",
		"newHandlers",
		"types",
		"size",
		"eventType",
		"handlers",
		"size",
		"handler",
		"handlers",
		"i",
		"types",
		"i",
		"types",
		"i",
		"eventType",
		"handlers",
		"i",
		"types",
		"i",
		"types",
		"i",
		"event",
		"handlers",
		"i",
		"listener",
		"listener",
		"event",
		"handlers",
		"i",
		"types",
		"i",
		"types",
		"i",
		"eventType",
		"handlers",
		"i",
		"handler",
		"types",
		"i",
		"handlers",
		"i",
		"i",
		"types",
		"i",
		"types",
		"i",
		"length",
		"length",
		"length",
		"length",
		"type",
		"length",
		"length",
		"eventType",
		"handler",
		"eventType",
		"event",
		"eventType",
		"handler"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.ole.win32"
	],
	"import":[],
	"methods":[
		"hook",
		"hooks",
		"sendEvent",
		"unhook",
		"hasEntries",
		"arraycopy",
		"arraycopy",
		"handleEvent"
	],
	"methodsBody":{
		"void hook(int eventType, OleListener handler)":{
			"methodBody":"{\n    if (types == null)\n        types = new int[4];\n    if (handlers == null)\n        handlers = new OleListener[4];\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] == 0) {\n            types[i] = eventType;\n            handlers[i] = handler;\n            return;\n        }\n    }\n    int size = types.length;\n    int[] newTypes = new int[size + 4];\n    OleListener[] newHandlers = new OleListener[size + 4];\n    System.arraycopy(types, 0, newTypes, 0, size);\n    System.arraycopy(handlers, 0, newHandlers, 0, size);\n    types = newTypes;\n    handlers = newHandlers;\n    types[size] = eventType;\n    handlers[size] = handler;\n}",
			"comments":"",
			"methodName":"void hook(int eventType, OleListener handler)"
		},
		"boolean hooks(int eventType)":{
			"methodBody":"{\n    if (handlers == null)\n        return false;\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] == eventType)\n            return true;\n    }\n    return false;\n}",
			"comments":"",
			"methodName":"boolean hooks(int eventType)"
		},
		"boolean hasEntries()":{
			"methodBody":"{\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] != 0)\n            return true;\n    }\n    return false;\n}",
			"comments":"",
			"methodName":"boolean hasEntries()"
		},
		"void sendEvent(OleEvent event)":{
			"methodBody":"{\n    if (handlers == null)\n        return;\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] == event.type) {\n            OleListener listener = handlers[i];\n            if (listener != null)\n                listener.handleEvent(event);\n        }\n    }\n}",
			"comments":"",
			"methodName":"void sendEvent(OleEvent event)"
		},
		"void unhook(int eventType, OleListener handler)":{
			"methodBody":"{\n    if (handlers == null)\n        return;\n    for (int i = 0; i < types.length; i++) {\n        if ((types[i] == eventType) && (handlers[i] == handler)) {\n            types[i] = 0;\n            handlers[i] = null;\n            return;\n        }\n    }\n}",
			"comments":"",
			"methodName":"void unhook(int eventType, OleListener handler)"
		}
	},
	"ClassORInterfaceName":[
		"OleEventTable"
	]
}
