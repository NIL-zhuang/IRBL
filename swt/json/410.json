{
	"variables":[
		"type",
		"marginWidth",
		"marginHeight",
		"spacing",
		"wrap",
		"pack",
		"fill",
		"justify",
		"marginLeft",
		"marginTop",
		"marginRight",
		"marginBottom",
		"extent",
		"wHint",
		"hHint",
		"data",
		"string",
		"index",
		"clientArea",
		"count",
		"children",
		"i",
		"control",
		"data",
		"childWidth",
		"childHeight",
		"maxHeight",
		"i",
		"child",
		"size",
		"clientX",
		"clientY",
		"rect",
		"wraps",
		"wrapped",
		"bounds",
		"maxX",
		"x",
		"y",
		"i",
		"child",
		"size",
		"childX",
		"childY",
		"space",
		"margin",
		"last",
		"i",
		"wrapCount",
		"wrapX",
		"j",
		"j",
		"i",
		"count",
		"children",
		"i",
		"control",
		"data",
		"childWidth",
		"childHeight",
		"maxWidth",
		"i",
		"child",
		"size",
		"clientX",
		"clientY",
		"rect",
		"wraps",
		"wrapped",
		"bounds",
		"maxY",
		"x",
		"y",
		"i",
		"child",
		"size",
		"childX",
		"childY",
		"space",
		"margin",
		"last",
		"i",
		"wrapCount",
		"wrapY",
		"j",
		"j",
		"i",
		"string",
		"SWT",
		"type",
		"type",
		"SWT",
		"extent",
		"composite",
		"wHint",
		"SWT",
		"wrap",
		"wHint",
		"flushCache",
		"extent",
		"composite",
		"hHint",
		"SWT",
		"wrap",
		"hHint",
		"flushCache",
		"wHint",
		"SWT",
		"extent",
		"wHint",
		"hHint",
		"SWT",
		"extent",
		"hHint",
		"extent",
		"SWT",
		"SWT",
		"control",
		"data",
		"wHint",
		"data",
		"hHint",
		"data",
		"control",
		"wHint",
		"hHint",
		"flushCache",
		"string",
		"index",
		"string",
		"string",
		"index",
		"string",
		"composite",
		"type",
		"SWT",
		"composite",
		"wrap",
		"clientArea",
		"flushCache",
		"composite",
		"wrap",
		"clientArea",
		"flushCache",
		"composite",
		"i",
		"children",
		"i",
		"children",
		"i",
		"control",
		"data",
		"data",
		"children",
		"count",
		"children",
		"i",
		"pack",
		"i",
		"count",
		"i",
		"children",
		"i",
		"child",
		"flushCache",
		"childWidth",
		"Math",
		"childWidth",
		"size",
		"childHeight",
		"Math",
		"childHeight",
		"size",
		"maxHeight",
		"childHeight",
		"move",
		"composite",
		"clientX",
		"rect",
		"clientY",
		"rect",
		"move",
		"justify",
		"fill",
		"bounds",
		"count",
		"wraps",
		"count",
		"marginLeft",
		"marginWidth",
		"marginTop",
		"marginHeight",
		"i",
		"count",
		"i",
		"children",
		"i",
		"pack",
		"child",
		"flushCache",
		"childWidth",
		"size",
		"childHeight",
		"size",
		"wrap",
		"i",
		"x",
		"childWidth",
		"width",
		"wrapped",
		"move",
		"justify",
		"fill",
		"wraps",
		"i",
		"maxHeight",
		"x",
		"marginLeft",
		"marginWidth",
		"y",
		"spacing",
		"maxHeight",
		"pack",
		"maxHeight",
		"pack",
		"fill",
		"maxHeight",
		"Math",
		"maxHeight",
		"childHeight",
		"move",
		"x",
		"clientX",
		"y",
		"clientY",
		"justify",
		"fill",
		"bounds",
		"i",
		"childX",
		"childY",
		"childWidth",
		"childHeight",
		"child",
		"childX",
		"childY",
		"childWidth",
		"childHeight",
		"x",
		"spacing",
		"childWidth",
		"maxX",
		"Math",
		"maxX",
		"x",
		"maxX",
		"Math",
		"clientX",
		"marginLeft",
		"marginWidth",
		"maxX",
		"spacing",
		"wrapped",
		"maxX",
		"marginRight",
		"marginWidth",
		"move",
		"justify",
		"fill",
		"wrapped",
		"space",
		"Math",
		"width",
		"maxX",
		"count",
		"margin",
		"Math",
		"width",
		"maxX",
		"count",
		"fill",
		"justify",
		"count",
		"wraps",
		"count",
		"maxHeight",
		"i",
		"count",
		"i",
		"wraps",
		"i",
		"i",
		"last",
		"justify",
		"last",
		"j",
		"i",
		"j",
		"wrapX",
		"bounds",
		"j",
		"spacing",
		"space",
		"Math",
		"width",
		"wrapX",
		"wrapCount",
		"margin",
		"Math",
		"width",
		"wrapX",
		"wrapCount",
		"last",
		"j",
		"i",
		"j",
		"justify",
		"bounds",
		"j",
		"space",
		"j",
		"last",
		"margin",
		"fill",
		"bounds",
		"j",
		"wraps",
		"i",
		"last",
		"i",
		"i",
		"count",
		"i",
		"wrapped",
		"justify",
		"bounds",
		"i",
		"space",
		"i",
		"margin",
		"fill",
		"bounds",
		"i",
		"maxHeight",
		"children",
		"i",
		"bounds",
		"i",
		"maxX",
		"y",
		"maxHeight",
		"marginBottom",
		"marginHeight",
		"composite",
		"i",
		"children",
		"i",
		"children",
		"i",
		"control",
		"data",
		"data",
		"children",
		"count",
		"children",
		"i",
		"pack",
		"i",
		"count",
		"i",
		"children",
		"i",
		"child",
		"flushCache",
		"childWidth",
		"Math",
		"childWidth",
		"size",
		"childHeight",
		"Math",
		"childHeight",
		"size",
		"maxWidth",
		"childWidth",
		"move",
		"composite",
		"clientX",
		"rect",
		"clientY",
		"rect",
		"move",
		"justify",
		"fill",
		"bounds",
		"count",
		"wraps",
		"count",
		"marginLeft",
		"marginWidth",
		"marginTop",
		"marginHeight",
		"i",
		"count",
		"i",
		"children",
		"i",
		"pack",
		"child",
		"flushCache",
		"childWidth",
		"size",
		"childHeight",
		"size",
		"wrap",
		"i",
		"y",
		"childHeight",
		"height",
		"wrapped",
		"move",
		"justify",
		"fill",
		"wraps",
		"i",
		"maxWidth",
		"x",
		"spacing",
		"maxWidth",
		"y",
		"marginTop",
		"marginHeight",
		"pack",
		"maxWidth",
		"pack",
		"fill",
		"maxWidth",
		"Math",
		"maxWidth",
		"childWidth",
		"move",
		"x",
		"clientX",
		"y",
		"clientY",
		"justify",
		"fill",
		"bounds",
		"i",
		"childX",
		"childY",
		"childWidth",
		"childHeight",
		"child",
		"childX",
		"childY",
		"childWidth",
		"childHeight",
		"y",
		"spacing",
		"childHeight",
		"maxY",
		"Math",
		"maxY",
		"y",
		"maxY",
		"Math",
		"clientY",
		"marginTop",
		"marginHeight",
		"maxY",
		"spacing",
		"wrapped",
		"maxY",
		"marginBottom",
		"marginHeight",
		"move",
		"justify",
		"fill",
		"wrapped",
		"space",
		"Math",
		"height",
		"maxY",
		"count",
		"margin",
		"Math",
		"height",
		"maxY",
		"count",
		"fill",
		"justify",
		"count",
		"wraps",
		"count",
		"maxWidth",
		"i",
		"count",
		"i",
		"wraps",
		"i",
		"i",
		"last",
		"justify",
		"last",
		"j",
		"i",
		"j",
		"wrapY",
		"bounds",
		"j",
		"spacing",
		"space",
		"Math",
		"height",
		"wrapY",
		"wrapCount",
		"margin",
		"Math",
		"height",
		"wrapY",
		"wrapCount",
		"last",
		"j",
		"i",
		"j",
		"justify",
		"bounds",
		"j",
		"space",
		"j",
		"last",
		"margin",
		"fill",
		"bounds",
		"j",
		"wraps",
		"i",
		"last",
		"i",
		"i",
		"count",
		"i",
		"wrapped",
		"justify",
		"bounds",
		"i",
		"space",
		"i",
		"margin",
		"fill",
		"bounds",
		"i",
		"maxWidth",
		"children",
		"i",
		"bounds",
		"i",
		"x",
		"maxWidth",
		"marginRight",
		"marginWidth",
		"maxY",
		"string",
		"type",
		"SWT",
		"marginWidth",
		"string",
		"marginWidth",
		"marginHeight",
		"string",
		"marginHeight",
		"marginLeft",
		"string",
		"marginLeft",
		"marginTop",
		"string",
		"marginTop",
		"marginRight",
		"string",
		"marginRight",
		"marginBottom",
		"string",
		"marginBottom",
		"spacing",
		"string",
		"spacing",
		"string",
		"wrap",
		"string",
		"pack",
		"string",
		"fill",
		"string",
		"justify",
		"string",
		"string",
		"string",
		"string",
		"HORIZONTAL",
		"type",
		"HORIZONTAL",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"x",
		"DEFAULT",
		"y",
		"DEFAULT",
		"DEFAULT",
		"width",
		"height",
		"HORIZONTAL",
		"width",
		"height",
		"length",
		"exclude",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"width",
		"x",
		"height",
		"x",
		"height",
		"length",
		"exclude",
		"x",
		"y",
		"x",
		"y",
		"x",
		"y",
		"height",
		"y",
		"width",
		"y",
		"width",
		"HORIZONTAL",
		"type",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"flushCache",
		"control",
		"composite",
		"flushCache",
		"composite",
		"move",
		"wrap",
		"width",
		"flushCache",
		"composite",
		"move",
		"wrap",
		"height",
		"flushCache"
	],
	"extendORImplementFiles":[
		"Layout"
	],
	"package":[
		"org.eclipse.swt.layout"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"computeSize",
		"computeSize",
		"flushCache",
		"getName",
		"layout",
		"layoutHorizontal",
		"layoutVertical",
		"toString",
		"layoutHorizontal",
		"layoutVertical",
		"getLayoutData",
		"computeSize",
		"getName",
		"getClass",
		"lastIndexOf",
		"substring",
		"length",
		"getClientArea",
		"layoutHorizontal",
		"layoutVertical",
		"getChildren",
		"getLayoutData",
		"computeSize",
		"max",
		"max",
		"getClientArea",
		"computeSize",
		"max",
		"setBounds",
		"max",
		"max",
		"max",
		"max",
		"max",
		"max",
		"setBounds",
		"getChildren",
		"getLayoutData",
		"computeSize",
		"max",
		"max",
		"getClientArea",
		"computeSize",
		"max",
		"setBounds",
		"max",
		"max",
		"max",
		"max",
		"max",
		"max",
		"setBounds",
		"getName",
		"trim",
		"Rectangle",
		"Point",
		"Rectangle",
		"Point"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    String string = getName() + \" {\";\n    string += \"type=\" + ((type != SWT.HORIZONTAL) ? \"SWT.VERTICAL\" : \"SWT.HORIZONTAL\") + \" \";\n    if (marginWidth != 0)\n        string += \"marginWidth=\" + marginWidth + \" \";\n    if (marginHeight != 0)\n        string += \"marginHeight=\" + marginHeight + \" \";\n    if (marginLeft != 0)\n        string += \"marginLeft=\" + marginLeft + \" \";\n    if (marginTop != 0)\n        string += \"marginTop=\" + marginTop + \" \";\n    if (marginRight != 0)\n        string += \"marginRight=\" + marginRight + \" \";\n    if (marginBottom != 0)\n        string += \"marginBottom=\" + marginBottom + \" \";\n    if (spacing != 0)\n        string += \"spacing=\" + spacing + \" \";\n    string += \"wrap=\" + wrap + \" \";\n    string += \"pack=\" + pack + \" \";\n    string += \"fill=\" + fill + \" \";\n    string += \"justify=\" + justify + \" \";\n    string = string.trim();\n    string += \"}\";\n    return string;\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the event\n*/\n",
			"methodName":"public String toString()"
		},
		"Point layoutHorizontal(Composite composite, boolean move, boolean wrap, int width, boolean flushCache)":{
			"methodBody":"{\n    int count = 0;\n    Control[] children = composite.getChildren();\n    for (int i = 0; i < children.length; i++) {\n        Control control = children[i];\n        RowData data = (RowData) control.getLayoutData();\n        if (data == null || !data.exclude) {\n            children[count++] = children[i];\n        }\n    }\n    int childWidth = 0, childHeight = 0, maxHeight = 0;\n    if (!pack) {\n        for (int i = 0; i < count; i++) {\n            Control child = children[i];\n            Point size = computeSize(child, flushCache);\n            childWidth = Math.max(childWidth, size.x);\n            childHeight = Math.max(childHeight, size.y);\n        }\n        maxHeight = childHeight;\n    }\n    int clientX = 0, clientY = 0;\n    if (move) {\n        Rectangle rect = composite.getClientArea();\n        clientX = rect.x;\n        clientY = rect.y;\n    }\n    int[] wraps = null;\n    boolean wrapped = false;\n    Rectangle[] bounds = null;\n    if (move && (justify || fill)) {\n        bounds = new Rectangle[count];\n        wraps = new int[count];\n    }\n    int maxX = 0, x = marginLeft + marginWidth, y = marginTop + marginHeight;\n    for (int i = 0; i < count; i++) {\n        Control child = children[i];\n        if (pack) {\n            Point size = computeSize(child, flushCache);\n            childWidth = size.x;\n            childHeight = size.y;\n        }\n        if (wrap && (i != 0) && (x + childWidth > width)) {\n            wrapped = true;\n            if (move && (justify || fill))\n                wraps[i - 1] = maxHeight;\n            x = marginLeft + marginWidth;\n            y += spacing + maxHeight;\n            if (pack)\n                maxHeight = 0;\n        }\n        if (pack || fill) {\n            maxHeight = Math.max(maxHeight, childHeight);\n        }\n        if (move) {\n            int childX = x + clientX, childY = y + clientY;\n            if (justify || fill) {\n                bounds[i] = new Rectangle(childX, childY, childWidth, childHeight);\n            } else {\n                child.setBounds(childX, childY, childWidth, childHeight);\n            }\n        }\n        x += spacing + childWidth;\n        maxX = Math.max(maxX, x);\n    }\n    maxX = Math.max(clientX + marginLeft + marginWidth, maxX - spacing);\n    if (!wrapped)\n        maxX += marginRight + marginWidth;\n    if (move && (justify || fill)) {\n        int space = 0, margin = 0;\n        if (!wrapped) {\n            space = Math.max(0, (width - maxX) / (count + 1));\n            margin = Math.max(0, ((width - maxX) % (count + 1)) / 2);\n        } else {\n            if (fill || justify) {\n                int last = 0;\n                if (count > 0)\n                    wraps[count - 1] = maxHeight;\n                for (int i = 0; i < count; i++) {\n                    if (wraps[i] != 0) {\n                        int wrapCount = i - last + 1;\n                        if (justify) {\n                            int wrapX = 0;\n                            for (int j = last; j <= i; j++) {\n                                wrapX += bounds[j].width + spacing;\n                            }\n                            space = Math.max(0, (width - wrapX) / (wrapCount + 1));\n                            margin = Math.max(0, ((width - wrapX) % (wrapCount + 1)) / 2);\n                        }\n                        for (int j = last; j <= i; j++) {\n                            if (justify)\n                                bounds[j].x += (space * (j - last + 1)) + margin;\n                            if (fill)\n                                bounds[j].height = wraps[i];\n                        }\n                        last = i + 1;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < count; i++) {\n            if (!wrapped) {\n                if (justify)\n                    bounds[i].x += (space * (i + 1)) + margin;\n                if (fill)\n                    bounds[i].height = maxHeight;\n            }\n            children[i].setBounds(bounds[i]);\n        }\n    }\n    return new Point(maxX, y + maxHeight + marginBottom + marginHeight);\n}",
			"comments":"",
			"methodName":"Point layoutHorizontal(Composite composite, boolean move, boolean wrap, int width, boolean flushCache)"
		},
		"protected boolean flushCache(Control control)":{
			"methodBody":"{\n    return true;\n}",
			"comments":"",
			"methodName":"protected boolean flushCache(Control control)"
		},
		"String getName()":{
			"methodBody":"{\n    String string = getClass().getName();\n    int index = string.lastIndexOf('.');\n    if (index == -1)\n        return string;\n    return string.substring(index + 1, string.length());\n}",
			"comments":"",
			"methodName":"String getName()"
		},
		"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    Point extent;\n    if (type == SWT.HORIZONTAL) {\n        extent = layoutHorizontal(composite, false, (wHint != SWT.DEFAULT) && wrap, wHint, flushCache);\n    } else {\n        extent = layoutVertical(composite, false, (hHint != SWT.DEFAULT) && wrap, hHint, flushCache);\n    }\n    if (wHint != SWT.DEFAULT)\n        extent.x = wHint;\n    if (hHint != SWT.DEFAULT)\n        extent.y = hHint;\n    return extent;\n}",
			"comments":"",
			"methodName":"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)"
		},
		"Point layoutVertical(Composite composite, boolean move, boolean wrap, int height, boolean flushCache)":{
			"methodBody":"{\n    int count = 0;\n    Control[] children = composite.getChildren();\n    for (int i = 0; i < children.length; i++) {\n        Control control = children[i];\n        RowData data = (RowData) control.getLayoutData();\n        if (data == null || !data.exclude) {\n            children[count++] = children[i];\n        }\n    }\n    int childWidth = 0, childHeight = 0, maxWidth = 0;\n    if (!pack) {\n        for (int i = 0; i < count; i++) {\n            Control child = children[i];\n            Point size = computeSize(child, flushCache);\n            childWidth = Math.max(childWidth, size.x);\n            childHeight = Math.max(childHeight, size.y);\n        }\n        maxWidth = childWidth;\n    }\n    int clientX = 0, clientY = 0;\n    if (move) {\n        Rectangle rect = composite.getClientArea();\n        clientX = rect.x;\n        clientY = rect.y;\n    }\n    int[] wraps = null;\n    boolean wrapped = false;\n    Rectangle[] bounds = null;\n    if (move && (justify || fill)) {\n        bounds = new Rectangle[count];\n        wraps = new int[count];\n    }\n    int maxY = 0, x = marginLeft + marginWidth, y = marginTop + marginHeight;\n    for (int i = 0; i < count; i++) {\n        Control child = children[i];\n        if (pack) {\n            Point size = computeSize(child, flushCache);\n            childWidth = size.x;\n            childHeight = size.y;\n        }\n        if (wrap && (i != 0) && (y + childHeight > height)) {\n            wrapped = true;\n            if (move && (justify || fill))\n                wraps[i - 1] = maxWidth;\n            x += spacing + maxWidth;\n            y = marginTop + marginHeight;\n            if (pack)\n                maxWidth = 0;\n        }\n        if (pack || fill) {\n            maxWidth = Math.max(maxWidth, childWidth);\n        }\n        if (move) {\n            int childX = x + clientX, childY = y + clientY;\n            if (justify || fill) {\n                bounds[i] = new Rectangle(childX, childY, childWidth, childHeight);\n            } else {\n                child.setBounds(childX, childY, childWidth, childHeight);\n            }\n        }\n        y += spacing + childHeight;\n        maxY = Math.max(maxY, y);\n    }\n    maxY = Math.max(clientY + marginTop + marginHeight, maxY - spacing);\n    if (!wrapped)\n        maxY += marginBottom + marginHeight;\n    if (move && (justify || fill)) {\n        int space = 0, margin = 0;\n        if (!wrapped) {\n            space = Math.max(0, (height - maxY) / (count + 1));\n            margin = Math.max(0, ((height - maxY) % (count + 1)) / 2);\n        } else {\n            if (fill || justify) {\n                int last = 0;\n                if (count > 0)\n                    wraps[count - 1] = maxWidth;\n                for (int i = 0; i < count; i++) {\n                    if (wraps[i] != 0) {\n                        int wrapCount = i - last + 1;\n                        if (justify) {\n                            int wrapY = 0;\n                            for (int j = last; j <= i; j++) {\n                                wrapY += bounds[j].height + spacing;\n                            }\n                            space = Math.max(0, (height - wrapY) / (wrapCount + 1));\n                            margin = Math.max(0, ((height - wrapY) % (wrapCount + 1)) / 2);\n                        }\n                        for (int j = last; j <= i; j++) {\n                            if (justify)\n                                bounds[j].y += (space * (j - last + 1)) + margin;\n                            if (fill)\n                                bounds[j].width = wraps[i];\n                        }\n                        last = i + 1;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < count; i++) {\n            if (!wrapped) {\n                if (justify)\n                    bounds[i].y += (space * (i + 1)) + margin;\n                if (fill)\n                    bounds[i].width = maxWidth;\n            }\n            children[i].setBounds(bounds[i]);\n        }\n    }\n    return new Point(x + maxWidth + marginRight + marginWidth, maxY);\n}",
			"comments":"",
			"methodName":"Point layoutVertical(Composite composite, boolean move, boolean wrap, int height, boolean flushCache)"
		},
		"Point computeSize(Control control, boolean flushCache)":{
			"methodBody":"{\n    int wHint = SWT.DEFAULT, hHint = SWT.DEFAULT;\n    RowData data = (RowData) control.getLayoutData();\n    if (data != null) {\n        wHint = data.width;\n        hHint = data.height;\n    }\n    return control.computeSize(wHint, hHint, flushCache);\n}",
			"comments":"",
			"methodName":"Point computeSize(Control control, boolean flushCache)"
		},
		"protected void layout(Composite composite, boolean flushCache)":{
			"methodBody":"{\n    Rectangle clientArea = composite.getClientArea();\n    if (type == SWT.HORIZONTAL) {\n        layoutHorizontal(composite, true, wrap, clientArea.width, flushCache);\n    } else {\n        layoutVertical(composite, true, wrap, clientArea.height, flushCache);\n    }\n}",
			"comments":"",
			"methodName":"protected void layout(Composite composite, boolean flushCache)"
		}
	},
	"ClassORInterfaceName":[
		"RowLayout"
	]
}
