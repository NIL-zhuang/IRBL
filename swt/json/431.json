{
	"variables":[
		"parent",
		"x",
		"y",
		"width",
		"height",
		"moved",
		"resized",
		"isVisible",
		"image",
		"font",
		"oldFont",
		"hwnd",
		"hwndIME",
		"hFont",
		"rect",
		"hFont",
		"rect",
		"ptCurrentPos",
		"hwnd",
		"rect",
		"lpCompForm",
		"hIMC",
		"hwnd",
		"hBitmap",
		"hwnd",
		"hIMC",
		"samePosition",
		"sameExtent",
		"hwnd",
		"hBitmap",
		"hFont",
		"hwnd",
		"hIMC",
		"logFont",
		"hwnd",
		"parent",
		"style",
		"parent",
		"isVisible",
		"parent",
		"parent",
		"parent",
		"OS",
		"hwnd",
		"hwndIME",
		"hFont",
		"OS",
		"hwndIME",
		"OS",
		"hFont",
		"hFont",
		"OS",
		"hwnd",
		"OS",
		"hFont",
		"parent",
		"hFont",
		"image",
		"image",
		"x",
		"y",
		"rect",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"font",
		"Font",
		"display",
		"hFont",
		"font",
		"image",
		"x",
		"y",
		"parent",
		"image",
		"image",
		"rect",
		"rect",
		"width",
		"height",
		"isVisible",
		"parent",
		"OS",
		"parent",
		"isVisible",
		"parent",
		"OS",
		"moved",
		"OS",
		"x",
		"y",
		"OS",
		"OS",
		"ptCurrentPos",
		"parent",
		"OS",
		"hwnd",
		"rect",
		"lpCompForm",
		"OS",
		"lpCompForm",
		"ptCurrentPos",
		"lpCompForm",
		"ptCurrentPos",
		"lpCompForm",
		"rect",
		"lpCompForm",
		"rect",
		"lpCompForm",
		"rect",
		"lpCompForm",
		"rect",
		"OS",
		"hwnd",
		"OS",
		"hIMC",
		"lpCompForm",
		"OS",
		"hwnd",
		"hIMC",
		"parent",
		"parent",
		"parent",
		"image",
		"font",
		"oldFont",
		"resized",
		"parent",
		"OS",
		"image",
		"image",
		"OS",
		"hwnd",
		"hBitmap",
		"width",
		"height",
		"OS",
		"x",
		"y",
		"OS",
		"hwnd",
		"OS",
		"oldFont",
		"parent",
		"OS",
		"hwnd",
		"OS",
		"hIMC",
		"oldFont",
		"OS",
		"hwnd",
		"hIMC",
		"oldFont",
		"x",
		"y",
		"width",
		"height",
		"samePosition",
		"sameExtent",
		"x",
		"y",
		"width",
		"height",
		"sameExtent",
		"moved",
		"isVisible",
		"resized",
		"isVisible",
		"rect",
		"SWT",
		"rect",
		"rect",
		"rect",
		"rect",
		"parent",
		"image",
		"hBitmap",
		"image",
		"OS",
		"hwnd",
		"hBitmap",
		"width",
		"height",
		"isVisible",
		"OS",
		"hwnd",
		"font",
		"font",
		"SWT",
		"font",
		"image",
		"image",
		"SWT",
		"image",
		"isVisible",
		"OS",
		"font",
		"hFont",
		"font",
		"hFont",
		"hFont",
		"parent",
		"OS",
		"hwnd",
		"oldFont",
		"oldFont",
		"OS",
		"OS",
		"hIMC",
		"oldFont",
		"oldFont",
		"OS",
		"OS",
		"hFont",
		"LOGFONT",
		"logFont",
		"OS",
		"hIMC",
		"logFont",
		"OS",
		"hwnd",
		"hIMC",
		"x",
		"y",
		"x",
		"y",
		"moved",
		"isVisible",
		"location",
		"SWT",
		"location",
		"location",
		"width",
		"height",
		"width",
		"height",
		"resized",
		"isVisible",
		"size",
		"SWT",
		"size",
		"size",
		"visible",
		"isVisible",
		"isVisible",
		"visible",
		"parent",
		"OS",
		"hwnd",
		"isVisible",
		"OS",
		"hwnd",
		"resized",
		"moved",
		"OS",
		"hwnd",
		"parent",
		"handle",
		"WM_GETFONT",
		"WM_GETFONT",
		"width",
		"height",
		"width",
		"height",
		"handle",
		"caret",
		"IsDBLocale",
		"handle",
		"dwStyle",
		"CFS_RECT",
		"x",
		"x",
		"y",
		"y",
		"left",
		"left",
		"right",
		"right",
		"top",
		"top",
		"bottom",
		"bottom",
		"handle",
		"handle",
		"IsDBLocale",
		"handle",
		"x",
		"y",
		"width",
		"height",
		"x",
		"y",
		"width",
		"height",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"width",
		"height",
		"handle",
		"handle",
		"ERROR_INVALID_ARGUMENT",
		"font",
		"ERROR_INVALID_ARGUMENT",
		"image",
		"IsDBLocale",
		"handle",
		"handle",
		"IsUnicode",
		"IsUnicode",
		"sizeof",
		"x",
		"y",
		"x",
		"y",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"width",
		"height",
		"width",
		"height",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"handle",
		"parent",
		"style",
		"x",
		"y",
		"width",
		"height",
		"rect",
		"font",
		"image",
		"x",
		"y",
		"location",
		"width",
		"height",
		"size",
		"visible"
	],
	"extendORImplementFiles":[
		"Widget"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"createWidget",
		"defaultFont",
		"getBounds",
		"getFont",
		"getImage",
		"getLocation",
		"getParent",
		"getSize",
		"getVisible",
		"hasFocus",
		"isFocusCaret",
		"isVisible",
		"killFocus",
		"move",
		"resizeIME",
		"releaseChild",
		"releaseWidget",
		"resize",
		"restoreIMEFont",
		"setBounds",
		"setBounds",
		"setFocus",
		"setFont",
		"setImage",
		"setIMEFont",
		"setLocation",
		"setLocation",
		"setSize",
		"setSize",
		"setVisible",
		"createWidget",
		"getCaret",
		"setCaret",
		"ImmGetDefaultIMEWnd",
		"SendMessage",
		"SendMessage",
		"defaultFont",
		"checkWidget",
		"getBounds",
		"checkWidget",
		"defaultFont",
		"win32_new",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"getBounds",
		"checkWidget",
		"GetFocus",
		"hasFocus",
		"checkWidget",
		"isVisible",
		"hasFocus",
		"DestroyCaret",
		"restoreIMEFont",
		"SetCaretPos",
		"resizeIME",
		"GetCaretPos",
		"GetClientRect",
		"ImmGetContext",
		"ImmSetCompositionWindow",
		"ImmReleaseContext",
		"releaseChild",
		"getCaret",
		"setCaret",
		"releaseWidget",
		"DestroyCaret",
		"CreateCaret",
		"SetCaretPos",
		"ShowCaret",
		"move",
		"ImmGetContext",
		"ImmSetCompositionFont",
		"ImmReleaseContext",
		"checkWidget",
		"hasFocus",
		"move",
		"hasFocus",
		"resize",
		"error",
		"setBounds",
		"CreateCaret",
		"move",
		"setIMEFont",
		"ShowCaret",
		"checkWidget",
		"isDisposed",
		"error",
		"hasFocus",
		"setIMEFont",
		"checkWidget",
		"isDisposed",
		"error",
		"hasFocus",
		"resize",
		"defaultFont",
		"ImmGetContext",
		"ImmGetCompositionFont",
		"GetObject",
		"ImmSetCompositionFont",
		"ImmReleaseContext",
		"checkWidget",
		"hasFocus",
		"move",
		"checkWidget",
		"error",
		"setLocation",
		"checkWidget",
		"hasFocus",
		"resize",
		"checkWidget",
		"error",
		"setSize",
		"checkWidget",
		"GetFocus",
		"HideCaret",
		"resize",
		"move",
		"ShowCaret",
		"Rectangle",
		"Rectangle",
		"Point",
		"Point",
		"Point",
		"POINT",
		"RECT",
		"COMPOSITIONFORM",
		"LOGFONTW",
		"LOGFONTA",
		"LOGFONTW",
		"LOGFONTA"
	],
	"methodsBody":{
		"public void setSize(Point size)":{
			"methodBody":"{\n    checkWidget();\n    if (size == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    setSize(size.x, size.y);\n}",
			"comments":"/**\n* Sets the receiver's size to the point specified by the argument.\n*\n* @param size the new extent for the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the point is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setSize(Point size)"
		},
		"boolean hasFocus()":{
			"methodBody":"{\n    return parent.handle == OS.GetFocus();\n}",
			"comments":"",
			"methodName":"boolean hasFocus()"
		},
		"public Point getLocation()":{
			"methodBody":"{\n    checkWidget();\n    return new Point(x, y);\n}",
			"comments":"/**\n* Returns a point describing the receiver's location relative\n* to its parent (or its display if its parent is null).\n*\n* @return the receiver's location\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Point getLocation()"
		},
		"void resize()":{
			"methodBody":"{\n    resized = false;\n    int hwnd = parent.handle;\n    OS.DestroyCaret();\n    int hBitmap = image != null ? image.handle : 0;\n    OS.CreateCaret(hwnd, hBitmap, width, height);\n    OS.SetCaretPos(x, y);\n    OS.ShowCaret(hwnd);\n    move();\n}",
			"comments":"",
			"methodName":"void resize()"
		},
		"int defaultFont()":{
			"methodBody":"{\n    int hwnd = parent.handle;\n    int hwndIME = OS.ImmGetDefaultIMEWnd(hwnd);\n    int hFont = 0;\n    if (hwndIME != 0) {\n        hFont = OS.SendMessage(hwndIME, OS.WM_GETFONT, 0, 0);\n    }\n    if (hFont == 0) {\n        hFont = OS.SendMessage(hwnd, OS.WM_GETFONT, 0, 0);\n    }\n    if (hFont == 0)\n        return parent.defaultFont();\n    return hFont;\n}",
			"comments":"",
			"methodName":"int defaultFont()"
		},
		"void setIMEFont()":{
			"methodBody":"{\n    if (!OS.IsDBLocale)\n        return;\n    int hFont = 0;\n    if (font != null)\n        hFont = font.handle;\n    if (hFont == 0)\n        hFont = defaultFont();\n    int hwnd = parent.handle;\n    int hIMC = OS.ImmGetContext(hwnd);\n    \n    if (oldFont == null) {\n        oldFont = OS.IsUnicode ? (LOGFONT) new LOGFONTW() : new LOGFONTA();\n        if (!OS.ImmGetCompositionFont(hIMC, oldFont))\n            oldFont = null;\n    }\n    \n    LOGFONT logFont = OS.IsUnicode ? (LOGFONT) new LOGFONTW() : new LOGFONTA();\n    if (OS.GetObject(hFont, LOGFONT.sizeof, logFont) != 0) {\n        OS.ImmSetCompositionFont(hIMC, logFont);\n    }\n    OS.ImmReleaseContext(hwnd, hIMC);\n}",
			"comments":"/* Save the current IME font */\n/* Set new IME font */\n",
			"methodName":"void setIMEFont()"
		},
		"void createWidget()":{
			"methodBody":"{\n    isVisible = true;\n    if (parent.getCaret() == null) {\n        parent.setCaret(this);\n    }\n}",
			"comments":"",
			"methodName":"void createWidget()"
		},
		"void killFocus()":{
			"methodBody":"{\n    OS.DestroyCaret();\n    restoreIMEFont();\n}",
			"comments":"",
			"methodName":"void killFocus()"
		},
		"public void setBounds(int x, int y, int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    boolean samePosition = this.x == x && this.y == y;\n    boolean sameExtent = this.width == width && this.height == height;\n    if (samePosition && sameExtent)\n        return;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    if (sameExtent) {\n        moved = true;\n        if (isVisible && hasFocus())\n            move();\n    } else {\n        resized = true;\n        if (isVisible && hasFocus())\n            resize();\n    }\n}",
			"comments":"/**\n* Sets the receiver's size and location to the rectangular\n* area specified by the arguments. The <code>x</code> and\n* <code>y</code> arguments are relative to the receiver's\n* parent (or its display if its parent is null).\n*\n* @param x the new x coordinate for the receiver\n* @param y the new y coordinate for the receiver\n* @param width the new width for the receiver\n* @param height the new height for the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setBounds(int x, int y, int width, int height)"
		},
		"public Font getFont()":{
			"methodBody":"{\n    checkWidget();\n    if (font == null) {\n        int hFont = defaultFont();\n        return Font.win32_new(display, hFont);\n    }\n    return font;\n}",
			"comments":"/**\n* Returns the font that the receiver will use to paint textual information.\n*\n* @return the receiver's font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Font getFont()"
		},
		"public void setVisible(boolean visible)":{
			"methodBody":"{\n    checkWidget();\n    if (visible == isVisible)\n        return;\n    isVisible = visible;\n    int hwnd = parent.handle;\n    if (OS.GetFocus() != hwnd)\n        return;\n    if (!isVisible) {\n        OS.HideCaret(hwnd);\n    } else {\n        if (resized) {\n            resize();\n        } else {\n            if (moved)\n                move();\n        }\n        OS.ShowCaret(hwnd);\n    }\n}",
			"comments":"/**\n* Marks the receiver as visible if the argument is <code>true</code>,\n* and marks it invisible otherwise.\n* <p>\n* If one of the receiver's ancestors is not visible or some\n* other condition makes the receiver not visible, marking\n* it visible may not actually cause it to be displayed.\n* </p>\n*\n* @param visible the new visibility state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setVisible(boolean visible)"
		},
		"public Image getImage()":{
			"methodBody":"{\n    checkWidget();\n    return image;\n}",
			"comments":"/**\n* Returns the image that the receiver will use to paint the caret.\n*\n* @return the receiver's image\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Image getImage()"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    checkWidget();\n    if (image != null && image.isDisposed()) {\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    this.image = image;\n    if (isVisible && hasFocus())\n        resize();\n}",
			"comments":"/**\n* Sets the image that the receiver will use to paint the caret\n* to the image specified by the argument, or to the default\n* which is a filled rectangle if the argument is null\n*\n* @param image the new image (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the image has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setImage(Image image)"
		},
		"public Rectangle getBounds()":{
			"methodBody":"{\n    checkWidget();\n    if (image != null) {\n        Rectangle rect = image.getBounds();\n        return new Rectangle(x, y, rect.width, rect.height);\n    }\n    return new Rectangle(x, y, width, height);\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent (or its display if its parent is null).\n*\n* @return the receiver's bounding rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle getBounds()"
		},
		"public Point getSize()":{
			"methodBody":"{\n    checkWidget();\n    if (image != null) {\n        Rectangle rect = image.getBounds();\n        return new Point(rect.width, rect.height);\n    }\n    return new Point(width, height);\n}",
			"comments":"/**\n* Returns a point describing the receiver's size.\n*\n* @return the receiver's size\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Point getSize()"
		},
		"public void setBounds(Rectangle rect)":{
			"methodBody":"{\n    if (rect == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    setBounds(rect.x, rect.y, rect.width, rect.height);\n}",
			"comments":"/**\n* Sets the receiver's size and location to the rectangular\n* area specified by the argument. The <code>x</code> and\n* <code>y</code> fields of the rectangle are relative to\n* the receiver's parent (or its display if its parent is null).\n*\n* @param rect the new bounds for the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setBounds(Rectangle rect)"
		},
		"public Canvas getParent()":{
			"methodBody":"{\n    checkWidget();\n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>Canvas</code>.\n*\n* @return the receiver's parent\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Canvas getParent()"
		},
		"public void setSize(int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    if (this.width == width && this.height == height)\n        return;\n    this.width = width;\n    this.height = height;\n    resized = true;\n    if (isVisible && hasFocus())\n        resize();\n}",
			"comments":"/**\n* Sets the receiver's size to the point specified by the arguments.\n*\n* @param width the new width for the receiver\n* @param height the new height for the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setSize(int width, int height)"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    checkWidget();\n    if (font != null && font.isDisposed()) {\n        error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    this.font = font;\n    if (hasFocus())\n        setIMEFont();\n}",
			"comments":"/**\n* Sets the font that the receiver will use to paint textual information\n* to the font specified by the argument, or to the default font for that\n* kind of control if the argument is null.\n*\n* @param font the new font (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the font has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setFont(Font font)"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    parent = null;\n    image = null;\n    font = null;\n    oldFont = null;\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"public boolean getVisible()":{
			"methodBody":"{\n    checkWidget();\n    return isVisible;\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is visible, and\n* <code>false</code> otherwise.\n* <p>\n* If one of the receiver's ancestors is not visible or some\n* other condition makes the receiver not visible, this method\n* may still indicate that it is considered visible even though\n* it may not actually be showing.\n* </p>\n*\n* @return the receiver's visibility state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getVisible()"
		},
		"public void setLocation(int x, int y)":{
			"methodBody":"{\n    checkWidget();\n    if (this.x == x && this.y == y)\n        return;\n    this.x = x;\n    this.y = y;\n    moved = true;\n    if (isVisible && hasFocus())\n        move();\n}",
			"comments":"/**\n* Sets the receiver's location to the point specified by\n* the arguments which are relative to the receiver's\n* parent (or its display if its parent is null).\n*\n* @param x the new x coordinate for the receiver\n* @param y the new y coordinate for the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setLocation(int x, int y)"
		},
		"boolean isFocusCaret()":{
			"methodBody":"{\n    return parent.caret == this && hasFocus();\n}",
			"comments":"",
			"methodName":"boolean isFocusCaret()"
		},
		"void setFocus()":{
			"methodBody":"{\n    int hwnd = parent.handle;\n    int hBitmap = 0;\n    if (image != null)\n        hBitmap = image.handle;\n    OS.CreateCaret(hwnd, hBitmap, width, height);\n    move();\n    setIMEFont();\n    if (isVisible)\n        OS.ShowCaret(hwnd);\n}",
			"comments":"",
			"methodName":"void setFocus()"
		},
		"void releaseChild()":{
			"methodBody":"{\n    super.releaseChild();\n    if (this == parent.getCaret())\n        parent.setCaret(null);\n}",
			"comments":"",
			"methodName":"void releaseChild()"
		},
		"void move()":{
			"methodBody":"{\n    moved = false;\n    if (!OS.SetCaretPos(x, y))\n        return;\n    resizeIME();\n}",
			"comments":"",
			"methodName":"void move()"
		},
		"void restoreIMEFont()":{
			"methodBody":"{\n    if (!OS.IsDBLocale)\n        return;\n    if (oldFont == null)\n        return;\n    int hwnd = parent.handle;\n    int hIMC = OS.ImmGetContext(hwnd);\n    OS.ImmSetCompositionFont(hIMC, oldFont);\n    OS.ImmReleaseContext(hwnd, hIMC);\n    oldFont = null;\n}",
			"comments":"",
			"methodName":"void restoreIMEFont()"
		},
		"public void setLocation(Point location)":{
			"methodBody":"{\n    checkWidget();\n    if (location == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    setLocation(location.x, location.y);\n}",
			"comments":"/**\n* Sets the receiver's location to the point specified by\n* the argument which is relative to the receiver's\n* parent (or its display if its parent is null).\n*\n* @param location the new location for the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setLocation(Point location)"
		},
		"void resizeIME()":{
			"methodBody":"{\n    if (!OS.IsDBLocale)\n        return;\n    POINT ptCurrentPos = new POINT();\n    if (!OS.GetCaretPos(ptCurrentPos))\n        return;\n    int hwnd = parent.handle;\n    RECT rect = new RECT();\n    OS.GetClientRect(hwnd, rect);\n    COMPOSITIONFORM lpCompForm = new COMPOSITIONFORM();\n    lpCompForm.dwStyle = OS.CFS_RECT;\n    lpCompForm.x = ptCurrentPos.x;\n    lpCompForm.y = ptCurrentPos.y;\n    lpCompForm.left = rect.left;\n    lpCompForm.right = rect.right;\n    lpCompForm.top = rect.top;\n    lpCompForm.bottom = rect.bottom;\n    int hIMC = OS.ImmGetContext(hwnd);\n    OS.ImmSetCompositionWindow(hIMC, lpCompForm);\n    OS.ImmReleaseContext(hwnd, hIMC);\n}",
			"comments":"",
			"methodName":"void resizeIME()"
		},
		"public boolean isVisible()":{
			"methodBody":"{\n    checkWidget();\n    return isVisible && parent.isVisible() && hasFocus();\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is visible and all\n* of the receiver's ancestors are visible and <code>false</code>\n* otherwise.\n*\n* @return the receiver's visibility state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see #getVisible\n*/\n",
			"methodName":"public boolean isVisible()"
		}
	},
	"ClassORInterfaceName":[
		"Caret"
	]
}
