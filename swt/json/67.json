{
	"variables":[
		"marginWidth",
		"marginHeight",
		"topControl",
		"children",
		"maxWidth",
		"maxHeight",
		"i",
		"size",
		"width",
		"height",
		"children",
		"rect",
		"i",
		"string",
		"index",
		"string",
		"composite",
		"i",
		"children",
		"i",
		"children",
		"i",
		"wHint",
		"hHint",
		"flushCache",
		"maxWidth",
		"Math",
		"size",
		"maxWidth",
		"maxHeight",
		"Math",
		"size",
		"maxHeight",
		"maxWidth",
		"marginWidth",
		"maxHeight",
		"marginHeight",
		"wHint",
		"SWT",
		"width",
		"wHint",
		"hHint",
		"SWT",
		"height",
		"hHint",
		"width",
		"height",
		"composite",
		"composite",
		"rect",
		"marginWidth",
		"rect",
		"marginHeight",
		"rect",
		"marginWidth",
		"rect",
		"marginHeight",
		"i",
		"children",
		"i",
		"children",
		"i",
		"rect",
		"children",
		"i",
		"children",
		"i",
		"topControl",
		"string",
		"index",
		"string",
		"string",
		"index",
		"string",
		"marginWidth",
		"string",
		"marginWidth",
		"marginHeight",
		"string",
		"marginHeight",
		"topControl",
		"string",
		"topControl",
		"string",
		"string",
		"string",
		"string",
		"length",
		"x",
		"y",
		"DEFAULT",
		"DEFAULT",
		"x",
		"y",
		"width",
		"height",
		"length",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"composite",
		"flushCache"
	],
	"extendORImplementFiles":[
		"Layout"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"computeSize",
		"flushCache",
		"layout",
		"getName",
		"toString",
		"getChildren",
		"computeSize",
		"max",
		"max",
		"getChildren",
		"getClientArea",
		"setBounds",
		"setVisible",
		"getName",
		"getClass",
		"lastIndexOf",
		"substring",
		"length",
		"getName",
		"trim",
		"Point"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    String string = getName() + \" {\";\n    if (marginWidth != 0)\n        string += \"marginWidth=\" + marginWidth + \" \";\n    if (marginHeight != 0)\n        string += \"marginHeight=\" + marginHeight + \" \";\n    if (topControl != null)\n        string += \"topControl=\" + topControl + \" \";\n    string = string.trim();\n    string += \"}\";\n    return string;\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the event\n*/\n",
			"methodName":"public String toString()"
		},
		"protected boolean flushCache(Control control)":{
			"methodBody":"{\n    return true;\n}",
			"comments":"",
			"methodName":"protected boolean flushCache(Control control)"
		},
		"String getName()":{
			"methodBody":"{\n    String string = getClass().getName();\n    int index = string.lastIndexOf('.');\n    if (index == -1)\n        return string;\n    return string.substring(index + 1, string.length());\n}",
			"comments":"",
			"methodName":"String getName()"
		},
		"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    Control[] children = composite.getChildren();\n    int maxWidth = 0;\n    int maxHeight = 0;\n    for (int i = 0; i < children.length; i++) {\n        Point size = children[i].computeSize(wHint, hHint, flushCache);\n        maxWidth = Math.max(size.x, maxWidth);\n        maxHeight = Math.max(size.y, maxHeight);\n    }\n    int width = maxWidth + 2 * marginWidth;\n    int height = maxHeight + 2 * marginHeight;\n    if (wHint != SWT.DEFAULT)\n        width = wHint;\n    if (hHint != SWT.DEFAULT)\n        height = hHint;\n    return new Point(width, height);\n}",
			"comments":"",
			"methodName":"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)"
		},
		"protected void layout(Composite composite, boolean flushCache)":{
			"methodBody":"{\n    Control[] children = composite.getChildren();\n    Rectangle rect = composite.getClientArea();\n    rect.x += marginWidth;\n    rect.y += marginHeight;\n    rect.width -= 2 * marginWidth;\n    rect.height -= 2 * marginHeight;\n    for (int i = 0; i < children.length; i++) {\n        children[i].setBounds(rect);\n        children[i].setVisible(children[i] == topControl);\n    }\n}",
			"comments":"",
			"methodName":"protected void layout(Composite composite, boolean flushCache)"
		}
	},
	"ClassORInterfaceName":[
		"StackLayout"
	]
}
