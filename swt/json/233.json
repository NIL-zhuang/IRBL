{
	"variables":[
		"BLACK_CODE",
		"WHITE_CODE",
		"BLACK_MIN_BITS",
		"WHITE_MIN_BITS",
		"isWhite",
		"whiteValue",
		"blackValue",
		"src",
		"dest",
		"byteOffsetSrc",
		"bitOffsetSrc",
		"byteOffsetDest",
		"bitOffsetDest",
		"code",
		"nbrBits",
		"rowSize",
		"cnt",
		"n",
		"runLength",
		"runLength",
		"partialRun",
		"huffmanCode",
		"found",
		"i",
		"j",
		"value",
		"value",
		"i",
		"n",
		"src",
		"dest",
		"rowSize",
		"byteOffsetSrc",
		"bitOffsetSrc",
		"byteOffsetDest",
		"offsetDest",
		"bitOffsetDest",
		"cnt",
		"nRows",
		"cnt",
		"bitOffsetDest",
		"byteOffsetDest",
		"bitOffsetDest",
		"byteOffsetDest",
		"offsetDest",
		"isWhite",
		"n",
		"rowSize",
		"runLength",
		"n",
		"runLength",
		"isWhite",
		"whiteValue",
		"blackValue",
		"runLength",
		"isWhite",
		"isWhite",
		"isWhite",
		"WHITE_CODE",
		"BLACK_CODE",
		"nbrBits",
		"isWhite",
		"WHITE_MIN_BITS",
		"BLACK_MIN_BITS",
		"code",
		"nbrBits",
		"i",
		"huffmanCode",
		"i",
		"j",
		"huffmanCode",
		"i",
		"j",
		"huffmanCode",
		"i",
		"j",
		"code",
		"found",
		"partialRun",
		"huffmanCode",
		"i",
		"j",
		"partialRun",
		"byteOffsetSrc",
		"src",
		"runLength",
		"partialRun",
		"partialRun",
		"runLength",
		"found",
		"code",
		"code",
		"found",
		"SWT",
		"SWT",
		"src",
		"byteOffsetSrc",
		"bitOffsetSrc",
		"bitOffsetSrc",
		"bitOffsetSrc",
		"byteOffsetSrc",
		"bitOffsetSrc",
		"value",
		"i",
		"cnt",
		"i",
		"value",
		"value",
		"value",
		"cnt",
		"bitOffsetDest",
		"bitOffsetDest",
		"n",
		"dest",
		"byteOffsetDest",
		"value",
		"dest",
		"byteOffsetDest",
		"bitOffsetDest",
		"dest",
		"byteOffsetDest",
		"bitOffsetDest",
		"n",
		"bitOffsetDest",
		"bitOffsetDest",
		"byteOffsetDest",
		"bitOffsetDest",
		"n",
		"dest",
		"byteOffsetDest",
		"value",
		"n",
		"n",
		"dest",
		"byteOffsetDest",
		"value",
		"dest",
		"byteOffsetDest",
		"bitOffsetDest",
		"dest",
		"byteOffsetDest",
		"bitOffsetDest",
		"n",
		"bitOffsetDest",
		"src",
		"dest",
		"rowSize",
		"length",
		"length",
		"length",
		"ERROR_INVALID_IMAGE",
		"src",
		"dest",
		"offsetDest",
		"rowSize",
		"nRows",
		"cnt",
		"value",
		"cnt"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[
		"org.eclipse.swt"
	],
	"methods":[
		"decode",
		"decodeRow",
		"decodeRunLength",
		"getNextBit",
		"getNextBits",
		"setNextBits",
		"decodeRow",
		"decodeRunLength",
		"setNextBits",
		"getNextBits",
		"getNextBit",
		"error",
		"getNextBit"
	],
	"methodsBody":{
		"public int decode(byte[] src, byte[] dest, int offsetDest, int rowSize, int nRows)":{
			"methodBody":"{\n    this.src = src;\n    this.dest = dest;\n    this.rowSize = rowSize;\n    byteOffsetSrc = 0;\n    bitOffsetSrc = 0;\n    byteOffsetDest = offsetDest;\n    bitOffsetDest = 0;\n    int cnt = 0;\n    while (cnt < nRows && decodeRow()) {\n        cnt++;\n        \n        if (bitOffsetDest > 0) {\n            byteOffsetDest++;\n            bitOffsetDest = 0;\n        }\n    }\n    return byteOffsetDest - offsetDest;\n}",
			"comments":"/* byte aligned */\n",
			"methodName":"public int decode(byte[] src, byte[] dest, int offsetDest, int rowSize, int nRows)"
		},
		"int decodeRunLength()":{
			"methodBody":"{\n    int runLength = 0;\n    int partialRun = 0;\n    short[][][] huffmanCode = isWhite ? WHITE_CODE : BLACK_CODE;\n    while (true) {\n        boolean found = false;\n        nbrBits = isWhite ? WHITE_MIN_BITS : BLACK_MIN_BITS;\n        code = getNextBits(nbrBits);\n        for (int i = 0; i < huffmanCode.length; i++) {\n            for (int j = 0; j < huffmanCode[i].length; j++) {\n                if (huffmanCode[i][j][0] == code) {\n                    found = true;\n                    partialRun = huffmanCode[i][j][1];\n                    if (partialRun == -1) {\n                        \n                        if (byteOffsetSrc == src.length - 1)\n                            return -1;\n                    \n                    } else {\n                        runLength += partialRun;\n                        if (partialRun < 64)\n                            return runLength;\n                    }\n                    break;\n                }\n            }\n            if (found)\n                break;\n            code = code << 1 | getNextBit();\n        }\n        if (!found)\n            SWT.error(SWT.ERROR_INVALID_IMAGE);\n    }\n}",
			"comments":"/* Stop when reaching final EOL on last byte */\n/* Group 3 starts each row with an EOL - ignore it */\n",
			"methodName":"int decodeRunLength()"
		},
		"boolean decodeRow()":{
			"methodBody":"{\n    isWhite = true;\n    int n = 0;\n    while (n < rowSize) {\n        int runLength = decodeRunLength();\n        if (runLength < 0)\n            return false;\n        n += runLength;\n        setNextBits(isWhite ? whiteValue : blackValue, runLength);\n        isWhite = !isWhite;\n    }\n    return true;\n}",
			"comments":"",
			"methodName":"boolean decodeRow()"
		},
		"void setNextBits(int value, int cnt)":{
			"methodBody":"{\n    int n = cnt;\n    while (bitOffsetDest > 0 && bitOffsetDest <= 7 && n > 0) {\n        dest[byteOffsetDest] = value == 1 ? (byte) (dest[byteOffsetDest] | (1 << (7 - bitOffsetDest))) : (byte) (dest[byteOffsetDest] & ~(1 << (7 - bitOffsetDest)));\n        n--;\n        bitOffsetDest++;\n    }\n    if (bitOffsetDest == 8) {\n        byteOffsetDest++;\n        bitOffsetDest = 0;\n    }\n    while (n >= 8) {\n        dest[byteOffsetDest++] = (byte) (value == 1 ? 0xFF : 0);\n        n -= 8;\n    }\n    while (n > 0) {\n        dest[byteOffsetDest] = value == 1 ? (byte) (dest[byteOffsetDest] | (1 << (7 - bitOffsetDest))) : (byte) (dest[byteOffsetDest] & ~(1 << (7 - bitOffsetDest)));\n        n--;\n        bitOffsetDest++;\n    }\n}",
			"comments":"",
			"methodName":"void setNextBits(int value, int cnt)"
		},
		"int getNextBits(int cnt)":{
			"methodBody":"{\n    int value = 0;\n    for (int i = 0; i < cnt; i++) {\n        value = value << 1 | getNextBit();\n    }\n    return value;\n}",
			"comments":"",
			"methodName":"int getNextBits(int cnt)"
		},
		"int getNextBit()":{
			"methodBody":"{\n    int value = (src[byteOffsetSrc] >>> (7 - bitOffsetSrc)) & 0x1;\n    bitOffsetSrc++;\n    if (bitOffsetSrc > 7) {\n        byteOffsetSrc++;\n        bitOffsetSrc = 0;\n    }\n    return value;\n}",
			"comments":"",
			"methodName":"int getNextBit()"
		}
	},
	"ClassORInterfaceName":[
		"TIFFModifiedHuffmanCodec"
	]
}
