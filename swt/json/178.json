{
	"variables":[
		"handle",
		"polyRgn",
		"rectRgn",
		"rgn",
		"rect",
		"rectRgn",
		"r",
		"rect",
		"result",
		"polyRgn",
		"rectRgn",
		"device",
		"device",
		"Device",
		"device",
		"SWT",
		"SWT",
		"device",
		"handle",
		"OS",
		"handle",
		"SWT",
		"SWT",
		"device",
		"device",
		"device",
		"handle",
		"SWT",
		"SWT",
		"pointArray",
		"SWT",
		"SWT",
		"OS",
		"SWT",
		"SWT",
		"OS",
		"pointArray",
		"pointArray",
		"OS",
		"OS",
		"handle",
		"handle",
		"polyRgn",
		"OS",
		"OS",
		"polyRgn",
		"SWT",
		"SWT",
		"rect",
		"SWT",
		"SWT",
		"rect",
		"rect",
		"rect",
		"rect",
		"SWT",
		"SWT",
		"width",
		"height",
		"SWT",
		"SWT",
		"OS",
		"x",
		"y",
		"x",
		"width",
		"y",
		"height",
		"OS",
		"handle",
		"handle",
		"rectRgn",
		"OS",
		"OS",
		"rectRgn",
		"SWT",
		"SWT",
		"region",
		"SWT",
		"SWT",
		"region",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"handle",
		"region",
		"OS",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"x",
		"y",
		"SWT",
		"SWT",
		"pt",
		"SWT",
		"SWT",
		"pt",
		"pt",
		"handle",
		"device",
		"OS",
		"handle",
		"handle",
		"device",
		"device",
		"device",
		"object",
		"object",
		"object",
		"handle",
		"rgn",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"handle",
		"SWT",
		"SWT",
		"rect",
		"SWT",
		"SWT",
		"rect",
		"rect",
		"rect",
		"rect",
		"SWT",
		"SWT",
		"width",
		"height",
		"SWT",
		"SWT",
		"OS",
		"x",
		"y",
		"x",
		"width",
		"y",
		"height",
		"OS",
		"handle",
		"handle",
		"rectRgn",
		"OS",
		"OS",
		"rectRgn",
		"SWT",
		"SWT",
		"region",
		"SWT",
		"SWT",
		"region",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"handle",
		"region",
		"OS",
		"SWT",
		"SWT",
		"OS",
		"r",
		"x",
		"y",
		"x",
		"width",
		"y",
		"height",
		"OS",
		"handle",
		"r",
		"SWT",
		"SWT",
		"rect",
		"SWT",
		"SWT",
		"rect",
		"rect",
		"rect",
		"rect",
		"handle",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"rect",
		"result",
		"OS",
		"rect",
		"rect",
		"rect",
		"rect",
		"SWT",
		"SWT",
		"pointArray",
		"SWT",
		"SWT",
		"OS",
		"SWT",
		"SWT",
		"OS",
		"pointArray",
		"pointArray",
		"OS",
		"OS",
		"handle",
		"handle",
		"polyRgn",
		"OS",
		"OS",
		"polyRgn",
		"SWT",
		"SWT",
		"rect",
		"SWT",
		"SWT",
		"rect",
		"rect",
		"rect",
		"rect",
		"SWT",
		"SWT",
		"width",
		"height",
		"SWT",
		"SWT",
		"OS",
		"x",
		"y",
		"x",
		"width",
		"y",
		"height",
		"OS",
		"handle",
		"handle",
		"rectRgn",
		"OS",
		"OS",
		"rectRgn",
		"SWT",
		"SWT",
		"region",
		"SWT",
		"SWT",
		"region",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"handle",
		"region",
		"OS",
		"SWT",
		"SWT",
		"OS",
		"handle",
		"x",
		"y",
		"SWT",
		"SWT",
		"pt",
		"SWT",
		"SWT",
		"pt",
		"pt",
		"handle",
		"device",
		"handle",
		"ERROR_NULL_ARGUMENT",
		"device",
		"ERROR_NO_HANDLES",
		"tracking",
		"device",
		"handle",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"IsWinCE",
		"ERROR_NOT_IMPLEMENTED",
		"length",
		"ALTERNATE",
		"RGN_OR",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"width",
		"height",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_INVALID_ARGUMENT",
		"RGN_OR",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"handle",
		"RGN_OR",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"tracking",
		"handle",
		"ERROR_GRAPHIC_DISPOSED",
		"left",
		"top",
		"right",
		"left",
		"bottom",
		"top",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"width",
		"height",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_INVALID_ARGUMENT",
		"RGN_AND",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"handle",
		"RGN_AND",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"width",
		"height",
		"ERROR_GRAPHIC_DISPOSED",
		"NULLREGION",
		"right",
		"left",
		"bottom",
		"top",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"IsWinCE",
		"ERROR_NOT_IMPLEMENTED",
		"length",
		"ALTERNATE",
		"RGN_DIFF",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"width",
		"height",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_INVALID_ARGUMENT",
		"RGN_DIFF",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"handle",
		"RGN_DIFF",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"device",
		"device",
		"handle",
		"pointArray",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"region",
		"x",
		"y",
		"pt",
		"object",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"region",
		"x",
		"y",
		"width",
		"height",
		"rect",
		"pointArray",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"region",
		"x",
		"y",
		"pt",
		"device",
		"handle"
	],
	"extendORImplementFiles":[
		"Resource"
	],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt"
	],
	"methods":[
		"add",
		"add",
		"add",
		"add",
		"contains",
		"contains",
		"dispose",
		"equals",
		"getBounds",
		"hashCode",
		"intersect",
		"intersect",
		"intersect",
		"intersects",
		"intersects",
		"isDisposed",
		"isEmpty",
		"subtract",
		"subtract",
		"subtract",
		"subtract",
		"translate",
		"translate",
		"toString",
		"win32_new",
		"getDevice",
		"error",
		"CreateRectRgn",
		"error",
		"new_Object",
		"isDisposed",
		"error",
		"error",
		"error",
		"CreatePolygonRgn",
		"CombineRgn",
		"DeleteObject",
		"isDisposed",
		"error",
		"error",
		"add",
		"isDisposed",
		"error",
		"error",
		"CreateRectRgn",
		"CombineRgn",
		"DeleteObject",
		"isDisposed",
		"error",
		"error",
		"isDisposed",
		"error",
		"CombineRgn",
		"isDisposed",
		"error",
		"PtInRegion",
		"isDisposed",
		"error",
		"error",
		"contains",
		"isDisposed",
		"DeleteObject",
		"dispose_Object",
		"isDisposed",
		"error",
		"GetRgnBox",
		"isDisposed",
		"error",
		"error",
		"intersect",
		"isDisposed",
		"error",
		"error",
		"CreateRectRgn",
		"CombineRgn",
		"DeleteObject",
		"isDisposed",
		"error",
		"error",
		"isDisposed",
		"error",
		"CombineRgn",
		"isDisposed",
		"error",
		"SetRect",
		"RectInRegion",
		"isDisposed",
		"error",
		"error",
		"intersects",
		"isDisposed",
		"error",
		"GetRgnBox",
		"isDisposed",
		"error",
		"error",
		"error",
		"CreatePolygonRgn",
		"CombineRgn",
		"DeleteObject",
		"isDisposed",
		"error",
		"error",
		"subtract",
		"isDisposed",
		"error",
		"error",
		"CreateRectRgn",
		"CombineRgn",
		"DeleteObject",
		"isDisposed",
		"error",
		"error",
		"isDisposed",
		"error",
		"CombineRgn",
		"isDisposed",
		"error",
		"OffsetRgn",
		"isDisposed",
		"error",
		"error",
		"translate",
		"isDisposed",
		"RECT",
		"Rectangle",
		"RECT",
		"RECT",
		"Region"
	],
	"methodsBody":{
		"public void subtract(Rectangle rect)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    subtract(rect.x, rect.y, rect.width, rect.height);\n}",
			"comments":"/**\n* Subtracts the given rectangle from the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param rect the rectangle to subtract from the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void subtract(Rectangle rect)"
		},
		"public void add(Rectangle rect)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    add(rect.x, rect.y, rect.width, rect.height);\n}",
			"comments":"/**\n* Adds the given rectangle to the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param rect the rectangle to merge with the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void add(Rectangle rect)"
		},
		"public void add(int[] pointArray)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (pointArray == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (OS.IsWinCE)\n        SWT.error(SWT.ERROR_NOT_IMPLEMENTED);\n    int polyRgn = OS.CreatePolygonRgn(pointArray, pointArray.length / 2, OS.ALTERNATE);\n    OS.CombineRgn(handle, handle, polyRgn, OS.RGN_OR);\n    OS.DeleteObject(polyRgn);\n}",
			"comments":"/**\n* Adds the given polygon to the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param pointArray points that describe the polygon to merge with the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.0\n*\n*/\n",
			"methodName":"public void add(int[] pointArray)"
		},
		"public void add(Region region)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (region == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (region.isDisposed())\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    OS.CombineRgn(handle, handle, region.handle, OS.RGN_OR);\n}",
			"comments":"/**\n* Adds all of the polygons which make up the area covered\n* by the argument to the collection of polygons the receiver\n* maintains to describe its area.\n*\n* @param region the region to merge\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void add(Region region)"
		},
		"public boolean isDisposed()":{
			"methodBody":"{\n    return handle == 0;\n}",
			"comments":"/**\n* Returns <code>true</code> if the region has been disposed,\n* and <code>false</code> otherwise.\n* <p>\n* This method gets the dispose state for the region.\n* When a region has been disposed, it is an error to\n* invoke any other method using the region.\n*\n* @return <code>true</code> when the region is disposed, and <code>false</code> otherwise\n*/\n",
			"methodName":"public boolean isDisposed()"
		},
		"public boolean equals(Object object)":{
			"methodBody":"{\n    if (this == object)\n        return true;\n    if (!(object instanceof Region))\n        return false;\n    Region rgn = (Region) object;\n    return handle == rgn.handle;\n}",
			"comments":"/**\n* Compares the argument to the receiver, and returns true\n* if they represent the <em>same</em> object using a class\n* specific comparison.\n*\n* @param object the object to compare with this object\n* @return <code>true</code> if the object is the same as this object and <code>false</code> otherwise\n*\n* @see #hashCode\n*/\n",
			"methodName":"public boolean equals(Object object)"
		},
		"public boolean contains(int x, int y)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    return OS.PtInRegion(handle, x, y);\n}",
			"comments":"/**\n* Returns <code>true</code> if the point specified by the\n* arguments is inside the area specified by the receiver,\n* and <code>false</code> otherwise.\n*\n* @param x the x coordinate of the point to test for containment\n* @param y the y coordinate of the point to test for containment\n* @return <code>true</code> if the region contains the point and <code>false</code> otherwise\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public boolean contains(int x, int y)"
		},
		"public void intersect(int x, int y, int width, int height)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (width < 0 || height < 0)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    int rectRgn = OS.CreateRectRgn(x, y, x + width, y + height);\n    OS.CombineRgn(handle, handle, rectRgn, OS.RGN_AND);\n    OS.DeleteObject(rectRgn);\n}",
			"comments":"/**\n* Intersects the given rectangle to the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param x the x coordinate of the rectangle\n* @param y the y coordinate of the rectangle\n* @param width the width coordinate of the rectangle\n* @param height the height coordinate of the rectangle\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void intersect(int x, int y, int width, int height)"
		},
		"public String toString()":{
			"methodBody":"{\n    if (isDisposed())\n        return \"Region {*DISPOSED*}\";\n    return \"Region {\" + handle + \"}\";\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the receiver\n*/\n",
			"methodName":"public String toString()"
		},
		"public int hashCode()":{
			"methodBody":"{\n    return handle;\n}",
			"comments":"/**\n* Returns an integer hash code for the receiver. Any two\n* objects that return <code>true</code> when passed to\n* <code>equals</code> must return the same value for this\n* method.\n*\n* @return the receiver's hash\n*\n* @see #equals\n*/\n",
			"methodName":"public int hashCode()"
		},
		"public void translate(Point pt)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (pt == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    translate(pt.x, pt.y);\n}",
			"comments":"/**\n* Translate all of the polygons the receiver maintains to describe\n* its area by the specified point.\n*\n* @param pt the point to translate\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void translate(Point pt)"
		},
		"public void intersect(Region region)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (region == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (region.isDisposed())\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    OS.CombineRgn(handle, handle, region.handle, OS.RGN_AND);\n}",
			"comments":"/**\n* Intersects all of the polygons which make up the area covered\n* by the argument to the collection of polygons the receiver\n* maintains to describe its area.\n*\n* @param region the region to intersect\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void intersect(Region region)"
		},
		"public void subtract(Region region)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (region == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (region.isDisposed())\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    OS.CombineRgn(handle, handle, region.handle, OS.RGN_DIFF);\n}",
			"comments":"/**\n* Subtracts all of the polygons which make up the area covered\n* by the argument from the collection of polygons the receiver\n* maintains to describe its area.\n*\n* @param region the region to subtract\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void subtract(Region region)"
		},
		"public void dispose()":{
			"methodBody":"{\n    if (handle == 0)\n        return;\n    if (device.isDisposed())\n        return;\n    OS.DeleteObject(handle);\n    handle = 0;\n    if (device.tracking)\n        device.dispose_Object(this);\n    device = null;\n}",
			"comments":"/**\n* Disposes of the operating system resources associated with\n* the region. Applications must dispose of all regions which\n* they allocate.\n*/\n",
			"methodName":"public void dispose()"
		},
		"public Rectangle getBounds()":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    RECT rect = new RECT();\n    OS.GetRgnBox(handle, rect);\n    return new Rectangle(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);\n}",
			"comments":"/**\n* Returns a rectangle which represents the rectangular\n* union of the collection of polygons the receiver\n* maintains to describe its area.\n*\n* @return a bounding rectangle for the region\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @see Rectangle#union\n*/\n",
			"methodName":"public Rectangle getBounds()"
		},
		"public void add(int x, int y, int width, int height)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (width < 0 || height < 0)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    int rectRgn = OS.CreateRectRgn(x, y, x + width, y + height);\n    OS.CombineRgn(handle, handle, rectRgn, OS.RGN_OR);\n    OS.DeleteObject(rectRgn);\n}",
			"comments":"/**\n* Adds the given rectangle to the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param x the x coordinate of the rectangle\n* @param y the y coordinate of the rectangle\n* @param width the width coordinate of the rectangle\n* @param height the height coordinate of the rectangle\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void add(int x, int y, int width, int height)"
		},
		"public void translate(int x, int y)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    OS.OffsetRgn(handle, x, y);\n}",
			"comments":"/**\n* Translate all of the polygons the receiver maintains to describe\n* its area by the specified point.\n*\n* @param x the x coordinate of the point to translate\n* @param y the y coordinate of the point to translate\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void translate(int x, int y)"
		},
		"public void subtract(int x, int y, int width, int height)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (width < 0 || height < 0)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    int rectRgn = OS.CreateRectRgn(x, y, x + width, y + height);\n    OS.CombineRgn(handle, handle, rectRgn, OS.RGN_DIFF);\n    OS.DeleteObject(rectRgn);\n}",
			"comments":"/**\n* Subtracts the given rectangle from the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param x the x coordinate of the rectangle\n* @param y the y coordinate of the rectangle\n* @param width the width coordinate of the rectangle\n* @param height the height coordinate of the rectangle\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public void subtract(int x, int y, int width, int height)"
		},
		"public boolean intersects(Rectangle rect)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return intersects(rect.x, rect.y, rect.width, rect.height);\n}",
			"comments":"/**\n* Returns <code>true</code> if the given rectangle intersects\n* with any of the polygons the receiver maintains to describe\n* its area and <code>false</code> otherwise.\n*\n* @param rect the rectangle to test for intersection\n* @return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @see Rectangle#intersects(Rectangle)\n*/\n",
			"methodName":"public boolean intersects(Rectangle rect)"
		},
		"public void intersect(Rectangle rect)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    intersect(rect.x, rect.y, rect.width, rect.height);\n}",
			"comments":"/**\n* Intersects the given rectangle to the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param rect the rectangle to intersect with the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void intersect(Rectangle rect)"
		},
		"public static Region win32_new(Device device, int handle)":{
			"methodBody":"{\n    return new Region(device, handle);\n}",
			"comments":"/**\n* Invokes platform specific functionality to allocate a new region.\n* <p>\n* <b>IMPORTANT:</b> This method is <em>not</em> part of the public\n* API for <code>Region</code>. It is marked public only so that it\n* can be shared within the packages provided by SWT. It is not\n* available on all platforms, and should never be called from\n* application code.\n* </p>\n*\n* @param device the device on which to allocate the region\n* @param handle the handle for the region\n* @return a new region object containing the specified device and handle\n*/\n",
			"methodName":"public static Region win32_new(Device device, int handle)"
		},
		"public boolean intersects(int x, int y, int width, int height)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    RECT r = new RECT();\n    OS.SetRect(r, x, y, x + width, y + height);\n    return OS.RectInRegion(handle, r);\n}",
			"comments":"/**\n* Returns <code>true</code> if the rectangle described by the\n* arguments intersects with any of the polygons the receiver\n* maintains to describe its area, and <code>false</code> otherwise.\n*\n* @param x the x coordinate of the origin of the rectangle\n* @param y the y coordinate of the origin of the rectangle\n* @param width the width of the rectangle\n* @param height the height of the rectangle\n* @return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @see Rectangle#intersects(Rectangle)\n*/\n",
			"methodName":"public boolean intersects(int x, int y, int width, int height)"
		},
		"public boolean isEmpty()":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    RECT rect = new RECT();\n    int result = OS.GetRgnBox(handle, rect);\n    if (result == OS.NULLREGION)\n        return true;\n    return ((rect.right - rect.left) <= 0) || ((rect.bottom - rect.top) <= 0);\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver does not cover any\n* area in the (x, y) coordinate plane, and <code>false</code> if\n* the receiver does cover some area in the plane.\n*\n* @return <code>true</code> if the receiver is empty, and <code>false</code> otherwise\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public boolean isEmpty()"
		},
		"public void subtract(int[] pointArray)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (pointArray == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (OS.IsWinCE)\n        SWT.error(SWT.ERROR_NOT_IMPLEMENTED);\n    int polyRgn = OS.CreatePolygonRgn(pointArray, pointArray.length / 2, OS.ALTERNATE);\n    OS.CombineRgn(handle, handle, polyRgn, OS.RGN_DIFF);\n    OS.DeleteObject(polyRgn);\n}",
			"comments":"/**\n* Subtracts the given polygon from the collection of polygons\n* the receiver maintains to describe its area.\n*\n* @param pointArray points that describe the polygon to merge with the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void subtract(int[] pointArray)"
		},
		"public boolean contains(Point pt)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (pt == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return contains(pt.x, pt.y);\n}",
			"comments":"/**\n* Returns <code>true</code> if the given point is inside the\n* area specified by the receiver, and <code>false</code>\n* otherwise.\n*\n* @param pt the point to test for containment\n* @return <code>true</code> if the region contains the point and <code>false</code> otherwise\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public boolean contains(Point pt)"
		}
	},
	"ClassORInterfaceName":[
		"Region"
	]
}
