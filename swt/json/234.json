{
	"variables":[
		"inputStream",
		"start",
		"current",
		"next",
		"buffers",
		"CHUNK_SIZE",
		"LIST_SIZE",
		"n",
		"index",
		"offset",
		"oldBuffers",
		"cnt",
		"size",
		"nCached",
		"nMissing",
		"destNext",
		"index",
		"offset",
		"cnt",
		"index",
		"offset",
		"oldBuffers",
		"cnt",
		"inputStream",
		"stream",
		"start",
		"current",
		"next",
		"inputStream",
		"buffers",
		"LIST_SIZE",
		"pos",
		"current",
		"pos",
		"start",
		"current",
		"pos",
		"current",
		"next",
		"current",
		"next",
		"next",
		"CHUNK_SIZE",
		"next",
		"CHUNK_SIZE",
		"n",
		"index",
		"buffers",
		"buffers",
		"buffers",
		"Math",
		"index",
		"oldBuffers",
		"LIST_SIZE",
		"System",
		"oldBuffers",
		"buffers",
		"oldBuffers",
		"buffers",
		"index",
		"buffers",
		"index",
		"CHUNK_SIZE",
		"inputStream",
		"buffers",
		"index",
		"offset",
		"Math",
		"n",
		"CHUNK_SIZE",
		"offset",
		"n",
		"cnt",
		"next",
		"cnt",
		"index",
		"offset",
		"b",
		"Math",
		"size",
		"next",
		"current",
		"size",
		"next",
		"current",
		"nCached",
		"current",
		"CHUNK_SIZE",
		"current",
		"CHUNK_SIZE",
		"nCached",
		"Math",
		"nCached",
		"CHUNK_SIZE",
		"offset",
		"System",
		"buffers",
		"index",
		"offset",
		"b",
		"destNext",
		"cnt",
		"nCached",
		"cnt",
		"destNext",
		"cnt",
		"index",
		"offset",
		"nMissing",
		"next",
		"CHUNK_SIZE",
		"next",
		"CHUNK_SIZE",
		"nMissing",
		"index",
		"buffers",
		"buffers",
		"buffers",
		"Math",
		"index",
		"oldBuffers",
		"LIST_SIZE",
		"System",
		"oldBuffers",
		"buffers",
		"oldBuffers",
		"buffers",
		"index",
		"buffers",
		"index",
		"CHUNK_SIZE",
		"inputStream",
		"buffers",
		"index",
		"offset",
		"Math",
		"nMissing",
		"CHUNK_SIZE",
		"offset",
		"System",
		"buffers",
		"index",
		"offset",
		"b",
		"destNext",
		"cnt",
		"nMissing",
		"cnt",
		"next",
		"cnt",
		"destNext",
		"cnt",
		"index",
		"offset",
		"current",
		"size",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"stream",
		"pos",
		"b"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[
		"java.io"
	],
	"methods":[
		"seek",
		"read",
		"getPosition",
		"max",
		"arraycopy",
		"read",
		"min",
		"min",
		"min",
		"arraycopy",
		"max",
		"arraycopy",
		"read",
		"min",
		"arraycopy",
		"IOException"
	],
	"methodsBody":{
		"void read(byte[] b) throws IOException":{
			"methodBody":"{\n    int size = b.length;\n    int nCached = Math.min(size, next - current);\n    int nMissing = size - next + current;\n    int destNext = 0;\n    if (nCached > 0) {\n        \n        int index = current / CHUNK_SIZE;\n        int offset = current % CHUNK_SIZE;\n        while (nCached > 0) {\n            int cnt = Math.min(nCached, CHUNK_SIZE - offset);\n            System.arraycopy(buffers[index], offset, b, destNext, cnt);\n            nCached -= cnt;\n            destNext += cnt;\n            index++;\n            offset = 0;\n        }\n    }\n    if (nMissing > 0) {\n        \n        int index = next / CHUNK_SIZE;\n        int offset = next % CHUNK_SIZE;\n        while (nMissing > 0) {\n            if (index >= buffers.length) {\n                byte[][] oldBuffers = buffers;\n                buffers = new byte[Math.max(index, oldBuffers.length + LIST_SIZE)][];\n                System.arraycopy(oldBuffers, 0, buffers, 0, oldBuffers.length);\n            }\n            if (buffers[index] == null)\n                buffers[index] = new byte[CHUNK_SIZE];\n            int cnt = inputStream.read(buffers[index], offset, Math.min(nMissing, CHUNK_SIZE - offset));\n            System.arraycopy(buffers[index], offset, b, destNext, cnt);\n            nMissing -= cnt;\n            next += cnt;\n            destNext += cnt;\n            index++;\n            offset = 0;\n        }\n    }\n    current += size;\n}",
			"comments":"/* Get cached bytes */\n/* Read required bytes */\n",
			"methodName":"void read(byte[] b) throws IOException"
		},
		"void seek(int pos) throws IOException":{
			"methodBody":"{\n    if (pos == current)\n        return;\n    if (pos < start)\n        throw new IOException();\n    current = pos;\n    if (current > next) {\n        int n = current - next;\n        \n        int index = next / CHUNK_SIZE;\n        int offset = next % CHUNK_SIZE;\n        while (n > 0) {\n            if (index >= buffers.length) {\n                byte[][] oldBuffers = buffers;\n                buffers = new byte[Math.max(index + 1, oldBuffers.length + LIST_SIZE)][];\n                System.arraycopy(oldBuffers, 0, buffers, 0, oldBuffers.length);\n            }\n            if (buffers[index] == null)\n                buffers[index] = new byte[CHUNK_SIZE];\n            int cnt = inputStream.read(buffers[index], offset, Math.min(n, CHUNK_SIZE - offset));\n            n -= cnt;\n            next += cnt;\n            index++;\n            offset = 0;\n        }\n    }\n}",
			"comments":"/* store required bytes */\n",
			"methodName":"void seek(int pos) throws IOException"
		}
	},
	"ClassORInterfaceName":[
		"TIFFRandomFileAccess"
	]
}
