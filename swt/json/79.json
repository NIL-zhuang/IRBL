{
	"variables":[
		"tableItem",
		"parent",
		"parentItem",
		"items",
		"texts",
		"images",
		"background",
		"foreground",
		"font",
		"expanded",
		"checked",
		"grayed",
		"tableIndex",
		"itemHeight",
		"gc",
		"table",
		"image",
		"newItems",
		"count",
		"newItems",
		"i",
		"item",
		"i",
		"event",
		"i",
		"index",
		"i",
		"count",
		"i",
		"i",
		"index",
		"newItems",
		"table",
		"table",
		"i",
		"image",
		"columnCount",
		"newImages",
		"columnCount",
		"newTexts",
		"table",
		"parentIndex",
		"index",
		"columnCount",
		"i",
		"i",
		"length",
		"i",
		"length",
		"TableTree",
		"TableTree",
		"TableTree",
		"parent",
		"style",
		"parent",
		"parent",
		"style",
		"index",
		"parent",
		"style",
		"parent",
		"parent",
		"parent",
		"style",
		"index",
		"parent",
		"style",
		"parent",
		"parentItem",
		"parentItem",
		"parent",
		"index",
		"tableItem",
		"parent",
		"style",
		"tableIndex",
		"tableItem",
		"TableTree",
		"parent",
		"parent",
		"parent",
		"itemHeight",
		"itemHeight",
		"parent",
		"gc",
		"parent",
		"gc",
		"itemHeight",
		"itemHeight",
		"gc",
		"tableItem",
		"parent",
		"parentItem",
		"index",
		"parent",
		"table",
		"SWT",
		"tableItem",
		"checked",
		"tableItem",
		"grayed",
		"item",
		"SWT",
		"SWT",
		"index",
		"index",
		"items",
		"SWT",
		"SWT",
		"items",
		"index",
		"tableItem",
		"expanded",
		"parent",
		"parent",
		"tableItem",
		"image",
		"items",
		"System",
		"items",
		"newItems",
		"index",
		"newItems",
		"index",
		"item",
		"System",
		"items",
		"index",
		"newItems",
		"index",
		"items",
		"index",
		"items",
		"newItems",
		"expanded",
		"item",
		"background",
		"parent",
		"background",
		"tableItem",
		"tableItem",
		"index",
		"tableItem",
		"checked",
		"tableItem",
		"tableItem",
		"grayed",
		"tableItem",
		"expanded",
		"font",
		"parent",
		"font",
		"foreground",
		"parent",
		"foreground",
		"index",
		"index",
		"images",
		"images",
		"index",
		"parentItem",
		"parentItem",
		"items",
		"index",
		"index",
		"count",
		"SWT",
		"SWT",
		"items",
		"index",
		"items",
		"items",
		"System",
		"items",
		"newItems",
		"items",
		"newItems",
		"tableItem",
		"tableItem",
		"i",
		"items",
		"i",
		"items",
		"i",
		"tableItem",
		"item",
		"item",
		"parent",
		"parentItem",
		"index",
		"index",
		"texts",
		"texts",
		"index",
		"tableItem",
		"i",
		"items",
		"i",
		"items",
		"i",
		"item",
		"i",
		"items",
		"expanded",
		"notify",
		"event",
		"parent",
		"SWT",
		"event",
		"i",
		"items",
		"i",
		"items",
		"i",
		"notify",
		"i",
		"items",
		"i",
		"items",
		"i",
		"item",
		"index",
		"items",
		"i",
		"index",
		"items",
		"i",
		"index",
		"i",
		"items",
		"i",
		"items",
		"i",
		"count",
		"items",
		"i",
		"count",
		"items",
		"i",
		"i",
		"items",
		"i",
		"parent",
		"parentItem",
		"parentItem",
		"parent",
		"tableItem",
		"tableItem",
		"items",
		"parentItem",
		"parent",
		"images",
		"texts",
		"tableItem",
		"foreground",
		"background",
		"font",
		"index",
		"items",
		"items",
		"index",
		"item",
		"index",
		"index",
		"items",
		"items",
		"System",
		"items",
		"newItems",
		"index",
		"System",
		"items",
		"index",
		"newItems",
		"index",
		"items",
		"index",
		"items",
		"newItems",
		"items",
		"tableItem",
		"tableItem",
		"color",
		"color",
		"SWT",
		"SWT",
		"tableItem",
		"tableItem",
		"color",
		"background",
		"color",
		"parent",
		"table",
		"SWT",
		"tableItem",
		"tableItem",
		"checked",
		"checked",
		"parent",
		"table",
		"SWT",
		"tableItem",
		"tableItem",
		"grayed",
		"grayed",
		"items",
		"expanded",
		"expanded",
		"tableItem",
		"parent",
		"i",
		"items",
		"i",
		"items",
		"i",
		"expanded",
		"expanded",
		"parent",
		"parent",
		"tableItem",
		"image",
		"parent",
		"font",
		"font",
		"SWT",
		"SWT",
		"tableItem",
		"tableItem",
		"font",
		"font",
		"color",
		"color",
		"SWT",
		"SWT",
		"tableItem",
		"tableItem",
		"color",
		"foreground",
		"color",
		"Math",
		"parent",
		"index",
		"index",
		"columnCount",
		"images",
		"columnCount",
		"columnCount",
		"System",
		"images",
		"newImages",
		"images",
		"images",
		"newImages",
		"images",
		"index",
		"image",
		"tableItem",
		"tableItem",
		"index",
		"image",
		"image",
		"text",
		"SWT",
		"SWT",
		"Math",
		"parent",
		"index",
		"index",
		"columnCount",
		"texts",
		"columnCount",
		"columnCount",
		"System",
		"texts",
		"newTexts",
		"texts",
		"texts",
		"newTexts",
		"texts",
		"index",
		"text",
		"tableItem",
		"tableItem",
		"index",
		"text",
		"string",
		"parentItem",
		"show",
		"show",
		"parentItem",
		"parent",
		"table",
		"parentItem",
		"parentItem",
		"parentIndex",
		"index",
		"tableItem",
		"table",
		"index",
		"tableItem",
		"TableTree",
		"tableItem",
		"background",
		"tableItem",
		"background",
		"foreground",
		"tableItem",
		"foreground",
		"font",
		"tableItem",
		"font",
		"Math",
		"table",
		"i",
		"columnCount",
		"i",
		"i",
		"texts",
		"texts",
		"i",
		"i",
		"texts",
		"i",
		"i",
		"images",
		"images",
		"i",
		"i",
		"images",
		"i",
		"items",
		"expanded",
		"tableItem",
		"parent",
		"items",
		"i",
		"length",
		"i",
		"items",
		"i",
		"tableItem",
		"parent",
		"items",
		"i",
		"length",
		"i",
		"items",
		"i",
		"tableItem",
		"tableItem",
		"EMPTY_ITEMS",
		"EMPTY_TEXTS",
		"EMPTY_IMAGES",
		"parent",
		"parentItem",
		"ITEMID",
		"sizeImage",
		"sizeImage",
		"sizeImage",
		"sizeImage",
		"CHECK",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"length",
		"length",
		"length",
		"length",
		"length",
		"ERROR_INVALID_RANGE",
		"length",
		"length",
		"length",
		"tableItem",
		"length",
		"length",
		"length",
		"length",
		"item",
		"Expand",
		"length",
		"length",
		"expanded",
		"length",
		"length",
		"inDispose",
		"length",
		"length",
		"length",
		"length",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"CHECK",
		"checked",
		"CHECK",
		"grayed",
		"length",
		"expanded",
		"expanded",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"font",
		"ERROR_INVALID_ARGUMENT",
		"length",
		"length",
		"ERROR_NULL_ARGUMENT",
		"length",
		"length",
		"tableItem",
		"ITEMID",
		"length",
		"length",
		"length",
		"length",
		"length",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"parent",
		"style",
		"parent",
		"style",
		"index",
		"parent",
		"parentItem",
		"style",
		"index",
		"item",
		"index",
		"index",
		"index",
		"index",
		"tableItem",
		"index",
		"item",
		"notify",
		"item",
		"item",
		"color",
		"checked",
		"grayed",
		"expanded",
		"font",
		"color",
		"index",
		"image",
		"image",
		"index",
		"text",
		"string",
		"show"
	],
	"extendORImplementFiles":[
		"Item"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"addCheck",
		"addItem",
		"getBackground",
		"getBounds",
		"getChecked",
		"getGrayed",
		"getExpanded",
		"getFont",
		"getForeground",
		"getImage",
		"getImage",
		"getIndent",
		"getItem",
		"getItemCount",
		"getItems",
		"getItem",
		"getParent",
		"getParentItem",
		"getText",
		"getText",
		"getVisible",
		"indexOf",
		"expandAll",
		"expandedIndexOf",
		"visibleChildrenCount",
		"dispose",
		"removeItem",
		"setBackground",
		"setChecked",
		"setGrayed",
		"setExpanded",
		"setFont",
		"setForeground",
		"setImage",
		"setImage",
		"setText",
		"setText",
		"setVisible",
		"getItemCount",
		"getItemCount",
		"getParent",
		"addItem",
		"getTable",
		"setData",
		"addCheck",
		"getItemHeight",
		"setBackground",
		"getBackground",
		"fillRectangle",
		"dispose",
		"setImage",
		"addItem",
		"getTable",
		"getStyle",
		"setChecked",
		"setGrayed",
		"error",
		"error",
		"getMinusImage",
		"getPlusImage",
		"setImage",
		"arraycopy",
		"arraycopy",
		"setVisible",
		"checkWidget",
		"getBackground",
		"checkWidget",
		"getBounds",
		"checkWidget",
		"getChecked",
		"checkWidget",
		"getGrayed",
		"checkWidget",
		"getFont",
		"checkWidget",
		"getForeground",
		"checkWidget",
		"getImage",
		"getIndent",
		"checkWidget",
		"error",
		"arraycopy",
		"getItem",
		"checkWidget",
		"getText",
		"setExpanded",
		"notifyListeners",
		"expandAll",
		"visibleChildrenCount",
		"getVisible",
		"visibleChildrenCount",
		"isDisposed",
		"dispose",
		"dispose",
		"removeItem",
		"removeItem",
		"dispose",
		"arraycopy",
		"arraycopy",
		"setImage",
		"checkWidget",
		"isDisposed",
		"error",
		"setBackground",
		"checkWidget",
		"getTable",
		"getStyle",
		"setChecked",
		"checkWidget",
		"getTable",
		"getStyle",
		"setGrayed",
		"checkWidget",
		"setRedraw",
		"setVisible",
		"getMinusImage",
		"getPlusImage",
		"setImage",
		"setRedraw",
		"checkWidget",
		"isDisposed",
		"error",
		"setFont",
		"checkWidget",
		"isDisposed",
		"error",
		"setForeground",
		"checkWidget",
		"max",
		"getColumnCount",
		"getTable",
		"arraycopy",
		"setImage",
		"setImage",
		"checkWidget",
		"error",
		"max",
		"getColumnCount",
		"getTable",
		"arraycopy",
		"setText",
		"setText",
		"getVisible",
		"getVisible",
		"getTable",
		"indexOf",
		"expandedIndexOf",
		"getStyle",
		"setData",
		"setImageIndent",
		"getIndent",
		"setBackground",
		"setForeground",
		"setFont",
		"addCheck",
		"max",
		"getColumnCount",
		"setText",
		"setImage",
		"setImage",
		"getMinusImage",
		"setVisible",
		"setImage",
		"getPlusImage",
		"setVisible",
		"dispose",
		"TableItem",
		"Image",
		"GC",
		"Rectangle",
		"Event",
		"TableItem"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    setText(0, string);\n}",
			"comments":"",
			"methodName":"public void setText(String string)"
		},
		"public TableTreeItem getItem(int index)":{
			"methodBody":"{\n    checkWidget();\n    int count = items.length;\n    if (!(0 <= index && index < count))\n        SWT.error(SWT.ERROR_INVALID_RANGE);\n    return items[index];\n}",
			"comments":"/**\n* Returns the item at the given, zero-relative index in the\n* receiver. Throws an exception if the index is out of range.\n*\n* @param index the index of the item to return\n* @return the item at the given index\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.1\n*/\n",
			"methodName":"public TableTreeItem getItem(int index)"
		},
		"void setVisible(boolean show)":{
			"methodBody":"{\n    \n    if (parentItem == null)\n        return;\n    if (getVisible() == show)\n        return;\n    if (show) {\n        \n        if (!parentItem.getVisible())\n            return;\n        \n        Table table = parent.getTable();\n        int parentIndex = table.indexOf(parentItem.tableItem);\n        int index = parentItem.expandedIndexOf(this) + parentIndex + 1;\n        if (index < 0)\n            return;\n        tableItem = new TableItem(table, getStyle(), index);\n        tableItem.setData(TableTree.ITEMID, this);\n        tableItem.setImageIndent(getIndent());\n        if (background != null)\n            tableItem.setBackground(background);\n        if (foreground != null)\n            tableItem.setForeground(foreground);\n        if (font != null)\n            tableItem.setFont(font);\n        addCheck();\n        \n        \n        int columnCount = Math.max(table.getColumnCount(), 1);\n        for (int i = 0; i < columnCount; i++) {\n            if (i < texts.length && texts[i] != null)\n                setText(i, texts[i]);\n            if (i < images.length && images[i] != null)\n                setImage(i, images[i]);\n        }\n        \n        if (items.length != 0) {\n            if (expanded) {\n                tableItem.setImage(0, parent.getMinusImage());\n                for (int i = 0, length = items.length; i < length; i++) {\n                    items[i].setVisible(true);\n                }\n            } else {\n                tableItem.setImage(0, parent.getPlusImage());\n            }\n        }\n    } else {\n        for (int i = 0, length = items.length; i < length; i++) {\n            items[i].setVisible(false);\n        }\n        \n        tableItem.dispose();\n        tableItem = null;\n    }\n}",
			"comments":"// this is a root and can not be toggled between visible and hidden\n// parentItem must already be visible\n// create underlying table item and set data in table item to stored data\n// restore fields to item\n// ignore any images in the first column\n// display the children and the appropriate [+]/[-] symbol as required\n// remove row from table\n",
			"methodName":"void setVisible(boolean show)"
		},
		"public Color getBackground()":{
			"methodBody":"{\n    checkWidget();\n    return (background == null) ? parent.getBackground() : background;\n}",
			"comments":"/**\n* Returns the receiver's background color.\n*\n* @return the background color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public Color getBackground()"
		},
		"public boolean getGrayed()":{
			"methodBody":"{\n    checkWidget();\n    if (tableItem == null)\n        return grayed;\n    return tableItem.getGrayed();\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is grayed,\n* and false otherwise. When the parent does not have\n* the <code>CHECK</code> style, return false.\n*\n* @return the grayed state of the checkbox\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.1\n*/\n",
			"methodName":"public boolean getGrayed()"
		},
		"public void setGrayed(boolean grayed)":{
			"methodBody":"{\n    checkWidget();\n    Table table = parent.getTable();\n    if ((table.getStyle() & SWT.CHECK) == 0)\n        return;\n    if (tableItem != null) {\n        tableItem.setGrayed(grayed);\n    }\n    this.grayed = grayed;\n}",
			"comments":"/**\n* Sets the grayed state of the checkbox for this item.  This state change\n* only applies if the Table was created with the SWT.CHECK style.\n*\n* @param grayed the new grayed state of the checkbox;\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.1\n*/\n",
			"methodName":"public void setGrayed(boolean grayed)"
		},
		"boolean getVisible()":{
			"methodBody":"{\n    return tableItem != null;\n}",
			"comments":"",
			"methodName":"boolean getVisible()"
		},
		"public void setChecked(boolean checked)":{
			"methodBody":"{\n    checkWidget();\n    Table table = parent.getTable();\n    if ((table.getStyle() & SWT.CHECK) == 0)\n        return;\n    if (tableItem != null) {\n        tableItem.setChecked(checked);\n    }\n    this.checked = checked;\n}",
			"comments":"/**\n* Sets the checked state of the checkbox for this item.  This state change\n* only applies if the Table was created with the SWT.CHECK style.\n*\n* @param checked the new checked state of the checkbox\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setChecked(boolean checked)"
		},
		"public String getText(int index)":{
			"methodBody":"{\n    \n    if (0 <= index && index < texts.length)\n        return texts[index];\n    return null;\n}",
			"comments":"/**\n* Gets the item text at the specified index.\n* <p>\n* Indexing is zero based.\n*\n* This operation will fail when the index is out\n* of range or an item could not be queried from\n* the OS.\n*\n* @param index the index of the item\n* @return the item text at the specified index, which can be null\n*/\n//checkWidget();\n",
			"methodName":"public String getText(int index)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (tableItem != null) {\n        tableItem.setForeground(color);\n    }\n    foreground = color;\n}",
			"comments":"/**\n* Sets the receiver's foreground color to the color specified\n* by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param color the new color (or null)\n*\n* @since 2.0\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public void setForeground(Color color)"
		},
		"public TableTreeItem[] getItems()":{
			"methodBody":"{\n    \n    TableTreeItem[] newItems = new TableTreeItem[items.length];\n    System.arraycopy(items, 0, newItems, 0, items.length);\n    return newItems;\n}",
			"comments":"/**\n* Returns an array of <code>TableTreeItem</code>s which are the\n* direct item children of the receiver.\n* <p>\n* Note: This is not the actual structure used by the receiver\n* to maintain its list of items, so modifying the array will\n* not affect the receiver.\n* </p>\n*\n* @return the receiver's items\n*/\n//checkWidget();\n",
			"methodName":"public TableTreeItem[] getItems()"
		},
		"TableTreeItem getItem(TableItem tableItem)":{
			"methodBody":"{\n    if (tableItem == null)\n        return null;\n    if (this.tableItem == tableItem)\n        return this;\n    for (int i = 0; i < items.length; i++) {\n        TableTreeItem item = items[i].getItem(tableItem);\n        if (item != null)\n            return item;\n    }\n    return null;\n}",
			"comments":"",
			"methodName":"TableTreeItem getItem(TableItem tableItem)"
		},
		"public Font getFont()":{
			"methodBody":"{\n    checkWidget();\n    return (font == null) ? parent.getFont() : font;\n}",
			"comments":"/**\n* Returns the font that the receiver will use to paint textual information for this item.\n*\n* @return the receiver's font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public Font getFont()"
		},
		"int getIndent()":{
			"methodBody":"{\n    if (parentItem == null)\n        return 0;\n    return parentItem.getIndent() + 1;\n}",
			"comments":"",
			"methodName":"int getIndent()"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    checkWidget();\n    if (color != null && color.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (tableItem != null) {\n        tableItem.setBackground(color);\n    }\n    background = color;\n}",
			"comments":"/**\n* Sets the receiver's background color to the color specified\n* by the argument, or to the default system color for the item\n* if the argument is null.\n*\n* @param color the new color (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public void setBackground(Color color)"
		},
		"int expandedIndexOf(TableTreeItem item)":{
			"methodBody":"{\n    int index = 0;\n    for (int i = 0; i < items.length; i++) {\n        if (items[i] == item)\n            return index;\n        if (items[i].expanded)\n            index += items[i].visibleChildrenCount();\n        index++;\n    }\n    return -1;\n}",
			"comments":"",
			"methodName":"int expandedIndexOf(TableTreeItem item)"
		},
		"public void setText(int index, String text)":{
			"methodBody":"{\n    checkWidget();\n    if (text == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    int columnCount = Math.max(parent.getTable().getColumnCount(), 1);\n    if (index < 0 || index >= columnCount)\n        return;\n    if (texts.length < columnCount) {\n        String[] newTexts = new String[columnCount];\n        System.arraycopy(texts, 0, newTexts, 0, texts.length);\n        texts = newTexts;\n    }\n    texts[index] = text;\n    if (tableItem != null)\n        tableItem.setText(index, text);\n}",
			"comments":"/**\n* Sets the widget text.\n* <p>\n*\n* The widget text for an item is the label of the\n* item or the label of the text specified by a column\n* number.\n*\n* @param index the column number\n* @param text the new text\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the text is null</li>\n* </ul>\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"public void setText(int index, String text)"
		},
		"public Image getImage()":{
			"methodBody":"{\n    checkWidget();\n    return getImage(0);\n}",
			"comments":"/**\n* Gets the first image.\n* <p>\n* The image in column 0 is reserved for the [+] and [-]\n* images of the tree, therefore getImage(0) will return null.\n*\n* @return the image at index 0\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Image getImage()"
		},
		"void expandAll(boolean notify)":{
			"methodBody":"{\n    if (items.length == 0)\n        return;\n    if (!expanded) {\n        setExpanded(true);\n        if (notify) {\n            Event event = new Event();\n            event.item = this;\n            parent.notifyListeners(SWT.Expand, event);\n        }\n    }\n    for (int i = 0; i < items.length; i++) {\n        items[i].expandAll(notify);\n    }\n}",
			"comments":"",
			"methodName":"void expandAll(boolean notify)"
		},
		"public void dispose()":{
			"methodBody":"{\n    if (isDisposed())\n        return;\n    for (int i = items.length - 1; i >= 0; i--) {\n        items[i].dispose();\n    }\n    super.dispose();\n    if (!parent.inDispose) {\n        if (parentItem != null) {\n            parentItem.removeItem(this);\n        } else {\n            parent.removeItem(this);\n        }\n        if (tableItem != null)\n            tableItem.dispose();\n    }\n    items = null;\n    parentItem = null;\n    parent = null;\n    images = null;\n    texts = null;\n    tableItem = null;\n    foreground = null;\n    background = null;\n    font = null;\n}",
			"comments":"",
			"methodName":"public void dispose()"
		},
		"public void setImage(Image image)":{
			"methodBody":"{\n    setImage(0, image);\n}",
			"comments":"/**\n* Sets the first image.\n* <p>\n* The image can be null.\n* The image in column 0 is reserved for the [+] and [-]\n* images of the tree, therefore do nothing.\n*\n* @param image the new image or null\n*\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"public void setImage(Image image)"
		},
		"public Rectangle getBounds(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (tableItem != null) {\n        return tableItem.getBounds(index);\n    } else {\n        return new Rectangle(0, 0, 0, 0);\n    }\n}",
			"comments":"/**\n* Returns a rectangle describing the receiver's size and location\n* relative to its parent.\n*\n* @return the receiver's bounding rectangle\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle getBounds(int index)"
		},
		"public int indexOf(TableTreeItem item)":{
			"methodBody":"{\n    \n    for (int i = 0; i < items.length; i++) {\n        if (items[i] == item)\n            return i;\n    }\n    return -1;\n}",
			"comments":"/**\n* Gets the index of the specified item.\n*\n* <p>The widget is searched starting at 0 until an\n* item is found that is equal to the search item.\n* If no item is found, -1 is returned.  Indexing\n* is zero based.  This index is relative to the parent only.\n*\n* @param item the search item\n* @return the index of the item or -1 if the item is not found\n*\n*/\n//checkWidget();\n",
			"methodName":"public int indexOf(TableTreeItem item)"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    checkWidget();\n    if (font != null && font.isDisposed()) {\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    }\n    if (tableItem != null) {\n        tableItem.setFont(font);\n    }\n    this.font = font;\n}",
			"comments":"/**\n* Sets the font that the receiver will use to paint textual information\n* for this item to the font specified by the argument, or to the default font\n* for that kind of control if the argument is null.\n*\n* @param font the new font (or null)\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_ARGUMENT - if the argument has been disposed</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setFont(Font font)"
		},
		"public boolean getChecked()":{
			"methodBody":"{\n    checkWidget();\n    if (tableItem == null)\n        return checked;\n    return tableItem.getChecked();\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is checked,\n* and false otherwise.  When the parent does not have\n* the <code>CHECK style, return false.\n*\n* @return the checked state of the checkbox\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getChecked()"
		},
		"public TableTree getParent()":{
			"methodBody":"{\n    \n    return parent;\n}",
			"comments":"/**\n* Returns the receiver's parent, which must be a <code>TableTree</code>.\n*\n* @return the receiver's parent\n*/\n//checkWidget();\n",
			"methodName":"public TableTree getParent()"
		},
		"public String getText()":{
			"methodBody":"{\n    checkWidget();\n    return getText(0);\n}",
			"comments":"",
			"methodName":"public String getText()"
		},
		"int visibleChildrenCount()":{
			"methodBody":"{\n    int count = 0;\n    for (int i = 0; i < items.length; i++) {\n        if (items[i].getVisible()) {\n            count += 1 + items[i].visibleChildrenCount();\n        }\n    }\n    return count;\n}",
			"comments":"",
			"methodName":"int visibleChildrenCount()"
		},
		"void addCheck()":{
			"methodBody":"{\n    Table table = parent.getTable();\n    if ((table.getStyle() & SWT.CHECK) == 0)\n        return;\n    tableItem.setChecked(checked);\n    tableItem.setGrayed(grayed);\n}",
			"comments":"",
			"methodName":"void addCheck()"
		},
		"public void setExpanded(boolean expanded)":{
			"methodBody":"{\n    checkWidget();\n    if (items.length == 0)\n        return;\n    if (this.expanded == expanded)\n        return;\n    this.expanded = expanded;\n    if (tableItem == null)\n        return;\n    parent.setRedraw(false);\n    for (int i = 0; i < items.length; i++) {\n        items[i].setVisible(expanded);\n    }\n    Image image = expanded ? parent.getMinusImage() : parent.getPlusImage();\n    tableItem.setImage(0, image);\n    parent.setRedraw(true);\n}",
			"comments":"/**\n* Sets the expanded state.\n* <p>\n* @param expanded the new expanded state.\n*\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"public void setExpanded(boolean expanded)"
		},
		"void addItem(TableTreeItem item, int index)":{
			"methodBody":"{\n    if (item == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (index < 0 || index > items.length)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    \n    if (items.length == 0 && index == 0) {\n        if (tableItem != null) {\n            Image image = expanded ? parent.getMinusImage() : parent.getPlusImage();\n            tableItem.setImage(0, image);\n        }\n    }\n    \n    TableTreeItem[] newItems = new TableTreeItem[items.length + 1];\n    System.arraycopy(items, 0, newItems, 0, index);\n    newItems[index] = item;\n    System.arraycopy(items, index, newItems, index + 1, items.length - index);\n    items = newItems;\n    if (expanded)\n        item.setVisible(true);\n}",
			"comments":"/* Now that item has a sub-node it must indicate that it can be expanded */\n/* Put the item in the items list */\n",
			"methodName":"void addItem(TableTreeItem item, int index)"
		},
		"public Image getImage(int index)":{
			"methodBody":"{\n    \n    if (0 < index && index < images.length)\n        return images[index];\n    return null;\n}",
			"comments":"/**\n* Gets the image at the specified index.\n* <p>\n* Indexing is zero based. The image can be null.\n* The image in column 0 is reserved for the [+] and [-]\n* images of the tree, therefore getImage(0) will return null.\n* Return null if the index is out of range.\n*\n* @param index the index of the image\n* @return the image at the specified index or null\n*/\n//checkWidget();\n",
			"methodName":"public Image getImage(int index)"
		},
		"public TableTreeItem getParentItem()":{
			"methodBody":"{\n    \n    return parentItem;\n}",
			"comments":"/**\n* Returns the receiver's parent item, which must be a\n* <code>TableTreeItem</code> or null when the receiver is a\n* root.\n*\n* @return the receiver's parent item\n*/\n//checkWidget();\n",
			"methodName":"public TableTreeItem getParentItem()"
		},
		"void removeItem(TableTreeItem item)":{
			"methodBody":"{\n    int index = 0;\n    while (index < items.length && items[index] != item) index++;\n    if (index == items.length)\n        return;\n    TableTreeItem[] newItems = new TableTreeItem[items.length - 1];\n    System.arraycopy(items, 0, newItems, 0, index);\n    System.arraycopy(items, index + 1, newItems, index, items.length - index - 1);\n    items = newItems;\n    if (items.length == 0) {\n        if (tableItem != null)\n            tableItem.setImage(0, null);\n    }\n}",
			"comments":"",
			"methodName":"void removeItem(TableTreeItem item)"
		},
		"public void setImage(int index, Image image)":{
			"methodBody":"{\n    checkWidget();\n    int columnCount = Math.max(parent.getTable().getColumnCount(), 1);\n    if (index <= 0 || index >= columnCount)\n        return;\n    if (images.length < columnCount) {\n        Image[] newImages = new Image[columnCount];\n        System.arraycopy(images, 0, newImages, 0, images.length);\n        images = newImages;\n    }\n    images[index] = image;\n    if (tableItem != null)\n        tableItem.setImage(index, image);\n}",
			"comments":"/**\n* Sets the image at an index.\n* <p>\n* The image can be null.\n* The image in column 0 is reserved for the [+] and [-]\n* images of the tree, therefore do nothing if index is 0.\n*\n* @param image the new image or null\n*\n* @exception SWTException <ul>\n*\t\t<li>ERROR_THREAD_INVALID_ACCESS when called from the wrong thread</li>\n*\t\t<li>ERROR_WIDGET_DISPOSED when the widget has been disposed</li>\n*\t</ul>\n*/\n",
			"methodName":"public void setImage(int index, Image image)"
		},
		"public boolean getExpanded()":{
			"methodBody":"{\n    \n    return expanded;\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver is expanded,\n* and false otherwise.\n* <p>\n*\n* @return the expanded state\n*/\n//checkWidget();\n",
			"methodName":"public boolean getExpanded()"
		},
		"public Color getForeground()":{
			"methodBody":"{\n    checkWidget();\n    return (foreground == null) ? parent.getForeground() : foreground;\n}",
			"comments":"/**\n* Returns the foreground color that the receiver will use to draw.\n*\n* @return the receiver's foreground color\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*\n*/\n",
			"methodName":"public Color getForeground()"
		},
		"public int getItemCount()":{
			"methodBody":"{\n    \n    return items.length;\n}",
			"comments":"/**\n* Returns the number of items contained in the receiver\n* that are direct item children of the receiver.\n*\n* @return the number of items\n*/\n//checkWidget();\n",
			"methodName":"public int getItemCount()"
		}
	},
	"ClassORInterfaceName":[
		"TableTreeItem"
	]
}
