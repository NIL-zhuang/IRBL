{
	"variables":[
		"types",
		"listeners",
		"level",
		"length",
		"index",
		"newTypes",
		"newListeners",
		"i",
		"i",
		"listener",
		"compact",
		"index",
		"i",
		"i",
		"count",
		"i",
		"end",
		"i",
		"i",
		"typedListener",
		"types",
		"types",
		"listeners",
		"listeners",
		"types",
		"length",
		"index",
		"types",
		"index",
		"index",
		"index",
		"index",
		"length",
		"length",
		"System",
		"types",
		"newTypes",
		"length",
		"types",
		"newTypes",
		"length",
		"System",
		"listeners",
		"newListeners",
		"length",
		"listeners",
		"newListeners",
		"types",
		"index",
		"eventType",
		"listeners",
		"index",
		"listener",
		"types",
		"i",
		"types",
		"i",
		"types",
		"i",
		"eventType",
		"types",
		"level",
		"level",
		"i",
		"types",
		"i",
		"event",
		"SWT",
		"types",
		"i",
		"event",
		"listeners",
		"i",
		"listener",
		"listener",
		"event",
		"level",
		"level",
		"level",
		"compact",
		"level",
		"i",
		"types",
		"i",
		"types",
		"i",
		"types",
		"index",
		"types",
		"i",
		"listeners",
		"index",
		"listeners",
		"i",
		"index",
		"index",
		"i",
		"types",
		"i",
		"types",
		"i",
		"listeners",
		"i",
		"types",
		"i",
		"types",
		"i",
		"types",
		"i",
		"count",
		"count",
		"level",
		"types",
		"System",
		"types",
		"index",
		"types",
		"index",
		"end",
		"index",
		"System",
		"listeners",
		"index",
		"listeners",
		"index",
		"end",
		"index",
		"index",
		"end",
		"level",
		"level",
		"level",
		"types",
		"index",
		"listeners",
		"index",
		"types",
		"i",
		"types",
		"i",
		"types",
		"i",
		"eventType",
		"listeners",
		"i",
		"listener",
		"i",
		"types",
		"i",
		"types",
		"i",
		"types",
		"i",
		"eventType",
		"listeners",
		"i",
		"listeners",
		"i",
		"typedListener",
		"listener",
		"i",
		"length",
		"length",
		"length",
		"type",
		"None",
		"type",
		"length",
		"length",
		"length",
		"length",
		"length",
		"length",
		"eventType",
		"listener",
		"eventType",
		"event",
		"index",
		"eventType",
		"listener",
		"eventType",
		"listener"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.internal.SWTEventListener"
	],
	"methods":[
		"hook",
		"hooks",
		"sendEvent",
		"size",
		"remove",
		"unhook",
		"unhook",
		"arraycopy",
		"arraycopy",
		"handleEvent",
		"arraycopy",
		"arraycopy",
		"remove",
		"getEventListener",
		"remove"
	],
	"methodsBody":{
		"void remove(int index)":{
			"methodBody":"{\n    if (level == 0) {\n        int end = types.length - 1;\n        System.arraycopy(types, index + 1, types, index, end - index);\n        System.arraycopy(listeners, index + 1, listeners, index, end - index);\n        index = end;\n    } else {\n        if (level > 0)\n            level = -level;\n    }\n    types[index] = 0;\n    listeners[index] = null;\n}",
			"comments":"",
			"methodName":"void remove(int index)"
		},
		"public void unhook(int eventType, SWTEventListener listener)":{
			"methodBody":"{\n    if (types == null)\n        return;\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] == eventType) {\n            if (listeners[i] instanceof TypedListener) {\n                TypedListener typedListener = (TypedListener) listeners[i];\n                if (typedListener.getEventListener() == listener) {\n                    remove(i);\n                    return;\n                }\n            }\n        }\n    }\n}",
			"comments":"",
			"methodName":"public void unhook(int eventType, SWTEventListener listener)"
		},
		"public void unhook(int eventType, Listener listener)":{
			"methodBody":"{\n    if (types == null)\n        return;\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] == eventType && listeners[i] == listener) {\n            remove(i);\n            return;\n        }\n    }\n}",
			"comments":"",
			"methodName":"public void unhook(int eventType, Listener listener)"
		},
		"public void hook(int eventType, Listener listener)":{
			"methodBody":"{\n    if (types == null)\n        types = new int[4];\n    if (listeners == null)\n        listeners = new Listener[4];\n    int length = types.length, index = length - 1;\n    while (index >= 0) {\n        if (types[index] != 0)\n            break;\n        --index;\n    }\n    index++;\n    if (index == length) {\n        int[] newTypes = new int[length + 4];\n        System.arraycopy(types, 0, newTypes, 0, length);\n        types = newTypes;\n        Listener[] newListeners = new Listener[length + 4];\n        System.arraycopy(listeners, 0, newListeners, 0, length);\n        listeners = newListeners;\n    }\n    types[index] = eventType;\n    listeners[index] = listener;\n}",
			"comments":"",
			"methodName":"public void hook(int eventType, Listener listener)"
		},
		"public boolean hooks(int eventType)":{
			"methodBody":"{\n    if (types == null)\n        return false;\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] == eventType)\n            return true;\n    }\n    return false;\n}",
			"comments":"",
			"methodName":"public boolean hooks(int eventType)"
		},
		"public int size()":{
			"methodBody":"{\n    if (types == null)\n        return 0;\n    int count = 0;\n    for (int i = 0; i < types.length; i++) {\n        if (types[i] != 0)\n            count++;\n    }\n    return count;\n}",
			"comments":"",
			"methodName":"public int size()"
		},
		"public void sendEvent(Event event)":{
			"methodBody":"{\n    if (types == null)\n        return;\n    level += level >= 0 ? 1 : -1;\n    try {\n        for (int i = 0; i < types.length; i++) {\n            if (event.type == SWT.None)\n                return;\n            if (types[i] == event.type) {\n                Listener listener = listeners[i];\n                if (listener != null)\n                    listener.handleEvent(event);\n            }\n        }\n    } finally {\n        boolean compact = level < 0;\n        level -= level >= 0 ? 1 : -1;\n        if (compact && level == 0) {\n            int index = 0;\n            for (int i = 0; i < types.length; i++) {\n                if (types[i] != 0) {\n                    types[index] = types[i];\n                    listeners[index] = listeners[i];\n                    index++;\n                }\n            }\n            for (int i = index; i < types.length; i++) {\n                types[i] = 0;\n                listeners[i] = null;\n            }\n        }\n    }\n}",
			"comments":"",
			"methodName":"public void sendEvent(Event event)"
		}
	},
	"ClassORInterfaceName":[
		"EventTable"
	]
}
