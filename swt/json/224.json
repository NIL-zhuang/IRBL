{
	"variables":[
		"literalTable",
		"distanceTable",
		"FixedLiteralTable",
		"FixedDistanceTable",
		"LiteralTableSize",
		"FixedLiteralLengths",
		"DistanceTableSize",
		"FixedDistanceLengths",
		"LengthCodeTableSize",
		"LengthCodeOrder",
		"literals",
		"distances",
		"codeLengthCodes",
		"lengthCodes",
		"i",
		"codeLengthsTable",
		"literalLengths",
		"distanceLengths",
		"lengths",
		"index",
		"value",
		"count",
		"i",
		"count",
		"i",
		"count",
		"i",
		"stream",
		"FixedLiteralTable",
		"FixedLiteralTable",
		"FixedLiteralLengths",
		"FixedLiteralTable",
		"FixedDistanceTable",
		"FixedDistanceTable",
		"FixedDistanceLengths",
		"FixedDistanceTable",
		"literalTable",
		"distanceTable",
		"PngLzBlockReader",
		"stream",
		"PngLzBlockReader",
		"stream",
		"PngLzBlockReader",
		"stream",
		"codeLengthCodes",
		"PngLzBlockReader",
		"stream",
		"LengthCodeTableSize",
		"i",
		"codeLengthCodes",
		"i",
		"lengthCodes",
		"LengthCodeOrder",
		"i",
		"stream",
		"lengthCodes",
		"stream",
		"literals",
		"codeLengthsTable",
		"LiteralTableSize",
		"stream",
		"distances",
		"codeLengthsTable",
		"DistanceTableSize",
		"literalTable",
		"literalLengths",
		"distanceTable",
		"distanceLengths",
		"tableSize",
		"index",
		"numLengths",
		"lengthsTable",
		"stream",
		"value",
		"lengths",
		"index",
		"value",
		"index",
		"value",
		"stream",
		"i",
		"count",
		"i",
		"lengths",
		"index",
		"lengths",
		"index",
		"index",
		"value",
		"stream",
		"i",
		"count",
		"i",
		"lengths",
		"index",
		"index",
		"value",
		"stream",
		"i",
		"count",
		"i",
		"lengths",
		"index",
		"index",
		"stream",
		"lengths",
		"literalTable",
		"stream",
		"distanceTable",
		"stream",
		"FIRST_LENGTH_CODE",
		"FIRST_DISTANCE_CODE",
		"FIRST_CODE_LENGTH_CODE",
		"LAST_CODE_LENGTH_CODE",
		"stream",
		"stream",
		"stream",
		"numLengths",
		"lengthsTable",
		"tableSize",
		"stream",
		"stream"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[],
	"methods":[
		"getDynamicTables",
		"getFixedTables",
		"getFixedLiteralTable",
		"getFixedDistanceTable",
		"readLengths",
		"getNextLiteralValue",
		"getNextDistanceValue",
		"getFixedLiteralTable",
		"getFixedDistanceTable",
		"getNextIdatBits",
		"getNextIdatBits",
		"getNextIdatBits",
		"error",
		"getNextIdatBits",
		"readLengths",
		"readLengths",
		"getNextValue",
		"getNextIdatBits",
		"getNextIdatBits",
		"getNextIdatBits",
		"error",
		"getNextValue",
		"getNextValue",
		"PngHuffmanTables",
		"PngHuffmanTables",
		"PngHuffmanTable",
		"PngHuffmanTable",
		"PngHuffmanTable",
		"PngHuffmanTable",
		"PngHuffmanTable"
	],
	"methodsBody":{
		"static PngHuffmanTables getDynamicTables(PngDecodingDataStream stream)":{
			"methodBody":"{\n    return new PngHuffmanTables(stream);\n}",
			"comments":"",
			"methodName":"static PngHuffmanTables getDynamicTables(PngDecodingDataStream stream)"
		},
		"private PngHuffmanTable getFixedDistanceTable()":{
			"methodBody":"{\n    if (FixedDistanceTable == null) {\n        FixedDistanceTable = new PngHuffmanTable(FixedDistanceLengths);\n    }\n    return FixedDistanceTable;\n}",
			"comments":"",
			"methodName":"private PngHuffmanTable getFixedDistanceTable()"
		},
		"int getNextLiteralValue(PngDecodingDataStream stream)":{
			"methodBody":"{\n    return literalTable.getNextValue(stream);\n}",
			"comments":"",
			"methodName":"int getNextLiteralValue(PngDecodingDataStream stream)"
		},
		"int getNextDistanceValue(PngDecodingDataStream stream)":{
			"methodBody":"{\n    return distanceTable.getNextValue(stream);\n}",
			"comments":"",
			"methodName":"int getNextDistanceValue(PngDecodingDataStream stream)"
		},
		"private PngHuffmanTable getFixedLiteralTable()":{
			"methodBody":"{\n    if (FixedLiteralTable == null) {\n        FixedLiteralTable = new PngHuffmanTable(FixedLiteralLengths);\n    }\n    return FixedLiteralTable;\n}",
			"comments":"",
			"methodName":"private PngHuffmanTable getFixedLiteralTable()"
		},
		"private int[] readLengths(PngDecodingDataStream stream, int numLengths, PngHuffmanTable lengthsTable, int tableSize)":{
			"methodBody":"{\n    int[] lengths = new int[tableSize];\n    for (int index = 0; index < numLengths; ) {\n        int value = lengthsTable.getNextValue(stream);\n        if (value < 16) {\n            \n            lengths[index] = value;\n            index++;\n        } else if (value == 16) {\n            \n            int count = stream.getNextIdatBits(2) + 3;\n            for (int i = 0; i < count; i++) {\n                lengths[index] = lengths[index - 1];\n                index++;\n            }\n        } else if (value == 17) {\n            \n            int count = stream.getNextIdatBits(3) + 3;\n            for (int i = 0; i < count; i++) {\n                lengths[index] = 0;\n                index++;\n            }\n        } else if (value == 18) {\n            \n            int count = stream.getNextIdatBits(7) + 11;\n            for (int i = 0; i < count; i++) {\n                lengths[index] = 0;\n                index++;\n            }\n        } else {\n            stream.error();\n        }\n    }\n    return lengths;\n}",
			"comments":"// Literal value\n// Repeat the previous code 3-6 times.\n// Repeat 0 3-10 times.\n// Repeat 0 11-138 times.\n",
			"methodName":"private int[] readLengths(PngDecodingDataStream stream, int numLengths, PngHuffmanTable lengthsTable, int tableSize)"
		},
		"static PngHuffmanTables getFixedTables()":{
			"methodBody":"{\n    return new PngHuffmanTables();\n}",
			"comments":"",
			"methodName":"static PngHuffmanTables getFixedTables()"
		}
	},
	"ClassORInterfaceName":[
		"PngHuffmanTables"
	]
}
