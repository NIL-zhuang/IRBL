{
	"variables":[
		"DELAY",
		"TIMER_ID",
		"MINIMUM_WIDTH",
		"ProgressBarProc",
		"ProgressBarClass",
		"lpWndClass",
		"hInstance",
		"hHeap",
		"byteCount",
		"lpszClassName",
		"border",
		"width",
		"height",
		"bits",
		"bits",
		"minimum",
		"maximum",
		"bits",
		"result",
		"result",
		"rect",
		"oldBits",
		"newBits",
		"result",
		"bits",
		"OS",
		"OS",
		"ProgressBarClass",
		"lpWndClass",
		"ProgressBarProc",
		"lpWndClass",
		"OS",
		"OS",
		"lpWndClass",
		"hInstance",
		"lpWndClass",
		"OS",
		"lpWndClass",
		"OS",
		"ProgressBarClass",
		"TCHAR",
		"OS",
		"hHeap",
		"OS",
		"byteCount",
		"OS",
		"lpszClassName",
		"ProgressBarClass",
		"byteCount",
		"lpWndClass",
		"lpszClassName",
		"OS",
		"lpWndClass",
		"parent",
		"style",
		"handle",
		"OS",
		"ProgressBarProc",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"border",
		"border",
		"style",
		"SWT",
		"width",
		"OS",
		"OS",
		"height",
		"OS",
		"OS",
		"width",
		"OS",
		"OS",
		"height",
		"OS",
		"OS",
		"wHint",
		"SWT",
		"width",
		"wHint",
		"border",
		"hHint",
		"SWT",
		"height",
		"hHint",
		"border",
		"width",
		"height",
		"OS",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"OS",
		"handle",
		"OS",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"bits",
		"OS",
		"OS",
		"handle",
		"TIMER_ID",
		"DELAY",
		"OS",
		"handle",
		"OS",
		"DELAY",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"bits",
		"OS",
		"OS",
		"handle",
		"TIMER_ID",
		"OS",
		"handle",
		"OS",
		"background",
		"pixel",
		"background",
		"pixel",
		"pixel",
		"pixel",
		"OS",
		"OS",
		"handle",
		"OS",
		"pixel",
		"foreground",
		"pixel",
		"foreground",
		"pixel",
		"pixel",
		"pixel",
		"OS",
		"OS",
		"handle",
		"OS",
		"pixel",
		"OS",
		"handle",
		"OS",
		"minimum",
		"minimum",
		"value",
		"OS",
		"handle",
		"OS",
		"minimum",
		"value",
		"OS",
		"handle",
		"OS",
		"value",
		"value",
		"maximum",
		"OS",
		"handle",
		"OS",
		"value",
		"maximum",
		"OS",
		"handle",
		"OS",
		"value",
		"style",
		"SWT",
		"bits",
		"OS",
		"style",
		"SWT",
		"bits",
		"OS",
		"style",
		"SWT",
		"bits",
		"OS",
		"bits",
		"ProgressBarClass",
		"ProgressBarProc",
		"wParam",
		"lParam",
		"result",
		"result",
		"OS",
		"wParam",
		"lParam",
		"result",
		"result",
		"style",
		"SWT",
		"OS",
		"OS",
		"handle",
		"rect",
		"OS",
		"handle",
		"OS",
		"oldBits",
		"rect",
		"rect",
		"MINIMUM_WIDTH",
		"newBits",
		"OS",
		"newBits",
		"OS",
		"newBits",
		"oldBits",
		"OS",
		"handle",
		"OS",
		"newBits",
		"result",
		"wParam",
		"lParam",
		"result",
		"result",
		"style",
		"SWT",
		"OS",
		"handle",
		"OS",
		"OS",
		"bits",
		"OS",
		"wParam",
		"TIMER_ID",
		"OS",
		"handle",
		"OS",
		"result",
		"PROGRESS_CLASS",
		"lpfnWndProc",
		"hInstance",
		"style",
		"CS_GLOBALCLASS",
		"style",
		"CS_DBLCLKS",
		"sizeof",
		"HEAP_ZERO_MEMORY",
		"lpszClassName",
		"NO_FOCUS",
		"HORIZONTAL",
		"VERTICAL",
		"HORIZONTAL",
		"SM_CXHSCROLL",
		"SM_CYHSCROLL",
		"SM_CXVSCROLL",
		"SM_CYVSCROLL",
		"DEFAULT",
		"DEFAULT",
		"COLOR_HIGHLIGHT",
		"PBM_GETRANGE",
		"PBM_GETRANGE",
		"PBM_GETPOS",
		"INDETERMINATE",
		"GWL_STYLE",
		"COMCTL32_MAJOR",
		"PBS_MARQUEE",
		"PBM_SETMARQUEE",
		"INDETERMINATE",
		"GWL_STYLE",
		"COMCTL32_MAJOR",
		"PBS_MARQUEE",
		"PBM_SETMARQUEE",
		"CLR_DEFAULT",
		"PBM_SETBKCOLOR",
		"CLR_DEFAULT",
		"PBM_SETBARCOLOR",
		"PBM_GETRANGE",
		"PBM_SETRANGE32",
		"PBM_GETRANGE",
		"PBM_SETRANGE32",
		"PBM_SETPOS",
		"SMOOTH",
		"PBS_SMOOTH",
		"VERTICAL",
		"PBS_VERTICAL",
		"INDETERMINATE",
		"PBS_MARQUEE",
		"DLGC_STATIC",
		"INDETERMINATE",
		"COMCTL32_MAJOR",
		"GWL_STYLE",
		"right",
		"left",
		"PBS_MARQUEE",
		"PBS_MARQUEE",
		"GWL_STYLE",
		"INDETERMINATE",
		"GWL_STYLE",
		"COMCTL32_MAJOR",
		"PBS_MARQUEE",
		"PBM_STEPIT",
		"parent",
		"style",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"style",
		"wHint",
		"hHint",
		"changed",
		"pixel",
		"pixel",
		"value",
		"value",
		"value",
		"wParam",
		"lParam",
		"wParam",
		"lParam",
		"wParam",
		"lParam"
	],
	"extendORImplementFiles":[
		"Control"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt",
		"org.eclipse.swt.graphics"
	],
	"methods":[
		"callWindowProc",
		"checkStyle",
		"computeSize",
		"createHandle",
		"defaultForeground",
		"getMaximum",
		"getMinimum",
		"getSelection",
		"releaseWidget",
		"startTimer",
		"stopTimer",
		"setBackgroundPixel",
		"setForegroundPixel",
		"setMaximum",
		"setMinimum",
		"setSelection",
		"widgetStyle",
		"windowClass",
		"windowProc",
		"WM_GETDLGCODE",
		"WM_SIZE",
		"WM_TIMER",
		"GetClassInfo",
		"GetModuleHandle",
		"GetProcessHeap",
		"length",
		"HeapAlloc",
		"MoveMemory",
		"RegisterClass",
		"checkStyle",
		"CallWindowProc",
		"checkBits",
		"checkWidget",
		"getBorderWidth",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"createHandle",
		"startTimer",
		"GetSysColor",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"releaseWidget",
		"stopTimer",
		"GetWindowLong",
		"SetTimer",
		"SendMessage",
		"GetWindowLong",
		"KillTimer",
		"SendMessage",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"SendMessage",
		"checkWidget",
		"SendMessage",
		"widgetStyle",
		"WM_GETDLGCODE",
		"WM_SIZE",
		"forceResize",
		"GetClientRect",
		"GetWindowLong",
		"stopTimer",
		"SetWindowLong",
		"startTimer",
		"WM_TIMER",
		"GetWindowLong",
		"SendMessage",
		"TCHAR",
		"WNDCLASS",
		"Point",
		"LRESULT",
		"RECT"
	],
	"methodsBody":{
		"TCHAR windowClass()":{
			"methodBody":"{\n    return ProgressBarClass;\n}",
			"comments":"",
			"methodName":"TCHAR windowClass()"
		},
		"LRESULT WM_SIZE(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_SIZE(wParam, lParam);\n    if (result != null)\n        return result;\n    \n    if ((style & SWT.INDETERMINATE) != 0) {\n        if (OS.COMCTL32_MAJOR >= 6) {\n            forceResize();\n            RECT rect = new RECT();\n            OS.GetClientRect(handle, rect);\n            int oldBits = OS.GetWindowLong(handle, OS.GWL_STYLE);\n            int newBits = oldBits;\n            if (rect.right - rect.left < MINIMUM_WIDTH) {\n                newBits &= ~OS.PBS_MARQUEE;\n            } else {\n                newBits |= OS.PBS_MARQUEE;\n            }\n            if (newBits != oldBits) {\n                stopTimer();\n                OS.SetWindowLong(handle, OS.GWL_STYLE, newBits);\n                startTimer();\n            }\n        }\n    }\n    return result;\n}",
			"comments":"/*\n* Feature in Windows.  When a progress bar with the style\n* PBS_MARQUEE becomes too small, the animation (currently\n* a small bar moving from right to left) does not have\n* enough space to draw.  The result is that the progress\n* bar does not appear to be moving.  The fix is to detect\n* this case, clear the PBS_MARQUEE style and emulate the\n* animation using PBM_STEPIT.\n*\n* NOTE:  This only happens on Window XP.\n*/\n",
			"methodName":"LRESULT WM_SIZE(int wParam, int lParam)"
		},
		"public int getMinimum()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.PBM_GETRANGE, 1, 0);\n}",
			"comments":"/**\n* Returns the minimum value which the receiver will allow.\n*\n* @return the minimum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getMinimum()"
		},
		"void setBackgroundPixel(int pixel)":{
			"methodBody":"{\n    if (background == pixel)\n        return;\n    background = pixel;\n    if (pixel == -1)\n        pixel = OS.CLR_DEFAULT;\n    OS.SendMessage(handle, OS.PBM_SETBKCOLOR, 0, pixel);\n}",
			"comments":"",
			"methodName":"void setBackgroundPixel(int pixel)"
		},
		"void startTimer()":{
			"methodBody":"{\n    if ((style & SWT.INDETERMINATE) != 0) {\n        int bits = OS.GetWindowLong(handle, OS.GWL_STYLE);\n        if (OS.COMCTL32_MAJOR < 6 || (bits & OS.PBS_MARQUEE) == 0) {\n            OS.SetTimer(handle, TIMER_ID, DELAY, 0);\n        } else {\n            OS.SendMessage(handle, OS.PBM_SETMARQUEE, 1, DELAY);\n        }\n    }\n}",
			"comments":"",
			"methodName":"void startTimer()"
		},
		"int defaultForeground()":{
			"methodBody":"{\n    return OS.GetSysColor(OS.COLOR_HIGHLIGHT);\n}",
			"comments":"",
			"methodName":"int defaultForeground()"
		},
		"void createHandle()":{
			"methodBody":"{\n    super.createHandle();\n    startTimer();\n}",
			"comments":"",
			"methodName":"void createHandle()"
		},
		"LRESULT WM_TIMER(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_TIMER(wParam, lParam);\n    if (result != null)\n        return result;\n    if ((style & SWT.INDETERMINATE) != 0) {\n        int bits = OS.GetWindowLong(handle, OS.GWL_STYLE);\n        if (OS.COMCTL32_MAJOR < 6 || (bits & OS.PBS_MARQUEE) == 0) {\n            if (wParam == TIMER_ID) {\n                OS.SendMessage(handle, OS.PBM_STEPIT, 0, 0);\n            }\n        }\n    }\n    return result;\n}",
			"comments":"",
			"methodName":"LRESULT WM_TIMER(int wParam, int lParam)"
		},
		"void stopTimer()":{
			"methodBody":"{\n    if ((style & SWT.INDETERMINATE) != 0) {\n        int bits = OS.GetWindowLong(handle, OS.GWL_STYLE);\n        if (OS.COMCTL32_MAJOR < 6 || (bits & OS.PBS_MARQUEE) == 0) {\n            OS.KillTimer(handle, TIMER_ID);\n        } else {\n            OS.SendMessage(handle, OS.PBM_SETMARQUEE, 0, 0);\n        }\n    }\n}",
			"comments":"",
			"methodName":"void stopTimer()"
		},
		"public int getMaximum()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.PBM_GETRANGE, 0, 0);\n}",
			"comments":"/**\n* Returns the maximum value which the receiver will allow.\n*\n* @return the maximum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getMaximum()"
		},
		"public void setSelection(int value)":{
			"methodBody":"{\n    checkWidget();\n    OS.SendMessage(handle, OS.PBM_SETPOS, value, 0);\n}",
			"comments":"/**\n* Sets the single 'selection' that is the receiver's\n* position to the argument which must be greater than or equal\n* to zero.\n*\n* @param value the new selection (must be zero or greater)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setSelection(int value)"
		},
		"public int getSelection()":{
			"methodBody":"{\n    checkWidget();\n    return OS.SendMessage(handle, OS.PBM_GETPOS, 0, 0);\n}",
			"comments":"/**\n* Returns the single 'selection' that is the receiver's position.\n*\n* @return the selection\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getSelection()"
		},
		"void releaseWidget()":{
			"methodBody":"{\n    super.releaseWidget();\n    stopTimer();\n}",
			"comments":"",
			"methodName":"void releaseWidget()"
		},
		"LRESULT WM_GETDLGCODE(int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.WM_GETDLGCODE(wParam, lParam);\n    if (result != null)\n        return result;\n    \n    return new LRESULT(OS.DLGC_STATIC);\n}",
			"comments":"/*\n* Feature in Windows.  The progress bar does\n* not implement WM_GETDLGCODE.  As a result,\n* a progress bar takes focus and takes part\n* in tab traversal.  This behavior, while\n* unspecified, is unwanted.  The fix is to\n* implement WM_GETDLGCODE to behave like a\n* STATIC control.\n*/\n",
			"methodName":"LRESULT WM_GETDLGCODE(int wParam, int lParam)"
		},
		"public void setMinimum(int value)":{
			"methodBody":"{\n    checkWidget();\n    int maximum = OS.SendMessage(handle, OS.PBM_GETRANGE, 0, 0);\n    if (0 <= value && value < maximum) {\n        OS.SendMessage(handle, OS.PBM_SETRANGE32, value, maximum);\n    }\n}",
			"comments":"/**\n* Sets the minimum value that the receiver will allow.  This new\n* value will be ignored if it is negative or is not less than the receiver's\n* current maximum value.  If the new minimum is applied then the receiver's\n* selection value will be adjusted if necessary to fall within its new range.\n*\n* @param value the new minimum, which must be nonnegative and less than the current maximum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMinimum(int value)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    style |= SWT.NO_FOCUS;\n    return checkBits(style, SWT.HORIZONTAL, SWT.VERTICAL, 0, 0, 0, 0);\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"int windowProc()":{
			"methodBody":"{\n    return ProgressBarProc;\n}",
			"comments":"",
			"methodName":"int windowProc()"
		},
		"public void setMaximum(int value)":{
			"methodBody":"{\n    checkWidget();\n    int minimum = OS.SendMessage(handle, OS.PBM_GETRANGE, 1, 0);\n    if (0 <= minimum && minimum < value) {\n        OS.SendMessage(handle, OS.PBM_SETRANGE32, minimum, value);\n    }\n}",
			"comments":"/**\n* Sets the maximum value that the receiver will allow.  This new\n* value will be ignored if it is not greater than the receiver's current\n* minimum value.  If the new maximum is applied then the receiver's\n* selection value will be adjusted if necessary to fall within its new range.\n*\n* @param value the new maximum, which must be greater than the current minimum\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMaximum(int value)"
		},
		"int callWindowProc(int hwnd, int msg, int wParam, int lParam)":{
			"methodBody":"{\n    if (handle == 0)\n        return 0;\n    return OS.CallWindowProc(ProgressBarProc, hwnd, msg, wParam, lParam);\n}",
			"comments":"",
			"methodName":"int callWindowProc(int hwnd, int msg, int wParam, int lParam)"
		},
		"public Point computeSize(int wHint, int hHint, boolean changed)":{
			"methodBody":"{\n    checkWidget();\n    int border = getBorderWidth();\n    int width = border * 2, height = border * 2;\n    if ((style & SWT.HORIZONTAL) != 0) {\n        width += OS.GetSystemMetrics(OS.SM_CXHSCROLL) * 10;\n        height += OS.GetSystemMetrics(OS.SM_CYHSCROLL);\n    } else {\n        width += OS.GetSystemMetrics(OS.SM_CXVSCROLL);\n        height += OS.GetSystemMetrics(OS.SM_CYVSCROLL) * 10;\n    }\n    if (wHint != SWT.DEFAULT)\n        width = wHint + (border * 2);\n    if (hHint != SWT.DEFAULT)\n        height = hHint + (border * 2);\n    return new Point(width, height);\n}",
			"comments":"",
			"methodName":"public Point computeSize(int wHint, int hHint, boolean changed)"
		},
		"void setForegroundPixel(int pixel)":{
			"methodBody":"{\n    if (foreground == pixel)\n        return;\n    foreground = pixel;\n    if (pixel == -1)\n        pixel = OS.CLR_DEFAULT;\n    OS.SendMessage(handle, OS.PBM_SETBARCOLOR, 0, pixel);\n}",
			"comments":"",
			"methodName":"void setForegroundPixel(int pixel)"
		},
		"int widgetStyle()":{
			"methodBody":"{\n    int bits = super.widgetStyle();\n    if ((style & SWT.SMOOTH) != 0)\n        bits |= OS.PBS_SMOOTH;\n    if ((style & SWT.VERTICAL) != 0)\n        bits |= OS.PBS_VERTICAL;\n    if ((style & SWT.INDETERMINATE) != 0)\n        bits |= OS.PBS_MARQUEE;\n    return bits;\n}",
			"comments":"",
			"methodName":"int widgetStyle()"
		}
	},
	"ClassORInterfaceName":[
		"ProgressBar"
	]
}
