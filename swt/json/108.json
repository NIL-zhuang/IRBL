{
	"variables":[
		"_instance",
		"CF_UNICODETEXT",
		"CF_TEXT",
		"CF_UNICODETEXTID",
		"CF_TEXTID",
		"string",
		"charCount",
		"chars",
		"byteCount",
		"newPtr",
		"count",
		"chars",
		"codePage",
		"cchMultiByte",
		"lpMultiByteStr",
		"data",
		"formatetc",
		"stgmedium",
		"hMem",
		"size",
		"chars",
		"ptr",
		"length",
		"i",
		"lpMultiByteStr",
		"codePage",
		"cchWideChar",
		"lpWideCharStr",
		"COM",
		"COM",
		"_instance",
		"object",
		"transferData",
		"DND",
		"DND",
		"transferData",
		"COM",
		"object",
		"transferData",
		"COM",
		"string",
		"charCount",
		"string",
		"charCount",
		"chars",
		"chars",
		"OS",
		"COM",
		"COM",
		"byteCount",
		"OS",
		"newPtr",
		"chars",
		"byteCount",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"newPtr",
		"transferData",
		"transferData",
		"COM",
		"COM",
		"string",
		"count",
		"string",
		"count",
		"chars",
		"OS",
		"OS",
		"codePage",
		"chars",
		"cchMultiByte",
		"transferData",
		"transferData",
		"COM",
		"OS",
		"COM",
		"COM",
		"cchMultiByte",
		"OS",
		"codePage",
		"chars",
		"lpMultiByteStr",
		"cchMultiByte",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"lpMultiByteStr",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"transferData",
		"transferData",
		"data",
		"transferData",
		"stgmedium",
		"COM",
		"transferData",
		"data",
		"formatetc",
		"stgmedium",
		"data",
		"transferData",
		"COM",
		"stgmedium",
		"transferData",
		"CF_UNICODETEXTID",
		"OS",
		"hMem",
		"size",
		"size",
		"OS",
		"hMem",
		"ptr",
		"OS",
		"chars",
		"ptr",
		"size",
		"chars",
		"i",
		"chars",
		"i",
		"chars",
		"i",
		"length",
		"i",
		"chars",
		"length",
		"OS",
		"hMem",
		"CF_TEXTID",
		"OS",
		"hMem",
		"lpMultiByteStr",
		"OS",
		"OS",
		"codePage",
		"OS",
		"lpMultiByteStr",
		"cchWideChar",
		"cchWideChar",
		"OS",
		"codePage",
		"OS",
		"lpMultiByteStr",
		"lpWideCharStr",
		"lpWideCharStr",
		"lpWideCharStr",
		"OS",
		"hMem",
		"OS",
		"hMem",
		"CF_UNICODETEXTID",
		"CF_TEXTID",
		"CF_UNICODETEXT",
		"CF_TEXT",
		"object",
		"object",
		"object",
		"object",
		"CF_UNICODETEXT",
		"CF_TEXT",
		"ERROR_INVALID_DATA",
		"result",
		"E_FAIL",
		"type",
		"CF_UNICODETEXT",
		"length",
		"GMEM_FIXED",
		"GMEM_ZEROINIT",
		"stgmedium",
		"tymed",
		"stgmedium",
		"TYMED_HGLOBAL",
		"unionField",
		"stgmedium",
		"pUnkForRelease",
		"stgmedium",
		"result",
		"S_OK",
		"CF_TEXT",
		"stgmedium",
		"result",
		"DV_E_STGMEDIUM",
		"GMEM_FIXED",
		"GMEM_ZEROINIT",
		"stgmedium",
		"tymed",
		"stgmedium",
		"TYMED_HGLOBAL",
		"unionField",
		"stgmedium",
		"pUnkForRelease",
		"stgmedium",
		"result",
		"S_OK",
		"pIDataObject",
		"pIDataObject",
		"formatetc",
		"tymed",
		"TYMED_HGLOBAL",
		"result",
		"result",
		"S_OK",
		"unionField",
		"type",
		"length",
		"length",
		"MB_PRECOMPOSED",
		"MB_PRECOMPOSED",
		"length",
		"object",
		"transferData",
		"transferData",
		"object",
		"object"
	],
	"extendORImplementFiles":[
		"ByteArrayTransfer"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"getInstance",
		"javaToNative",
		"nativeToJava",
		"getTypeIds",
		"getTypeNames",
		"checkText",
		"validate",
		"checkText",
		"isSupportedType",
		"error",
		"length",
		"getChars",
		"GlobalAlloc",
		"MoveMemory",
		"length",
		"getChars",
		"GetACP",
		"WideCharToMultiByte",
		"GlobalAlloc",
		"WideCharToMultiByte",
		"isSupportedType",
		"AddRef",
		"GetData",
		"Release",
		"GlobalSize",
		"GlobalLock",
		"MoveMemory",
		"GlobalUnlock",
		"GlobalLock",
		"GetACP",
		"MultiByteToWideChar",
		"MultiByteToWideChar",
		"GlobalUnlock",
		"GlobalFree",
		"length",
		"checkText",
		"TextTransfer",
		"STGMEDIUM",
		"STGMEDIUM",
		"STGMEDIUM",
		"IDataObject",
		"STGMEDIUM",
		"String",
		"String"
	],
	"methodsBody":{
		"public Object nativeToJava(TransferData transferData)":{
			"methodBody":"{\n    if (!isSupportedType(transferData) || transferData.pIDataObject == 0)\n        return null;\n    IDataObject data = new IDataObject(transferData.pIDataObject);\n    data.AddRef();\n    FORMATETC formatetc = transferData.formatetc;\n    STGMEDIUM stgmedium = new STGMEDIUM();\n    stgmedium.tymed = COM.TYMED_HGLOBAL;\n    transferData.result = data.GetData(formatetc, stgmedium);\n    data.Release();\n    if (transferData.result != COM.S_OK)\n        return null;\n    int hMem = stgmedium.unionField;\n    try {\n        switch(transferData.type) {\n            case CF_UNICODETEXTID:\n                {\n                    \n                    int size = OS.GlobalSize(hMem) / 2 * 2;\n                    if (size == 0)\n                        return null;\n                    char[] chars = new char[size / 2];\n                    int ptr = OS.GlobalLock(hMem);\n                    if (ptr == 0)\n                        return null;\n                    try {\n                        OS.MoveMemory(chars, ptr, size);\n                        int length = chars.length;\n                        for (int i = 0; i < chars.length; i++) {\n                            if (chars[i] == '\\0') {\n                                length = i;\n                                break;\n                            }\n                        }\n                        return new String(chars, 0, length);\n                    } finally {\n                        OS.GlobalUnlock(hMem);\n                    }\n                }\n            case CF_TEXTID:\n                {\n                    int lpMultiByteStr = OS.GlobalLock(hMem);\n                    if (lpMultiByteStr == 0)\n                        return null;\n                    try {\n                        int codePage = OS.GetACP();\n                        int cchWideChar = OS.MultiByteToWideChar(codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);\n                        if (cchWideChar == 0)\n                            return null;\n                        char[] lpWideCharStr = new char[cchWideChar - 1];\n                        OS.MultiByteToWideChar(codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);\n                        return new String(lpWideCharStr);\n                    } finally {\n                        OS.GlobalUnlock(hMem);\n                    }\n                }\n        }\n    } finally {\n        OS.GlobalFree(hMem);\n    }\n    return null;\n}",
			"comments":"/**\n* This implementation of <code>nativeToJava</code> converts a platform specific\n* representation of plain text to a java <code>String</code>.\n*\n* @param transferData the platform specific representation of the data to be converted\n* @return a java <code>String</code> containing text if the conversion was successful; otherwise null\n*\n* @see Transfer#nativeToJava\n*/\n/* Ensure byteCount is a multiple of 2 bytes */\n",
			"methodName":"public Object nativeToJava(TransferData transferData)"
		},
		"protected int[] getTypeIds()":{
			"methodBody":"{\n    return new int[] { CF_UNICODETEXTID, CF_TEXTID };\n}",
			"comments":"",
			"methodName":"protected int[] getTypeIds()"
		},
		"protected String[] getTypeNames()":{
			"methodBody":"{\n    return new String[] { CF_UNICODETEXT, CF_TEXT };\n}",
			"comments":"",
			"methodName":"protected String[] getTypeNames()"
		},
		"protected boolean validate(Object object)":{
			"methodBody":"{\n    return checkText(object);\n}",
			"comments":"",
			"methodName":"protected boolean validate(Object object)"
		},
		"public static TextTransfer getInstance()":{
			"methodBody":"{\n    return _instance;\n}",
			"comments":"/**\n* Returns the singleton instance of the TextTransfer class.\n*\n* @return the singleton instance of the TextTransfer class\n*/\n",
			"methodName":"public static TextTransfer getInstance()"
		},
		"public void javaToNative(Object object, TransferData transferData)":{
			"methodBody":"{\n    if (!checkText(object) || !isSupportedType(transferData)) {\n        DND.error(DND.ERROR_INVALID_DATA);\n    }\n    transferData.result = COM.E_FAIL;\n    String string = (String) object;\n    switch(transferData.type) {\n        case COM.CF_UNICODETEXT:\n            {\n                int charCount = string.length();\n                char[] chars = new char[charCount + 1];\n                string.getChars(0, charCount, chars, 0);\n                int byteCount = chars.length * 2;\n                int newPtr = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, byteCount);\n                OS.MoveMemory(newPtr, chars, byteCount);\n                transferData.stgmedium = new STGMEDIUM();\n                transferData.stgmedium.tymed = COM.TYMED_HGLOBAL;\n                transferData.stgmedium.unionField = newPtr;\n                transferData.stgmedium.pUnkForRelease = 0;\n                transferData.result = COM.S_OK;\n                break;\n            }\n        case COM.CF_TEXT:\n            {\n                int count = string.length();\n                char[] chars = new char[count + 1];\n                string.getChars(0, count, chars, 0);\n                int codePage = OS.GetACP();\n                int cchMultiByte = OS.WideCharToMultiByte(codePage, 0, chars, -1, null, 0, null, null);\n                if (cchMultiByte == 0) {\n                    transferData.stgmedium = new STGMEDIUM();\n                    transferData.result = COM.DV_E_STGMEDIUM;\n                    return;\n                }\n                int lpMultiByteStr = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, cchMultiByte);\n                OS.WideCharToMultiByte(codePage, 0, chars, -1, lpMultiByteStr, cchMultiByte, null, null);\n                transferData.stgmedium = new STGMEDIUM();\n                transferData.stgmedium.tymed = COM.TYMED_HGLOBAL;\n                transferData.stgmedium.unionField = lpMultiByteStr;\n                transferData.stgmedium.pUnkForRelease = 0;\n                transferData.result = COM.S_OK;\n                break;\n            }\n    }\n    return;\n}",
			"comments":"/**\n* This implementation of <code>javaToNative</code> converts plain text\n* represented by a java <code>String</code> to a platform specific representation.\n*\n* @param object a java <code>String</code> containing text\n* @param transferData an empty <code>TransferData</code> object; this object\n*  will be filled in on return with the platform specific format of the data\n*\n* @see Transfer#javaToNative\n*/\n",
			"methodName":"public void javaToNative(Object object, TransferData transferData)"
		},
		"boolean checkText(Object object)":{
			"methodBody":"{\n    return (object != null && object instanceof String && ((String) object).length() > 0);\n}",
			"comments":"",
			"methodName":"boolean checkText(Object object)"
		}
	},
	"ClassORInterfaceName":[
		"TextTransfer"
	]
}
