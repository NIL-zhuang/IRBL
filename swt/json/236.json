{
	"variables":[
		"stride",
		"bpl",
		"newBpl",
		"newData",
		"srcIndex",
		"destIndex",
		"y",
		"shapeDataStride",
		"maskDataStride",
		"dataSize",
		"paletteSize",
		"header",
		"size",
		"fileHeader",
		"numIcons",
		"fileHeader",
		"numIcons",
		"numIcons",
		"headers",
		"icons",
		"i",
		"infoHeader",
		"bmpFormat",
		"palette",
		"shapeData",
		"width",
		"height",
		"depth",
		"maskData",
		"headers",
		"i",
		"width",
		"height",
		"numColors",
		"infoHeader",
		"infoWidth",
		"infoHeight",
		"bitCount",
		"sizeImage",
		"rgbs",
		"headerSize",
		"offset",
		"iconSize",
		"mask",
		"bpl",
		"pad",
		"srcBpl",
		"destBpl",
		"buf",
		"offset",
		"data",
		"i",
		"bpl",
		"pad",
		"srcBpl",
		"destBpl",
		"buf",
		"offset",
		"data",
		"i",
		"pad",
		"newPad",
		"data",
		"width",
		"depth",
		"stride",
		"pad",
		"pad",
		"pad",
		"stride",
		"newPad",
		"newPad",
		"newPad",
		"height",
		"newBpl",
		"y",
		"height",
		"y",
		"System",
		"data",
		"srcIndex",
		"newData",
		"destIndex",
		"newBpl",
		"srcIndex",
		"bpl",
		"destIndex",
		"newBpl",
		"newData",
		"i",
		"i",
		"i",
		"shapeDataStride",
		"maskDataStride",
		"i",
		"i",
		"i",
		"WinBMPFileFormat",
		"paletteSize",
		"dataSize",
		"stream",
		"header",
		"stream",
		"header",
		"header",
		"header",
		"header",
		"header",
		"i",
		"i",
		"i",
		"size",
		"size",
		"size",
		"size",
		"i",
		"fileHeader",
		"byteStream",
		"fileHeader",
		"byteStream",
		"fileHeader",
		"byteStream",
		"SWT",
		"SWT",
		"e",
		"fileHeader",
		"fileHeader",
		"SWT",
		"SWT",
		"fileHeader",
		"numIcons",
		"SWT",
		"SWT",
		"numIcons",
		"hasHeader",
		"fileHeader",
		"byteStream",
		"fileHeader",
		"byteStream",
		"fileHeader",
		"fileHeader",
		"fileHeader",
		"byteStream",
		"SWT",
		"SWT",
		"e",
		"fileHeader",
		"fileHeader",
		"SWT",
		"SWT",
		"fileHeader",
		"numIcons",
		"SWT",
		"SWT",
		"numIcons",
		"inputStream",
		"numIcons",
		"headers",
		"i",
		"icons",
		"i",
		"icons",
		"i",
		"headers",
		"i",
		"icons",
		"iconHeader",
		"bmpFormat",
		"inputStream",
		"bmpFormat",
		"infoHeader",
		"bmpFormat",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"bmpFormat",
		"infoHeader",
		"maskData",
		"maskData",
		"width",
		"height",
		"maskData",
		"maskData",
		"ImageData",
		"width",
		"height",
		"depth",
		"palette",
		"shapeData",
		"maskData",
		"SWT",
		"numIcons",
		"i",
		"numIcons",
		"i",
		"headers",
		"i",
		"inputStream",
		"headers",
		"i",
		"inputStream",
		"headers",
		"i",
		"inputStream",
		"headers",
		"i",
		"inputStream",
		"headers",
		"i",
		"inputStream",
		"headers",
		"i",
		"inputStream",
		"headers",
		"i",
		"inputStream",
		"SWT",
		"SWT",
		"e",
		"headers",
		"iconHeader",
		"iconHeader",
		"iconHeader",
		"numColors",
		"numColors",
		"numColors",
		"numColors",
		"numColors",
		"numColors",
		"numColors",
		"SWT",
		"SWT",
		"inputStream",
		"iconHeader",
		"inputStream",
		"iconHeader",
		"inputStream",
		"SWT",
		"SWT",
		"e",
		"WinBMPFileFormat",
		"inputStream",
		"infoHeader",
		"SWT",
		"SWT",
		"e",
		"infoHeader",
		"infoHeader",
		"SWT",
		"SWT",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"infoHeader",
		"height",
		"infoHeight",
		"bitCount",
		"height",
		"width",
		"infoWidth",
		"height",
		"infoHeight",
		"bitCount",
		"bitCount",
		"bitCount",
		"bitCount",
		"bitCount",
		"SWT",
		"SWT",
		"infoHeader",
		"height",
		"infoHeader",
		"height",
		"infoHeader",
		"height",
		"infoHeader",
		"height",
		"infoHeader",
		"icon",
		"icon",
		"icon",
		"icon",
		"outputStream",
		"WinBMPFileFormat",
		"outputStream",
		"icon",
		"outputStream",
		"icon",
		"outputStream",
		"outputStream",
		"icon",
		"outputStream",
		"outputStream",
		"sizeImage",
		"outputStream",
		"outputStream",
		"outputStream",
		"icon",
		"icon",
		"outputStream",
		"SWT",
		"SWT",
		"e",
		"WinBMPFileFormat",
		"icon",
		"outputStream",
		"rgbs",
		"SWT",
		"SWT",
		"e",
		"icon",
		"icon",
		"headerSize",
		"i",
		"outputStream",
		"i",
		"outputStream",
		"i",
		"outputStream",
		"i",
		"i",
		"outputStream",
		"outputStream",
		"outputStream",
		"iconSize",
		"outputStream",
		"offset",
		"SWT",
		"SWT",
		"e",
		"image",
		"SWT",
		"SWT",
		"outputStream",
		"outputStream",
		"outputStream",
		"SWT",
		"SWT",
		"e",
		"image",
		"image",
		"icon",
		"icon",
		"mask",
		"bpl",
		"pad",
		"pad",
		"pad",
		"bpl",
		"destBpl",
		"icon",
		"srcBpl",
		"mask",
		"i",
		"icon",
		"i",
		"System",
		"data",
		"offset",
		"buf",
		"bpl",
		"buf",
		"bpl",
		"outputStream",
		"buf",
		"destBpl",
		"offset",
		"srcBpl",
		"SWT",
		"SWT",
		"e",
		"icon",
		"icon",
		"icon",
		"bpl",
		"pad",
		"pad",
		"pad",
		"bpl",
		"destBpl",
		"icon",
		"srcBpl",
		"icon",
		"i",
		"icon",
		"i",
		"System",
		"data",
		"offset",
		"buf",
		"bpl",
		"outputStream",
		"buf",
		"destBpl",
		"offset",
		"srcBpl",
		"SWT",
		"SWT",
		"e",
		"width",
		"depth",
		"width",
		"height",
		"colors",
		"palette",
		"length",
		"colors",
		"palette",
		"BMPHeaderFixedSize",
		"depth",
		"isDirect",
		"palette",
		"length",
		"colors",
		"palette",
		"isDirect",
		"palette",
		"ERROR_IO",
		"ERROR_INVALID_IMAGE",
		"ERROR_INVALID_IMAGE",
		"ERROR_IO",
		"ERROR_INVALID_IMAGE",
		"ERROR_INVALID_IMAGE",
		"length",
		"length",
		"inputStream",
		"length",
		"IMAGE_ICO",
		"ERROR_IO",
		"ERROR_INVALID_IMAGE",
		"ERROR_IO",
		"BMPHeaderFixedSize",
		"ERROR_IO",
		"ERROR_INVALID_IMAGE",
		"ERROR_INVALID_IMAGE",
		"width",
		"depth",
		"width",
		"height",
		"BMPHeaderFixedSize",
		"width",
		"height",
		"depth",
		"colors",
		"palette",
		"length",
		"colors",
		"palette",
		"ERROR_IO",
		"palette",
		"ERROR_IO",
		"width",
		"height",
		"colors",
		"palette",
		"length",
		"colors",
		"palette",
		"ERROR_IO",
		"ERROR_INVALID_IMAGE",
		"ERROR_IO",
		"width",
		"scanlinePad",
		"height",
		"data",
		"height",
		"ERROR_IO",
		"width",
		"depth",
		"scanlinePad",
		"height",
		"data",
		"height",
		"ERROR_IO",
		"data",
		"width",
		"height",
		"depth",
		"pad",
		"newPad",
		"i",
		"stream",
		"e",
		"i",
		"byteStream",
		"e",
		"byteStream",
		"hasHeader",
		"e",
		"iconHeader",
		"numIcons",
		"e",
		"iconHeader",
		"e",
		"e",
		"icon",
		"e",
		"e",
		"i",
		"e",
		"image",
		"e",
		"icon",
		"e",
		"icon",
		"e"
	],
	"extendORImplementFiles":[
		"FileFormat"
	],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"java.io"
	],
	"methods":[
		"convertPad",
		"iconSize",
		"isFileFormat",
		"isValidIcon",
		"loadFileHeader",
		"loadFileHeader",
		"loadFromByteStream",
		"loadIcon",
		"loadIconHeaders",
		"loadInfoHeader",
		"unloadIcon",
		"unloadIconHeader",
		"unloadIntoByteStream",
		"unloadMaskData",
		"unloadShapeData",
		"arraycopy",
		"read",
		"unread",
		"readShort",
		"readShort",
		"readShort",
		"error",
		"error",
		"error",
		"readShort",
		"readShort",
		"readShort",
		"error",
		"error",
		"error",
		"loadFileHeader",
		"loadIconHeaders",
		"loadIcon",
		"loadInfoHeader",
		"loadPalette",
		"loadData",
		"loadData",
		"convertPad",
		"bitInvertData",
		"internal_new",
		"read",
		"read",
		"readShort",
		"readShort",
		"readShort",
		"readInt",
		"readInt",
		"error",
		"error",
		"getPosition",
		"skip",
		"getPosition",
		"error",
		"read",
		"error",
		"error",
		"error",
		"writeInt",
		"writeInt",
		"writeInt",
		"writeShort",
		"writeShort",
		"writeInt",
		"writeInt",
		"writeInt",
		"writeInt",
		"writeInt",
		"writeInt",
		"error",
		"paletteToBytes",
		"write",
		"error",
		"unloadShapeData",
		"unloadMaskData",
		"iconSize",
		"writeByte",
		"writeByte",
		"writeShort",
		"writeShort",
		"writeShort",
		"writeInt",
		"writeInt",
		"error",
		"isValidIcon",
		"error",
		"writeShort",
		"writeShort",
		"writeShort",
		"error",
		"unloadIconHeader",
		"unloadIcon",
		"getTransparencyMask",
		"arraycopy",
		"bitInvertData",
		"write",
		"error",
		"arraycopy",
		"write",
		"error",
		"WinBMPFileFormat"
	],
	"methodsBody":{
		"ImageData[] loadFromByteStream()":{
			"methodBody":"{\n    int numIcons = loadFileHeader(inputStream);\n    int[][] headers = loadIconHeaders(numIcons);\n    ImageData[] icons = new ImageData[headers.length];\n    for (int i = 0; i < icons.length; i++) {\n        icons[i] = loadIcon(headers[i]);\n    }\n    return icons;\n}",
			"comments":"",
			"methodName":"ImageData[] loadFromByteStream()"
		},
		"static final byte[] convertPad(byte[] data, int width, int height, int depth, int pad, int newPad)":{
			"methodBody":"{\n    if (pad == newPad)\n        return data;\n    int stride = (width * depth + 7) / 8;\n    int bpl = (stride + (pad - 1)) / pad * pad;\n    int newBpl = (stride + (newPad - 1)) / newPad * newPad;\n    byte[] newData = new byte[height * newBpl];\n    int srcIndex = 0, destIndex = 0;\n    for (int y = 0; y < height; y++) {\n        System.arraycopy(data, srcIndex, newData, destIndex, newBpl);\n        srcIndex += bpl;\n        destIndex += newBpl;\n    }\n    return newData;\n}",
			"comments":"",
			"methodName":"static final byte[] convertPad(byte[] data, int width, int height, int depth, int pad, int newPad)"
		},
		"void unloadIcon(ImageData icon)":{
			"methodBody":"{\n    int sizeImage = (((icon.width * icon.depth + 31) / 32 * 4) + ((icon.width + 31) / 32 * 4)) * icon.height;\n    try {\n        outputStream.writeInt(WinBMPFileFormat.BMPHeaderFixedSize);\n        outputStream.writeInt(icon.width);\n        outputStream.writeInt(icon.height * 2);\n        outputStream.writeShort(1);\n        outputStream.writeShort((short) icon.depth);\n        outputStream.writeInt(0);\n        outputStream.writeInt(sizeImage);\n        outputStream.writeInt(0);\n        outputStream.writeInt(0);\n        outputStream.writeInt(icon.palette.colors != null ? icon.palette.colors.length : 0);\n        outputStream.writeInt(0);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    byte[] rgbs = WinBMPFileFormat.paletteToBytes(icon.palette);\n    try {\n        outputStream.write(rgbs);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    unloadShapeData(icon);\n    unloadMaskData(icon);\n}",
			"comments":"/**\n* Unload a single icon\n*/\n",
			"methodName":"void unloadIcon(ImageData icon)"
		},
		"int loadFileHeader(LEDataInputStream byteStream)":{
			"methodBody":"{\n    int[] fileHeader = new int[3];\n    try {\n        fileHeader[0] = byteStream.readShort();\n        fileHeader[1] = byteStream.readShort();\n        fileHeader[2] = byteStream.readShort();\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    if ((fileHeader[0] != 0) || (fileHeader[1] != 1))\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    int numIcons = fileHeader[2];\n    if (numIcons <= 0)\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    return numIcons;\n}",
			"comments":"",
			"methodName":"int loadFileHeader(LEDataInputStream byteStream)"
		},
		"void unloadIconHeader(ImageData i)":{
			"methodBody":"{\n    int headerSize = 16;\n    int offset = headerSize + 6;\n    int iconSize = iconSize(i);\n    try {\n        outputStream.writeByte((byte) i.width);\n        outputStream.writeByte((byte) i.height);\n        outputStream.writeShort(i.palette.colors != null ? i.palette.colors.length : 0);\n        outputStream.writeShort(0);\n        outputStream.writeShort(0);\n        outputStream.writeInt(iconSize);\n        outputStream.writeInt(offset);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n}",
			"comments":"/**\n* Unload the icon header for the given icon, calculating the offset.\n*/\n",
			"methodName":"void unloadIconHeader(ImageData i)"
		},
		"int loadFileHeader(LEDataInputStream byteStream, boolean hasHeader)":{
			"methodBody":"{\n    int[] fileHeader = new int[3];\n    try {\n        if (hasHeader) {\n            fileHeader[0] = byteStream.readShort();\n            fileHeader[1] = byteStream.readShort();\n        } else {\n            fileHeader[0] = 0;\n            fileHeader[1] = 1;\n        }\n        fileHeader[2] = byteStream.readShort();\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    if ((fileHeader[0] != 0) || (fileHeader[1] != 1))\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    int numIcons = fileHeader[2];\n    if (numIcons <= 0)\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    return numIcons;\n}",
			"comments":"",
			"methodName":"int loadFileHeader(LEDataInputStream byteStream, boolean hasHeader)"
		},
		"int iconSize(ImageData i)":{
			"methodBody":"{\n    int shapeDataStride = (i.width * i.depth + 31) / 32 * 4;\n    int maskDataStride = (i.width + 31) / 32 * 4;\n    int dataSize = (shapeDataStride + maskDataStride) * i.height;\n    int paletteSize = i.palette.colors != null ? i.palette.colors.length * 4 : 0;\n    return WinBMPFileFormat.BMPHeaderFixedSize + paletteSize + dataSize;\n}",
			"comments":"/**\n* Answer the size in bytes of the file representation of the given\n* icon\n*/\n",
			"methodName":"int iconSize(ImageData i)"
		},
		"int[][] loadIconHeaders(int numIcons)":{
			"methodBody":"{\n    int[][] headers = new int[numIcons][7];\n    try {\n        for (int i = 0; i < numIcons; i++) {\n            headers[i][0] = inputStream.read();\n            headers[i][1] = inputStream.read();\n            headers[i][2] = inputStream.readShort();\n            headers[i][3] = inputStream.readShort();\n            headers[i][4] = inputStream.readShort();\n            headers[i][5] = inputStream.readInt();\n            headers[i][6] = inputStream.readInt();\n        }\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    return headers;\n}",
			"comments":"",
			"methodName":"int[][] loadIconHeaders(int numIcons)"
		},
		"boolean isValidIcon(ImageData i)":{
			"methodBody":"{\n    switch(i.depth) {\n        case 1:\n        case 4:\n        case 8:\n            if (i.palette.isDirect)\n                return false;\n            int size = i.palette.colors.length;\n            return size == 2 || size == 16 || size == 32 || size == 256;\n        case 24:\n        case 32:\n            return i.palette.isDirect;\n    }\n    return false;\n}",
			"comments":"",
			"methodName":"boolean isValidIcon(ImageData i)"
		},
		"boolean isFileFormat(LEDataInputStream stream)":{
			"methodBody":"{\n    try {\n        byte[] header = new byte[4];\n        stream.read(header);\n        stream.unread(header);\n        return header[0] == 0 && header[1] == 0 && header[2] == 1 && header[3] == 0;\n    } catch (Exception e) {\n        return false;\n    }\n}",
			"comments":"",
			"methodName":"boolean isFileFormat(LEDataInputStream stream)"
		},
		"ImageData loadIcon(int[] iconHeader)":{
			"methodBody":"{\n    byte[] infoHeader = loadInfoHeader(iconHeader);\n    WinBMPFileFormat bmpFormat = new WinBMPFileFormat();\n    bmpFormat.inputStream = inputStream;\n    PaletteData palette = bmpFormat.loadPalette(infoHeader);\n    byte[] shapeData = bmpFormat.loadData(infoHeader);\n    int width = (infoHeader[4] & 0xFF) | ((infoHeader[5] & 0xFF) << 8) | ((infoHeader[6] & 0xFF) << 16) | ((infoHeader[7] & 0xFF) << 24);\n    int height = (infoHeader[8] & 0xFF) | ((infoHeader[9] & 0xFF) << 8) | ((infoHeader[10] & 0xFF) << 16) | ((infoHeader[11] & 0xFF) << 24);\n    int depth = (infoHeader[14] & 0xFF) | ((infoHeader[15] & 0xFF) << 8);\n    infoHeader[14] = 1;\n    infoHeader[15] = 0;\n    byte[] maskData = bmpFormat.loadData(infoHeader);\n    maskData = convertPad(maskData, width, height, 1, 4, 2);\n    bitInvertData(maskData, 0, maskData.length);\n    return ImageData.internal_new(width, height, depth, palette, 4, shapeData, 2, maskData, null, -1, -1, SWT.IMAGE_ICO, 0, 0, 0, 0);\n}",
			"comments":"/**\n* Load one icon from the byte stream.\n*/\n",
			"methodName":"ImageData loadIcon(int[] iconHeader)"
		},
		"byte[] loadInfoHeader(int[] iconHeader)":{
			"methodBody":"{\n    int width = iconHeader[0];\n    int height = iconHeader[1];\n    \n    int numColors = iconHeader[2];\n    \n    if (numColors == 0)\n        numColors = 256;\n    if ((numColors != 2) && (numColors != 8) && (numColors != 16) && (numColors != 32) && (numColors != 256))\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    if (inputStream.getPosition() < iconHeader[6]) {\n        \n        try {\n            inputStream.skip(iconHeader[6] - inputStream.getPosition());\n        } catch (IOException e) {\n            SWT.error(SWT.ERROR_IO, e);\n            return null;\n        }\n    }\n    byte[] infoHeader = new byte[WinBMPFileFormat.BMPHeaderFixedSize];\n    try {\n        inputStream.read(infoHeader);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    if (((infoHeader[12] & 0xFF) | ((infoHeader[13] & 0xFF) << 8)) != 1)\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    int infoWidth = (infoHeader[4] & 0xFF) | ((infoHeader[5] & 0xFF) << 8) | ((infoHeader[6] & 0xFF) << 16) | ((infoHeader[7] & 0xFF) << 24);\n    int infoHeight = (infoHeader[8] & 0xFF) | ((infoHeader[9] & 0xFF) << 8) | ((infoHeader[10] & 0xFF) << 16) | ((infoHeader[11] & 0xFF) << 24);\n    int bitCount = (infoHeader[14] & 0xFF) | ((infoHeader[15] & 0xFF) << 8);\n    if (height == infoHeight && bitCount == 1)\n        height /= 2;\n    if (!((width == infoWidth) && (height * 2 == infoHeight) && (bitCount == 1 || bitCount == 4 || bitCount == 8 || bitCount == 24 || bitCount == 32)))\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    infoHeader[8] = (byte) (height & 0xFF);\n    infoHeader[9] = (byte) ((height >> 8) & 0xFF);\n    infoHeader[10] = (byte) ((height >> 16) & 0xFF);\n    infoHeader[11] = (byte) ((height >> 24) & 0xFF);\n    return infoHeader;\n}",
			"comments":"// the number of colors is in the low byte, but the high byte must be 0\n// this is specified: '00' represents '256' (0x100) colors\n// Seek to the specified offset\n",
			"methodName":"byte[] loadInfoHeader(int[] iconHeader)"
		},
		"void unloadIntoByteStream(ImageData image)":{
			"methodBody":"{\n    if (!isValidIcon(image))\n        SWT.error(SWT.ERROR_INVALID_IMAGE);\n    try {\n        outputStream.writeShort(0);\n        outputStream.writeShort(1);\n        outputStream.writeShort(1);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    unloadIconHeader(image);\n    unloadIcon(image);\n}",
			"comments":"",
			"methodName":"void unloadIntoByteStream(ImageData image)"
		},
		"void unloadMaskData(ImageData icon)":{
			"methodBody":"{\n    ImageData mask = icon.getTransparencyMask();\n    int bpl = (icon.width + 7) / 8;\n    int pad = mask.scanlinePad;\n    int srcBpl = (bpl + pad - 1) / pad * pad;\n    int destBpl = (bpl + 3) / 4 * 4;\n    byte[] buf = new byte[destBpl];\n    int offset = (icon.height - 1) * srcBpl;\n    byte[] data = mask.data;\n    try {\n        for (int i = 0; i < icon.height; i++) {\n            System.arraycopy(data, offset, buf, 0, bpl);\n            bitInvertData(buf, 0, bpl);\n            outputStream.write(buf, 0, destBpl);\n            offset -= srcBpl;\n        }\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n}",
			"comments":"/**\n* Unload the mask data for an icon. The data is flipped vertically\n* and inverted.\n*/\n",
			"methodName":"void unloadMaskData(ImageData icon)"
		},
		"void unloadShapeData(ImageData icon)":{
			"methodBody":"{\n    int bpl = (icon.width * icon.depth + 7) / 8;\n    int pad = icon.scanlinePad;\n    int srcBpl = (bpl + pad - 1) / pad * pad;\n    int destBpl = (bpl + 3) / 4 * 4;\n    byte[] buf = new byte[destBpl];\n    int offset = (icon.height - 1) * srcBpl;\n    byte[] data = icon.data;\n    try {\n        for (int i = 0; i < icon.height; i++) {\n            System.arraycopy(data, offset, buf, 0, bpl);\n            outputStream.write(buf, 0, destBpl);\n            offset -= srcBpl;\n        }\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n}",
			"comments":"/**\n* Unload the shape data for an icon. The data is flipped vertically.\n*/\n",
			"methodName":"void unloadShapeData(ImageData icon)"
		}
	},
	"ClassORInterfaceName":[
		"WinICOFileFormat"
	]
}
