{
	"variables":[
		"PI",
		"toRadians",
		"msgs",
		"answer",
		"answer",
		"formatter",
		"Math",
		"PI",
		"Math",
		"angle",
		"toRadians",
		"length",
		"Math",
		"angle",
		"toRadians",
		"length",
		"Math",
		"p",
		"q",
		"Math",
		"p",
		"q",
		"Math",
		"p",
		"q",
		"n",
		"n",
		"n",
		"n",
		"SWT",
		"SWT",
		"filename",
		"filename",
		"Character",
		"c",
		"Character",
		"c",
		"Character",
		"c",
		"Character",
		"c",
		"Runtime",
		"prog",
		"Runtime",
		"progArray",
		"key",
		"key",
		"SWT",
		"SWT",
		"msgs",
		"msgs",
		"ResourceBundle",
		"answer",
		"key",
		"msgs",
		"answer",
		"msgs",
		"key",
		"answer",
		"key",
		"key",
		"args",
		"SWT",
		"SWT",
		"msgs",
		"msgs",
		"ResourceBundle",
		"answer",
		"key",
		"msgs",
		"formatter",
		"msgs",
		"key",
		"answer",
		"formatter",
		"args",
		"answer",
		"Thread",
		"s1",
		"s2",
		"PI",
		"ERROR_INVALID_RANGE",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"angle",
		"length",
		"angle",
		"length",
		"p",
		"q",
		"p",
		"q",
		"p",
		"q",
		"n",
		"filename",
		"filename",
		"c",
		"c",
		"c",
		"c",
		"prog",
		"progArray",
		"key",
		"ex",
		"ex2",
		"key",
		"args",
		"ex",
		"ex2",
		"s1",
		"s2"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal"
	],
	"import":[
		"java.io",
		"java.text.MessageFormat",
		"java.util.MissingResourceException",
		"java.util.ResourceBundle",
		"org.eclipse.swt.SWT"
	],
	"methods":[
		"cos",
		"sin",
		"ceil",
		"floor",
		"round",
		"pow2",
		"newFileInputStream",
		"newFileOutputStream",
		"isLetter",
		"isLetterOrDigit",
		"isSpaceChar",
		"isWhitespace",
		"exec",
		"exec",
		"getMessage",
		"getMessage",
		"interrupt",
		"equalsIgnoreCase",
		"cos",
		"sin",
		"ceil",
		"floor",
		"round",
		"error",
		"isLetter",
		"isLetterOrDigit",
		"isSpaceChar",
		"isWhitespace",
		"exec",
		"getRuntime",
		"exec",
		"getRuntime",
		"error",
		"getBundle",
		"getString",
		"error",
		"getBundle",
		"applyPattern",
		"getString",
		"format",
		"interrupt",
		"currentThread",
		"equalsIgnoreCase",
		"FileInputStream",
		"FileOutputStream",
		"MessageFormat"
	],
	"methodsBody":{
		"public static int sin(int angle, int length)":{
			"methodBody":"{\n    return (int) (Math.sin(angle * toRadians) * length);\n}",
			"comments":"/**\n* Answers the length of the side opposite to the given angle\n* of a right triangle. In other words, it returns the integer\n* conversion of length * sin (angle).\n* <p>\n* IMPORTANT: the j2me version has an additional restriction on\n* the argument. length must be between -32767 and 32767 (inclusive).\n* </p>\n*\n* @param angle the angle in degrees\n* @param length the length of the triangle's hypotenuse\n* @return the integer conversion of length * sin (angle)\n*/\n",
			"methodName":"public static int sin(int angle, int length)"
		},
		"public static boolean isLetter(char c)":{
			"methodBody":"{\n    return Character.isLetter(c);\n}",
			"comments":"/**\n* Answers whether the character is a letter.\n*\n* @param c the character\n* @return true when the character is a letter\n*/\n",
			"methodName":"public static boolean isLetter(char c)"
		},
		"public static boolean isSpaceChar(char c)":{
			"methodBody":"{\n    return Character.isSpaceChar(c);\n}",
			"comments":"/**\n* Answers whether the character is a Unicode space character.\n*\n* @param c\t the character\n* @return true when the character is a Unicode space character\n*/\n",
			"methodName":"public static boolean isSpaceChar(char c)"
		},
		"public static int ceil(int p, int q)":{
			"methodBody":"{\n    return (int) Math.ceil((float) p / q);\n}",
			"comments":"/**\n* Answers the most negative (i.e. closest to negative infinity)\n* integer value which is greater than the number obtained by dividing\n* the first argument p by the second argument q.\n*\n* @param p numerator\n* @param q denominator (must be different from zero)\n* @return the ceiling of the rational number p / q.\n*/\n",
			"methodName":"public static int ceil(int p, int q)"
		},
		"public static boolean isWhitespace(char c)":{
			"methodBody":"{\n    return Character.isWhitespace(c);\n}",
			"comments":"/**\n* Answers whether the character is a whitespace character.\n*\n* @param c the character to test\n* @return true if the character is whitespace\n*/\n",
			"methodName":"public static boolean isWhitespace(char c)"
		},
		"public static OutputStream newFileOutputStream(String filename) throws IOException":{
			"methodBody":"{\n    return new FileOutputStream(filename);\n}",
			"comments":"/**\n* Open a file if such things are supported.\n*\n* @param filename the name of the file to open\n* @return a stream on the file if it could be opened.\n* @exception IOException\n*/\n",
			"methodName":"public static OutputStream newFileOutputStream(String filename) throws IOException"
		},
		"public static int cos(int angle, int length)":{
			"methodBody":"{\n    return (int) (Math.cos(angle * toRadians) * length);\n}",
			"comments":"/**\n* Answers the length of the side adjacent to the given angle\n* of a right triangle. In other words, it returns the integer\n* conversion of length * cos (angle).\n* <p>\n* IMPORTANT: the j2me version has an additional restriction on\n* the argument. length must be between -32767 and 32767 (inclusive).\n* </p>\n*\n* @param angle the angle in degrees\n* @param length the length of the triangle's hypotenuse\n* @return the integer conversion of length * cos (angle)\n*/\n",
			"methodName":"public static int cos(int angle, int length)"
		},
		"public static void exec(String[] progArray) throws java.io.IOException":{
			"methodBody":"{\n    Runtime.getRuntime().exec(progArray);\n}",
			"comments":"/**\n* Execute progArray[0] in a separate platform process if the\n* underlying platform support this.\n* <p>\n* The new process inherits the environment of the caller.\n* <p>\n*\n* @param progArray array containing the program to execute and its arguments\n*\n* @exception IOException\n*  if the program cannot be executed\n* @exception\tSecurityException\n*  if the current SecurityManager disallows program execution\n*/\n",
			"methodName":"public static void exec(String[] progArray) throws java.io.IOException"
		},
		"public static String getMessage(String key)":{
			"methodBody":"{\n    String answer = key;\n    if (key == null) {\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    }\n    if (msgs == null) {\n        try {\n            \n            msgs = ResourceBundle.getBundle(\"org.eclipse.swt.internal.SWTMessages\");\n        } catch (MissingResourceException ex) {\n            \n            answer = key + \" (no resource bundle)\";\n        }\n    }\n    if (msgs != null) {\n        try {\n            answer = msgs.getString(key);\n        } catch (MissingResourceException ex2) {\n        }\n    }\n    return answer;\n}",
			"comments":"/**\n* Returns the NLS'ed message for the given argument. This is only being\n* called from SWT.\n*\n* @param key the key to look up\n* @return the message for the given key\n*\n* @see SWT#getMessage(String)\n*/\n//$NON-NLS-1$\n//$NON-NLS-1$\n",
			"methodName":"public static String getMessage(String key)"
		},
		"public static boolean isLetterOrDigit(char c)":{
			"methodBody":"{\n    return Character.isLetterOrDigit(c);\n}",
			"comments":"/**\n* Answers whether the character is a letter or a digit.\n*\n* @param c the character\n* @return true when the character is a letter or a digit\n*/\n",
			"methodName":"public static boolean isLetterOrDigit(char c)"
		},
		"public static void interrupt()":{
			"methodBody":"{\n    Thread.currentThread().interrupt();\n}",
			"comments":"/**\n* Interrupt the current thread.\n* <p>\n* Note that this is not available on CLDC.\n* </p>\n*/\n",
			"methodName":"public static void interrupt()"
		},
		"public static void exec(String prog) throws java.io.IOException":{
			"methodBody":"{\n    Runtime.getRuntime().exec(prog);\n}",
			"comments":"/**\n* Execute a program in a separate platform process if the\n* underlying platform support this.\n* <p>\n* The new process inherits the environment of the caller.\n* </p>\n*\n* @param prog the name of the program to execute\n*\n* @exception IOException\n*  if the program cannot be executed\n* @exception SecurityException\n*  if the current SecurityManager disallows program execution\n*/\n",
			"methodName":"public static void exec(String prog) throws java.io.IOException"
		},
		"public static boolean equalsIgnoreCase(String s1, String s2)":{
			"methodBody":"{\n    return s1.equalsIgnoreCase(s2);\n}",
			"comments":"/**\n* Compares two instances of class String ignoring the case of the\n* characters and answers if they are equal.\n*\n* @param s1 string\n* @param s2 string\n* @return true if the two instances of class String are equal\n*/\n",
			"methodName":"public static boolean equalsIgnoreCase(String s1, String s2)"
		},
		"public static int floor(int p, int q)":{
			"methodBody":"{\n    return (int) Math.floor((double) p / q);\n}",
			"comments":"/**\n* Answers the most positive (i.e. closest to positive infinity)\n* integer value which is less than the number obtained by dividing\n* the first argument p by the second argument q.\n*\n* @param p numerator\n* @param q denominator (must be different from zero)\n* @return the floor of the rational number p / q.\n*/\n",
			"methodName":"public static int floor(int p, int q)"
		},
		"public static String getMessage(String key, Object[] args)":{
			"methodBody":"{\n    String answer = key;\n    if (key == null || args == null) {\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    }\n    if (msgs == null) {\n        try {\n            \n            msgs = ResourceBundle.getBundle(\"org.eclipse.swt.internal.SWTMessages\");\n        } catch (MissingResourceException ex) {\n            \n            answer = key + \" (no resource bundle)\";\n        }\n    }\n    if (msgs != null) {\n        try {\n            MessageFormat formatter = new MessageFormat(\"\");\n            formatter.applyPattern(msgs.getString(key));\n            answer = formatter.format(args);\n        } catch (MissingResourceException ex2) {\n        }\n    }\n    return answer;\n}",
			"comments":"//$NON-NLS-1$\n//$NON-NLS-1$\n",
			"methodName":"public static String getMessage(String key, Object[] args)"
		},
		"public static int pow2(int n)":{
			"methodBody":"{\n    if (n >= 1 && n <= 30)\n        return 2 << (n - 1);\n    else if (n != 0) {\n        SWT.error(SWT.ERROR_INVALID_RANGE);\n    }\n    return 1;\n}",
			"comments":"/**\n* Returns 2 raised to the power of the argument.\n*\n* @param n an int value between 0 and 30 (inclusive)\n* @return 2 raised to the power of the argument\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the argument is not between 0 and 30 (inclusive)</li>\n* </ul>\n*/\n",
			"methodName":"public static int pow2(int n)"
		},
		"public static InputStream newFileInputStream(String filename) throws IOException":{
			"methodBody":"{\n    return new FileInputStream(filename);\n}",
			"comments":"/**\n* Open a file if such things are supported.\n*\n* @param filename the name of the file to open\n* @return a stream on the file if it could be opened.\n* @exception IOException\n*/\n",
			"methodName":"public static InputStream newFileInputStream(String filename) throws IOException"
		},
		"public static int round(int p, int q)":{
			"methodBody":"{\n    return Math.round((float) p / q);\n}",
			"comments":"/**\n* Answers the result of rounding to the closest integer the number obtained\n* by dividing the first argument p by the second argument q.\n* <p>\n* IMPORTANT: the j2me version has an additional restriction on\n* the arguments. p must be within the range 0 - 32767 (inclusive).\n* q must be within the range 1 - 32767 (inclusive).\n* </p>\n*\n* @param p numerator\n* @param q denominator (must be different from zero)\n* @return the closest integer to the rational number p / q\n*/\n",
			"methodName":"public static int round(int p, int q)"
		}
	},
	"ClassORInterfaceName":[
		"Compatibility"
	]
}
