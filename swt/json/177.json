{
	"variables":[
		"x",
		"y",
		"width",
		"height",
		"serialVersionUID",
		"left",
		"top",
		"lhs",
		"rhs",
		"right",
		"bottom",
		"r",
		"left",
		"top",
		"lhs",
		"rhs",
		"right",
		"bottom",
		"left",
		"top",
		"lhs",
		"rhs",
		"right",
		"bottom",
		"left",
		"top",
		"lhs",
		"rhs",
		"right",
		"bottom",
		"x",
		"y",
		"width",
		"height",
		"rect",
		"SWT",
		"SWT",
		"x",
		"rect",
		"x",
		"rect",
		"y",
		"rect",
		"y",
		"rect",
		"x",
		"width",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"lhs",
		"y",
		"height",
		"rhs",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"x",
		"left",
		"y",
		"top",
		"width",
		"right",
		"left",
		"height",
		"bottom",
		"top",
		"x",
		"y",
		"x",
		"width",
		"y",
		"height",
		"pt",
		"SWT",
		"SWT",
		"pt",
		"pt",
		"object",
		"object",
		"object",
		"r",
		"r",
		"r",
		"r",
		"x",
		"y",
		"width",
		"height",
		"rect",
		"SWT",
		"SWT",
		"rect",
		"x",
		"rect",
		"x",
		"rect",
		"y",
		"rect",
		"y",
		"rect",
		"x",
		"width",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"lhs",
		"y",
		"height",
		"rhs",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"x",
		"right",
		"left",
		"left",
		"y",
		"bottom",
		"top",
		"top",
		"width",
		"right",
		"left",
		"right",
		"left",
		"height",
		"bottom",
		"top",
		"bottom",
		"top",
		"rect",
		"SWT",
		"SWT",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"x",
		"rect",
		"x",
		"rect",
		"y",
		"rect",
		"y",
		"rect",
		"x",
		"width",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"lhs",
		"y",
		"height",
		"rhs",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"right",
		"left",
		"left",
		"bottom",
		"top",
		"top",
		"right",
		"left",
		"right",
		"left",
		"bottom",
		"top",
		"bottom",
		"top",
		"x",
		"y",
		"x",
		"width",
		"y",
		"height",
		"rect",
		"SWT",
		"SWT",
		"rect",
		"rect",
		"rect",
		"rect",
		"rect",
		"width",
		"height",
		"x",
		"y",
		"width",
		"height",
		"rect",
		"SWT",
		"SWT",
		"x",
		"rect",
		"x",
		"rect",
		"y",
		"rect",
		"y",
		"rect",
		"x",
		"width",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"lhs",
		"y",
		"height",
		"rhs",
		"rect",
		"rect",
		"lhs",
		"rhs",
		"lhs",
		"rhs",
		"left",
		"top",
		"right",
		"left",
		"bottom",
		"top",
		"x",
		"y",
		"width",
		"height",
		"ERROR_NULL_ARGUMENT",
		"x",
		"x",
		"y",
		"y",
		"x",
		"width",
		"y",
		"height",
		"x",
		"y",
		"x",
		"y",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"x",
		"x",
		"y",
		"y",
		"width",
		"width",
		"height",
		"height",
		"ERROR_NULL_ARGUMENT",
		"x",
		"x",
		"y",
		"y",
		"x",
		"width",
		"y",
		"height",
		"ERROR_NULL_ARGUMENT",
		"x",
		"x",
		"y",
		"y",
		"x",
		"width",
		"y",
		"height",
		"x",
		"width",
		"y",
		"height",
		"x",
		"y",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"width",
		"height",
		"ERROR_NULL_ARGUMENT",
		"x",
		"x",
		"y",
		"y",
		"x",
		"width",
		"y",
		"height",
		"x",
		"y",
		"width",
		"height",
		"rect",
		"x",
		"y",
		"pt",
		"object",
		"rect",
		"rect",
		"x",
		"y",
		"width",
		"height",
		"rect",
		"rect"
	],
	"extendORImplementFiles":[
		"SerializableCompatibility"
	],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt.internal.SerializableCompatibility",
		"org.eclipse.swt"
	],
	"methods":[
		"add",
		"contains",
		"contains",
		"equals",
		"hashCode",
		"intersect",
		"intersection",
		"intersects",
		"intersects",
		"isEmpty",
		"toString",
		"union",
		"error",
		"error",
		"contains",
		"error",
		"error",
		"error",
		"intersects",
		"error",
		"Rectangle",
		"Rectangle",
		"Rectangle"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    \n    return \"Rectangle {\" + x + \", \" + y + \", \" + width + \", \" + height + \"}\";\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the rectangle\n*/\n//$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\n",
			"methodName":"public String toString()"
		},
		"public int hashCode()":{
			"methodBody":"{\n    return x ^ y ^ width ^ height;\n}",
			"comments":"/**\n* Returns an integer hash code for the receiver. Any two\n* objects that return <code>true</code> when passed to\n* <code>equals</code> must return the same value for this\n* method.\n*\n* @return the receiver's hash\n*\n* @see #equals(Object)\n*/\n",
			"methodName":"public int hashCode()"
		},
		"public boolean intersects(Rectangle rect)":{
			"methodBody":"{\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return rect == this || intersects(rect.x, rect.y, rect.width, rect.height);\n}",
			"comments":"/**\n* Returns <code>true</code> if the given rectangle intersects\n* with the receiver and <code>false</code> otherwise.\n* <p>\n* Two rectangles intersect if the area of the rectangle\n* representing their intersection is not empty.\n* </p>\n*\n* @param rect the rectangle to test for intersection\n* @return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n*\n* @see #intersection(Rectangle)\n* @see #isEmpty()\n*/\n",
			"methodName":"public boolean intersects(Rectangle rect)"
		},
		"public void intersect(Rectangle rect)":{
			"methodBody":"{\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (this == rect)\n        return;\n    int left = x > rect.x ? x : rect.x;\n    int top = y > rect.y ? y : rect.y;\n    int lhs = x + width;\n    int rhs = rect.x + rect.width;\n    int right = lhs < rhs ? lhs : rhs;\n    lhs = y + height;\n    rhs = rect.y + rect.height;\n    int bottom = lhs < rhs ? lhs : rhs;\n    x = right < left ? 0 : left;\n    y = bottom < top ? 0 : top;\n    width = right < left ? 0 : right - left;\n    height = bottom < top ? 0 : bottom - top;\n}",
			"comments":"/**\n* Destructively replaces the x, y, width and height values\n* in the receiver with ones which represent the intersection of the\n* rectangles specified by the receiver and the given rectangle.\n*\n* @param rect the rectangle to intersect with the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n*\n* since 3.0\n*/\n",
			"methodName":"public void intersect(Rectangle rect)"
		},
		"public Rectangle union(Rectangle rect)":{
			"methodBody":"{\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    int left = x < rect.x ? x : rect.x;\n    int top = y < rect.y ? y : rect.y;\n    int lhs = x + width;\n    int rhs = rect.x + rect.width;\n    int right = lhs > rhs ? lhs : rhs;\n    lhs = y + height;\n    rhs = rect.y + rect.height;\n    int bottom = lhs > rhs ? lhs : rhs;\n    return new Rectangle(left, top, right - left, bottom - top);\n}",
			"comments":"/**\n* Returns a new rectangle which represents the union of\n* the receiver and the given rectangle.\n* <p>\n* The union of two rectangles is the smallest single rectangle\n* that completely covers both of the areas covered by the two\n* given rectangles.\n* </p>\n*\n* @param rect the rectangle to perform union with\n* @return the union of the receiver and the argument\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n*\n* @see #add(Rectangle)\n*/\n",
			"methodName":"public Rectangle union(Rectangle rect)"
		},
		"public void add(Rectangle rect)":{
			"methodBody":"{\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    int left = x < rect.x ? x : rect.x;\n    int top = y < rect.y ? y : rect.y;\n    int lhs = x + width;\n    int rhs = rect.x + rect.width;\n    int right = lhs > rhs ? lhs : rhs;\n    lhs = y + height;\n    rhs = rect.y + rect.height;\n    int bottom = lhs > rhs ? lhs : rhs;\n    x = left;\n    y = top;\n    width = right - left;\n    height = bottom - top;\n}",
			"comments":"/**\n* Destructively replaces the x, y, width and height values\n* in the receiver with ones which represent the union of the\n* rectangles specified by the receiver and the given rectangle.\n* <p>\n* The union of two rectangles is the smallest single rectangle\n* that completely covers both of the areas covered by the two\n* given rectangles.\n* </p>\n*\n* @param rect the rectangle to merge with the receiver\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n*/\n",
			"methodName":"public void add(Rectangle rect)"
		},
		"public Rectangle intersection(Rectangle rect)":{
			"methodBody":"{\n    if (rect == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (this == rect)\n        return new Rectangle(x, y, width, height);\n    int left = x > rect.x ? x : rect.x;\n    int top = y > rect.y ? y : rect.y;\n    int lhs = x + width;\n    int rhs = rect.x + rect.width;\n    int right = lhs < rhs ? lhs : rhs;\n    lhs = y + height;\n    rhs = rect.y + rect.height;\n    int bottom = lhs < rhs ? lhs : rhs;\n    return new Rectangle(right < left ? 0 : left, bottom < top ? 0 : top, right < left ? 0 : right - left, bottom < top ? 0 : bottom - top);\n}",
			"comments":"/**\n* Returns a new rectangle which represents the intersection\n* of the receiver and the given rectangle.\n* <p>\n* The intersection of two rectangles is the rectangle that\n* covers the area which is contained within both rectangles.\n* </p>\n*\n* @param rect the rectangle to intersect with the receiver\n* @return the intersection of the receiver and the argument\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle intersection(Rectangle rect)"
		},
		"public boolean intersects(int x, int y, int width, int height)":{
			"methodBody":"{\n    return (x < this.x + this.width) && (y < this.y + this.height) && (x + width > this.x) && (y + height > this.y);\n}",
			"comments":"/**\n* Returns <code>true</code> if the rectangle described by the\n* arguments intersects with the receiver and <code>false</code>\n* otherwise.\n* <p>\n* Two rectangles intersect if the area of the rectangle\n* representing their intersection is not empty.\n* </p>\n*\n* @param x the x coordinate of the origin of the rectangle\n* @param y the y coordinate of the origin of the rectangle\n* @param width the width of the rectangle\n* @param height the height of the rectangle\n* @return <code>true</code> if the rectangle intersects with the receiver, and <code>false</code> otherwise\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n*\n* @see #intersection(Rectangle)\n* @see #isEmpty()\n*\n* @since 3.0\n*/\n",
			"methodName":"public boolean intersects(int x, int y, int width, int height)"
		},
		"public boolean equals(Object object)":{
			"methodBody":"{\n    if (object == this)\n        return true;\n    if (!(object instanceof Rectangle))\n        return false;\n    Rectangle r = (Rectangle) object;\n    return (r.x == this.x) && (r.y == this.y) && (r.width == this.width) && (r.height == this.height);\n}",
			"comments":"/**\n* Compares the argument to the receiver, and returns true\n* if they represent the <em>same</em> object using a class\n* specific comparison.\n*\n* @param object the object to compare with this object\n* @return <code>true</code> if the object is the same as this object and <code>false</code> otherwise\n*\n* @see #hashCode()\n*/\n",
			"methodName":"public boolean equals(Object object)"
		},
		"public boolean isEmpty()":{
			"methodBody":"{\n    return (width <= 0) || (height <= 0);\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver does not cover any\n* area in the (x, y) coordinate plane, and <code>false</code> if\n* the receiver does cover some area in the plane.\n* <p>\n* A rectangle is considered to <em>cover area</em> in the\n* (x, y) coordinate plane if both its width and height are\n* non-zero.\n* </p>\n*\n* @return <code>true</code> if the receiver is empty, and <code>false</code> otherwise\n*/\n",
			"methodName":"public boolean isEmpty()"
		},
		"public boolean contains(int x, int y)":{
			"methodBody":"{\n    return (x >= this.x) && (y >= this.y) && ((x - this.x) < width) && ((y - this.y) < height);\n}",
			"comments":"/**\n* Returns <code>true</code> if the point specified by the\n* arguments is inside the area specified by the receiver,\n* and <code>false</code> otherwise.\n*\n* @param x the x coordinate of the point to test for containment\n* @param y the y coordinate of the point to test for containment\n* @return <code>true</code> if the rectangle contains the point and <code>false</code> otherwise\n*/\n",
			"methodName":"public boolean contains(int x, int y)"
		},
		"public boolean contains(Point pt)":{
			"methodBody":"{\n    if (pt == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return contains(pt.x, pt.y);\n}",
			"comments":"/**\n* Returns <code>true</code> if the given point is inside the\n* area specified by the receiver, and <code>false</code>\n* otherwise.\n*\n* @param pt the point to test for containment\n* @return <code>true</code> if the rectangle contains the point and <code>false</code> otherwise\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the argument is null</li>\n* </ul>\n*/\n",
			"methodName":"public boolean contains(Point pt)"
		}
	},
	"ClassORInterfaceName":[
		"Rectangle"
	]
}
