{
	"variables":[
		"handle",
		"elements",
		"device",
		"device",
		"elements",
		"elements",
		"elements",
		"elements",
		"elements",
		"elements",
		"device",
		"device",
		"Device",
		"device",
		"SWT",
		"SWT",
		"device",
		"device",
		"handle",
		"Gdip",
		"m11",
		"m12",
		"m21",
		"m22",
		"dx",
		"dy",
		"handle",
		"SWT",
		"SWT",
		"device",
		"device",
		"elements",
		"SWT",
		"SWT",
		"elements",
		"SWT",
		"SWT",
		"elements",
		"handle",
		"device",
		"Gdip",
		"handle",
		"handle",
		"device",
		"device",
		"device",
		"SWT",
		"SWT",
		"elements",
		"SWT",
		"SWT",
		"elements",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"elements",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"SWT",
		"SWT",
		"handle",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"SWT",
		"SWT",
		"matrix",
		"SWT",
		"SWT",
		"matrix",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"matrix",
		"Gdip",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"angle",
		"Gdip",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"scaleX",
		"scaleY",
		"Gdip",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"m11",
		"m12",
		"m21",
		"m22",
		"dx",
		"dy",
		"SWT",
		"SWT",
		"pointArray",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"pointArray",
		"pointArray",
		"SWT",
		"SWT",
		"Gdip",
		"handle",
		"offsetX",
		"offsetY",
		"Gdip",
		"elements",
		"elements",
		"elements",
		"elements",
		"elements",
		"elements",
		"elements",
		"ERROR_NULL_ARGUMENT",
		"device",
		"ERROR_NO_HANDLES",
		"tracking",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"tracking",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_CANNOT_INVERT_MATRIX",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"handle",
		"MatrixOrderPrepend",
		"ERROR_GRAPHIC_DISPOSED",
		"MatrixOrderPrepend",
		"ERROR_GRAPHIC_DISPOSED",
		"MatrixOrderPrepend",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_GRAPHIC_DISPOSED",
		"ERROR_NULL_ARGUMENT",
		"length",
		"ERROR_GRAPHIC_DISPOSED",
		"MatrixOrderPrepend",
		"device",
		"device",
		"elements",
		"device",
		"m11",
		"m12",
		"m21",
		"m22",
		"dx",
		"dy",
		"elements",
		"elements",
		"matrix",
		"angle",
		"scaleX",
		"scaleY",
		"m11",
		"m12",
		"m21",
		"m22",
		"dx",
		"dy",
		"pointArray",
		"offsetX",
		"offsetY"
	],
	"extendORImplementFiles":[
		"Resource"
	],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.internal.gdip"
	],
	"methods":[
		"checkTransform",
		"dispose",
		"getElements",
		"invert",
		"isDisposed",
		"isIdentity",
		"multiply",
		"rotate",
		"scale",
		"setElements",
		"transform",
		"translate",
		"toString",
		"checkTransform",
		"getDevice",
		"error",
		"checkGDIP",
		"Matrix_new",
		"error",
		"new_Object",
		"error",
		"error",
		"isDisposed",
		"Matrix_delete",
		"dispose_Object",
		"isDisposed",
		"error",
		"error",
		"error",
		"Matrix_GetElements",
		"isDisposed",
		"error",
		"Matrix_Invert",
		"error",
		"isDisposed",
		"error",
		"Matrix_IsIdentity",
		"isDisposed",
		"error",
		"error",
		"isDisposed",
		"error",
		"Matrix_Multiply",
		"isDisposed",
		"error",
		"Matrix_Rotate",
		"isDisposed",
		"error",
		"Matrix_Scale",
		"isDisposed",
		"error",
		"Matrix_SetElements",
		"isDisposed",
		"error",
		"error",
		"Matrix_TransformPoints",
		"isDisposed",
		"error",
		"Matrix_Translate",
		"isDisposed",
		"getElements"
	],
	"methodsBody":{
		"public void dispose()":{
			"methodBody":"{\n    if (handle == 0)\n        return;\n    if (device.isDisposed())\n        return;\n    Gdip.Matrix_delete(handle);\n    handle = 0;\n    if (device.tracking)\n        device.dispose_Object(this);\n    device = null;\n}",
			"comments":"/**\n* Disposes of the operating system resources associated with\n* the Transform. Applications must dispose of all Transforms that\n* they allocate.\n*/\n",
			"methodName":"public void dispose()"
		},
		"public void translate(float offsetX, float offsetY)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    Gdip.Matrix_Translate(handle, offsetX, offsetY, Gdip.MatrixOrderPrepend);\n}",
			"comments":"/**\n* Modifies the receiver so that it represents a transformation that is\n* equivalent to its previous transformation translated by (offsetX, offsetY).\n*\n* @param offsetX the distance to translate in the X direction\n* @param offsetY the distance to translate in the Y direction\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void translate(float offsetX, float offsetY)"
		},
		"public void getElements(float[] elements)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (elements == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (elements.length < 6)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    Gdip.Matrix_GetElements(handle, elements);\n}",
			"comments":"/**\n* Fills the parameter with the values of the transformation matrix\n* that the receiver represents, in the order {m11, m12, m21, m22, dx, dy}.\n*\n* @param elements array to hold the matrix values\n* @return (in elements array) the transformation matrix represented by the receiver\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the parameter is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the parameter is too small to hold the matrix values</li>\n* </ul>\n*/\n",
			"methodName":"public void getElements(float[] elements)"
		},
		"public boolean isDisposed()":{
			"methodBody":"{\n    return handle == 0;\n}",
			"comments":"/**\n* Returns <code>true</code> if the Transform has been disposed,\n* and <code>false</code> otherwise.\n* <p>\n* This method gets the dispose state for the Transform.\n* When a Transform has been disposed, it is an error to\n* invoke any other method using the Transform.\n*\n* @return <code>true</code> when the Transform is disposed, and <code>false</code> otherwise\n*/\n",
			"methodName":"public boolean isDisposed()"
		},
		"static float[] checkTransform(float[] elements)":{
			"methodBody":"{\n    if (elements == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (elements.length < 6)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    return elements;\n}",
			"comments":"",
			"methodName":"static float[] checkTransform(float[] elements)"
		},
		"public boolean isIdentity()":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    return Gdip.Matrix_IsIdentity(handle);\n}",
			"comments":"/**\n* Returns <code>true</code> if the Transform represents the identity matrix\n* and false otherwise.\n*\n* @return <code>true</code> if the receiver is an identity Transform, and <code>false</code> otherwise\n*/\n",
			"methodName":"public boolean isIdentity()"
		},
		"public void transform(float[] pointArray)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (pointArray == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    Gdip.Matrix_TransformPoints(handle, pointArray, pointArray.length / 2);\n}",
			"comments":"/**\n* Given an array containing points described by alternating x and y values,\n* modify that array such that each point has been replaced with the result of\n* applying the transformation represented by the receiver to that point.\n*\n* @param pointArray an array of alternating x and y values to be transformed\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the point array is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void transform(float[] pointArray)"
		},
		"public String toString()":{
			"methodBody":"{\n    if (isDisposed())\n        return \"Transform {*DISPOSED*}\";\n    float[] elements = new float[6];\n    getElements(elements);\n    return \"Transform {\" + elements[0] + \",\" + elements[1] + \",\" + elements[2] + \",\" + elements[3] + \",\" + elements[4] + \",\" + elements[5] + \"}\";\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the receiver\n*/\n",
			"methodName":"public String toString()"
		},
		"public void setElements(float m11, float m12, float m21, float m22, float dx, float dy)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    Gdip.Matrix_SetElements(handle, m11, m12, m21, m22, dx, dy);\n}",
			"comments":"/**\n* Modifies the receiver to represent a new transformation given all of\n* the elements that represent the matrix that describes that transformation.\n*\n* @param m11 the first element of the first row of the matrix\n* @param m12 the second element of the first row of the matrix\n* @param m21 the first element of the second row of the matrix\n* @param m22 the second element of the second row of the matrix\n* @param dx the third element of the first row of the matrix\n* @param dy the third element of the second row of the matrix\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void setElements(float m11, float m12, float m21, float m22, float dx, float dy)"
		},
		"public void rotate(float angle)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    Gdip.Matrix_Rotate(handle, angle, Gdip.MatrixOrderPrepend);\n}",
			"comments":"/**\n* Modifies the receiver so that it represents a transformation that is\n* equivalent to its previous transformation rotated by the specified angle.\n* The angle is specified in degrees and for the identity transform 0 degrees\n* is at the 3 o'clock position. A positive value indicates a clockwise rotation\n* while a negative value indicates a counter-clockwise rotation.\n*\n* @param angle the angle to rotate the transformation by\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void rotate(float angle)"
		},
		"public void invert()":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (Gdip.Matrix_Invert(handle) != 0)\n        SWT.error(SWT.ERROR_CANNOT_INVERT_MATRIX);\n}",
			"comments":"/**\n* Modifies the receiver such that the matrix it represents becomes the\n* the mathematical inverse of the matrix it previously represented.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_CANNOT_INVERT_MATRIX - if the matrix is not invertable</li>\n* </ul>\n*/\n",
			"methodName":"public void invert()"
		},
		"public void multiply(Transform matrix)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    if (matrix == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (matrix.isDisposed())\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    Gdip.Matrix_Multiply(handle, matrix.handle, Gdip.MatrixOrderPrepend);\n}",
			"comments":"/**\n* Modifies the receiver such that the matrix it represents becomes the\n* the result of multiplying the matrix it previously represented by the\n* argument.\n*\n* @param matrix the matrix to multiply the receiver by\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the parameter is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the parameter has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void multiply(Transform matrix)"
		},
		"public void scale(float scaleX, float scaleY)":{
			"methodBody":"{\n    if (isDisposed())\n        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\n    Gdip.Matrix_Scale(handle, scaleX, scaleY, Gdip.MatrixOrderPrepend);\n}",
			"comments":"/**\n* Modifies the receiver so that it represents a transformation that is\n* equivalent to its previous transformation scaled by (scaleX, scaleY).\n*\n* @param scaleX the amount to scale in the X direction\n* @param scaleY the amount to scale in the Y direction\n*\n* @exception SWTException <ul>\n*    <li>ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed</li>\n* </ul>\n*/\n",
			"methodName":"public void scale(float scaleX, float scaleY)"
		}
	},
	"ClassORInterfaceName":[
		"Transform"
	]
}
