{
	"variables":[
		"eventListener",
		"event",
		"event",
		"event",
		"event",
		"event",
		"event",
		"event",
		"eventListener",
		"listener",
		"eventListener",
		"e",
		"SWT",
		"e",
		"eventListener",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"eventListener",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"e",
		"eventListener",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"eventListener",
		"event",
		"e",
		"event",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"e",
		"eventListener",
		"event",
		"e",
		"event",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"e",
		"eventListener",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"eventListener",
		"e",
		"SWT",
		"e",
		"eventListener",
		"event",
		"e",
		"event",
		"e",
		"event",
		"type",
		"Paint",
		"gc",
		"gc",
		"Selection",
		"x",
		"x",
		"y",
		"y",
		"doit",
		"doit",
		"DefaultSelection",
		"Dispose",
		"FocusIn",
		"FocusOut",
		"Hide",
		"Show",
		"KeyDown",
		"doit",
		"doit",
		"KeyUp",
		"doit",
		"doit",
		"MouseDown",
		"MouseUp",
		"MouseDoubleClick",
		"MouseMove",
		"Resize",
		"Move",
		"Close",
		"doit",
		"doit",
		"Activate",
		"Deactivate",
		"Iconify",
		"Deiconify",
		"Expand",
		"Collapse",
		"Modify",
		"Verify",
		"text",
		"text",
		"doit",
		"doit",
		"Help",
		"Arm",
		"MouseExit",
		"MouseEnter",
		"MouseHover",
		"Traverse",
		"detail",
		"detail",
		"doit",
		"doit",
		"listener",
		"e"
	],
	"extendORImplementFiles":[
		"Listener"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal.SWTEventListener",
		"org.eclipse.swt",
		"org.eclipse.swt.events"
	],
	"methods":[
		"getEventListener",
		"handleEvent",
		"paintControl",
		"widgetSelected",
		"widgetDefaultSelected",
		"widgetDisposed",
		"focusGained",
		"focusLost",
		"menuHidden",
		"menuShown",
		"keyPressed",
		"keyReleased",
		"mouseDown",
		"mouseUp",
		"mouseDoubleClick",
		"mouseMove",
		"controlResized",
		"controlMoved",
		"shellClosed",
		"shellActivated",
		"shellDeactivated",
		"shellIconified",
		"shellDeiconified",
		"treeExpanded",
		"treeCollapsed",
		"modifyText",
		"verifyText",
		"helpRequested",
		"widgetArmed",
		"mouseExit",
		"mouseEnter",
		"mouseHover",
		"keyTraversed",
		"PaintEvent",
		"SelectionEvent",
		"SelectionEvent",
		"DisposeEvent",
		"FocusEvent",
		"FocusEvent",
		"MenuEvent",
		"MenuEvent",
		"KeyEvent",
		"KeyEvent",
		"MouseEvent",
		"MouseEvent",
		"MouseEvent",
		"MouseEvent",
		"ControlEvent",
		"ControlEvent",
		"ShellEvent",
		"ShellEvent",
		"ShellEvent",
		"ShellEvent",
		"ShellEvent",
		"TreeEvent",
		"TreeEvent",
		"ModifyEvent",
		"VerifyEvent",
		"HelpEvent",
		"ArmEvent",
		"MouseEvent",
		"MouseEvent",
		"MouseEvent",
		"TraverseEvent"
	],
	"methodsBody":{
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    switch(e.type) {\n        case SWT.Paint:\n            {\n                \n                PaintEvent event = new PaintEvent(e);\n                ((PaintListener) eventListener).paintControl(event);\n                e.gc = event.gc;\n                break;\n            }\n        case SWT.Selection:\n            {\n                \n                SelectionEvent event = new SelectionEvent(e);\n                ((SelectionListener) eventListener).widgetSelected(event);\n                e.x = event.x;\n                e.y = event.y;\n                e.doit = event.doit;\n                break;\n            }\n        case SWT.DefaultSelection:\n            {\n                ((SelectionListener) eventListener).widgetDefaultSelected(new SelectionEvent(e));\n                break;\n            }\n        case SWT.Dispose:\n            {\n                ((DisposeListener) eventListener).widgetDisposed(new DisposeEvent(e));\n                break;\n            }\n        case SWT.FocusIn:\n            {\n                ((FocusListener) eventListener).focusGained(new FocusEvent(e));\n                break;\n            }\n        case SWT.FocusOut:\n            {\n                ((FocusListener) eventListener).focusLost(new FocusEvent(e));\n                break;\n            }\n        case SWT.Hide:\n            {\n                ((MenuListener) eventListener).menuHidden(new MenuEvent(e));\n                break;\n            }\n        case SWT.Show:\n            {\n                ((MenuListener) eventListener).menuShown(new MenuEvent(e));\n                break;\n            }\n        case SWT.KeyDown:\n            {\n                KeyEvent event = new KeyEvent(e);\n                ((KeyListener) eventListener).keyPressed(event);\n                e.doit = event.doit;\n                break;\n            }\n        case SWT.KeyUp:\n            {\n                KeyEvent event = new KeyEvent(e);\n                ((KeyListener) eventListener).keyReleased(event);\n                e.doit = event.doit;\n                break;\n            }\n        case SWT.MouseDown:\n            {\n                ((MouseListener) eventListener).mouseDown(new MouseEvent(e));\n                break;\n            }\n        case SWT.MouseUp:\n            {\n                ((MouseListener) eventListener).mouseUp(new MouseEvent(e));\n                break;\n            }\n        case SWT.MouseDoubleClick:\n            {\n                ((MouseListener) eventListener).mouseDoubleClick(new MouseEvent(e));\n                break;\n            }\n        case SWT.MouseMove:\n            {\n                ((MouseMoveListener) eventListener).mouseMove(new MouseEvent(e));\n                return;\n            }\n        case SWT.Resize:\n            {\n                ((ControlListener) eventListener).controlResized(new ControlEvent(e));\n                break;\n            }\n        case SWT.Move:\n            {\n                ((ControlListener) eventListener).controlMoved(new ControlEvent(e));\n                break;\n            }\n        case SWT.Close:\n            {\n                \n                ShellEvent event = new ShellEvent(e);\n                ((ShellListener) eventListener).shellClosed(event);\n                e.doit = event.doit;\n                break;\n            }\n        case SWT.Activate:\n            {\n                ((ShellListener) eventListener).shellActivated(new ShellEvent(e));\n                break;\n            }\n        case SWT.Deactivate:\n            {\n                ((ShellListener) eventListener).shellDeactivated(new ShellEvent(e));\n                break;\n            }\n        case SWT.Iconify:\n            {\n                ((ShellListener) eventListener).shellIconified(new ShellEvent(e));\n                break;\n            }\n        case SWT.Deiconify:\n            {\n                ((ShellListener) eventListener).shellDeiconified(new ShellEvent(e));\n                break;\n            }\n        case SWT.Expand:\n            {\n                ((TreeListener) eventListener).treeExpanded(new TreeEvent(e));\n                break;\n            }\n        case SWT.Collapse:\n            {\n                ((TreeListener) eventListener).treeCollapsed(new TreeEvent(e));\n                break;\n            }\n        case SWT.Modify:\n            {\n                ((ModifyListener) eventListener).modifyText(new ModifyEvent(e));\n                break;\n            }\n        case SWT.Verify:\n            {\n                \n                VerifyEvent event = new VerifyEvent(e);\n                ((VerifyListener) eventListener).verifyText(event);\n                e.text = event.text;\n                e.doit = event.doit;\n                break;\n            }\n        case SWT.Help:\n            {\n                ((HelpListener) eventListener).helpRequested(new HelpEvent(e));\n                break;\n            }\n        case SWT.Arm:\n            {\n                ((ArmListener) eventListener).widgetArmed(new ArmEvent(e));\n                break;\n            }\n        case SWT.MouseExit:\n            {\n                ((MouseTrackListener) eventListener).mouseExit(new MouseEvent(e));\n                break;\n            }\n        case SWT.MouseEnter:\n            {\n                ((MouseTrackListener) eventListener).mouseEnter(new MouseEvent(e));\n                break;\n            }\n        case SWT.MouseHover:\n            {\n                ((MouseTrackListener) eventListener).mouseHover(new MouseEvent(e));\n                break;\n            }\n        case SWT.Traverse:\n            {\n                \n                TraverseEvent event = new TraverseEvent(e);\n                ((TraverseListener) eventListener).keyTraversed(event);\n                e.detail = event.detail;\n                e.doit = event.doit;\n                break;\n            }\n    }\n}",
			"comments":"/**\n* Handles the given event.\n* <p>\n* <b>IMPORTANT:</b> This method is <em>not</em> part of the SWT\n* public API. It is marked public only so that it can be shared\n* within the packages provided by SWT. It should never be\n* referenced from application code.\n* </p>\n* @param e the event to handle\n*/\n/* Field set by Control */\n/* Fields set by Sash */\n/* Fields set by Decorations */\n/* Fields set by Text, RichText */\n/* Fields set by Control */\n",
			"methodName":"public void handleEvent(Event e)"
		},
		"public SWTEventListener getEventListener()":{
			"methodBody":"{\n    return eventListener;\n}",
			"comments":"/**\n* Returns the receiver's event listener.\n* <p>\n* <b>IMPORTANT:</b> This method is <em>not</em> part of the SWT\n* public API. It is marked public only so that it can be shared\n* within the packages provided by SWT. It should never be\n* referenced from application code.\n* </p>\n*\n* @return the receiver's event listener\n*/\n",
			"methodName":"public SWTEventListener getEventListener()"
		}
	},
	"ClassORInterfaceName":[
		"TypedListener"
	]
}
