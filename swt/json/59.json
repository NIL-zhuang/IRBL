{
	"variables":[
		"shell",
		"list",
		"minimumWidth",
		"shellSize",
		"mask",
		"listSize",
		"screenSize",
		"spaceBelow",
		"spaceAbove",
		"y",
		"x",
		"display",
		"result",
		"strings",
		"items",
		"i",
		"index",
		"parent",
		"shell",
		"parent",
		"style",
		"list",
		"shell",
		"SWT",
		"SWT",
		"shell",
		"SWT",
		"shell",
		"shell",
		"shell",
		"list",
		"shellSize",
		"shellSize",
		"list",
		"shell",
		"list",
		"e",
		"shell",
		"SWT",
		"SWT",
		"style",
		"mask",
		"list",
		"list",
		"minimumWidth",
		"list",
		"rect",
		"SWT",
		"shell",
		"screenSize",
		"rect",
		"rect",
		"rect",
		"spaceAbove",
		"spaceBelow",
		"listSize",
		"spaceBelow",
		"listSize",
		"spaceAbove",
		"listSize",
		"spaceAbove",
		"listSize",
		"y",
		"rect",
		"listSize",
		"listSize",
		"spaceBelow",
		"listSize",
		"spaceBelow",
		"listSize",
		"y",
		"rect",
		"rect",
		"listSize",
		"rect",
		"listSize",
		"minimumWidth",
		"listSize",
		"minimumWidth",
		"rect",
		"rect",
		"listSize",
		"shell",
		"x",
		"y",
		"listSize",
		"listSize",
		"shell",
		"list",
		"shell",
		"shell",
		"shell",
		"display",
		"display",
		"shell",
		"list",
		"shell",
		"strings",
		"result",
		"strings",
		"result",
		"list",
		"string",
		"i",
		"items",
		"i",
		"items",
		"i",
		"string",
		"list",
		"items",
		"i",
		"list",
		"index",
		"list",
		"font",
		"list",
		"strings",
		"width",
		"SWT",
		"SWT",
		"minimumWidth",
		"width",
		"SINGLE",
		"V_SCROLL",
		"Deactivate",
		"width",
		"height",
		"character",
		"LEFT_TO_RIGHT",
		"RIGHT_TO_LEFT",
		"width",
		"DEFAULT",
		"height",
		"y",
		"height",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"y",
		"height",
		"x",
		"width",
		"x",
		"x",
		"x",
		"width",
		"x",
		"x",
		"y",
		"length",
		"length",
		"ERROR_INVALID_ARGUMENT",
		"parent",
		"parent",
		"style",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"style",
		"rect",
		"string",
		"font",
		"strings",
		"width"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.events",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"handleEvent",
		"controlMoved",
		"controlResized",
		"mouseDoubleClick",
		"mouseDown",
		"mouseUp",
		"keyReleased",
		"keyPressed",
		"checkStyle",
		"getFont",
		"getItems",
		"getMinimumWidth",
		"open",
		"select",
		"setFont",
		"setItems",
		"setMinimumWidth",
		"checkStyle",
		"addListener",
		"setVisible",
		"addControlListener",
		"getClientArea",
		"setSize",
		"addMouseListener",
		"setVisible",
		"addKeyListener",
		"setVisible",
		"getFont",
		"getItems",
		"computeSize",
		"getBounds",
		"getDisplay",
		"setBounds",
		"open",
		"setFocus",
		"getDisplay",
		"isDisposed",
		"isVisible",
		"readAndDispatch",
		"sleep",
		"isDisposed",
		"getSelection",
		"dispose",
		"getItems",
		"startsWith",
		"indexOf",
		"select",
		"setFont",
		"setItems",
		"error",
		"Shell",
		"List",
		"Listener",
		"ControlListener",
		"MouseListener",
		"KeyListener"
	],
	"methodsBody":{
		"public void keyReleased(KeyEvent e)":{
			"methodBody":"{\n}",
			"comments":"",
			"methodName":"public void keyReleased(KeyEvent e)"
		},
		"public void keyPressed(KeyEvent e)":{
			"methodBody":"{\n    if (e.character == '\\r') {\n        shell.setVisible(false);\n    }\n}",
			"comments":"",
			"methodName":"public void keyPressed(KeyEvent e)"
		},
		"public int getMinimumWidth()":{
			"methodBody":"{\n    return minimumWidth;\n}",
			"comments":"/**\n* Gets the minimum width of the list.\n*\n* @return the minimum width of the list\n*/\n",
			"methodName":"public int getMinimumWidth()"
		},
		"private static int checkStyle(int style)":{
			"methodBody":"{\n    int mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;\n    return style & mask;\n}",
			"comments":"",
			"methodName":"private static int checkStyle(int style)"
		},
		"public String open(Rectangle rect)":{
			"methodBody":"{\n    Point listSize = list.computeSize(rect.width, SWT.DEFAULT, false);\n    Rectangle screenSize = shell.getDisplay().getBounds();\n    \n    int spaceBelow = screenSize.height - (rect.y + rect.height) - 30;\n    int spaceAbove = rect.y - 30;\n    int y = 0;\n    if (spaceAbove > spaceBelow && listSize.y > spaceBelow) {\n        \n        if (listSize.y > spaceAbove) {\n            listSize.y = spaceAbove;\n        } else {\n            listSize.y += 2;\n        }\n        y = rect.y - listSize.y;\n    } else {\n        \n        if (listSize.y > spaceBelow) {\n            listSize.y = spaceBelow;\n        } else {\n            listSize.y += 2;\n        }\n        y = rect.y + rect.height;\n    }\n    \n    listSize.x = rect.width;\n    \n    if (listSize.x < minimumWidth)\n        listSize.x = minimumWidth;\n    \n    int x = rect.x + rect.width - listSize.x;\n    shell.setBounds(x, y, listSize.x, listSize.y);\n    shell.open();\n    list.setFocus();\n    Display display = shell.getDisplay();\n    while (!shell.isDisposed() && shell.isVisible()) {\n        if (!display.readAndDispatch())\n            display.sleep();\n    }\n    String result = null;\n    if (!shell.isDisposed()) {\n        String[] strings = list.getSelection();\n        shell.dispose();\n        if (strings.length != 0)\n            result = strings[0];\n    }\n    return result;\n}",
			"comments":"/**\n* Launches the Popup List, waits for an item to be selected and then closes PopupList.\n*\n* @param rect the initial size and location of the PopupList; the dialog will be\n*        positioned so that it does not run off the screen and the largest number of items are visible\n*\n* @return the text of the selected item or null if no item is selected\n*/\n// Position the dialog so that it does not run off the screen and the largest number of items are visible\n// place popup list above table cell\n// place popup list below table cell\n// Make dialog as wide as the cell\n// dialog width should not be les than minimumwidth\n// Align right side of dialog with right side of cell\n",
			"methodName":"public String open(Rectangle rect)"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    shell.setVisible(false);\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"public void select(String string)":{
			"methodBody":"{\n    String[] items = list.getItems();\n    \n    if (string != null) {\n        for (int i = 0; i < items.length; i++) {\n            if (items[i].startsWith(string)) {\n                int index = list.indexOf(items[i]);\n                list.select(index);\n                break;\n            }\n        }\n    }\n}",
			"comments":"/**\n* Selects an item with text that starts with specified String.\n* <p>\n* If the item is not currently selected, it is selected.\n* If the item at an index is selected, it remains selected.\n* If the string is not matched, it is ignored.\n*\n* @param string the text of the item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*\t</ul>\n*/\n// find the first entry in the list that starts with the\n// specified string\n",
			"methodName":"public void select(String string)"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    list.setFont(font);\n}",
			"comments":"/**\n* Sets the widget font.\n* <p>\n* When new font is null, the font reverts\n* to the default system font for the widget.\n*\n* @param font the new font (or null)\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*\t</ul>\n*/\n",
			"methodName":"public void setFont(Font font)"
		},
		"public void setMinimumWidth(int width)":{
			"methodBody":"{\n    if (width < 0)\n        SWT.error(SWT.ERROR_INVALID_ARGUMENT);\n    minimumWidth = width;\n}",
			"comments":"/**\n* Sets the minimum width of the list.\n*\n* @param width the minimum width of the list\n*/\n",
			"methodName":"public void setMinimumWidth(int width)"
		},
		"public void setItems(String[] strings)":{
			"methodBody":"{\n    list.setItems(strings);\n}",
			"comments":"/**\n* Sets all items.\n* <p>\n* The previous selection is cleared.\n* The previous items are deleted.\n* The new items are added.\n* The top index is set to 0.\n*\n* @param strings the array of items\n*\n* This operation will fail when an item is null\n* or could not be added in the OS.\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the items array is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if an item in the items array is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*\t</ul>\n*/\n",
			"methodName":"public void setItems(String[] strings)"
		},
		"public void controlMoved(ControlEvent e)":{
			"methodBody":"{\n}",
			"comments":"",
			"methodName":"public void controlMoved(ControlEvent e)"
		},
		"public void mouseUp(MouseEvent e)":{
			"methodBody":"{\n    shell.setVisible(false);\n}",
			"comments":"",
			"methodName":"public void mouseUp(MouseEvent e)"
		},
		"public void mouseDown(MouseEvent e)":{
			"methodBody":"{\n}",
			"comments":"",
			"methodName":"public void mouseDown(MouseEvent e)"
		},
		"public void controlResized(ControlEvent e)":{
			"methodBody":"{\n    Rectangle shellSize = shell.getClientArea();\n    list.setSize(shellSize.width, shellSize.height);\n}",
			"comments":"",
			"methodName":"public void controlResized(ControlEvent e)"
		},
		"public Font getFont()":{
			"methodBody":"{\n    return list.getFont();\n}",
			"comments":"/**\n* Gets the widget font.\n* <p>\n* @return the widget font\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*\t</ul>\n*/\n",
			"methodName":"public Font getFont()"
		},
		"public void mouseDoubleClick(MouseEvent e)":{
			"methodBody":"{\n}",
			"comments":"",
			"methodName":"public void mouseDoubleClick(MouseEvent e)"
		},
		"public String[] getItems()":{
			"methodBody":"{\n    return list.getItems();\n}",
			"comments":"/**\n* Gets the items.\n* <p>\n* This operation will fail if the items cannot\n* be queried from the OS.\n*\n* @return the items in the widget\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*\t</ul>\n*/\n",
			"methodName":"public String[] getItems()"
		}
	},
	"ClassORInterfaceName":[
		"PopupList"
	]
}
