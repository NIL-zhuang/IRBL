{
	"variables":[
		"parent",
		"tracking",
		"cancelled",
		"stippled",
		"rectangles",
		"proportions",
		"bounds",
		"resizeCursor",
		"clientCursor",
		"cursorOrientation",
		"inEvent",
		"oldProc",
		"oldX",
		"oldY",
		"STEPSIZE_SMALL",
		"STEPSIZE_LARGE",
		"typedListener",
		"typedListener",
		"newX",
		"newY",
		"pt",
		"newX",
		"newY",
		"pt",
		"newCursor",
		"xMin",
		"yMin",
		"xMax",
		"yMax",
		"i",
		"rectRight",
		"rectBottom",
		"result",
		"i",
		"x",
		"y",
		"width",
		"height",
		"bandWidth",
		"hwndTrack",
		"hDC",
		"hBitmap",
		"hBrush",
		"oldBrush",
		"bits",
		"i",
		"rect",
		"length",
		"result",
		"i",
		"current",
		"i",
		"vStyle",
		"hStyle",
		"hwndTransparent",
		"newProc",
		"mouseDown",
		"width",
		"height",
		"newProcAddress",
		"cursorPos",
		"pt",
		"msg",
		"i",
		"proportion",
		"i",
		"proportion",
		"i",
		"proportion",
		"i",
		"proportion",
		"newRects",
		"i",
		"proportion",
		"length",
		"i",
		"current",
		"shell",
		"result",
		"isMirrored",
		"stepSize",
		"xChange",
		"yChange",
		"oldRectangles",
		"oldStippled",
		"rectsToErase",
		"i",
		"current",
		"event",
		"cursorPos",
		"draw",
		"length",
		"i",
		"draw",
		"length",
		"i",
		"result",
		"isMirrored",
		"newPos",
		"newX",
		"newY",
		"oldRectangles",
		"oldStippled",
		"rectsToErase",
		"i",
		"current",
		"event",
		"draw",
		"length",
		"i",
		"cursorPos",
		"draw",
		"length",
		"i",
		"SWT",
		"parent",
		"style",
		"parent",
		"display",
		"display",
		"Display",
		"display",
		"display",
		"Display",
		"display",
		"SWT",
		"style",
		"display",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"listener",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"bounds",
		"bounds",
		"bounds",
		"pt",
		"newX",
		"pt",
		"newY",
		"parent",
		"OS",
		"parent",
		"pt",
		"OS",
		"pt",
		"pt",
		"pt",
		"pt",
		"cursorOrientation",
		"SWT",
		"newX",
		"bounds",
		"cursorOrientation",
		"SWT",
		"newX",
		"bounds",
		"bounds",
		"newX",
		"bounds",
		"bounds",
		"cursorOrientation",
		"SWT",
		"newY",
		"bounds",
		"cursorOrientation",
		"SWT",
		"newY",
		"bounds",
		"bounds",
		"newY",
		"bounds",
		"bounds",
		"pt",
		"newX",
		"pt",
		"newY",
		"parent",
		"OS",
		"parent",
		"pt",
		"OS",
		"pt",
		"pt",
		"clientCursor",
		"cursorOrientation",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"SWT",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"SWT",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"SWT",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"SWT",
		"SWT",
		"newCursor",
		"OS",
		"OS",
		"newCursor",
		"OS",
		"OS",
		"OS",
		"newCursor",
		"resizeCursor",
		"OS",
		"resizeCursor",
		"resizeCursor",
		"newCursor",
		"pt",
		"pt",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"tracking",
		"rectangles",
		"rectangles",
		"rectangles",
		"rectangles",
		"rectangles",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"xMin",
		"xMin",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"yMin",
		"yMin",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectRight",
		"xMax",
		"xMax",
		"rectRight",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectBottom",
		"yMax",
		"yMax",
		"rectBottom",
		"xMin",
		"yMin",
		"xMax",
		"xMin",
		"yMax",
		"yMin",
		"rects",
		"bounds",
		"i",
		"rects",
		"i",
		"bounds",
		"x",
		"rects",
		"i",
		"bounds",
		"bounds",
		"width",
		"rects",
		"i",
		"bounds",
		"width",
		"bounds",
		"y",
		"rects",
		"i",
		"bounds",
		"bounds",
		"height",
		"rects",
		"i",
		"bounds",
		"height",
		"result",
		"i",
		"x",
		"y",
		"width",
		"height",
		"result",
		"OS",
		"parent",
		"hwndTrack",
		"parent",
		"OS",
		"hwndTrack",
		"OS",
		"stippled",
		"bandWidth",
		"hBitmap",
		"OS",
		"bits",
		"hBrush",
		"OS",
		"hBitmap",
		"oldBrush",
		"OS",
		"hDC",
		"hBrush",
		"i",
		"rects",
		"i",
		"rects",
		"i",
		"OS",
		"hDC",
		"rect",
		"rect",
		"rect",
		"bandWidth",
		"OS",
		"OS",
		"hDC",
		"rect",
		"rect",
		"bandWidth",
		"bandWidth",
		"rect",
		"bandWidth",
		"OS",
		"OS",
		"hDC",
		"rect",
		"rect",
		"bandWidth",
		"rect",
		"bandWidth",
		"bandWidth",
		"rect",
		"bandWidth",
		"OS",
		"OS",
		"hDC",
		"rect",
		"rect",
		"rect",
		"bandWidth",
		"rect",
		"bandWidth",
		"OS",
		"stippled",
		"OS",
		"hDC",
		"oldBrush",
		"OS",
		"hBrush",
		"OS",
		"hBitmap",
		"OS",
		"hwndTrack",
		"hDC",
		"rectangles",
		"length",
		"rectangles",
		"length",
		"i",
		"length",
		"i",
		"rectangles",
		"i",
		"result",
		"i",
		"current",
		"current",
		"current",
		"current",
		"result",
		"stippled",
		"xChange",
		"style",
		"SWT",
		"xChange",
		"xChange",
		"style",
		"SWT",
		"xChange",
		"yChange",
		"style",
		"SWT",
		"yChange",
		"yChange",
		"style",
		"SWT",
		"yChange",
		"xChange",
		"yChange",
		"bounds",
		"xChange",
		"bounds",
		"yChange",
		"i",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"xChange",
		"rectangles",
		"i",
		"yChange",
		"rectangles",
		"cancelled",
		"tracking",
		"style",
		"SWT",
		"SWT",
		"vStyle",
		"SWT",
		"vStyle",
		"SWT",
		"cursorOrientation",
		"vStyle",
		"style",
		"SWT",
		"SWT",
		"hStyle",
		"SWT",
		"hStyle",
		"SWT",
		"cursorOrientation",
		"hStyle",
		"OS",
		"OS",
		"mouseDown",
		"OS",
		"OS",
		"OS",
		"OS",
		"hwndTransparent",
		"OS",
		"OS",
		"display",
		"OS",
		"OS",
		"width",
		"height",
		"OS",
		"oldProc",
		"OS",
		"hwndTransparent",
		"OS",
		"newProc",
		"newProc",
		"newProcAddress",
		"SWT",
		"SWT",
		"OS",
		"hwndTransparent",
		"OS",
		"newProcAddress",
		"rectangles",
		"stippled",
		"mouseDown",
		"OS",
		"pt",
		"cursorPos",
		"pt",
		"pt",
		"style",
		"SWT",
		"cursorPos",
		"cursorPos",
		"oldX",
		"cursorPos",
		"oldY",
		"cursorPos",
		"tracking",
		"cancelled",
		"parent",
		"parent",
		"OS",
		"msg",
		"OS",
		"msg",
		"msg",
		"OS",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"msg",
		"OS",
		"msg",
		"msg",
		"OS",
		"OS",
		"msg",
		"msg",
		"OS",
		"msg",
		"OS",
		"rectangles",
		"stippled",
		"OS",
		"msg",
		"msg",
		"OS",
		"rectangles",
		"stippled",
		"mouseDown",
		"OS",
		"rectangles",
		"stippled",
		"hwndTransparent",
		"OS",
		"hwndTransparent",
		"newProc",
		"newProc",
		"oldProc",
		"resizeCursor",
		"OS",
		"resizeCursor",
		"resizeCursor",
		"tracking",
		"cancelled",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"listener",
		"SWT",
		"eventTable",
		"eventTable",
		"SWT",
		"listener",
		"eventTable",
		"SWT",
		"listener",
		"xChange",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"xChange",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"yChange",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"yChange",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"xChange",
		"bounds",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"bounds",
		"bounds",
		"xChange",
		"bounds",
		"bounds",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportion",
		"proportion",
		"proportion",
		"cursorOrientation",
		"SWT",
		"bounds",
		"xChange",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"xChange",
		"bounds",
		"bounds",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportion",
		"proportion",
		"proportion",
		"cursorOrientation",
		"SWT",
		"yChange",
		"bounds",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"bounds",
		"bounds",
		"yChange",
		"bounds",
		"bounds",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportion",
		"proportion",
		"proportion",
		"cursorOrientation",
		"SWT",
		"bounds",
		"yChange",
		"style",
		"SWT",
		"cursorOrientation",
		"SWT",
		"cursorOrientation",
		"SWT",
		"yChange",
		"bounds",
		"bounds",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportions",
		"i",
		"proportion",
		"proportion",
		"proportion",
		"cursorOrientation",
		"SWT",
		"bounds",
		"xChange",
		"bounds",
		"xChange",
		"cursorOrientation",
		"SWT",
		"bounds",
		"xChange",
		"cursorOrientation",
		"SWT",
		"bounds",
		"yChange",
		"bounds",
		"yChange",
		"cursorOrientation",
		"SWT",
		"bounds",
		"yChange",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"proportions",
		"i",
		"newRects",
		"i",
		"proportion",
		"bounds",
		"bounds",
		"proportion",
		"bounds",
		"bounds",
		"proportion",
		"bounds",
		"proportion",
		"bounds",
		"rectangles",
		"newRects",
		"clientCursor",
		"newCursor",
		"clientCursor",
		"newCursor",
		"inEvent",
		"OS",
		"clientCursor",
		"rectangles",
		"SWT",
		"rectangles",
		"length",
		"i",
		"length",
		"i",
		"rectangles",
		"i",
		"current",
		"SWT",
		"i",
		"current",
		"current",
		"current",
		"current",
		"proportions",
		"rectangles",
		"stippled",
		"msg",
		"OS",
		"inEvent",
		"OS",
		"OS",
		"clientCursor",
		"OS",
		"clientCursor",
		"resizeCursor",
		"OS",
		"resizeCursor",
		"OS",
		"oldProc",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"parent",
		"parent",
		"parent",
		"shell",
		"display",
		"hwnd",
		"wParam",
		"lParam",
		"result",
		"result",
		"parent",
		"parent",
		"SWT",
		"OS",
		"OS",
		"STEPSIZE_SMALL",
		"STEPSIZE_LARGE",
		"wParam",
		"OS",
		"cancelled",
		"tracking",
		"OS",
		"tracking",
		"OS",
		"xChange",
		"isMirrored",
		"stepSize",
		"stepSize",
		"OS",
		"xChange",
		"isMirrored",
		"stepSize",
		"stepSize",
		"OS",
		"yChange",
		"stepSize",
		"OS",
		"yChange",
		"stepSize",
		"xChange",
		"yChange",
		"rectangles",
		"stippled",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectsToErase",
		"i",
		"current",
		"current",
		"current",
		"current",
		"event",
		"oldX",
		"xChange",
		"event",
		"oldY",
		"yChange",
		"style",
		"SWT",
		"xChange",
		"yChange",
		"inEvent",
		"SWT",
		"event",
		"inEvent",
		"cancelled",
		"LRESULT",
		"rectangles",
		"oldRectangles",
		"rectangles",
		"length",
		"rectsToErase",
		"draw",
		"i",
		"length",
		"i",
		"rectangles",
		"i",
		"rectsToErase",
		"i",
		"draw",
		"draw",
		"draw",
		"rectsToErase",
		"oldStippled",
		"rectangles",
		"stippled",
		"cursorPos",
		"xChange",
		"yChange",
		"inEvent",
		"SWT",
		"event",
		"inEvent",
		"cancelled",
		"LRESULT",
		"rectangles",
		"oldRectangles",
		"rectangles",
		"length",
		"rectsToErase",
		"draw",
		"i",
		"length",
		"i",
		"rectangles",
		"i",
		"rectsToErase",
		"i",
		"draw",
		"draw",
		"draw",
		"rectsToErase",
		"oldStippled",
		"rectangles",
		"stippled",
		"cursorPos",
		"oldX",
		"cursorPos",
		"oldY",
		"cursorPos",
		"result",
		"hwnd",
		"wParam",
		"lParam",
		"result",
		"result",
		"cancelled",
		"tracking",
		"result",
		"parent",
		"parent",
		"SWT",
		"OS",
		"newPos",
		"newPos",
		"newX",
		"oldX",
		"newY",
		"oldY",
		"rectangles",
		"stippled",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectangles",
		"i",
		"rectsToErase",
		"i",
		"current",
		"current",
		"current",
		"current",
		"event",
		"newX",
		"event",
		"newY",
		"style",
		"SWT",
		"isMirrored",
		"oldX",
		"newX",
		"newY",
		"oldY",
		"newX",
		"oldX",
		"newY",
		"oldY",
		"inEvent",
		"SWT",
		"event",
		"inEvent",
		"cancelled",
		"LRESULT",
		"rectangles",
		"oldRectangles",
		"rectangles",
		"length",
		"rectsToErase",
		"draw",
		"i",
		"length",
		"i",
		"rectangles",
		"i",
		"rectsToErase",
		"i",
		"draw",
		"draw",
		"draw",
		"rectsToErase",
		"oldStippled",
		"rectangles",
		"stippled",
		"newX",
		"cursorPos",
		"newY",
		"cursorPos",
		"isMirrored",
		"oldX",
		"newX",
		"newY",
		"oldY",
		"newX",
		"oldX",
		"newY",
		"oldY",
		"inEvent",
		"SWT",
		"event",
		"inEvent",
		"cancelled",
		"LRESULT",
		"rectangles",
		"oldRectangles",
		"rectangles",
		"length",
		"rectsToErase",
		"draw",
		"i",
		"length",
		"i",
		"rectangles",
		"i",
		"rectsToErase",
		"i",
		"draw",
		"draw",
		"draw",
		"rectsToErase",
		"oldStippled",
		"rectangles",
		"stippled",
		"oldX",
		"newX",
		"oldY",
		"newY",
		"tracking",
		"message",
		"OS",
		"NONE",
		"parent",
		"ERROR_THREAD_INVALID_ACCESS",
		"style",
		"display",
		"ERROR_NULL_ARGUMENT",
		"Resize",
		"Move",
		"ERROR_NULL_ARGUMENT",
		"KeyUp",
		"KeyDown",
		"x",
		"width",
		"y",
		"x",
		"y",
		"handle",
		"x",
		"y",
		"x",
		"y",
		"LEFT",
		"x",
		"RIGHT",
		"x",
		"width",
		"x",
		"width",
		"UP",
		"y",
		"DOWN",
		"y",
		"height",
		"y",
		"height",
		"x",
		"y",
		"handle",
		"x",
		"y",
		"UP",
		"IDC_SIZENS",
		"DOWN",
		"IDC_SIZENS",
		"LEFT",
		"IDC_SIZEWE",
		"RIGHT",
		"IDC_SIZEWE",
		"LEFT",
		"UP",
		"IDC_SIZENWSE",
		"RIGHT",
		"DOWN",
		"IDC_SIZENWSE",
		"LEFT",
		"DOWN",
		"IDC_SIZENESW",
		"RIGHT",
		"UP",
		"IDC_SIZENESW",
		"IDC_SIZEALL",
		"x",
		"y",
		"LEFT",
		"RIGHT",
		"UP",
		"DOWN",
		"LEFT",
		"RIGHT",
		"UP",
		"DOWN",
		"x",
		"y",
		"x",
		"width",
		"y",
		"height",
		"length",
		"x",
		"x",
		"y",
		"y",
		"x",
		"width",
		"y",
		"height",
		"length",
		"length",
		"width",
		"x",
		"x",
		"width",
		"width",
		"width",
		"height",
		"y",
		"y",
		"height",
		"height",
		"height",
		"handle",
		"DCX_CACHE",
		"length",
		"x",
		"y",
		"width",
		"PATINVERT",
		"x",
		"y",
		"height",
		"PATINVERT",
		"x",
		"width",
		"y",
		"height",
		"PATINVERT",
		"x",
		"y",
		"height",
		"width",
		"PATINVERT",
		"length",
		"x",
		"y",
		"width",
		"height",
		"LEFT",
		"RIGHT",
		"UP",
		"DOWN",
		"x",
		"y",
		"length",
		"x",
		"y",
		"UP",
		"DOWN",
		"UP",
		"DOWN",
		"LEFT",
		"RIGHT",
		"LEFT",
		"RIGHT",
		"VK_LBUTTON",
		"SM_CXSCREEN",
		"SM_CYSCREEN",
		"WS_EX_TRANSPARENT",
		"windowClass",
		"WS_POPUP",
		"WS_VISIBLE",
		"GWL_WNDPROC",
		"ERROR_NO_MORE_CALLBACKS",
		"GWL_WNDPROC",
		"x",
		"y",
		"RESIZE",
		"x",
		"y",
		"message",
		"WM_LBUTTONUP",
		"WM_MOUSEMOVE",
		"message",
		"wParam",
		"lParam",
		"WM_IME_CHAR",
		"hwnd",
		"wParam",
		"lParam",
		"WM_CHAR",
		"hwnd",
		"wParam",
		"lParam",
		"WM_KEYDOWN",
		"hwnd",
		"wParam",
		"lParam",
		"WM_KEYUP",
		"hwnd",
		"wParam",
		"lParam",
		"WM_SYSCHAR",
		"hwnd",
		"wParam",
		"lParam",
		"WM_SYSKEYDOWN",
		"hwnd",
		"wParam",
		"lParam",
		"WM_SYSKEYUP",
		"hwnd",
		"wParam",
		"lParam",
		"WM_KEYFIRST",
		"message",
		"message",
		"WM_KEYLAST",
		"WM_MOUSEFIRST",
		"message",
		"message",
		"WM_MOUSELAST",
		"message",
		"WM_PAINT",
		"message",
		"WM_PAINT",
		"ERROR_NULL_ARGUMENT",
		"Resize",
		"Move",
		"ERROR_NULL_ARGUMENT",
		"KeyUp",
		"KeyDown",
		"LEFT",
		"RIGHT",
		"LEFT",
		"RIGHT",
		"LEFT",
		"RIGHT",
		"UP",
		"DOWN",
		"UP",
		"DOWN",
		"UP",
		"DOWN",
		"LEFT",
		"width",
		"RIGHT",
		"RIGHT",
		"LEFT",
		"x",
		"width",
		"width",
		"width",
		"length",
		"length",
		"x",
		"x",
		"width",
		"RIGHT",
		"width",
		"LEFT",
		"LEFT",
		"RIGHT",
		"width",
		"width",
		"length",
		"length",
		"x",
		"x",
		"width",
		"UP",
		"height",
		"DOWN",
		"DOWN",
		"UP",
		"y",
		"height",
		"height",
		"height",
		"length",
		"length",
		"y",
		"y",
		"height",
		"DOWN",
		"height",
		"UP",
		"UP",
		"DOWN",
		"height",
		"height",
		"length",
		"length",
		"y",
		"y",
		"height",
		"LEFT",
		"x",
		"width",
		"RIGHT",
		"width",
		"UP",
		"y",
		"height",
		"DOWN",
		"height",
		"length",
		"length",
		"x",
		"width",
		"x",
		"y",
		"height",
		"y",
		"width",
		"width",
		"height",
		"height",
		"handle",
		"ERROR_NULL_ARGUMENT",
		"length",
		"rectangles",
		"ERROR_NULL_ARGUMENT",
		"rectangles",
		"x",
		"y",
		"width",
		"height",
		"stippled",
		"WM_NCHITTEST",
		"HTTRANSPARENT",
		"WM_SETCURSOR",
		"style",
		"MIRRORED",
		"VK_CONTROL",
		"VK_ESCAPE",
		"VK_RETURN",
		"VK_LEFT",
		"VK_RIGHT",
		"VK_UP",
		"VK_DOWN",
		"length",
		"length",
		"x",
		"y",
		"width",
		"height",
		"x",
		"y",
		"RESIZE",
		"Resize",
		"ONE",
		"length",
		"length",
		"Move",
		"ONE",
		"length",
		"length",
		"x",
		"y",
		"style",
		"MIRRORED",
		"length",
		"length",
		"x",
		"y",
		"width",
		"height",
		"x",
		"y",
		"RESIZE",
		"Resize",
		"ONE",
		"length",
		"length",
		"x",
		"y",
		"Move",
		"ONE",
		"length",
		"length",
		"WM_LBUTTONUP",
		"parent",
		"style",
		"display",
		"style",
		"listener",
		"listener",
		"style",
		"rects",
		"rects",
		"stippled",
		"xChange",
		"yChange",
		"listener",
		"listener",
		"xChange",
		"yChange",
		"newCursor",
		"rectangles",
		"stippled",
		"hwnd",
		"msg",
		"wParam",
		"lParam",
		"hwnd",
		"wParam",
		"lParam",
		"hwnd",
		"wParam",
		"lParam",
		"message",
		"wParam",
		"lParam"
	],
	"extendORImplementFiles":[
		"Widget"
	],
	"package":[
		"org.eclipse.swt.widgets"
	],
	"import":[
		"org.eclipse.swt.internal",
		"org.eclipse.swt.internal.win32",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt",
		"org.eclipse.swt.events"
	],
	"methods":[
		"addControlListener",
		"addKeyListener",
		"adjustMoveCursor",
		"adjustResizeCursor",
		"checkStyle",
		"close",
		"computeBounds",
		"computeProportions",
		"drawRectangles",
		"getRectangles",
		"getStippled",
		"moveRectangles",
		"open",
		"removeControlListener",
		"removeKeyListener",
		"resizeRectangles",
		"setCursor",
		"setRectangles",
		"setStippled",
		"transparentProc",
		"update",
		"wmKeyDown",
		"wmSysKeyDown",
		"wmMouse",
		"checkStyle",
		"getCurrent",
		"getDefault",
		"isValidThread",
		"error",
		"checkStyle",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"ClientToScreen",
		"SetCursorPos",
		"ClientToScreen",
		"SetCursorPos",
		"LoadCursor",
		"LoadCursor",
		"LoadCursor",
		"LoadCursor",
		"LoadCursor",
		"LoadCursor",
		"LoadCursor",
		"LoadCursor",
		"LoadCursor",
		"SetCursor",
		"DestroyCursor",
		"checkWidget",
		"computeBounds",
		"GetDesktopWindow",
		"GetDCEx",
		"CreateBitmap",
		"CreatePatternBrush",
		"SelectObject",
		"PatBlt",
		"PatBlt",
		"PatBlt",
		"PatBlt",
		"SelectObject",
		"DeleteObject",
		"DeleteObject",
		"ReleaseDC",
		"checkWidget",
		"checkWidget",
		"checkWidget",
		"GetKeyState",
		"GetSystemMetrics",
		"GetSystemMetrics",
		"CreateWindowEx",
		"GetModuleHandle",
		"GetWindowLong",
		"getAddress",
		"error",
		"SetWindowLong",
		"update",
		"drawRectangles",
		"GetCursorPos",
		"adjustResizeCursor",
		"adjustMoveCursor",
		"isDisposed",
		"GetMessage",
		"TranslateMessage",
		"wmMouse",
		"wmIMEChar",
		"wmChar",
		"wmKeyDown",
		"wmKeyUp",
		"wmSysChar",
		"wmSysKeyDown",
		"wmSysKeyUp",
		"update",
		"drawRectangles",
		"DispatchMessage",
		"drawRectangles",
		"ReleaseCapture",
		"isDisposed",
		"update",
		"drawRectangles",
		"DestroyWindow",
		"dispose",
		"DestroyCursor",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"error",
		"unhook",
		"unhook",
		"checkWidget",
		"SetCursor",
		"checkWidget",
		"error",
		"error",
		"computeProportions",
		"checkWidget",
		"SetCursor",
		"SetCursor",
		"CallWindowProc",
		"isDisposed",
		"getShell",
		"update",
		"update",
		"wmKeyDown",
		"GetKeyState",
		"resizeRectangles",
		"sendEvent",
		"isDisposed",
		"equals",
		"drawRectangles",
		"update",
		"drawRectangles",
		"adjustResizeCursor",
		"moveRectangles",
		"sendEvent",
		"isDisposed",
		"equals",
		"drawRectangles",
		"update",
		"drawRectangles",
		"adjustMoveCursor",
		"wmSysKeyDown",
		"GetMessagePos",
		"resizeRectangles",
		"resizeRectangles",
		"sendEvent",
		"isDisposed",
		"equals",
		"drawRectangles",
		"update",
		"drawRectangles",
		"adjustResizeCursor",
		"moveRectangles",
		"moveRectangles",
		"sendEvent",
		"isDisposed",
		"equals",
		"drawRectangles",
		"update",
		"drawRectangles",
		"TypedListener",
		"TypedListener",
		"POINT",
		"Point",
		"POINT",
		"Point",
		"Rectangle",
		"Rectangle",
		"Rectangle",
		"Callback",
		"POINT",
		"Point",
		"MSG",
		"Rectangle",
		"Rectangle",
		"Rectangle",
		"Event",
		"Rectangle",
		"Event"
	],
	"methodsBody":{
		"void moveRectangles(int xChange, int yChange)":{
			"methodBody":"{\n    if (xChange < 0 && ((style & SWT.LEFT) == 0))\n        xChange = 0;\n    if (xChange > 0 && ((style & SWT.RIGHT) == 0))\n        xChange = 0;\n    if (yChange < 0 && ((style & SWT.UP) == 0))\n        yChange = 0;\n    if (yChange > 0 && ((style & SWT.DOWN) == 0))\n        yChange = 0;\n    if (xChange == 0 && yChange == 0)\n        return;\n    bounds.x += xChange;\n    bounds.y += yChange;\n    for (int i = 0; i < rectangles.length; i++) {\n        rectangles[i].x += xChange;\n        rectangles[i].y += yChange;\n    }\n}",
			"comments":"",
			"methodName":"void moveRectangles(int xChange, int yChange)"
		},
		"LRESULT wmSysKeyDown(int hwnd, int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.wmSysKeyDown(hwnd, wParam, lParam);\n    if (result != null)\n        return result;\n    cancelled = true;\n    tracking = false;\n    return result;\n}",
			"comments":"",
			"methodName":"LRESULT wmSysKeyDown(int hwnd, int wParam, int lParam)"
		},
		"public void removeControlListener(ControlListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.Resize, listener);\n    eventTable.unhook(SWT.Move, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the control is moved or resized.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ControlListener\n* @see #addControlListener\n*/\n",
			"methodName":"public void removeControlListener(ControlListener listener)"
		},
		"public void addKeyListener(KeyListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.KeyUp, typedListener);\n    addListener(SWT.KeyDown, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when keys are pressed and released on the system keyboard, by sending\n* it one of the messages defined in the <code>KeyListener</code>\n* interface.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see KeyListener\n* @see #removeKeyListener\n*/\n",
			"methodName":"public void addKeyListener(KeyListener listener)"
		},
		"public void addControlListener(ControlListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Resize, typedListener);\n    addListener(SWT.Move, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the control is moved or resized, by sending\n* it one of the messages defined in the <code>ControlListener</code>\n* interface.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ControlListener\n* @see #removeControlListener\n*/\n",
			"methodName":"public void addControlListener(ControlListener listener)"
		},
		"Point adjustMoveCursor()":{
			"methodBody":"{\n    int newX = bounds.x + bounds.width / 2;\n    int newY = bounds.y;\n    POINT pt = new POINT();\n    pt.x = newX;\n    pt.y = newY;\n    \n    if (parent != null) {\n        OS.ClientToScreen(parent.handle, pt);\n    }\n    OS.SetCursorPos(pt.x, pt.y);\n    return new Point(pt.x, pt.y);\n}",
			"comments":"/*\n* Convert to screen coordinates iff needed\n*/\n",
			"methodName":"Point adjustMoveCursor()"
		},
		"public boolean getStippled()":{
			"methodBody":"{\n    checkWidget();\n    return stippled;\n}",
			"comments":"/**\n* Returns <code>true</code> if the rectangles are drawn with a stippled line, <code>false</code> otherwise.\n*\n* @return the stippled effect of the rectangles\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public boolean getStippled()"
		},
		"public boolean open()":{
			"methodBody":"{\n    checkWidget();\n    if (rectangles == null)\n        return false;\n    cancelled = false;\n    tracking = true;\n    \n    int vStyle = style & (SWT.UP | SWT.DOWN);\n    if (vStyle == SWT.UP || vStyle == SWT.DOWN) {\n        cursorOrientation |= vStyle;\n    }\n    int hStyle = style & (SWT.LEFT | SWT.RIGHT);\n    if (hStyle == SWT.LEFT || hStyle == SWT.RIGHT) {\n        cursorOrientation |= hStyle;\n    }\n    \n    int hwndTransparent = 0;\n    Callback newProc = null;\n    boolean mouseDown = OS.GetKeyState(OS.VK_LBUTTON) < 0;\n    if (!mouseDown) {\n        int width = OS.GetSystemMetrics(OS.SM_CXSCREEN);\n        int height = OS.GetSystemMetrics(OS.SM_CYSCREEN);\n        hwndTransparent = OS.CreateWindowEx(OS.WS_EX_TRANSPARENT, display.windowClass, null, OS.WS_POPUP | OS.WS_VISIBLE, 0, 0, width, height, 0, 0, OS.GetModuleHandle(null), null);\n        oldProc = OS.GetWindowLong(hwndTransparent, OS.GWL_WNDPROC);\n        \n        newProc = new Callback(this, \"transparentProc\", 4);\n        int newProcAddress = newProc.getAddress();\n        if (newProcAddress == 0)\n            SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);\n        OS.SetWindowLong(hwndTransparent, OS.GWL_WNDPROC, newProcAddress);\n    }\n    update();\n    drawRectangles(rectangles, stippled);\n    Point cursorPos;\n    if (mouseDown) {\n        POINT pt = new POINT();\n        OS.GetCursorPos(pt);\n        cursorPos = new Point(pt.x, pt.y);\n    } else {\n        if ((style & SWT.RESIZE) != 0) {\n            cursorPos = adjustResizeCursor();\n        } else {\n            cursorPos = adjustMoveCursor();\n        }\n    }\n    oldX = cursorPos.x;\n    oldY = cursorPos.y;\n    \n    MSG msg = new MSG();\n    while (tracking && !cancelled) {\n        if (parent != null && parent.isDisposed())\n            break;\n        OS.GetMessage(msg, 0, 0, 0);\n        OS.TranslateMessage(msg);\n        switch(msg.message) {\n            case OS.WM_LBUTTONUP:\n            case OS.WM_MOUSEMOVE:\n                wmMouse(msg.message, msg.wParam, msg.lParam);\n                break;\n            case OS.WM_IME_CHAR:\n                wmIMEChar(msg.hwnd, msg.wParam, msg.lParam);\n                break;\n            case OS.WM_CHAR:\n                wmChar(msg.hwnd, msg.wParam, msg.lParam);\n                break;\n            case OS.WM_KEYDOWN:\n                wmKeyDown(msg.hwnd, msg.wParam, msg.lParam);\n                break;\n            case OS.WM_KEYUP:\n                wmKeyUp(msg.hwnd, msg.wParam, msg.lParam);\n                break;\n            case OS.WM_SYSCHAR:\n                wmSysChar(msg.hwnd, msg.wParam, msg.lParam);\n                break;\n            case OS.WM_SYSKEYDOWN:\n                wmSysKeyDown(msg.hwnd, msg.wParam, msg.lParam);\n                break;\n            case OS.WM_SYSKEYUP:\n                wmSysKeyUp(msg.hwnd, msg.wParam, msg.lParam);\n                break;\n        }\n        if (OS.WM_KEYFIRST <= msg.message && msg.message <= OS.WM_KEYLAST)\n            continue;\n        if (OS.WM_MOUSEFIRST <= msg.message && msg.message <= OS.WM_MOUSELAST)\n            continue;\n        if (msg.message == OS.WM_PAINT) {\n            update();\n            drawRectangles(rectangles, stippled);\n        }\n        OS.DispatchMessage(msg);\n        if (msg.message == OS.WM_PAINT) {\n            drawRectangles(rectangles, stippled);\n        }\n    }\n    if (mouseDown)\n        OS.ReleaseCapture();\n    if (!isDisposed()) {\n        update();\n        drawRectangles(rectangles, stippled);\n    }\n    \n    if (hwndTransparent != 0) {\n        OS.DestroyWindow(hwndTransparent);\n    }\n    if (newProc != null) {\n        newProc.dispose();\n        oldProc = 0;\n    }\n    \n    if (resizeCursor != 0) {\n        OS.DestroyCursor(resizeCursor);\n        resizeCursor = 0;\n    }\n    tracking = false;\n    return !cancelled;\n}",
			"comments":"/**\n* Displays the Tracker rectangles for manipulation by the user.  Returns when\n* the user has either finished manipulating the rectangles or has cancelled the\n* Tracker.\n*\n* @return <code>true</code> if the user did not cancel the Tracker, <code>false</code> otherwise\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n/*\n* If exactly one of UP/DOWN is specified as a style then set the cursor\n* orientation accordingly (the same is done for LEFT/RIGHT styles below).\n*/\n/*\n* If this tracker is being created without a mouse drag then\n* we need to create a transparent window that fills the screen\n* in order to get all mouse/keyboard events that occur\n* outside of our visible windows (ie.- over the desktop).\n*/\n//$NON-NLS-1$\n/* Tracker behaves like a Dialog with its own OS event loop. */\n/*\n* Cleanup: If a transparent window was created in order to capture events then\n* destroy it and its callback object now.\n*/\n/*\n* Cleanup: If this tracker was resizing then the last cursor that it created\n* needs to be destroyed.\n*/\n",
			"methodName":"public boolean open()"
		},
		"LRESULT wmMouse(int message, int wParam, int lParam)":{
			"methodBody":"{\n    boolean isMirrored = parent != null && (parent.style & SWT.MIRRORED) != 0;\n    int newPos = OS.GetMessagePos();\n    int newX = (short) (newPos & 0xFFFF);\n    int newY = (short) (newPos >> 16);\n    if (newX != oldX || newY != oldY) {\n        Rectangle[] oldRectangles = rectangles;\n        boolean oldStippled = stippled;\n        Rectangle[] rectsToErase = new Rectangle[rectangles.length];\n        for (int i = 0; i < rectangles.length; i++) {\n            Rectangle current = rectangles[i];\n            rectsToErase[i] = new Rectangle(current.x, current.y, current.width, current.height);\n        }\n        Event event = new Event();\n        event.x = newX;\n        event.y = newY;\n        if ((style & SWT.RESIZE) != 0) {\n            if (isMirrored) {\n                resizeRectangles(oldX - newX, newY - oldY);\n            } else {\n                resizeRectangles(newX - oldX, newY - oldY);\n            }\n            inEvent = true;\n            sendEvent(SWT.Resize, event);\n            inEvent = false;\n            \n            if (isDisposed()) {\n                cancelled = true;\n                return LRESULT.ONE;\n            }\n            boolean draw = false;\n            \n            if (rectangles != oldRectangles) {\n                int length = rectangles.length;\n                if (length != rectsToErase.length) {\n                    draw = true;\n                } else {\n                    for (int i = 0; i < length; i++) {\n                        if (!rectangles[i].equals(rectsToErase[i])) {\n                            draw = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                draw = true;\n            }\n            if (draw) {\n                drawRectangles(rectsToErase, oldStippled);\n                update();\n                drawRectangles(rectangles, stippled);\n            }\n            Point cursorPos = adjustResizeCursor();\n            newX = cursorPos.x;\n            newY = cursorPos.y;\n        } else {\n            if (isMirrored) {\n                moveRectangles(oldX - newX, newY - oldY);\n            } else {\n                moveRectangles(newX - oldX, newY - oldY);\n            }\n            inEvent = true;\n            sendEvent(SWT.Move, event);\n            inEvent = false;\n            \n            if (isDisposed()) {\n                cancelled = true;\n                return LRESULT.ONE;\n            }\n            boolean draw = false;\n            \n            if (rectangles != oldRectangles) {\n                int length = rectangles.length;\n                if (length != rectsToErase.length) {\n                    draw = true;\n                } else {\n                    for (int i = 0; i < length; i++) {\n                        if (!rectangles[i].equals(rectsToErase[i])) {\n                            draw = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                draw = true;\n            }\n            if (draw) {\n                drawRectangles(rectsToErase, oldStippled);\n                update();\n                drawRectangles(rectangles, stippled);\n            }\n        }\n        oldX = newX;\n        oldY = newY;\n    }\n    tracking = message != OS.WM_LBUTTONUP;\n    return null;\n}",
			"comments":"/*\n* It is possible (but unlikely), that application\n* code could have disposed the widget in the resize\n* event.  If this happens, return false to indicate\n* that the tracking has failed.\n*/\n/*\n* It is possible that application code could have\n* changed the rectangles in the resize event.  If this\n* happens then only redraw the tracker if the rectangle\n* values have changed.\n*/\n/*\n* It is possible (but unlikely), that application\n* code could have disposed the widget in the move\n* event.  If this happens, return false to indicate\n* that the tracking has failed.\n*/\n/*\n* It is possible that application code could have\n* changed the rectangles in the move event.  If this\n* happens then only redraw the tracker if the rectangle\n* values have changed.\n*/\n",
			"methodName":"LRESULT wmMouse(int message, int wParam, int lParam)"
		},
		"public void setStippled(boolean stippled)":{
			"methodBody":"{\n    checkWidget();\n    this.stippled = stippled;\n}",
			"comments":"/**\n* Changes the appearance of the line used to draw the rectangles.\n*\n* @param stippled <code>true</code> if rectangle should appear stippled\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setStippled(boolean stippled)"
		},
		"public void setRectangles(Rectangle[] rectangles)":{
			"methodBody":"{\n    checkWidget();\n    if (rectangles == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    int length = rectangles.length;\n    this.rectangles = new Rectangle[length];\n    for (int i = 0; i < length; i++) {\n        Rectangle current = rectangles[i];\n        if (current == null)\n            error(SWT.ERROR_NULL_ARGUMENT);\n        this.rectangles[i] = new Rectangle(current.x, current.y, current.width, current.height);\n    }\n    proportions = computeProportions(rectangles);\n}",
			"comments":"/**\n* Specifies the rectangles that should be drawn, expressed relative to the parent\n* widget.  If the parent is a Display then these are screen coordinates.\n*\n* @param rectangles the bounds of the rectangles to be drawn\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the set of rectangles is null or contains a null rectangle</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setRectangles(Rectangle[] rectangles)"
		},
		"Rectangle computeBounds()":{
			"methodBody":"{\n    int xMin = rectangles[0].x;\n    int yMin = rectangles[0].y;\n    int xMax = rectangles[0].x + rectangles[0].width;\n    int yMax = rectangles[0].y + rectangles[0].height;\n    for (int i = 1; i < rectangles.length; i++) {\n        if (rectangles[i].x < xMin)\n            xMin = rectangles[i].x;\n        if (rectangles[i].y < yMin)\n            yMin = rectangles[i].y;\n        int rectRight = rectangles[i].x + rectangles[i].width;\n        if (rectRight > xMax)\n            xMax = rectRight;\n        int rectBottom = rectangles[i].y + rectangles[i].height;\n        if (rectBottom > yMax)\n            yMax = rectBottom;\n    }\n    return new Rectangle(xMin, yMin, xMax - xMin, yMax - yMin);\n}",
			"comments":"",
			"methodName":"Rectangle computeBounds()"
		},
		"void resizeRectangles(int xChange, int yChange)":{
			"methodBody":"{\n    \n    if (xChange < 0 && ((style & SWT.LEFT) != 0) && ((cursorOrientation & SWT.RIGHT) == 0)) {\n        cursorOrientation |= SWT.LEFT;\n    }\n    if (xChange > 0 && ((style & SWT.RIGHT) != 0) && ((cursorOrientation & SWT.LEFT) == 0)) {\n        cursorOrientation |= SWT.RIGHT;\n    }\n    if (yChange < 0 && ((style & SWT.UP) != 0) && ((cursorOrientation & SWT.DOWN) == 0)) {\n        cursorOrientation |= SWT.UP;\n    }\n    if (yChange > 0 && ((style & SWT.DOWN) != 0) && ((cursorOrientation & SWT.UP) == 0)) {\n        cursorOrientation |= SWT.DOWN;\n    }\n    \n    if ((cursorOrientation & SWT.LEFT) != 0) {\n        if (xChange > bounds.width) {\n            if ((style & SWT.RIGHT) == 0)\n                return;\n            cursorOrientation |= SWT.RIGHT;\n            cursorOrientation &= ~SWT.LEFT;\n            bounds.x += bounds.width;\n            xChange -= bounds.width;\n            bounds.width = 0;\n            if (proportions.length > 1) {\n                for (int i = 0; i < proportions.length; i++) {\n                    Rectangle proportion = proportions[i];\n                    proportion.x = 100 - proportion.x - proportion.width;\n                }\n            }\n        }\n    } else if ((cursorOrientation & SWT.RIGHT) != 0) {\n        if (bounds.width < -xChange) {\n            if ((style & SWT.LEFT) == 0)\n                return;\n            cursorOrientation |= SWT.LEFT;\n            cursorOrientation &= ~SWT.RIGHT;\n            xChange += bounds.width;\n            bounds.width = 0;\n            if (proportions.length > 1) {\n                for (int i = 0; i < proportions.length; i++) {\n                    Rectangle proportion = proportions[i];\n                    proportion.x = 100 - proportion.x - proportion.width;\n                }\n            }\n        }\n    }\n    if ((cursorOrientation & SWT.UP) != 0) {\n        if (yChange > bounds.height) {\n            if ((style & SWT.DOWN) == 0)\n                return;\n            cursorOrientation |= SWT.DOWN;\n            cursorOrientation &= ~SWT.UP;\n            bounds.y += bounds.height;\n            yChange -= bounds.height;\n            bounds.height = 0;\n            if (proportions.length > 1) {\n                for (int i = 0; i < proportions.length; i++) {\n                    Rectangle proportion = proportions[i];\n                    proportion.y = 100 - proportion.y - proportion.height;\n                }\n            }\n        }\n    } else if ((cursorOrientation & SWT.DOWN) != 0) {\n        if (bounds.height < -yChange) {\n            if ((style & SWT.UP) == 0)\n                return;\n            cursorOrientation |= SWT.UP;\n            cursorOrientation &= ~SWT.DOWN;\n            yChange += bounds.height;\n            bounds.height = 0;\n            if (proportions.length > 1) {\n                for (int i = 0; i < proportions.length; i++) {\n                    Rectangle proportion = proportions[i];\n                    proportion.y = 100 - proportion.y - proportion.height;\n                }\n            }\n        }\n    }\n    \n    if ((cursorOrientation & SWT.LEFT) != 0) {\n        bounds.x += xChange;\n        bounds.width -= xChange;\n    } else if ((cursorOrientation & SWT.RIGHT) != 0) {\n        bounds.width += xChange;\n    }\n    if ((cursorOrientation & SWT.UP) != 0) {\n        bounds.y += yChange;\n        bounds.height -= yChange;\n    } else if ((cursorOrientation & SWT.DOWN) != 0) {\n        bounds.height += yChange;\n    }\n    Rectangle[] newRects = new Rectangle[rectangles.length];\n    for (int i = 0; i < rectangles.length; i++) {\n        Rectangle proportion = proportions[i];\n        newRects[i] = new Rectangle(proportion.x * bounds.width / 100 + bounds.x, proportion.y * bounds.height / 100 + bounds.y, proportion.width * bounds.width / 100, proportion.height * bounds.height / 100);\n    }\n    rectangles = newRects;\n}",
			"comments":"/*\n* If the cursor orientation has not been set in the orientation of\n* this change then try to set it here.\n*/\n/*\n* If the bounds will flip about the x or y axis then apply the adjustment\n* up to the axis (ie.- where bounds width/height becomes 0), change the\n* cursor's orientation accordingly, and flip each Rectangle's origin (only\n* necessary for > 1 Rectangles)\n*/\n// apply the bounds adjustment\n",
			"methodName":"void resizeRectangles(int xChange, int yChange)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    if ((style & (SWT.LEFT | SWT.RIGHT | SWT.UP | SWT.DOWN)) == 0) {\n        style |= SWT.LEFT | SWT.RIGHT | SWT.UP | SWT.DOWN;\n    }\n    return style;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"Point adjustResizeCursor()":{
			"methodBody":"{\n    int newX, newY;\n    if ((cursorOrientation & SWT.LEFT) != 0) {\n        newX = bounds.x;\n    } else if ((cursorOrientation & SWT.RIGHT) != 0) {\n        newX = bounds.x + bounds.width;\n    } else {\n        newX = bounds.x + bounds.width / 2;\n    }\n    if ((cursorOrientation & SWT.UP) != 0) {\n        newY = bounds.y;\n    } else if ((cursorOrientation & SWT.DOWN) != 0) {\n        newY = bounds.y + bounds.height;\n    } else {\n        newY = bounds.y + bounds.height / 2;\n    }\n    POINT pt = new POINT();\n    pt.x = newX;\n    pt.y = newY;\n    \n    if (parent != null) {\n        OS.ClientToScreen(parent.handle, pt);\n    }\n    OS.SetCursorPos(pt.x, pt.y);\n    \n    if (clientCursor == 0) {\n        int newCursor = 0;\n        switch(cursorOrientation) {\n            case SWT.UP:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZENS);\n                break;\n            case SWT.DOWN:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZENS);\n                break;\n            case SWT.LEFT:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZEWE);\n                break;\n            case SWT.RIGHT:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZEWE);\n                break;\n            case SWT.LEFT | SWT.UP:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZENWSE);\n                break;\n            case SWT.RIGHT | SWT.DOWN:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZENWSE);\n                break;\n            case SWT.LEFT | SWT.DOWN:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZENESW);\n                break;\n            case SWT.RIGHT | SWT.UP:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZENESW);\n                break;\n            default:\n                newCursor = OS.LoadCursor(0, OS.IDC_SIZEALL);\n                break;\n        }\n        OS.SetCursor(newCursor);\n        if (resizeCursor != 0) {\n            OS.DestroyCursor(resizeCursor);\n        }\n        resizeCursor = newCursor;\n    }\n    return new Point(pt.x, pt.y);\n}",
			"comments":"/*\n* Convert to screen coordinates iff needed\n*/\n/*\n* If the client has not provided a custom cursor then determine\n* the appropriate resize cursor.\n*/\n",
			"methodName":"Point adjustResizeCursor()"
		},
		"public void close()":{
			"methodBody":"{\n    checkWidget();\n    tracking = false;\n}",
			"comments":"/**\n* Stops displaying the tracker rectangles.  Note that this is not considered\n* to be a cancelation by the user.\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void close()"
		},
		"int transparentProc(int hwnd, int msg, int wParam, int lParam)":{
			"methodBody":"{\n    switch(msg) {\n        \n        case OS.WM_NCHITTEST:\n            if (inEvent)\n                return OS.HTTRANSPARENT;\n            break;\n        case OS.WM_SETCURSOR:\n            if (clientCursor != 0) {\n                OS.SetCursor(clientCursor);\n                return 1;\n            }\n            if (resizeCursor != 0) {\n                OS.SetCursor(resizeCursor);\n                return 1;\n            }\n    }\n    return OS.CallWindowProc(oldProc, hwnd, msg, wParam, lParam);\n}",
			"comments":"/*\n* We typically do not want to answer that the transparent window is\n* transparent to hits since doing so negates the effect of having it\n* to grab events.  However, clients of the tracker should not be aware\n* of this transparent window.  Therefore if there is a hit query\n* performed as a result of client code then answer that the transparent\n* window is transparent to hits so that its existence will not impact\n* the client.\n*/\n",
			"methodName":"int transparentProc(int hwnd, int msg, int wParam, int lParam)"
		},
		"void update()":{
			"methodBody":"{\n    if (parent != null) {\n        if (parent.isDisposed())\n            return;\n        Shell shell = parent.getShell();\n        shell.update(true);\n    } else {\n        display.update();\n    }\n}",
			"comments":"",
			"methodName":"void update()"
		},
		"void drawRectangles(Rectangle[] rects, boolean stippled)":{
			"methodBody":"{\n    int bandWidth = 1;\n    int hwndTrack = OS.GetDesktopWindow();\n    if (parent != null)\n        hwndTrack = parent.handle;\n    int hDC = OS.GetDCEx(hwndTrack, 0, OS.DCX_CACHE);\n    int hBitmap = 0, hBrush = 0, oldBrush = 0;\n    if (stippled) {\n        bandWidth = 3;\n        byte[] bits = { -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0 };\n        hBitmap = OS.CreateBitmap(8, 8, 1, 1, bits);\n        hBrush = OS.CreatePatternBrush(hBitmap);\n        oldBrush = OS.SelectObject(hDC, hBrush);\n    }\n    for (int i = 0; i < rects.length; i++) {\n        Rectangle rect = rects[i];\n        OS.PatBlt(hDC, rect.x, rect.y, rect.width, bandWidth, OS.PATINVERT);\n        OS.PatBlt(hDC, rect.x, rect.y + bandWidth, bandWidth, rect.height - (bandWidth * 2), OS.PATINVERT);\n        OS.PatBlt(hDC, rect.x + rect.width - bandWidth, rect.y + bandWidth, bandWidth, rect.height - (bandWidth * 2), OS.PATINVERT);\n        OS.PatBlt(hDC, rect.x, rect.y + rect.height - bandWidth, rect.width, bandWidth, OS.PATINVERT);\n    }\n    if (stippled) {\n        OS.SelectObject(hDC, oldBrush);\n        OS.DeleteObject(hBrush);\n        OS.DeleteObject(hBitmap);\n    }\n    OS.ReleaseDC(hwndTrack, hDC);\n}",
			"comments":"/**\n* Draw the rectangles displayed by the tracker.\n*/\n",
			"methodName":"void drawRectangles(Rectangle[] rects, boolean stippled)"
		},
		"public Rectangle[] getRectangles()":{
			"methodBody":"{\n    checkWidget();\n    int length = 0;\n    if (rectangles != null)\n        length = rectangles.length;\n    Rectangle[] result = new Rectangle[length];\n    for (int i = 0; i < length; i++) {\n        Rectangle current = rectangles[i];\n        result[i] = new Rectangle(current.x, current.y, current.width, current.height);\n    }\n    return result;\n}",
			"comments":"/**\n* Returns the bounds that are being drawn, expressed relative to the parent\n* widget.  If the parent is a <code>Display</code> then these are screen\n* coordinates.\n*\n* @return the bounds of the Rectangles being drawn\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Rectangle[] getRectangles()"
		},
		"public void setCursor(Cursor newCursor)":{
			"methodBody":"{\n    checkWidget();\n    clientCursor = 0;\n    if (newCursor != null) {\n        clientCursor = newCursor.handle;\n        if (inEvent)\n            OS.SetCursor(clientCursor);\n    }\n}",
			"comments":"/**\n* Sets the <code>Cursor</code> of the Tracker.  If this cursor is <code>null</code>\n* then the cursor reverts to the default.\n*\n* @param newCursor the new <code>Cursor</code> to display\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setCursor(Cursor newCursor)"
		},
		"Rectangle[] computeProportions(Rectangle[] rects)":{
			"methodBody":"{\n    Rectangle[] result = new Rectangle[rects.length];\n    bounds = computeBounds();\n    for (int i = 0; i < rects.length; i++) {\n        int x = 0, y = 0, width = 0, height = 0;\n        if (bounds.width != 0) {\n            x = (rects[i].x - bounds.x) * 100 / bounds.width;\n            width = rects[i].width * 100 / bounds.width;\n        } else {\n            width = 100;\n        }\n        if (bounds.height != 0) {\n            y = (rects[i].y - bounds.y) * 100 / bounds.height;\n            height = rects[i].height * 100 / bounds.height;\n        } else {\n            height = 100;\n        }\n        result[i] = new Rectangle(x, y, width, height);\n    }\n    return result;\n}",
			"comments":"",
			"methodName":"Rectangle[] computeProportions(Rectangle[] rects)"
		},
		"public void removeKeyListener(KeyListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        error(SWT.ERROR_NULL_ARGUMENT);\n    if (eventTable == null)\n        return;\n    eventTable.unhook(SWT.KeyUp, listener);\n    eventTable.unhook(SWT.KeyDown, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when keys are pressed and released on the system keyboard.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see KeyListener\n* @see #addKeyListener\n*/\n",
			"methodName":"public void removeKeyListener(KeyListener listener)"
		},
		"LRESULT wmKeyDown(int hwnd, int wParam, int lParam)":{
			"methodBody":"{\n    LRESULT result = super.wmKeyDown(hwnd, wParam, lParam);\n    if (result != null)\n        return result;\n    boolean isMirrored = parent != null && (parent.style & SWT.MIRRORED) != 0;\n    int stepSize = OS.GetKeyState(OS.VK_CONTROL) < 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;\n    int xChange = 0, yChange = 0;\n    switch(wParam) {\n        case OS.VK_ESCAPE:\n            cancelled = true;\n            tracking = false;\n            break;\n        case OS.VK_RETURN:\n            tracking = false;\n            break;\n        case OS.VK_LEFT:\n            xChange = isMirrored ? stepSize : -stepSize;\n            break;\n        case OS.VK_RIGHT:\n            xChange = isMirrored ? -stepSize : stepSize;\n            break;\n        case OS.VK_UP:\n            yChange = -stepSize;\n            break;\n        case OS.VK_DOWN:\n            yChange = stepSize;\n            break;\n    }\n    if (xChange != 0 || yChange != 0) {\n        Rectangle[] oldRectangles = rectangles;\n        boolean oldStippled = stippled;\n        Rectangle[] rectsToErase = new Rectangle[rectangles.length];\n        for (int i = 0; i < rectangles.length; i++) {\n            Rectangle current = rectangles[i];\n            rectsToErase[i] = new Rectangle(current.x, current.y, current.width, current.height);\n        }\n        Event event = new Event();\n        event.x = oldX + xChange;\n        event.y = oldY + yChange;\n        Point cursorPos;\n        if ((style & SWT.RESIZE) != 0) {\n            resizeRectangles(xChange, yChange);\n            inEvent = true;\n            sendEvent(SWT.Resize, event);\n            inEvent = false;\n            \n            if (isDisposed()) {\n                cancelled = true;\n                return LRESULT.ONE;\n            }\n            boolean draw = false;\n            \n            if (rectangles != oldRectangles) {\n                int length = rectangles.length;\n                if (length != rectsToErase.length) {\n                    draw = true;\n                } else {\n                    for (int i = 0; i < length; i++) {\n                        if (!rectangles[i].equals(rectsToErase[i])) {\n                            draw = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                draw = true;\n            }\n            if (draw) {\n                drawRectangles(rectsToErase, oldStippled);\n                update();\n                drawRectangles(rectangles, stippled);\n            }\n            cursorPos = adjustResizeCursor();\n        } else {\n            moveRectangles(xChange, yChange);\n            inEvent = true;\n            sendEvent(SWT.Move, event);\n            inEvent = false;\n            \n            if (isDisposed()) {\n                cancelled = true;\n                return LRESULT.ONE;\n            }\n            boolean draw = false;\n            \n            if (rectangles != oldRectangles) {\n                int length = rectangles.length;\n                if (length != rectsToErase.length) {\n                    draw = true;\n                } else {\n                    for (int i = 0; i < length; i++) {\n                        if (!rectangles[i].equals(rectsToErase[i])) {\n                            draw = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                draw = true;\n            }\n            if (draw) {\n                drawRectangles(rectsToErase, oldStippled);\n                update();\n                drawRectangles(rectangles, stippled);\n            }\n            cursorPos = adjustMoveCursor();\n        }\n        oldX = cursorPos.x;\n        oldY = cursorPos.y;\n    }\n    return result;\n}",
			"comments":"/*\n* It is possible (but unlikely) that application\n* code could have disposed the widget in the resize\n* event.  If this happens return false to indicate\n* that the tracking has failed.\n*/\n/*\n* It is possible that application code could have\n* changed the rectangles in the resize event.  If this\n* happens then only redraw the tracker if the rectangle\n* values have changed.\n*/\n/*\n* It is possible (but unlikely) that application\n* code could have disposed the widget in the move\n* event.  If this happens return false to indicate\n* that the tracking has failed.\n*/\n/*\n* It is possible that application code could have\n* changed the rectangles in the move event.  If this\n* happens then only redraw the tracker if the rectangle\n* values have changed.\n*/\n",
			"methodName":"LRESULT wmKeyDown(int hwnd, int wParam, int lParam)"
		}
	},
	"ClassORInterfaceName":[
		"Tracker"
	]
}
