{
	"variables":[
		"currentChunk",
		"chunkReader",
		"currentByte",
		"nextByteIndex",
		"nextBitIndex",
		"lzBlockReader",
		"adlerValue",
		"PRIME",
		"MAX_BIT",
		"value",
		"i",
		"mask",
		"chunk",
		"nextByte",
		"low",
		"high",
		"valueInt",
		"nextDecodedByte",
		"headerByte1",
		"headerByte2",
		"number",
		"compressionMethod",
		"windowSizeHint",
		"windowSize",
		"dictionary",
		"storedAdler",
		"idatChunk",
		"chunkReader",
		"nextByteIndex",
		"nextBitIndex",
		"MAX_BIT",
		"adlerValue",
		"lzBlockReader",
		"lzBlockReader",
		"lzBlockReader",
		"i",
		"length",
		"i",
		"value",
		"i",
		"value",
		"nextBitIndex",
		"MAX_BIT",
		"currentByte",
		"nextBitIndex",
		"nextBitIndex",
		"nextBitIndex",
		"currentByte",
		"mask",
		"chunkReader",
		"chunk",
		"chunk",
		"PngChunk",
		"chunk",
		"nextByteIndex",
		"currentChunk",
		"currentChunk",
		"nextByteIndex",
		"currentChunk",
		"nextByteIndex",
		"nextByteIndex",
		"nextBitIndex",
		"MAX_BIT",
		"nextByte",
		"adlerValue",
		"adlerValue",
		"value",
		"low",
		"low",
		"valueInt",
		"PRIME",
		"high",
		"low",
		"high",
		"PRIME",
		"adlerValue",
		"high",
		"low",
		"lzBlockReader",
		"nextDecodedByte",
		"nextDecodedByte",
		"SWT",
		"SWT",
		"headerByte1",
		"headerByte2",
		"number",
		"headerByte1",
		"compressionMethod",
		"headerByte1",
		"windowSizeHint",
		"windowSizeHint",
		"lzBlockReader",
		"windowSize",
		"headerByte2",
		"dictionary",
		"storedAdler",
		"adlerValue",
		"currentChunk",
		"chunkReader",
		"CHUNK_IDAT",
		"ERROR_INVALID_IMAGE",
		"idatChunk",
		"chunkReader",
		"length",
		"value"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.internal.image"
	],
	"import":[
		"org.eclipse.swt"
	],
	"methods":[
		"assertImageDataAtEnd",
		"getNextIdatBits",
		"getNextIdatBit",
		"getNextChunk",
		"getNextIdatByte",
		"updateAdler",
		"getNextDecodedByte",
		"error",
		"readCompressedDataHeader",
		"checkAdler",
		"readCompressedDataHeader",
		"readNextBlockHeader",
		"assertCompressedDataAtEnd",
		"getNextIdatBit",
		"getNextIdatByte",
		"readNextChunk",
		"error",
		"getChunkType",
		"error",
		"getLength",
		"getNextChunk",
		"getDataByteAtOffset",
		"getNextByte",
		"updateAdler",
		"error",
		"getNextIdatByte",
		"getNextIdatByte",
		"error",
		"error",
		"error",
		"setWindowSize",
		"error",
		"getNextIdatByte",
		"getNextIdatByte",
		"getNextIdatByte",
		"getNextIdatByte",
		"error",
		"PngLzBlockReader"
	],
	"methodsBody":{
		"byte getNextDecodedByte()":{
			"methodBody":"{\n    byte nextDecodedByte = lzBlockReader.getNextByte();\n    updateAdler(nextDecodedByte);\n    return nextDecodedByte;\n}",
			"comments":"",
			"methodName":"byte getNextDecodedByte()"
		},
		"void assertImageDataAtEnd()":{
			"methodBody":"{\n    lzBlockReader.assertCompressedDataAtEnd();\n}",
			"comments":"/**\n* This method should be called when the image decoder thinks\n* that all of the compressed image data has been read. This\n* method will ensure that the next data value is an end of\n* block marker. If there are more blocks after this one,\n* the method will read them and ensure that they are empty.\n*/\n",
			"methodName":"void assertImageDataAtEnd()"
		},
		"int getNextIdatBits(int length)":{
			"methodBody":"{\n    int value = 0;\n    for (int i = 0; i < length; i++) {\n        value |= (getNextIdatBit() << i);\n    }\n    return value;\n}",
			"comments":"",
			"methodName":"int getNextIdatBits(int length)"
		},
		"void error()":{
			"methodBody":"{\n    SWT.error(SWT.ERROR_INVALID_IMAGE);\n}",
			"comments":"",
			"methodName":"void error()"
		},
		"void checkAdler()":{
			"methodBody":"{\n    int storedAdler = ((getNextIdatByte() & 0xFF) << 24) | ((getNextIdatByte() & 0xFF) << 16) | ((getNextIdatByte() & 0xFF) << 8) | (getNextIdatByte() & 0xFF);\n    if (storedAdler != adlerValue)\n        error();\n}",
			"comments":"",
			"methodName":"void checkAdler()"
		},
		"private void readCompressedDataHeader()":{
			"methodBody":"{\n    byte headerByte1 = getNextIdatByte();\n    byte headerByte2 = getNextIdatByte();\n    int number = ((headerByte1 & 0xFF) << 8) | (headerByte2 & 0xFF);\n    if (number % 31 != 0)\n        error();\n    int compressionMethod = headerByte1 & 0x0F;\n    if (compressionMethod != 8)\n        error();\n    int windowSizeHint = (headerByte1 & 0xF0) >> 4;\n    if (windowSizeHint > 7)\n        error();\n    int windowSize = (1 << (windowSizeHint + 8));\n    lzBlockReader.setWindowSize(windowSize);\n    int dictionary = (headerByte2 & (1 << 5));\n    if (dictionary != 0)\n        error();\n\n}",
			"comments":"//\tint compressionLevel = (headerByte2 & 0xC0) >> 6;\n",
			"methodName":"private void readCompressedDataHeader()"
		},
		"byte getNextIdatBit()":{
			"methodBody":"{\n    if (nextBitIndex > MAX_BIT) {\n        currentByte = getNextIdatByte();\n        nextBitIndex = 0;\n    }\n    int mask = 1 << nextBitIndex;\n    nextBitIndex++;\n    return ((currentByte & mask) > 0) ? (byte) 1 : (byte) 0;\n}",
			"comments":"",
			"methodName":"byte getNextIdatBit()"
		},
		"byte getNextIdatByte()":{
			"methodBody":"{\n    if (nextByteIndex > currentChunk.getLength() - 1) {\n        currentChunk = getNextChunk();\n        nextByteIndex = 0;\n    }\n    byte nextByte = currentChunk.getDataByteAtOffset(nextByteIndex);\n    nextByteIndex++;\n    nextBitIndex = MAX_BIT + 1;\n    return nextByte;\n}",
			"comments":"",
			"methodName":"byte getNextIdatByte()"
		},
		"private void updateAdler(byte value)":{
			"methodBody":"{\n    int low = adlerValue & 0xFFFF;\n    int high = (adlerValue >> 16) & 0xFFFF;\n    int valueInt = value & 0xFF;\n    low = (low + valueInt) % PRIME;\n    high = (low + high) % PRIME;\n    adlerValue = (high << 16) | low;\n}",
			"comments":"",
			"methodName":"private void updateAdler(byte value)"
		},
		"private PngIdatChunk getNextChunk()":{
			"methodBody":"{\n    PngChunk chunk = chunkReader.readNextChunk();\n    if (chunk == null)\n        error();\n    if (chunk.getChunkType() != PngChunk.CHUNK_IDAT)\n        error();\n    return (PngIdatChunk) chunk;\n}",
			"comments":"",
			"methodName":"private PngIdatChunk getNextChunk()"
		}
	},
	"ClassORInterfaceName":[
		"PngDecodingDataStream"
	]
}
