{
	"variables":[
		"data",
		"logicalScreenWidth",
		"logicalScreenHeight",
		"backgroundPixel",
		"repeatCount",
		"imageLoaderListeners",
		"stream",
		"stream",
		"size",
		"i",
		"listener",
		"data",
		"logicalScreenWidth",
		"logicalScreenHeight",
		"backgroundPixel",
		"repeatCount",
		"stream",
		"SWT",
		"SWT",
		"data",
		"FileFormat",
		"stream",
		"data",
		"filename",
		"SWT",
		"SWT",
		"stream",
		"Compatibility",
		"filename",
		"stream",
		"SWT",
		"SWT",
		"e",
		"stream",
		"stream",
		"stream",
		"SWT",
		"SWT",
		"FileFormat",
		"stream",
		"format",
		"filename",
		"SWT",
		"SWT",
		"stream",
		"Compatibility",
		"filename",
		"SWT",
		"SWT",
		"e",
		"stream",
		"format",
		"listener",
		"SWT",
		"SWT",
		"imageLoaderListeners",
		"imageLoaderListeners",
		"imageLoaderListeners",
		"listener",
		"listener",
		"SWT",
		"SWT",
		"imageLoaderListeners",
		"imageLoaderListeners",
		"listener",
		"imageLoaderListeners",
		"imageLoaderListeners",
		"imageLoaderListeners",
		"i",
		"size",
		"i",
		"imageLoaderListeners",
		"i",
		"listener",
		"event",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_IO",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_IO",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"stream",
		"filename",
		"e",
		"e",
		"stream",
		"format",
		"filename",
		"format",
		"e",
		"listener",
		"listener",
		"event"
	],
	"extendORImplementFiles":[],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"java.io",
		"java.util.Vector",
		"org.eclipse.swt",
		"org.eclipse.swt.internal.Compatibility",
		"org.eclipse.swt.internal.image"
	],
	"methods":[
		"reset",
		"load",
		"load",
		"save",
		"save",
		"addImageLoaderListener",
		"removeImageLoaderListener",
		"hasListeners",
		"notifyListeners",
		"reset",
		"error",
		"reset",
		"load",
		"error",
		"newFileInputStream",
		"load",
		"error",
		"close",
		"error",
		"save",
		"error",
		"newFileOutputStream",
		"error",
		"save",
		"error",
		"addElement",
		"error",
		"removeElement",
		"size",
		"hasListeners",
		"size",
		"elementAt",
		"imageDataLoaded",
		"Vector"
	],
	"methodsBody":{
		"public void save(OutputStream stream, int format)":{
			"methodBody":"{\n    if (stream == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    FileFormat.save(stream, format, this);\n}",
			"comments":"/**\n* Saves the image data in this ImageLoader to the specified stream.\n* The format parameter can have one of the following values:\n* <dl>\n* <dt><code>IMAGE_BMP</code></dt>\n* <dd>Windows BMP file format, no compression</dd>\n* <dt><code>IMAGE_BMP_RLE</code></dt>\n* <dd>Windows BMP file format, RLE compression if appropriate</dd>\n* <dt><code>IMAGE_GIF</code></dt>\n* <dd>GIF file format</dd>\n* <dt><code>IMAGE_ICO</code></dt>\n* <dd>Windows ICO file format</dd>\n* <dt><code>IMAGE_JPEG</code></dt>\n* <dd>JPEG file format</dd>\n* <dt><code>IMAGE_PNG</code></dt>\n* <dd>PNG file format</dd>\n* </dl>\n*\n* @param stream the output stream to write the images to\n* @param format the format to write the images in\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the stream is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_INVALID_IMAGE if the image data contains invalid data</li>\n*    <li>ERROR_IO if an IO error occurs while writing to the stream</li>\n*    <li>ERROR_UNSUPPORTED_FORMAT if the image data cannot be saved to the requested format</li>\n* </ul>\n*/\n",
			"methodName":"public void save(OutputStream stream, int format)"
		},
		"void reset()":{
			"methodBody":"{\n    data = null;\n    logicalScreenWidth = 0;\n    logicalScreenHeight = 0;\n    backgroundPixel = -1;\n    repeatCount = 1;\n}",
			"comments":"/**\n* Resets the fields of the ImageLoader, except for the\n* <code>imageLoaderListeners</code> field.\n*/\n",
			"methodName":"void reset()"
		},
		"public ImageData[] load(InputStream stream)":{
			"methodBody":"{\n    if (stream == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    reset();\n    data = FileFormat.load(stream, this);\n    return data;\n}",
			"comments":"/**\n* Loads an array of <code>ImageData</code> objects from the\n* specified input stream. Throws an error if either an error\n* occurs while loading the images, or if the images are not\n* of a supported type. Returns the loaded image data array.\n*\n* @param stream the input stream to load the images from\n* @return an array of <code>ImageData</code> objects loaded from the specified input stream\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the stream is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_INVALID_IMAGE - if the image file contains invalid data</li>\n*    <li>ERROR_IO - if an input/output error occurs while reading data</li>\n*    <li>ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format</li>\n* </ul>\n*/\n",
			"methodName":"public ImageData[] load(InputStream stream)"
		},
		"public void notifyListeners(ImageLoaderEvent event)":{
			"methodBody":"{\n    if (!hasListeners())\n        return;\n    int size = imageLoaderListeners.size();\n    for (int i = 0; i < size; i++) {\n        ImageLoaderListener listener = (ImageLoaderListener) imageLoaderListeners.elementAt(i);\n        listener.imageDataLoaded(event);\n    }\n}",
			"comments":"/**\n* Notifies all image loader listeners that an image loader event\n* has occurred. Pass the specified event object to each listener.\n*\n* @param event the <code>ImageLoaderEvent</code> to send to each <code>ImageLoaderListener</code>\n*/\n",
			"methodName":"public void notifyListeners(ImageLoaderEvent event)"
		},
		"public void save(String filename, int format)":{
			"methodBody":"{\n    if (filename == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    OutputStream stream = null;\n    try {\n        stream = Compatibility.newFileOutputStream(filename);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    }\n    save(stream, format);\n}",
			"comments":"/**\n* Saves the image data in this ImageLoader to a file with the specified name.\n* The format parameter can have one of the following values:\n* <dl>\n* <dt><code>IMAGE_BMP</code></dt>\n* <dd>Windows BMP file format, no compression</dd>\n* <dt><code>IMAGE_BMP_RLE</code></dt>\n* <dd>Windows BMP file format, RLE compression if appropriate</dd>\n* <dt><code>IMAGE_GIF</code></dt>\n* <dd>GIF file format</dd>\n* <dt><code>IMAGE_ICO</code></dt>\n* <dd>Windows ICO file format</dd>\n* <dt><code>IMAGE_JPEG</code></dt>\n* <dd>JPEG file format</dd>\n* <dt><code>IMAGE_PNG</code></dt>\n* <dd>PNG file format</dd>\n* </dl>\n*\n* @param filename the name of the file to write the images to\n* @param format the format to write the images in\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the file name is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_INVALID_IMAGE if the image data contains invalid data</li>\n*    <li>ERROR_IO if an IO error occurs while writing to the file</li>\n*    <li>ERROR_UNSUPPORTED_FORMAT if the image data cannot be saved to the requested format</li>\n* </ul>\n*/\n",
			"methodName":"public void save(String filename, int format)"
		},
		"public void addImageLoaderListener(ImageLoaderListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (imageLoaderListeners == null) {\n        imageLoaderListeners = new Vector();\n    }\n    imageLoaderListeners.addElement(listener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will be\n* notified when image data is either partially or completely loaded.\n* <p>\n* An ImageLoaderListener should be added before invoking\n* one of the receiver's load methods. The listener's\n* <code>imageDataLoaded</code> method is called when image\n* data has been partially loaded, as is supported by interlaced\n* GIF/PNG or progressive JPEG images.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n*\n* @see ImageLoaderListener\n* @see ImageLoaderEvent\n*/\n",
			"methodName":"public void addImageLoaderListener(ImageLoaderListener listener)"
		},
		"public ImageData[] load(String filename)":{
			"methodBody":"{\n    if (filename == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    InputStream stream = null;\n    try {\n        stream = Compatibility.newFileInputStream(filename);\n        return load(stream);\n    } catch (IOException e) {\n        SWT.error(SWT.ERROR_IO, e);\n    } finally {\n        try {\n            if (stream != null)\n                stream.close();\n        } catch (IOException e) {\n        \n        }\n    }\n    return null;\n}",
			"comments":"/**\n* Loads an array of <code>ImageData</code> objects from the\n* file with the specified name. Throws an error if either\n* an error occurs while loading the images, or if the images are\n* not of a supported type. Returns the loaded image data array.\n*\n* @param filename the name of the file to load the images from\n* @return an array of <code>ImageData</code> objects loaded from the specified file\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the file name is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_INVALID_IMAGE - if the image file contains invalid data</li>\n*    <li>ERROR_IO - if an IO error occurs while reading data</li>\n*    <li>ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format</li>\n* </ul>\n*/\n// Ignore error\n",
			"methodName":"public ImageData[] load(String filename)"
		},
		"public boolean hasListeners()":{
			"methodBody":"{\n    return imageLoaderListeners != null && imageLoaderListeners.size() > 0;\n}",
			"comments":"/**\n* Returns <code>true</code> if the receiver has image loader\n* listeners, and <code>false</code> otherwise.\n*\n* @return <code>true</code> if there are <code>ImageLoaderListener</code>s, and <code>false</code> otherwise\n*\n* @see #addImageLoaderListener(ImageLoaderListener)\n* @see #removeImageLoaderListener(ImageLoaderListener)\n*/\n",
			"methodName":"public boolean hasListeners()"
		},
		"public void removeImageLoaderListener(ImageLoaderListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    if (imageLoaderListeners == null)\n        return;\n    imageLoaderListeners.removeElement(listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will be\n* notified when image data is either partially or completely loaded.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n*\n* @see #addImageLoaderListener(ImageLoaderListener)\n*/\n",
			"methodName":"public void removeImageLoaderListener(ImageLoaderListener listener)"
		}
	},
	"ClassORInterfaceName":[
		"ImageLoader"
	]
}
