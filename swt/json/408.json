{
	"variables":[
		"numColumns",
		"makeColumnsEqualWidth",
		"marginWidth",
		"marginHeight",
		"marginLeft",
		"marginTop",
		"marginRight",
		"marginBottom",
		"horizontalSpacing",
		"verticalSpacing",
		"size",
		"data",
		"control",
		"data",
		"hSpan",
		"vSpan",
		"i",
		"j",
		"rect",
		"count",
		"children",
		"i",
		"control",
		"data",
		"i",
		"child",
		"data",
		"trim",
		"rect",
		"row",
		"column",
		"rowCount",
		"columnCount",
		"grid",
		"i",
		"child",
		"data",
		"hSpan",
		"vSpan",
		"lastRow",
		"newGrid",
		"endCount",
		"index",
		"j",
		"k",
		"availableWidth",
		"expandCount",
		"widths",
		"minWidths",
		"expandColumn",
		"j",
		"i",
		"data",
		"hSpan",
		"w",
		"i",
		"data",
		"hSpan",
		"spanWidth",
		"spanMinWidth",
		"spanExpandCount",
		"k",
		"w",
		"delta",
		"remainder",
		"last",
		"k",
		"delta",
		"remainder",
		"last",
		"k",
		"minColumnWidth",
		"columnWidth",
		"i",
		"i",
		"totalWidth",
		"i",
		"c",
		"delta",
		"remainder",
		"last",
		"j",
		"j",
		"i",
		"data",
		"hSpan",
		"spanWidth",
		"spanExpandCount",
		"k",
		"w",
		"delta2",
		"remainder2",
		"last2",
		"k",
		"i",
		"flush",
		"flushLength",
		"j",
		"i",
		"data",
		"child",
		"hSpan",
		"currentWidth",
		"k",
		"trim",
		"rect",
		"availableHeight",
		"heights",
		"minHeights",
		"expandRow",
		"i",
		"j",
		"data",
		"vSpan",
		"h",
		"j",
		"data",
		"vSpan",
		"spanHeight",
		"spanMinHeight",
		"spanExpandCount",
		"k",
		"h",
		"delta",
		"remainder",
		"last",
		"k",
		"delta",
		"remainder",
		"last",
		"k",
		"totalHeight",
		"i",
		"c",
		"delta",
		"remainder",
		"last",
		"i",
		"i",
		"j",
		"data",
		"vSpan",
		"spanHeight",
		"spanExpandCount",
		"k",
		"h",
		"delta2",
		"remainder2",
		"last2",
		"k",
		"i",
		"gridY",
		"i",
		"gridX",
		"j",
		"data",
		"hSpan",
		"vSpan",
		"cellWidth",
		"cellHeight",
		"k",
		"k",
		"childX",
		"childWidth",
		"childY",
		"childHeight",
		"child",
		"i",
		"totalDefaultWidth",
		"totalDefaultHeight",
		"i",
		"i",
		"string",
		"index",
		"string",
		"numColumns",
		"makeColumnsEqualWidth",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"wHint",
		"SWT",
		"size",
		"wHint",
		"hHint",
		"SWT",
		"size",
		"hHint",
		"size",
		"control",
		"data",
		"data",
		"grid",
		"row",
		"column",
		"control",
		"control",
		"Math",
		"Math",
		"data",
		"columnCount",
		"Math",
		"data",
		"first",
		"row",
		"vSpan",
		"row",
		"vSpan",
		"first",
		"column",
		"hSpan",
		"column",
		"hSpan",
		"i",
		"i",
		"rowCount",
		"j",
		"j",
		"columnCount",
		"control",
		"grid",
		"i",
		"j",
		"data",
		"composite",
		"composite",
		"rect",
		"rect",
		"rect",
		"rect",
		"flushCache",
		"numColumns",
		"marginLeft",
		"marginWidth",
		"marginRight",
		"marginTop",
		"marginHeight",
		"marginBottom",
		"composite",
		"i",
		"children",
		"i",
		"children",
		"i",
		"control",
		"data",
		"data",
		"children",
		"count",
		"children",
		"i",
		"i",
		"count",
		"i",
		"children",
		"i",
		"child",
		"data",
		"child",
		"data",
		"flushCache",
		"data",
		"data",
		"child",
		"data",
		"data",
		"flushCache",
		"data",
		"data",
		"data",
		"data",
		"child",
		"child",
		"trim",
		"rect",
		"trim",
		"child",
		"data",
		"data",
		"SWT",
		"data",
		"child",
		"Math",
		"data",
		"trim",
		"data",
		"data",
		"data",
		"data",
		"Math",
		"data",
		"data",
		"numColumns",
		"columnCount",
		"i",
		"count",
		"i",
		"children",
		"i",
		"child",
		"Math",
		"Math",
		"data",
		"columnCount",
		"Math",
		"data",
		"row",
		"vSpan",
		"lastRow",
		"grid",
		"lastRow",
		"columnCount",
		"System",
		"grid",
		"newGrid",
		"grid",
		"grid",
		"newGrid",
		"grid",
		"row",
		"grid",
		"row",
		"columnCount",
		"column",
		"columnCount",
		"grid",
		"row",
		"column",
		"column",
		"column",
		"hSpan",
		"endCount",
		"columnCount",
		"column",
		"index",
		"endCount",
		"grid",
		"row",
		"index",
		"index",
		"index",
		"endCount",
		"column",
		"index",
		"column",
		"hSpan",
		"columnCount",
		"column",
		"row",
		"j",
		"vSpan",
		"j",
		"grid",
		"row",
		"j",
		"grid",
		"row",
		"j",
		"columnCount",
		"k",
		"hSpan",
		"k",
		"grid",
		"row",
		"j",
		"column",
		"k",
		"child",
		"rowCount",
		"Math",
		"rowCount",
		"row",
		"vSpan",
		"column",
		"hSpan",
		"width",
		"horizontalSpacing",
		"columnCount",
		"marginLeft",
		"marginWidth",
		"marginRight",
		"columnCount",
		"columnCount",
		"columnCount",
		"j",
		"columnCount",
		"j",
		"i",
		"rowCount",
		"i",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"Math",
		"Math",
		"data",
		"columnCount",
		"hSpan",
		"data",
		"data",
		"widths",
		"j",
		"Math",
		"widths",
		"j",
		"w",
		"data",
		"expandColumn",
		"j",
		"expandCount",
		"expandColumn",
		"j",
		"data",
		"data",
		"w",
		"data",
		"data",
		"SWT",
		"data",
		"data",
		"w",
		"data",
		"minWidths",
		"j",
		"Math",
		"minWidths",
		"j",
		"w",
		"i",
		"rowCount",
		"i",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"Math",
		"Math",
		"data",
		"columnCount",
		"hSpan",
		"k",
		"hSpan",
		"k",
		"spanWidth",
		"widths",
		"j",
		"k",
		"spanMinWidth",
		"minWidths",
		"j",
		"k",
		"expandColumn",
		"j",
		"k",
		"spanExpandCount",
		"data",
		"spanExpandCount",
		"expandCount",
		"expandColumn",
		"j",
		"data",
		"data",
		"spanWidth",
		"hSpan",
		"horizontalSpacing",
		"w",
		"spanExpandCount",
		"widths",
		"j",
		"w",
		"w",
		"spanExpandCount",
		"w",
		"spanExpandCount",
		"k",
		"hSpan",
		"k",
		"expandColumn",
		"j",
		"k",
		"widths",
		"last",
		"j",
		"k",
		"delta",
		"last",
		"widths",
		"last",
		"remainder",
		"data",
		"data",
		"w",
		"data",
		"data",
		"SWT",
		"data",
		"data",
		"w",
		"data",
		"spanMinWidth",
		"hSpan",
		"horizontalSpacing",
		"w",
		"spanExpandCount",
		"minWidths",
		"j",
		"w",
		"w",
		"spanExpandCount",
		"w",
		"spanExpandCount",
		"k",
		"hSpan",
		"k",
		"expandColumn",
		"j",
		"k",
		"minWidths",
		"last",
		"j",
		"k",
		"delta",
		"last",
		"minWidths",
		"last",
		"remainder",
		"makeColumnsEqualWidth",
		"i",
		"columnCount",
		"i",
		"minColumnWidth",
		"Math",
		"minColumnWidth",
		"minWidths",
		"i",
		"columnWidth",
		"Math",
		"columnWidth",
		"widths",
		"i",
		"columnWidth",
		"width",
		"SWT",
		"expandCount",
		"columnWidth",
		"Math",
		"minColumnWidth",
		"availableWidth",
		"columnCount",
		"i",
		"columnCount",
		"i",
		"expandColumn",
		"i",
		"expandCount",
		"widths",
		"i",
		"columnWidth",
		"width",
		"SWT",
		"expandCount",
		"i",
		"columnCount",
		"i",
		"totalWidth",
		"widths",
		"i",
		"expandCount",
		"availableWidth",
		"totalWidth",
		"c",
		"availableWidth",
		"totalWidth",
		"c",
		"totalWidth",
		"availableWidth",
		"j",
		"columnCount",
		"j",
		"expandColumn",
		"j",
		"widths",
		"j",
		"delta",
		"minWidths",
		"j",
		"widths",
		"last",
		"j",
		"widths",
		"j",
		"delta",
		"widths",
		"j",
		"minWidths",
		"j",
		"expandColumn",
		"j",
		"c",
		"last",
		"widths",
		"last",
		"remainder",
		"j",
		"columnCount",
		"j",
		"i",
		"rowCount",
		"i",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"Math",
		"Math",
		"data",
		"columnCount",
		"hSpan",
		"data",
		"data",
		"k",
		"hSpan",
		"k",
		"spanWidth",
		"widths",
		"j",
		"k",
		"expandColumn",
		"j",
		"k",
		"spanExpandCount",
		"data",
		"data",
		"SWT",
		"data",
		"data",
		"w",
		"data",
		"spanWidth",
		"hSpan",
		"horizontalSpacing",
		"w",
		"spanExpandCount",
		"widths",
		"j",
		"w",
		"w",
		"spanExpandCount",
		"w",
		"spanExpandCount",
		"k",
		"hSpan",
		"k",
		"expandColumn",
		"j",
		"k",
		"widths",
		"last2",
		"j",
		"k",
		"delta2",
		"last2",
		"widths",
		"last2",
		"remainder2",
		"c",
		"totalWidth",
		"i",
		"columnCount",
		"i",
		"totalWidth",
		"widths",
		"i",
		"delta",
		"availableWidth",
		"totalWidth",
		"c",
		"remainder",
		"availableWidth",
		"totalWidth",
		"c",
		"last",
		"width",
		"SWT",
		"j",
		"columnCount",
		"j",
		"i",
		"rowCount",
		"i",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"data",
		"SWT",
		"grid",
		"i",
		"j",
		"Math",
		"Math",
		"data",
		"columnCount",
		"k",
		"hSpan",
		"k",
		"currentWidth",
		"widths",
		"j",
		"k",
		"currentWidth",
		"hSpan",
		"horizontalSpacing",
		"data",
		"currentWidth",
		"data",
		"data",
		"SWT",
		"data",
		"currentWidth",
		"child",
		"child",
		"trim",
		"rect",
		"trim",
		"child",
		"data",
		"data",
		"SWT",
		"data",
		"child",
		"Math",
		"currentWidth",
		"trim",
		"data",
		"data",
		"data",
		"data",
		"Math",
		"data",
		"data",
		"flush",
		"flush",
		"count",
		"flush",
		"flushLength",
		"data",
		"height",
		"verticalSpacing",
		"rowCount",
		"marginTop",
		"marginHeight",
		"marginBottom",
		"expandCount",
		"rowCount",
		"rowCount",
		"rowCount",
		"i",
		"rowCount",
		"i",
		"j",
		"columnCount",
		"j",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"Math",
		"Math",
		"data",
		"rowCount",
		"vSpan",
		"data",
		"data",
		"heights",
		"i",
		"Math",
		"heights",
		"i",
		"h",
		"data",
		"expandRow",
		"i",
		"expandCount",
		"expandRow",
		"i",
		"data",
		"data",
		"h",
		"data",
		"data",
		"SWT",
		"data",
		"data",
		"h",
		"data",
		"minHeights",
		"i",
		"Math",
		"minHeights",
		"i",
		"h",
		"j",
		"columnCount",
		"j",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"Math",
		"Math",
		"data",
		"rowCount",
		"vSpan",
		"k",
		"vSpan",
		"k",
		"spanHeight",
		"heights",
		"i",
		"k",
		"spanMinHeight",
		"minHeights",
		"i",
		"k",
		"expandRow",
		"i",
		"k",
		"spanExpandCount",
		"data",
		"spanExpandCount",
		"expandCount",
		"expandRow",
		"i",
		"data",
		"data",
		"spanHeight",
		"vSpan",
		"verticalSpacing",
		"h",
		"spanExpandCount",
		"heights",
		"i",
		"h",
		"h",
		"spanExpandCount",
		"h",
		"spanExpandCount",
		"k",
		"vSpan",
		"k",
		"expandRow",
		"i",
		"k",
		"heights",
		"last",
		"i",
		"k",
		"delta",
		"last",
		"heights",
		"last",
		"remainder",
		"data",
		"data",
		"h",
		"data",
		"data",
		"SWT",
		"data",
		"data",
		"h",
		"data",
		"spanMinHeight",
		"vSpan",
		"verticalSpacing",
		"h",
		"spanExpandCount",
		"minHeights",
		"i",
		"h",
		"h",
		"spanExpandCount",
		"h",
		"spanExpandCount",
		"k",
		"vSpan",
		"k",
		"expandRow",
		"i",
		"k",
		"minHeights",
		"last",
		"i",
		"k",
		"delta",
		"last",
		"minHeights",
		"last",
		"remainder",
		"height",
		"SWT",
		"expandCount",
		"i",
		"rowCount",
		"i",
		"totalHeight",
		"heights",
		"i",
		"expandCount",
		"availableHeight",
		"totalHeight",
		"c",
		"availableHeight",
		"totalHeight",
		"c",
		"totalHeight",
		"availableHeight",
		"i",
		"rowCount",
		"i",
		"expandRow",
		"i",
		"heights",
		"i",
		"delta",
		"minHeights",
		"i",
		"heights",
		"last",
		"i",
		"heights",
		"i",
		"delta",
		"heights",
		"i",
		"minHeights",
		"i",
		"expandRow",
		"i",
		"c",
		"last",
		"heights",
		"last",
		"remainder",
		"i",
		"rowCount",
		"i",
		"j",
		"columnCount",
		"j",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"Math",
		"Math",
		"data",
		"rowCount",
		"vSpan",
		"data",
		"data",
		"k",
		"vSpan",
		"k",
		"spanHeight",
		"heights",
		"i",
		"k",
		"expandRow",
		"i",
		"k",
		"spanExpandCount",
		"data",
		"data",
		"SWT",
		"data",
		"data",
		"h",
		"data",
		"spanHeight",
		"vSpan",
		"verticalSpacing",
		"h",
		"spanExpandCount",
		"heights",
		"i",
		"h",
		"h",
		"spanExpandCount",
		"h",
		"spanExpandCount",
		"k",
		"vSpan",
		"k",
		"expandRow",
		"i",
		"k",
		"heights",
		"last2",
		"i",
		"k",
		"delta2",
		"last2",
		"heights",
		"last2",
		"remainder2",
		"c",
		"totalHeight",
		"i",
		"rowCount",
		"i",
		"totalHeight",
		"heights",
		"i",
		"delta",
		"availableHeight",
		"totalHeight",
		"c",
		"remainder",
		"availableHeight",
		"totalHeight",
		"c",
		"last",
		"move",
		"y",
		"marginTop",
		"marginHeight",
		"i",
		"rowCount",
		"i",
		"x",
		"marginLeft",
		"marginWidth",
		"j",
		"columnCount",
		"j",
		"grid",
		"i",
		"j",
		"rowCount",
		"columnCount",
		"data",
		"Math",
		"Math",
		"data",
		"columnCount",
		"Math",
		"data",
		"k",
		"hSpan",
		"k",
		"cellWidth",
		"widths",
		"j",
		"k",
		"k",
		"vSpan",
		"k",
		"cellHeight",
		"heights",
		"i",
		"k",
		"cellWidth",
		"horizontalSpacing",
		"hSpan",
		"gridX",
		"data",
		"Math",
		"data",
		"cellWidth",
		"data",
		"SWT",
		"GridData",
		"childX",
		"Math",
		"cellWidth",
		"data",
		"childWidth",
		"SWT",
		"SWT",
		"GridData",
		"childX",
		"Math",
		"cellWidth",
		"data",
		"childWidth",
		"SWT",
		"childWidth",
		"cellWidth",
		"data",
		"cellHeight",
		"verticalSpacing",
		"vSpan",
		"gridY",
		"data",
		"Math",
		"data",
		"cellHeight",
		"data",
		"SWT",
		"GridData",
		"childY",
		"Math",
		"cellHeight",
		"data",
		"childHeight",
		"SWT",
		"SWT",
		"GridData",
		"childY",
		"Math",
		"cellHeight",
		"data",
		"childHeight",
		"SWT",
		"childHeight",
		"cellHeight",
		"data",
		"grid",
		"i",
		"j",
		"child",
		"child",
		"childX",
		"childY",
		"childWidth",
		"childHeight",
		"gridX",
		"widths",
		"j",
		"horizontalSpacing",
		"gridY",
		"heights",
		"i",
		"verticalSpacing",
		"i",
		"flushLength",
		"i",
		"flush",
		"i",
		"flush",
		"i",
		"i",
		"columnCount",
		"i",
		"totalDefaultWidth",
		"widths",
		"i",
		"i",
		"rowCount",
		"i",
		"totalDefaultHeight",
		"heights",
		"i",
		"totalDefaultWidth",
		"horizontalSpacing",
		"columnCount",
		"marginLeft",
		"marginWidth",
		"marginRight",
		"totalDefaultHeight",
		"verticalSpacing",
		"rowCount",
		"marginTop",
		"marginHeight",
		"marginBottom",
		"totalDefaultWidth",
		"totalDefaultHeight",
		"string",
		"index",
		"string",
		"string",
		"index",
		"string",
		"numColumns",
		"string",
		"numColumns",
		"makeColumnsEqualWidth",
		"string",
		"makeColumnsEqualWidth",
		"marginWidth",
		"string",
		"marginWidth",
		"marginHeight",
		"string",
		"marginHeight",
		"marginLeft",
		"string",
		"marginLeft",
		"marginRight",
		"string",
		"marginRight",
		"marginTop",
		"string",
		"marginTop",
		"marginBottom",
		"string",
		"marginBottom",
		"horizontalSpacing",
		"string",
		"horizontalSpacing",
		"verticalSpacing",
		"string",
		"verticalSpacing",
		"string",
		"string",
		"string",
		"string",
		"numColumns",
		"makeColumnsEqualWidth",
		"DEFAULT",
		"x",
		"DEFAULT",
		"y",
		"horizontalSpan",
		"verticalSpan",
		"x",
		"y",
		"width",
		"height",
		"length",
		"exclude",
		"widthHint",
		"heightHint",
		"grabExcessHorizontalSpace",
		"minimumWidth",
		"cacheWidth",
		"minimumWidth",
		"width",
		"cacheWidth",
		"cacheHeight",
		"DEFAULT",
		"minimumWidth",
		"heightHint",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"cacheHeight",
		"cacheHeight",
		"minimumHeight",
		"horizontalSpan",
		"verticalSpan",
		"length",
		"length",
		"horizontalSpan",
		"cacheWidth",
		"horizontalIndent",
		"grabExcessHorizontalSpace",
		"grabExcessHorizontalSpace",
		"minimumWidth",
		"grabExcessHorizontalSpace",
		"minimumWidth",
		"DEFAULT",
		"cacheWidth",
		"minimumWidth",
		"horizontalIndent",
		"horizontalSpan",
		"grabExcessHorizontalSpace",
		"cacheWidth",
		"horizontalIndent",
		"grabExcessHorizontalSpace",
		"minimumWidth",
		"grabExcessHorizontalSpace",
		"minimumWidth",
		"DEFAULT",
		"cacheWidth",
		"minimumWidth",
		"horizontalIndent",
		"DEFAULT",
		"DEFAULT",
		"horizontalSpan",
		"grabExcessHorizontalSpace",
		"minimumWidth",
		"grabExcessHorizontalSpace",
		"minimumWidth",
		"DEFAULT",
		"cacheWidth",
		"minimumWidth",
		"horizontalIndent",
		"DEFAULT",
		"heightHint",
		"DEFAULT",
		"horizontalSpan",
		"horizontalIndent",
		"cacheWidth",
		"horizontalAlignment",
		"FILL",
		"cacheWidth",
		"width",
		"cacheWidth",
		"cacheHeight",
		"DEFAULT",
		"heightHint",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"cacheHeight",
		"cacheHeight",
		"minimumHeight",
		"verticalSpan",
		"cacheHeight",
		"verticalIndent",
		"grabExcessVerticalSpace",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"DEFAULT",
		"cacheHeight",
		"minimumHeight",
		"verticalIndent",
		"verticalSpan",
		"grabExcessVerticalSpace",
		"cacheHeight",
		"verticalIndent",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"DEFAULT",
		"cacheHeight",
		"minimumHeight",
		"verticalIndent",
		"DEFAULT",
		"verticalSpan",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"grabExcessVerticalSpace",
		"minimumHeight",
		"DEFAULT",
		"cacheHeight",
		"minimumHeight",
		"verticalIndent",
		"horizontalSpan",
		"verticalSpan",
		"horizontalIndent",
		"cacheWidth",
		"horizontalAlignment",
		"CENTER",
		"CENTER",
		"horizontalIndent",
		"RIGHT",
		"END",
		"END",
		"horizontalIndent",
		"FILL",
		"horizontalIndent",
		"verticalIndent",
		"cacheHeight",
		"verticalAlignment",
		"CENTER",
		"CENTER",
		"verticalIndent",
		"BOTTOM",
		"END",
		"END",
		"verticalIndent",
		"FILL",
		"verticalIndent",
		"cacheWidth",
		"cacheHeight",
		"numColumns",
		"makeColumnsEqualWidth",
		"composite",
		"wHint",
		"hHint",
		"flushCache",
		"control",
		"grid",
		"row",
		"column",
		"rowCount",
		"columnCount",
		"first",
		"composite",
		"flushCache",
		"composite",
		"move",
		"x",
		"y",
		"width",
		"height",
		"flushCache"
	],
	"extendORImplementFiles":[
		"Layout"
	],
	"package":[
		"org.eclipse.swt.layout"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"computeSize",
		"flushCache",
		"getData",
		"layout",
		"layout",
		"getName",
		"toString",
		"layout",
		"getLayoutData",
		"flushCache",
		"getLayoutData",
		"max",
		"min",
		"max",
		"getClientArea",
		"layout",
		"getChildren",
		"getLayoutData",
		"getLayoutData",
		"setLayoutData",
		"flushCache",
		"computeSize",
		"computeTrim",
		"getBorderWidth",
		"computeSize",
		"max",
		"max",
		"getLayoutData",
		"max",
		"min",
		"max",
		"arraycopy",
		"max",
		"getData",
		"max",
		"min",
		"max",
		"max",
		"getData",
		"max",
		"min",
		"max",
		"max",
		"max",
		"getData",
		"max",
		"min",
		"getData",
		"max",
		"min",
		"computeTrim",
		"getBorderWidth",
		"computeSize",
		"max",
		"max",
		"getData",
		"max",
		"min",
		"max",
		"max",
		"getData",
		"max",
		"min",
		"getData",
		"max",
		"min",
		"getData",
		"max",
		"min",
		"max",
		"min",
		"max",
		"max",
		"min",
		"max",
		"max",
		"setBounds",
		"getName",
		"getClass",
		"lastIndexOf",
		"substring",
		"length",
		"getName",
		"trim",
		"Point",
		"GridData",
		"Point"
	],
	"methodsBody":{
		"Point layout(Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)":{
			"methodBody":"{\n    if (numColumns < 1) {\n        return new Point(marginLeft + marginWidth * 2 + marginRight, marginTop + marginHeight * 2 + marginBottom);\n    }\n    int count = 0;\n    Control[] children = composite.getChildren();\n    for (int i = 0; i < children.length; i++) {\n        Control control = children[i];\n        GridData data = (GridData) control.getLayoutData();\n        if (data == null || !data.exclude) {\n            children[count++] = children[i];\n        }\n    }\n    for (int i = 0; i < count; i++) {\n        Control child = children[i];\n        GridData data = (GridData) child.getLayoutData();\n        if (data == null)\n            child.setLayoutData(data = new GridData());\n        if (flushCache)\n            data.flushCache();\n        data.computeSize(child, data.widthHint, data.heightHint, flushCache);\n        if (data.grabExcessHorizontalSpace && data.minimumWidth > 0) {\n            if (data.cacheWidth < data.minimumWidth) {\n                int trim = 0;\n                \n                if (child instanceof Scrollable) {\n                    Rectangle rect = ((Scrollable) child).computeTrim(0, 0, 0, 0);\n                    trim = rect.width;\n                } else {\n                    trim = child.getBorderWidth() * 2;\n                }\n                data.cacheWidth = data.cacheHeight = SWT.DEFAULT;\n                data.computeSize(child, Math.max(0, data.minimumWidth - trim), data.heightHint, false);\n            }\n        }\n        if (data.grabExcessVerticalSpace && data.minimumHeight > 0) {\n            data.cacheHeight = Math.max(data.cacheHeight, data.minimumHeight);\n        }\n    }\n    \n    int row = 0, column = 0, rowCount = 0, columnCount = numColumns;\n    Control[][] grid = new Control[4][columnCount];\n    for (int i = 0; i < count; i++) {\n        Control child = children[i];\n        GridData data = (GridData) child.getLayoutData();\n        int hSpan = Math.max(1, Math.min(data.horizontalSpan, columnCount));\n        int vSpan = Math.max(1, data.verticalSpan);\n        while (true) {\n            int lastRow = row + vSpan;\n            if (lastRow >= grid.length) {\n                Control[][] newGrid = new Control[lastRow + 4][columnCount];\n                System.arraycopy(grid, 0, newGrid, 0, grid.length);\n                grid = newGrid;\n            }\n            if (grid[row] == null) {\n                grid[row] = new Control[columnCount];\n            }\n            while (column < columnCount && grid[row][column] != null) {\n                column++;\n            }\n            int endCount = column + hSpan;\n            if (endCount <= columnCount) {\n                int index = column;\n                while (index < endCount && grid[row][index] == null) {\n                    index++;\n                }\n                if (index == endCount)\n                    break;\n                column = index;\n            }\n            if (column + hSpan >= columnCount) {\n                column = 0;\n                row++;\n            }\n        }\n        for (int j = 0; j < vSpan; j++) {\n            if (grid[row + j] == null) {\n                grid[row + j] = new Control[columnCount];\n            }\n            for (int k = 0; k < hSpan; k++) {\n                grid[row + j][column + k] = child;\n            }\n        }\n        rowCount = Math.max(rowCount, row + vSpan);\n        column += hSpan;\n    }\n    \n    int availableWidth = width - horizontalSpacing * (columnCount - 1) - (marginLeft + marginWidth * 2 + marginRight);\n    int expandCount = 0;\n    int[] widths = new int[columnCount];\n    int[] minWidths = new int[columnCount];\n    boolean[] expandColumn = new boolean[columnCount];\n    for (int j = 0; j < columnCount; j++) {\n        for (int i = 0; i < rowCount; i++) {\n            GridData data = getData(grid, i, j, rowCount, columnCount, true);\n            if (data != null) {\n                int hSpan = Math.max(1, Math.min(data.horizontalSpan, columnCount));\n                if (hSpan == 1) {\n                    int w = data.cacheWidth + data.horizontalIndent;\n                    widths[j] = Math.max(widths[j], w);\n                    if (data.grabExcessHorizontalSpace) {\n                        if (!expandColumn[j])\n                            expandCount++;\n                        expandColumn[j] = true;\n                    }\n                    if (!data.grabExcessHorizontalSpace || data.minimumWidth != 0) {\n                        w = !data.grabExcessHorizontalSpace || data.minimumWidth == SWT.DEFAULT ? data.cacheWidth : data.minimumWidth;\n                        w += data.horizontalIndent;\n                        minWidths[j] = Math.max(minWidths[j], w);\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < rowCount; i++) {\n            GridData data = getData(grid, i, j, rowCount, columnCount, false);\n            if (data != null) {\n                int hSpan = Math.max(1, Math.min(data.horizontalSpan, columnCount));\n                if (hSpan > 1) {\n                    int spanWidth = 0, spanMinWidth = 0, spanExpandCount = 0;\n                    for (int k = 0; k < hSpan; k++) {\n                        spanWidth += widths[j - k];\n                        spanMinWidth += minWidths[j - k];\n                        if (expandColumn[j - k])\n                            spanExpandCount++;\n                    }\n                    if (data.grabExcessHorizontalSpace && spanExpandCount == 0) {\n                        expandCount++;\n                        expandColumn[j] = true;\n                    }\n                    int w = data.cacheWidth + data.horizontalIndent - spanWidth - (hSpan - 1) * horizontalSpacing;\n                    if (w > 0) {\n                        if (spanExpandCount == 0) {\n                            widths[j] += w;\n                        } else {\n                            int delta = w / spanExpandCount;\n                            int remainder = w % spanExpandCount, last = -1;\n                            for (int k = 0; k < hSpan; k++) {\n                                if (expandColumn[j - k]) {\n                                    widths[last = j - k] += delta;\n                                }\n                            }\n                            if (last > -1)\n                                widths[last] += remainder;\n                        }\n                    }\n                    if (!data.grabExcessHorizontalSpace || data.minimumWidth != 0) {\n                        w = !data.grabExcessHorizontalSpace || data.minimumWidth == SWT.DEFAULT ? data.cacheWidth : data.minimumWidth;\n                        w += data.horizontalIndent - spanMinWidth - (hSpan - 1) * horizontalSpacing;\n                        if (w > 0) {\n                            if (spanExpandCount == 0) {\n                                minWidths[j] += w;\n                            } else {\n                                int delta = w / spanExpandCount;\n                                int remainder = w % spanExpandCount, last = -1;\n                                for (int k = 0; k < hSpan; k++) {\n                                    if (expandColumn[j - k]) {\n                                        minWidths[last = j - k] += delta;\n                                    }\n                                }\n                                if (last > -1)\n                                    minWidths[last] += remainder;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (makeColumnsEqualWidth) {\n        int minColumnWidth = 0;\n        int columnWidth = 0;\n        for (int i = 0; i < columnCount; i++) {\n            minColumnWidth = Math.max(minColumnWidth, minWidths[i]);\n            columnWidth = Math.max(columnWidth, widths[i]);\n        }\n        columnWidth = width == SWT.DEFAULT || expandCount == 0 ? columnWidth : Math.max(minColumnWidth, availableWidth / columnCount);\n        for (int i = 0; i < columnCount; i++) {\n            expandColumn[i] = expandCount > 0;\n            widths[i] = columnWidth;\n        }\n    } else {\n        if (width != SWT.DEFAULT && expandCount > 0) {\n            int totalWidth = 0;\n            for (int i = 0; i < columnCount; i++) {\n                totalWidth += widths[i];\n            }\n            int c = expandCount;\n            int delta = (availableWidth - totalWidth) / c;\n            int remainder = (availableWidth - totalWidth) % c;\n            int last = -1;\n            while (totalWidth != availableWidth) {\n                for (int j = 0; j < columnCount; j++) {\n                    if (expandColumn[j]) {\n                        if (widths[j] + delta > minWidths[j]) {\n                            widths[last = j] = widths[j] + delta;\n                        } else {\n                            widths[j] = minWidths[j];\n                            expandColumn[j] = false;\n                            c--;\n                        }\n                    }\n                }\n                if (last > -1)\n                    widths[last] += remainder;\n                for (int j = 0; j < columnCount; j++) {\n                    for (int i = 0; i < rowCount; i++) {\n                        GridData data = getData(grid, i, j, rowCount, columnCount, false);\n                        if (data != null) {\n                            int hSpan = Math.max(1, Math.min(data.horizontalSpan, columnCount));\n                            if (hSpan > 1) {\n                                if (!data.grabExcessHorizontalSpace || data.minimumWidth != 0) {\n                                    int spanWidth = 0, spanExpandCount = 0;\n                                    for (int k = 0; k < hSpan; k++) {\n                                        spanWidth += widths[j - k];\n                                        if (expandColumn[j - k])\n                                            spanExpandCount++;\n                                    }\n                                    int w = !data.grabExcessHorizontalSpace || data.minimumWidth == SWT.DEFAULT ? data.cacheWidth : data.minimumWidth;\n                                    w += data.horizontalIndent - spanWidth - (hSpan - 1) * horizontalSpacing;\n                                    if (w > 0) {\n                                        if (spanExpandCount == 0) {\n                                            widths[j] += w;\n                                        } else {\n                                            int delta2 = w / spanExpandCount;\n                                            int remainder2 = w % spanExpandCount, last2 = -1;\n                                            for (int k = 0; k < hSpan; k++) {\n                                                if (expandColumn[j - k]) {\n                                                    widths[last2 = j - k] += delta2;\n                                                }\n                                            }\n                                            if (last2 > -1)\n                                                widths[last2] += remainder2;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (c == 0)\n                    break;\n                totalWidth = 0;\n                for (int i = 0; i < columnCount; i++) {\n                    totalWidth += widths[i];\n                }\n                delta = (availableWidth - totalWidth) / c;\n                remainder = (availableWidth - totalWidth) % c;\n                last = -1;\n            }\n        }\n    }\n    \n    GridData[] flush = null;\n    int flushLength = 0;\n    if (width != SWT.DEFAULT) {\n        for (int j = 0; j < columnCount; j++) {\n            for (int i = 0; i < rowCount; i++) {\n                GridData data = getData(grid, i, j, rowCount, columnCount, false);\n                if (data != null) {\n                    if (data.heightHint == SWT.DEFAULT) {\n                        Control child = grid[i][j];\n                        \n                        int hSpan = Math.max(1, Math.min(data.horizontalSpan, columnCount));\n                        int currentWidth = 0;\n                        for (int k = 0; k < hSpan; k++) {\n                            currentWidth += widths[j - k];\n                        }\n                        currentWidth += (hSpan - 1) * horizontalSpacing - data.horizontalIndent;\n                        if ((currentWidth != data.cacheWidth && data.horizontalAlignment == SWT.FILL) || (data.cacheWidth > currentWidth)) {\n                            int trim = 0;\n                            if (child instanceof Scrollable) {\n                                Rectangle rect = ((Scrollable) child).computeTrim(0, 0, 0, 0);\n                                trim = rect.width;\n                            } else {\n                                trim = child.getBorderWidth() * 2;\n                            }\n                            data.cacheWidth = data.cacheHeight = SWT.DEFAULT;\n                            data.computeSize(child, Math.max(0, currentWidth - trim), data.heightHint, false);\n                            if (data.grabExcessVerticalSpace && data.minimumHeight > 0) {\n                                data.cacheHeight = Math.max(data.cacheHeight, data.minimumHeight);\n                            }\n                            if (flush == null)\n                                flush = new GridData[count];\n                            flush[flushLength++] = data;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    int availableHeight = height - verticalSpacing * (rowCount - 1) - (marginTop + marginHeight * 2 + marginBottom);\n    expandCount = 0;\n    int[] heights = new int[rowCount];\n    int[] minHeights = new int[rowCount];\n    boolean[] expandRow = new boolean[rowCount];\n    for (int i = 0; i < rowCount; i++) {\n        for (int j = 0; j < columnCount; j++) {\n            GridData data = getData(grid, i, j, rowCount, columnCount, true);\n            if (data != null) {\n                int vSpan = Math.max(1, Math.min(data.verticalSpan, rowCount));\n                if (vSpan == 1) {\n                    int h = data.cacheHeight + data.verticalIndent;\n                    heights[i] = Math.max(heights[i], h);\n                    if (data.grabExcessVerticalSpace) {\n                        if (!expandRow[i])\n                            expandCount++;\n                        expandRow[i] = true;\n                    }\n                    if (!data.grabExcessVerticalSpace || data.minimumHeight != 0) {\n                        h = !data.grabExcessVerticalSpace || data.minimumHeight == SWT.DEFAULT ? data.cacheHeight : data.minimumHeight;\n                        h += data.verticalIndent;\n                        minHeights[i] = Math.max(minHeights[i], h);\n                    }\n                }\n            }\n        }\n        for (int j = 0; j < columnCount; j++) {\n            GridData data = getData(grid, i, j, rowCount, columnCount, false);\n            if (data != null) {\n                int vSpan = Math.max(1, Math.min(data.verticalSpan, rowCount));\n                if (vSpan > 1) {\n                    int spanHeight = 0, spanMinHeight = 0, spanExpandCount = 0;\n                    for (int k = 0; k < vSpan; k++) {\n                        spanHeight += heights[i - k];\n                        spanMinHeight += minHeights[i - k];\n                        if (expandRow[i - k])\n                            spanExpandCount++;\n                    }\n                    if (data.grabExcessVerticalSpace && spanExpandCount == 0) {\n                        expandCount++;\n                        expandRow[i] = true;\n                    }\n                    int h = data.cacheHeight + data.verticalIndent - spanHeight - (vSpan - 1) * verticalSpacing;\n                    if (h > 0) {\n                        if (spanExpandCount == 0) {\n                            heights[i] += h;\n                        } else {\n                            int delta = h / spanExpandCount;\n                            int remainder = h % spanExpandCount, last = -1;\n                            for (int k = 0; k < vSpan; k++) {\n                                if (expandRow[i - k]) {\n                                    heights[last = i - k] += delta;\n                                }\n                            }\n                            if (last > -1)\n                                heights[last] += remainder;\n                        }\n                    }\n                    if (!data.grabExcessVerticalSpace || data.minimumHeight != 0) {\n                        h = !data.grabExcessVerticalSpace || data.minimumHeight == SWT.DEFAULT ? data.cacheHeight : data.minimumHeight;\n                        h += data.verticalIndent - spanMinHeight - (vSpan - 1) * verticalSpacing;\n                        if (h > 0) {\n                            if (spanExpandCount == 0) {\n                                minHeights[i] += h;\n                            } else {\n                                int delta = h / spanExpandCount;\n                                int remainder = h % spanExpandCount, last = -1;\n                                for (int k = 0; k < vSpan; k++) {\n                                    if (expandRow[i - k]) {\n                                        minHeights[last = i - k] += delta;\n                                    }\n                                }\n                                if (last > -1)\n                                    minHeights[last] += remainder;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (height != SWT.DEFAULT && expandCount > 0) {\n        int totalHeight = 0;\n        for (int i = 0; i < rowCount; i++) {\n            totalHeight += heights[i];\n        }\n        int c = expandCount;\n        int delta = (availableHeight - totalHeight) / c;\n        int remainder = (availableHeight - totalHeight) % c;\n        int last = -1;\n        while (totalHeight != availableHeight) {\n            for (int i = 0; i < rowCount; i++) {\n                if (expandRow[i]) {\n                    if (heights[i] + delta > minHeights[i]) {\n                        heights[last = i] = heights[i] + delta;\n                    } else {\n                        heights[i] = minHeights[i];\n                        expandRow[i] = false;\n                        c--;\n                    }\n                }\n            }\n            if (last > -1)\n                heights[last] += remainder;\n            for (int i = 0; i < rowCount; i++) {\n                for (int j = 0; j < columnCount; j++) {\n                    GridData data = getData(grid, i, j, rowCount, columnCount, false);\n                    if (data != null) {\n                        int vSpan = Math.max(1, Math.min(data.verticalSpan, rowCount));\n                        if (vSpan > 1) {\n                            if (!data.grabExcessVerticalSpace || data.minimumHeight != 0) {\n                                int spanHeight = 0, spanExpandCount = 0;\n                                for (int k = 0; k < vSpan; k++) {\n                                    spanHeight += heights[i - k];\n                                    if (expandRow[i - k])\n                                        spanExpandCount++;\n                                }\n                                int h = !data.grabExcessVerticalSpace || data.minimumHeight == SWT.DEFAULT ? data.cacheHeight : data.minimumHeight;\n                                h += data.verticalIndent - spanHeight - (vSpan - 1) * verticalSpacing;\n                                if (h > 0) {\n                                    if (spanExpandCount == 0) {\n                                        heights[i] += h;\n                                    } else {\n                                        int delta2 = h / spanExpandCount;\n                                        int remainder2 = h % spanExpandCount, last2 = -1;\n                                        for (int k = 0; k < vSpan; k++) {\n                                            if (expandRow[i - k]) {\n                                                heights[last2 = i - k] += delta2;\n                                            }\n                                        }\n                                        if (last2 > -1)\n                                            heights[last2] += remainder2;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (c == 0)\n                break;\n            totalHeight = 0;\n            for (int i = 0; i < rowCount; i++) {\n                totalHeight += heights[i];\n            }\n            delta = (availableHeight - totalHeight) / c;\n            remainder = (availableHeight - totalHeight) % c;\n            last = -1;\n        }\n    }\n    \n    if (move) {\n        int gridY = y + marginTop + marginHeight;\n        for (int i = 0; i < rowCount; i++) {\n            int gridX = x + marginLeft + marginWidth;\n            for (int j = 0; j < columnCount; j++) {\n                GridData data = getData(grid, i, j, rowCount, columnCount, true);\n                if (data != null) {\n                    int hSpan = Math.max(1, Math.min(data.horizontalSpan, columnCount));\n                    int vSpan = Math.max(1, data.verticalSpan);\n                    int cellWidth = 0, cellHeight = 0;\n                    for (int k = 0; k < hSpan; k++) {\n                        cellWidth += widths[j + k];\n                    }\n                    for (int k = 0; k < vSpan; k++) {\n                        cellHeight += heights[i + k];\n                    }\n                    cellWidth += horizontalSpacing * (hSpan - 1);\n                    int childX = gridX + data.horizontalIndent;\n                    int childWidth = Math.min(data.cacheWidth, cellWidth);\n                    switch(data.horizontalAlignment) {\n                        case SWT.CENTER:\n                        case GridData.CENTER:\n                            childX += Math.max(0, (cellWidth - data.horizontalIndent - childWidth) / 2);\n                            break;\n                        case SWT.RIGHT:\n                        case SWT.END:\n                        case GridData.END:\n                            childX += Math.max(0, cellWidth - data.horizontalIndent - childWidth);\n                            break;\n                        case SWT.FILL:\n                            childWidth = cellWidth - data.horizontalIndent;\n                            break;\n                    }\n                    cellHeight += verticalSpacing * (vSpan - 1);\n                    int childY = gridY + data.verticalIndent;\n                    int childHeight = Math.min(data.cacheHeight, cellHeight);\n                    switch(data.verticalAlignment) {\n                        case SWT.CENTER:\n                        case GridData.CENTER:\n                            childY += Math.max(0, (cellHeight - data.verticalIndent - childHeight) / 2);\n                            break;\n                        case SWT.BOTTOM:\n                        case SWT.END:\n                        case GridData.END:\n                            childY += Math.max(0, cellHeight - data.verticalIndent - childHeight);\n                            break;\n                        case SWT.FILL:\n                            childHeight = cellHeight - data.verticalIndent;\n                            break;\n                    }\n                    Control child = grid[i][j];\n                    if (child != null) {\n                        child.setBounds(childX, childY, childWidth, childHeight);\n                    }\n                }\n                gridX += widths[j] + horizontalSpacing;\n            }\n            gridY += heights[i] + verticalSpacing;\n        }\n    }\n    \n    for (int i = 0; i < flushLength; i++) {\n        flush[i].cacheWidth = flush[i].cacheHeight = -1;\n    }\n    int totalDefaultWidth = 0;\n    int totalDefaultHeight = 0;\n    for (int i = 0; i < columnCount; i++) {\n        totalDefaultWidth += widths[i];\n    }\n    for (int i = 0; i < rowCount; i++) {\n        totalDefaultHeight += heights[i];\n    }\n    totalDefaultWidth += horizontalSpacing * (columnCount - 1) + marginLeft + marginWidth * 2 + marginRight;\n    totalDefaultHeight += verticalSpacing * (rowCount - 1) + marginTop + marginHeight * 2 + marginBottom;\n    return new Point(totalDefaultWidth, totalDefaultHeight);\n}",
			"comments":"//TEMPORARY CODE\n/* Build the grid */\n/* Column widths */\n/* Wrapping */\n//TEMPORARY CODE\n/* Row heights */\n/* Position the controls */\n// clean up cache\n",
			"methodName":"Point layout(Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)"
		},
		"public String toString()":{
			"methodBody":"{\n    String string = getName() + \" {\";\n    if (numColumns != 1)\n        string += \"numColumns=\" + numColumns + \" \";\n    if (makeColumnsEqualWidth)\n        string += \"makeColumnsEqualWidth=\" + makeColumnsEqualWidth + \" \";\n    if (marginWidth != 0)\n        string += \"marginWidth=\" + marginWidth + \" \";\n    if (marginHeight != 0)\n        string += \"marginHeight=\" + marginHeight + \" \";\n    if (marginLeft != 0)\n        string += \"marginLeft=\" + marginLeft + \" \";\n    if (marginRight != 0)\n        string += \"marginRight=\" + marginRight + \" \";\n    if (marginTop != 0)\n        string += \"marginTop=\" + marginTop + \" \";\n    if (marginBottom != 0)\n        string += \"marginBottom=\" + marginBottom + \" \";\n    if (horizontalSpacing != 0)\n        string += \"horizontalSpacing=\" + horizontalSpacing + \" \";\n    if (verticalSpacing != 0)\n        string += \"verticalSpacing=\" + verticalSpacing + \" \";\n    string = string.trim();\n    string += \"}\";\n    return string;\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the event\n*/\n",
			"methodName":"public String toString()"
		},
		"protected boolean flushCache(Control control)":{
			"methodBody":"{\n    Object data = control.getLayoutData();\n    if (data != null)\n        ((GridData) data).flushCache();\n    return true;\n}",
			"comments":"",
			"methodName":"protected boolean flushCache(Control control)"
		},
		"String getName()":{
			"methodBody":"{\n    String string = getClass().getName();\n    int index = string.lastIndexOf('.');\n    if (index == -1)\n        return string;\n    return string.substring(index + 1, string.length());\n}",
			"comments":"",
			"methodName":"String getName()"
		},
		"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)":{
			"methodBody":"{\n    Point size = layout(composite, false, 0, 0, wHint, hHint, flushCache);\n    if (wHint != SWT.DEFAULT)\n        size.x = wHint;\n    if (hHint != SWT.DEFAULT)\n        size.y = hHint;\n    return size;\n}",
			"comments":"",
			"methodName":"protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)"
		},
		"GridData getData(Control[][] grid, int row, int column, int rowCount, int columnCount, boolean first)":{
			"methodBody":"{\n    Control control = grid[row][column];\n    if (control != null) {\n        GridData data = (GridData) control.getLayoutData();\n        int hSpan = Math.max(1, Math.min(data.horizontalSpan, columnCount));\n        int vSpan = Math.max(1, data.verticalSpan);\n        int i = first ? row + vSpan - 1 : row - vSpan + 1;\n        int j = first ? column + hSpan - 1 : column - hSpan + 1;\n        if (0 <= i && i < rowCount) {\n            if (0 <= j && j < columnCount) {\n                if (control == grid[i][j])\n                    return data;\n            }\n        }\n    }\n    return null;\n}",
			"comments":"",
			"methodName":"GridData getData(Control[][] grid, int row, int column, int rowCount, int columnCount, boolean first)"
		},
		"protected void layout(Composite composite, boolean flushCache)":{
			"methodBody":"{\n    Rectangle rect = composite.getClientArea();\n    layout(composite, true, rect.x, rect.y, rect.width, rect.height, flushCache);\n}",
			"comments":"",
			"methodName":"protected void layout(Composite composite, boolean flushCache)"
		}
	},
	"ClassORInterfaceName":[
		"GridLayout"
	]
}
