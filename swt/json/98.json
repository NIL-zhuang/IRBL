{
	"variables":[
		"control",
		"controlListener",
		"transferAgents",
		"effect",
		"selectedDataType",
		"selectedOperation",
		"keyOperation",
		"iDataObject",
		"iDropTarget",
		"refCount",
		"DROPTARGETID",
		"typedListener",
		"name",
		"validName",
		"event",
		"allowedOperations",
		"allowedDataTypes",
		"i",
		"event",
		"oldKeyOperation",
		"event",
		"allowedOperations",
		"allowedDataTypes",
		"i",
		"event",
		"allowedOperations",
		"allowedDataTypes",
		"i",
		"object",
		"i",
		"ctrl",
		"shift",
		"coordinates",
		"tree",
		"area",
		"x1",
		"pt",
		"table",
		"area",
		"x1",
		"pt",
		"osOperation",
		"operation",
		"guid",
		"style",
		"operations",
		"operation",
		"dataTypes",
		"dataObject",
		"address",
		"enumFormatetc",
		"rgelt",
		"pceltFetched",
		"transferData",
		"i",
		"newDataTypes",
		"control",
		"style",
		"control",
		"control",
		"DROPTARGETID",
		"DND",
		"DND",
		"control",
		"DROPTARGETID",
		"COM",
		"iDropTarget",
		"COM",
		"DND",
		"DND",
		"COM",
		"control",
		"iDropTarget",
		"COM",
		"DND",
		"DND",
		"controlListener",
		"DropTarget",
		"DropTarget",
		"control",
		"SWT",
		"controlListener",
		"SWT",
		"control",
		"effect",
		"control",
		"control",
		"effect",
		"control",
		"effect",
		"control",
		"style",
		"SWT",
		"DND",
		"style",
		"listener",
		"DND",
		"SWT",
		"listener",
		"DND",
		"typedListener",
		"DND",
		"typedListener",
		"DND",
		"typedListener",
		"DND",
		"typedListener",
		"DND",
		"typedListener",
		"DND",
		"typedListener",
		"refCount",
		"refCount",
		"validName",
		"name",
		"DND",
		"SWT",
		"iDropTarget",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"iDropTarget",
		"iDropTarget",
		"iDropTarget",
		"selectedDataType",
		"selectedOperation",
		"DND",
		"iDataObject",
		"event",
		"pDataObject",
		"grfKeyState",
		"pt_x",
		"pt_y",
		"pdwEffect",
		"OS",
		"pdwEffect",
		"COM",
		"COM",
		"iDataObject",
		"pDataObject",
		"event",
		"event",
		"System",
		"event",
		"allowedDataTypes",
		"allowedDataTypes",
		"DND",
		"event",
		"event",
		"DND",
		"event",
		"allowedOperations",
		"DND",
		"DND",
		"DND",
		"selectedDataType",
		"i",
		"allowedDataTypes",
		"i",
		"TransferData",
		"allowedDataTypes",
		"i",
		"event",
		"selectedDataType",
		"allowedDataTypes",
		"i",
		"selectedOperation",
		"DND",
		"selectedDataType",
		"allowedOperations",
		"event",
		"selectedOperation",
		"event",
		"effect",
		"event",
		"event",
		"event",
		"OS",
		"pdwEffect",
		"selectedOperation",
		"COM",
		"effect",
		"DND",
		"keyOperation",
		"iDataObject",
		"COM",
		"event",
		"event",
		"OS",
		"event",
		"DND",
		"DND",
		"event",
		"COM",
		"keyOperation",
		"event",
		"iDataObject",
		"grfKeyState",
		"pt_x",
		"pt_y",
		"pdwEffect",
		"keyOperation",
		"OS",
		"pdwEffect",
		"COM",
		"COM",
		"event",
		"event",
		"System",
		"event",
		"allowedDataTypes",
		"allowedDataTypes",
		"keyOperation",
		"oldKeyOperation",
		"event",
		"DND",
		"event",
		"selectedDataType",
		"event",
		"selectedOperation",
		"event",
		"DND",
		"event",
		"selectedDataType",
		"event",
		"event",
		"event",
		"DND",
		"event",
		"allowedOperations",
		"DND",
		"DND",
		"DND",
		"selectedDataType",
		"i",
		"allowedDataTypes",
		"i",
		"TransferData",
		"allowedDataTypes",
		"i",
		"event",
		"selectedDataType",
		"allowedDataTypes",
		"i",
		"selectedOperation",
		"DND",
		"selectedDataType",
		"allowedOperations",
		"event",
		"event",
		"selectedOperation",
		"event",
		"effect",
		"event",
		"event",
		"event",
		"OS",
		"pdwEffect",
		"selectedOperation",
		"COM",
		"effect",
		"DND",
		"event",
		"event",
		"OS",
		"event",
		"DND",
		"DND",
		"event",
		"event",
		"event",
		"pDataObject",
		"grfKeyState",
		"pt_x",
		"pt_y",
		"pdwEffect",
		"keyOperation",
		"OS",
		"pdwEffect",
		"COM",
		"COM",
		"keyOperation",
		"event",
		"event",
		"System",
		"event",
		"allowedDataTypes",
		"allowedDataTypes",
		"event",
		"selectedDataType",
		"event",
		"selectedOperation",
		"DND",
		"event",
		"selectedDataType",
		"i",
		"allowedDataTypes",
		"i",
		"TransferData",
		"allowedDataTypes",
		"i",
		"event",
		"selectedDataType",
		"allowedDataTypes",
		"i",
		"selectedOperation",
		"DND",
		"selectedDataType",
		"allowedOperations",
		"event",
		"event",
		"selectedOperation",
		"event",
		"selectedOperation",
		"DND",
		"OS",
		"pdwEffect",
		"COM",
		"COM",
		"i",
		"transferAgents",
		"i",
		"transferAgents",
		"i",
		"selectedDataType",
		"object",
		"transferAgents",
		"i",
		"selectedDataType",
		"object",
		"selectedOperation",
		"DND",
		"event",
		"selectedOperation",
		"event",
		"selectedDataType",
		"event",
		"object",
		"DND",
		"event",
		"selectedOperation",
		"DND",
		"allowedOperations",
		"event",
		"event",
		"selectedOperation",
		"event",
		"OS",
		"pdwEffect",
		"selectedOperation",
		"COM",
		"control",
		"grfKeyState",
		"OS",
		"grfKeyState",
		"OS",
		"ctrl",
		"shift",
		"DND",
		"ctrl",
		"DND",
		"shift",
		"DND",
		"DND",
		"transferAgents",
		"event",
		"event",
		"coordinates",
		"control",
		"coordinates",
		"control",
		"event",
		"tree",
		"coordinates",
		"event",
		"tree",
		"area",
		"coordinates",
		"area",
		"x1",
		"area",
		"area",
		"x1",
		"x1",
		"coordinates",
		"event",
		"tree",
		"pt",
		"event",
		"control",
		"event",
		"table",
		"coordinates",
		"event",
		"table",
		"area",
		"coordinates",
		"area",
		"x1",
		"area",
		"area",
		"x1",
		"x1",
		"coordinates",
		"event",
		"table",
		"pt",
		"event",
		"eventType",
		"event",
		"control",
		"COM",
		"control",
		"controlListener",
		"control",
		"SWT",
		"controlListener",
		"controlListener",
		"control",
		"DROPTARGETID",
		"transferAgents",
		"control",
		"COM",
		"iDropTarget",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"osOperation",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"osOperation",
		"COM",
		"operation",
		"DND",
		"operation",
		"riid",
		"ppvObject",
		"COM",
		"COM",
		"guid",
		"riid",
		"GUID",
		"COM",
		"guid",
		"COM",
		"COM",
		"guid",
		"COM",
		"COM",
		"ppvObject",
		"iDropTarget",
		"COM",
		"COM",
		"ppvObject",
		"COM",
		"refCount",
		"refCount",
		"COM",
		"refCount",
		"listener",
		"DND",
		"SWT",
		"DND",
		"listener",
		"DND",
		"listener",
		"DND",
		"listener",
		"DND",
		"listener",
		"DND",
		"listener",
		"DND",
		"listener",
		"pDataObject",
		"pdwEffect",
		"OS",
		"operations",
		"pdwEffect",
		"operations",
		"operations",
		"style",
		"operations",
		"DND",
		"grfKeyState",
		"keyOperation",
		"operation",
		"operation",
		"DND",
		"style",
		"DND",
		"operation",
		"operations",
		"DND",
		"DND",
		"DND",
		"operation",
		"operations",
		"operation",
		"DND",
		"pDataObject",
		"dataObject",
		"dataObject",
		"COM",
		"address",
		"COM",
		"address",
		"OS",
		"OS",
		"OS",
		"FORMATETC",
		"enumFormatetc",
		"enumFormatetc",
		"rgelt",
		"pceltFetched",
		"COM",
		"pceltFetched",
		"transferData",
		"COM",
		"transferData",
		"rgelt",
		"FORMATETC",
		"transferData",
		"transferData",
		"transferData",
		"pDataObject",
		"i",
		"transferAgents",
		"i",
		"transferAgents",
		"i",
		"transferData",
		"dataTypes",
		"System",
		"dataTypes",
		"newDataTypes",
		"dataTypes",
		"newDataTypes",
		"dataTypes",
		"transferData",
		"dataTypes",
		"newDataTypes",
		"OS",
		"rgelt",
		"enumFormatetc",
		"dataObject",
		"dataTypes",
		"event",
		"event",
		"pt_x",
		"event",
		"pt_y",
		"event",
		"OS",
		"event",
		"DND",
		"event",
		"dataTypes",
		"event",
		"dataTypes",
		"event",
		"operations",
		"event",
		"operation",
		"transferAgents",
		"DND",
		"SWT",
		"transferAgents",
		"control",
		"ERROR_CANNOT_INIT_DROP",
		"S_OK",
		"ERROR_CANNOT_INIT_DROP",
		"handle",
		"S_OK",
		"ERROR_CANNOT_INIT_DROP",
		"Dispose",
		"Dispose",
		"NONE",
		"DROP_MOVE",
		"ERROR_NULL_ARGUMENT",
		"DragEnter",
		"DragLeave",
		"DragOver",
		"DragOperationChanged",
		"Drop",
		"DropAccept",
		"ERROR_INVALID_SUBCLASS",
		"DROP_NONE",
		"DROPEFFECT_NONE",
		"S_OK",
		"operations",
		"length",
		"dataTypes",
		"dataTypes",
		"length",
		"DragEnter",
		"detail",
		"DROP_DEFAULT",
		"detail",
		"DROP_MOVE",
		"DROP_MOVE",
		"DROP_NONE",
		"length",
		"dataType",
		"DROP_NONE",
		"detail",
		"detail",
		"feedback",
		"x",
		"y",
		"S_OK",
		"FEEDBACK_NONE",
		"S_OK",
		"widget",
		"time",
		"detail",
		"DROP_NONE",
		"DragLeave",
		"S_OK",
		"DROPEFFECT_NONE",
		"S_OK",
		"operations",
		"length",
		"dataTypes",
		"dataTypes",
		"length",
		"type",
		"DragOver",
		"dataType",
		"detail",
		"type",
		"DragOperationChanged",
		"dataType",
		"type",
		"detail",
		"DROP_DEFAULT",
		"detail",
		"DROP_MOVE",
		"DROP_MOVE",
		"DROP_NONE",
		"length",
		"dataType",
		"DROP_NONE",
		"detail",
		"detail",
		"detail",
		"feedback",
		"x",
		"y",
		"S_OK",
		"FEEDBACK_NONE",
		"widget",
		"time",
		"detail",
		"DROP_NONE",
		"DragLeave",
		"DROPEFFECT_NONE",
		"S_OK",
		"operations",
		"length",
		"dataTypes",
		"dataTypes",
		"length",
		"dataType",
		"detail",
		"DropAccept",
		"length",
		"dataType",
		"DROP_NONE",
		"detail",
		"detail",
		"detail",
		"DROP_NONE",
		"DROPEFFECT_NONE",
		"S_OK",
		"length",
		"DROP_NONE",
		"detail",
		"dataType",
		"data",
		"Drop",
		"DROP_NONE",
		"detail",
		"detail",
		"detail",
		"S_OK",
		"MK_CONTROL",
		"MK_SHIFT",
		"DROP_LINK",
		"DROP_COPY",
		"DROP_MOVE",
		"DROP_DEFAULT",
		"x",
		"y",
		"control",
		"item",
		"item",
		"x",
		"x",
		"width",
		"y",
		"item",
		"item",
		"control",
		"item",
		"item",
		"x",
		"x",
		"width",
		"y",
		"item",
		"item",
		"handle",
		"Dispose",
		"DROP_COPY",
		"DROPEFFECT_COPY",
		"DROP_LINK",
		"DROPEFFECT_LINK",
		"DROP_MOVE",
		"DROPEFFECT_MOVE",
		"DROPEFFECT_COPY",
		"DROP_COPY",
		"DROPEFFECT_LINK",
		"DROP_LINK",
		"DROPEFFECT_MOVE",
		"DROP_MOVE",
		"E_INVALIDARG",
		"sizeof",
		"IIDIUnknown",
		"IIDIDropTarget",
		"S_OK",
		"E_NOINTERFACE",
		"ERROR_NULL_ARGUMENT",
		"DragEnter",
		"DragLeave",
		"DragOver",
		"DragOperationChanged",
		"Drop",
		"DropAccept",
		"DROP_NONE",
		"DROP_DEFAULT",
		"DROP_DEFAULT",
		"DROP_MOVE",
		"DROP_MOVE",
		"DROP_NONE",
		"DROP_NONE",
		"DATADIR_GET",
		"S_OK",
		"GMEM_FIXED",
		"GMEM_ZEROINIT",
		"sizeof",
		"S_OK",
		"formatetc",
		"formatetc",
		"sizeof",
		"type",
		"cfFormat",
		"formatetc",
		"pIDataObject",
		"length",
		"length",
		"length",
		"length",
		"length",
		"widget",
		"x",
		"y",
		"time",
		"feedback",
		"FEEDBACK_SELECT",
		"dataTypes",
		"dataType",
		"operations",
		"detail",
		"ERROR_NULL_ARGUMENT",
		"transferAgents",
		"control",
		"style",
		"event",
		"event",
		"style",
		"listener",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"args",
		"pDataObject",
		"grfKeyState",
		"pt_x",
		"pt_y",
		"pdwEffect",
		"grfKeyState",
		"pt_x",
		"pt_y",
		"pdwEffect",
		"pDataObject",
		"grfKeyState",
		"pt_x",
		"pt_y",
		"pdwEffect",
		"grfKeyState",
		"eventType",
		"event",
		"operation",
		"osOperation",
		"riid",
		"ppvObject",
		"listener",
		"event",
		"pDataObject",
		"grfKeyState",
		"pt_x",
		"pt_y",
		"pdwEffect",
		"transferAgents"
	],
	"extendORImplementFiles":[
		"Widget"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"handleEvent",
		"handleEvent",
		"checkStyle",
		"addDropListener",
		"AddRef",
		"checkSubclass",
		"createCOMInterfaces",
		"method0",
		"method1",
		"method2",
		"method3",
		"method4",
		"method5",
		"method6",
		"disposeCOMInterfaces",
		"DragEnter",
		"DragLeave",
		"DragOver",
		"Drop",
		"getControl",
		"getOperationFromKeyState",
		"getTransfer",
		"notifyListeners",
		"onDispose",
		"opToOs",
		"osToOp",
		"QueryInterface",
		"Release",
		"removeDropListener",
		"setEventData",
		"setTransfer",
		"checkStyle",
		"getData",
		"error",
		"setData",
		"createCOMInterfaces",
		"AddRef",
		"CoLockObjectExternal",
		"getAddress",
		"error",
		"RegisterDragDrop",
		"getAddress",
		"error",
		"isDisposed",
		"dispose",
		"addListener",
		"addListener",
		"onDispose",
		"error",
		"addListener",
		"addListener",
		"addListener",
		"addListener",
		"addListener",
		"addListener",
		"getName",
		"getClass",
		"getName",
		"equals",
		"error",
		"QueryInterface",
		"AddRef",
		"Release",
		"DragEnter",
		"DragOver",
		"DragLeave",
		"Drop",
		"dispose",
		"setEventData",
		"MoveMemory",
		"arraycopy",
		"notifyListeners",
		"sameType",
		"show",
		"MoveMemory",
		"opToOs",
		"show",
		"GetMessageTime",
		"notifyListeners",
		"setEventData",
		"MoveMemory",
		"arraycopy",
		"notifyListeners",
		"sameType",
		"show",
		"MoveMemory",
		"opToOs",
		"show",
		"GetMessageTime",
		"notifyListeners",
		"setEventData",
		"MoveMemory",
		"arraycopy",
		"notifyListeners",
		"sameType",
		"MoveMemory",
		"isSupportedType",
		"nativeToJava",
		"notifyListeners",
		"MoveMemory",
		"opToOs",
		"toControl",
		"getItem",
		"getClientArea",
		"contains",
		"getItem",
		"getItem",
		"getClientArea",
		"contains",
		"getItem",
		"notifyListeners",
		"RevokeDragDrop",
		"removeListener",
		"setData",
		"CoLockObjectExternal",
		"getAddress",
		"Release",
		"CoFreeUnusedLibraries",
		"MoveMemory",
		"IsEqualGUID",
		"IsEqualGUID",
		"MoveMemory",
		"getAddress",
		"AddRef",
		"MoveMemory",
		"disposeCOMInterfaces",
		"CoFreeUnusedLibraries",
		"error",
		"removeListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"removeListener",
		"getStyle",
		"MoveMemory",
		"osToOp",
		"getOperationFromKeyState",
		"AddRef",
		"EnumFormatEtc",
		"GlobalAlloc",
		"Reset",
		"Next",
		"MoveMemory",
		"isSupportedType",
		"arraycopy",
		"GlobalFree",
		"Release",
		"Release",
		"GetMessageTime",
		"error",
		"Listener",
		"Listener",
		"TreeDragUnderEffect",
		"TableDragUnderEffect",
		"NoDragUnderEffect",
		"DNDListener",
		"COMObject",
		"DNDEvent",
		"DNDEvent",
		"DNDEvent",
		"DNDEvent",
		"DNDEvent",
		"Point",
		"Point",
		"Point",
		"GUID",
		"IDataObject",
		"IEnumFORMATETC",
		"TransferData",
		"FORMATETC"
	],
	"methodsBody":{
		"private int DragEnter(int pDataObject, int grfKeyState, int pt_x, int pt_y, int pdwEffect)":{
			"methodBody":"{\n    selectedDataType = null;\n    selectedOperation = DND.DROP_NONE;\n    iDataObject = 0;\n    DNDEvent event = new DNDEvent();\n    if (!setEventData(event, pDataObject, grfKeyState, pt_x, pt_y, pdwEffect)) {\n        OS.MoveMemory(pdwEffect, new int[] { COM.DROPEFFECT_NONE }, 4);\n        return COM.S_OK;\n    }\n    \n    iDataObject = pDataObject;\n    int allowedOperations = event.operations;\n    TransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];\n    System.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);\n    notifyListeners(DND.DragEnter, event);\n    if (event.detail == DND.DROP_DEFAULT) {\n        event.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;\n    }\n    selectedDataType = null;\n    for (int i = 0; i < allowedDataTypes.length; i++) {\n        if (TransferData.sameType(allowedDataTypes[i], event.dataType)) {\n            selectedDataType = allowedDataTypes[i];\n            break;\n        }\n    }\n    selectedOperation = DND.DROP_NONE;\n    if (selectedDataType != null && ((allowedOperations & event.detail) != 0)) {\n        selectedOperation = event.detail;\n    }\n    effect.show(event.feedback, event.x, event.y);\n    OS.MoveMemory(pdwEffect, new int[] { opToOs(selectedOperation) }, 4);\n    return COM.S_OK;\n}",
			"comments":"// Remember the iDataObject because it is not passed into the DragOver callback\n",
			"methodName":"private int DragEnter(int pDataObject, int grfKeyState, int pt_x, int pt_y, int pdwEffect)"
		},
		"public void removeDropListener(DropTargetListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        DND.error(SWT.ERROR_NULL_ARGUMENT);\n    removeListener(DND.DragEnter, listener);\n    removeListener(DND.DragLeave, listener);\n    removeListener(DND.DragOver, listener);\n    removeListener(DND.DragOperationChanged, listener);\n    removeListener(DND.Drop, listener);\n    removeListener(DND.DropAccept, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when a drag and drop operation is in progress.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see DropTargetListener\n* @see #addDropListener\n*/\n",
			"methodName":"public void removeDropListener(DropTargetListener listener)"
		},
		"protected void checkSubclass()":{
			"methodBody":"{\n    String name = getClass().getName();\n    String validName = DropTarget.class.getName();\n    if (!validName.equals(name)) {\n        DND.error(SWT.ERROR_INVALID_SUBCLASS);\n    }\n}",
			"comments":"",
			"methodName":"protected void checkSubclass()"
		},
		"public int method4(int[] args)":{
			"methodBody":"{\n    return DragOver(args[0], args[1], args[2], args[3]);\n}",
			"comments":"",
			"methodName":"public int method4(int[] args)"
		},
		"private int Drop(int pDataObject, int grfKeyState, int pt_x, int pt_y, int pdwEffect)":{
			"methodBody":"{\n    effect.show(DND.FEEDBACK_NONE, 0, 0);\n    DNDEvent event = new DNDEvent();\n    event.widget = this;\n    event.time = OS.GetMessageTime();\n    event.detail = DND.DROP_NONE;\n    notifyListeners(DND.DragLeave, event);\n    event = new DNDEvent();\n    if (!setEventData(event, pDataObject, grfKeyState, pt_x, pt_y, pdwEffect)) {\n        keyOperation = -1;\n        OS.MoveMemory(pdwEffect, new int[] { COM.DROPEFFECT_NONE }, 4);\n        return COM.S_OK;\n    }\n    keyOperation = -1;\n    int allowedOperations = event.operations;\n    TransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];\n    System.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);\n    event.dataType = selectedDataType;\n    event.detail = selectedOperation;\n    notifyListeners(DND.DropAccept, event);\n    selectedDataType = null;\n    for (int i = 0; i < allowedDataTypes.length; i++) {\n        if (TransferData.sameType(allowedDataTypes[i], event.dataType)) {\n            selectedDataType = allowedDataTypes[i];\n            break;\n        }\n    }\n    selectedOperation = DND.DROP_NONE;\n    if (selectedDataType != null && (allowedOperations & event.detail) == event.detail) {\n        selectedOperation = event.detail;\n    }\n    if (selectedOperation == DND.DROP_NONE) {\n        OS.MoveMemory(pdwEffect, new int[] { COM.DROPEFFECT_NONE }, 4);\n        return COM.S_OK;\n    }\n    \n    Object object = null;\n    for (int i = 0; i < transferAgents.length; i++) {\n        if (transferAgents[i].isSupportedType(selectedDataType)) {\n            object = transferAgents[i].nativeToJava(selectedDataType);\n            break;\n        }\n    }\n    if (object == null) {\n        selectedOperation = DND.DROP_NONE;\n    }\n    event.detail = selectedOperation;\n    event.dataType = selectedDataType;\n    event.data = object;\n    notifyListeners(DND.Drop, event);\n    selectedOperation = DND.DROP_NONE;\n    if ((allowedOperations & event.detail) == event.detail) {\n        selectedOperation = event.detail;\n    }\n    \n    OS.MoveMemory(pdwEffect, new int[] { opToOs(selectedOperation) }, 4);\n    return COM.S_OK;\n}",
			"comments":"// Get Data in a Java format\n//notify source of action taken\n",
			"methodName":"private int Drop(int pDataObject, int grfKeyState, int pt_x, int pt_y, int pdwEffect)"
		},
		"public void addDropListener(DropTargetListener listener)":{
			"methodBody":"{\n    if (listener == null)\n        DND.error(SWT.ERROR_NULL_ARGUMENT);\n    DNDListener typedListener = new DNDListener(listener);\n    addListener(DND.DragEnter, typedListener);\n    addListener(DND.DragLeave, typedListener);\n    addListener(DND.DragOver, typedListener);\n    addListener(DND.DragOperationChanged, typedListener);\n    addListener(DND.Drop, typedListener);\n    addListener(DND.DropAccept, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when a drag and drop operation is in progress, by sending\n* it one of the messages defined in the <code>DropTargetListener</code>\n* interface.\n*\n* <p><ul>\n* <li><code>dragEnter</code> is called when the cursor has entered the drop target boundaries\n* <li><code>dragLeave</code> is called when the cursor has left the drop target boundaries and just before\n* the drop occurs or is cancelled.\n* <li><code>dragOperationChanged</code> is called when the operation being performed has changed\n* (usually due to the user changing the selected modifier key(s) while dragging)\n* <li><code>dragOver</code> is called when the cursor is moving over the drop target\n* <li><code>dropAccept</code> is called just before the drop is performed.  The drop target is given\n* the chance to change the nature of the drop or veto the drop by setting the <code>event.detail</code> field\n* <li><code>drop</code> is called when the data is being dropped\n* </ul></p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see DropTargetListener\n* @see #removeDropListener\n* @see DropTargetEvent\n*/\n",
			"methodName":"public void addDropListener(DropTargetListener listener)"
		},
		"public int method5(int[] args)":{
			"methodBody":"{\n    return DragLeave();\n}",
			"comments":"",
			"methodName":"public int method5(int[] args)"
		},
		"private int opToOs(int operation)":{
			"methodBody":"{\n    int osOperation = 0;\n    if ((operation & DND.DROP_COPY) != 0) {\n        osOperation |= COM.DROPEFFECT_COPY;\n    }\n    if ((operation & DND.DROP_LINK) != 0) {\n        osOperation |= COM.DROPEFFECT_LINK;\n    }\n    if ((operation & DND.DROP_MOVE) != 0) {\n        osOperation |= COM.DROPEFFECT_MOVE;\n    }\n    return osOperation;\n}",
			"comments":"",
			"methodName":"private int opToOs(int operation)"
		},
		"private void createCOMInterfaces()":{
			"methodBody":"{\n    \n    iDropTarget = new COMObject(new int[] { 2, 0, 0, 5, 4, 0, 5 }) {\n\n        public int method0(int[] args) {\n            return QueryInterface(args[0], args[1]);\n        }\n\n        public int method1(int[] args) {\n            return AddRef();\n        }\n\n        public int method2(int[] args) {\n            return Release();\n        }\n\n        public int method3(int[] args) {\n            return DragEnter(args[0], args[1], args[2], args[3], args[4]);\n        }\n\n        public int method4(int[] args) {\n            return DragOver(args[0], args[1], args[2], args[3]);\n        }\n\n        public int method5(int[] args) {\n            return DragLeave();\n        }\n\n        public int method6(int[] args) {\n            return Drop(args[0], args[1], args[2], args[3], args[4]);\n        }\n    };\n}",
			"comments":"// register each of the interfaces that this object implements\n",
			"methodName":"private void createCOMInterfaces()"
		},
		"private int Release()":{
			"methodBody":"{\n    refCount--;\n    if (refCount == 0) {\n        disposeCOMInterfaces();\n        COM.CoFreeUnusedLibraries();\n    }\n    return refCount;\n}",
			"comments":"",
			"methodName":"private int Release()"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    if (style == SWT.NONE)\n        return DND.DROP_MOVE;\n    return style;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public int method6(int[] args)":{
			"methodBody":"{\n    return Drop(args[0], args[1], args[2], args[3], args[4]);\n}",
			"comments":"",
			"methodName":"public int method6(int[] args)"
		},
		"public void handleEvent(Event event)":{
			"methodBody":"{\n    onDispose();\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event event)"
		},
		"public void setTransfer(Transfer[] transferAgents)":{
			"methodBody":"{\n    if (transferAgents == null)\n        DND.error(SWT.ERROR_NULL_ARGUMENT);\n    this.transferAgents = transferAgents;\n}",
			"comments":"/**\n* Specifies the data types that can be transferred to this DropTarget.  If data is\n* being dragged that does not match one of these types, the drop target will be notified of\n* the drag and drop operation but the currentDataType will be null and the operation\n* will be DND.NONE.\n*\n* @param transferAgents a list of Transfer objects which define the types of data that can be\n*\t\t\t\t\t\t dropped on this target\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if transferAgents is null</li>\n* </ul>\n*/\n",
			"methodName":"public void setTransfer(Transfer[] transferAgents)"
		},
		"private int osToOp(int osOperation)":{
			"methodBody":"{\n    int operation = 0;\n    if ((osOperation & COM.DROPEFFECT_COPY) != 0) {\n        operation |= DND.DROP_COPY;\n    }\n    if ((osOperation & COM.DROPEFFECT_LINK) != 0) {\n        operation |= DND.DROP_LINK;\n    }\n    if ((osOperation & COM.DROPEFFECT_MOVE) != 0) {\n        operation |= DND.DROP_MOVE;\n    }\n    return operation;\n}",
			"comments":"",
			"methodName":"private int osToOp(int osOperation)"
		},
		"public Control getControl()":{
			"methodBody":"{\n    return control;\n}",
			"comments":"/**\n* Returns the Control which is registered for this DropTarget.  This is the control over which the\n* user positions the cursor to drop the data.\n*\n* @return the Control which is registered for this DropTarget\n*/\n",
			"methodName":"public Control getControl()"
		},
		"public void notifyListeners(int eventType, Event event)":{
			"methodBody":"{\n    Point coordinates = new Point(event.x, event.y);\n    coordinates = control.toControl(coordinates);\n    if (this.control instanceof Tree) {\n        Tree tree = (Tree) control;\n        event.item = tree.getItem(coordinates);\n        if (event.item == null) {\n            Rectangle area = tree.getClientArea();\n            if (area.contains(coordinates)) {\n                \n                for (int x1 = area.x; x1 < area.x + area.width; x1++) {\n                    Point pt = new Point(x1, coordinates.y);\n                    event.item = tree.getItem(pt);\n                    if (event.item != null) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (this.control instanceof Table) {\n        Table table = (Table) control;\n        event.item = table.getItem(coordinates);\n        if (event.item == null) {\n            Rectangle area = table.getClientArea();\n            if (area.contains(coordinates)) {\n                \n                for (int x1 = area.x; x1 < area.x + area.width; x1++) {\n                    Point pt = new Point(x1, coordinates.y);\n                    event.item = table.getItem(pt);\n                    if (event.item != null) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    super.notifyListeners(eventType, event);\n}",
			"comments":"// Scan across the width of the tree.\n// Scan across the width of the tree.\n",
			"methodName":"public void notifyListeners(int eventType, Event event)"
		},
		"private int AddRef()":{
			"methodBody":"{\n    refCount++;\n    return refCount;\n}",
			"comments":"",
			"methodName":"private int AddRef()"
		},
		"private int DragLeave()":{
			"methodBody":"{\n    effect.show(DND.FEEDBACK_NONE, 0, 0);\n    keyOperation = -1;\n    if (iDataObject == 0)\n        return COM.S_OK;\n    DNDEvent event = new DNDEvent();\n    event.widget = this;\n    event.time = OS.GetMessageTime();\n    event.detail = DND.DROP_NONE;\n    notifyListeners(DND.DragLeave, event);\n    return COM.S_OK;\n}",
			"comments":"",
			"methodName":"private int DragLeave()"
		},
		"private int QueryInterface(int riid, int ppvObject)":{
			"methodBody":"{\n    if (riid == 0 || ppvObject == 0)\n        return COM.E_INVALIDARG;\n    GUID guid = new GUID();\n    COM.MoveMemory(guid, riid, GUID.sizeof);\n    if (COM.IsEqualGUID(guid, COM.IIDIUnknown) || COM.IsEqualGUID(guid, COM.IIDIDropTarget)) {\n        COM.MoveMemory(ppvObject, new int[] { iDropTarget.getAddress() }, 4);\n        AddRef();\n        return COM.S_OK;\n    }\n    COM.MoveMemory(ppvObject, new int[] { 0 }, 4);\n    return COM.E_NOINTERFACE;\n}",
			"comments":"",
			"methodName":"private int QueryInterface(int riid, int ppvObject)"
		},
		"public Transfer[] getTransfer()":{
			"methodBody":"{\n    return transferAgents;\n}",
			"comments":"/**\n* Returns a list of the data types that can be transferred to this DropTarget.\n*\n* @return a list of the data types that can be transferred to this DropTarget\n*/\n",
			"methodName":"public Transfer[] getTransfer()"
		},
		"private int getOperationFromKeyState(int grfKeyState)":{
			"methodBody":"{\n    boolean ctrl = (grfKeyState & OS.MK_CONTROL) != 0;\n    boolean shift = (grfKeyState & OS.MK_SHIFT) != 0;\n    if (ctrl && shift)\n        return DND.DROP_LINK;\n    if (ctrl)\n        return DND.DROP_COPY;\n    if (shift)\n        return DND.DROP_MOVE;\n    return DND.DROP_DEFAULT;\n}",
			"comments":"",
			"methodName":"private int getOperationFromKeyState(int grfKeyState)"
		},
		"public int method3(int[] args)":{
			"methodBody":"{\n    return DragEnter(args[0], args[1], args[2], args[3], args[4]);\n}",
			"comments":"",
			"methodName":"public int method3(int[] args)"
		},
		"public int method2(int[] args)":{
			"methodBody":"{\n    return Release();\n}",
			"comments":"",
			"methodName":"public int method2(int[] args)"
		},
		"private void disposeCOMInterfaces()":{
			"methodBody":"{\n    if (iDropTarget != null)\n        iDropTarget.dispose();\n    iDropTarget = null;\n}",
			"comments":"",
			"methodName":"private void disposeCOMInterfaces()"
		},
		"public int method1(int[] args)":{
			"methodBody":"{\n    return AddRef();\n}",
			"comments":"",
			"methodName":"public int method1(int[] args)"
		},
		"private int DragOver(int grfKeyState, int pt_x, int pt_y, int pdwEffect)":{
			"methodBody":"{\n    int oldKeyOperation = keyOperation;\n    DNDEvent event = new DNDEvent();\n    if (!setEventData(event, iDataObject, grfKeyState, pt_x, pt_y, pdwEffect)) {\n        keyOperation = -1;\n        OS.MoveMemory(pdwEffect, new int[] { COM.DROPEFFECT_NONE }, 4);\n        return COM.S_OK;\n    }\n    int allowedOperations = event.operations;\n    TransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];\n    System.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);\n    if (keyOperation == oldKeyOperation) {\n        event.type = DND.DragOver;\n        event.dataType = selectedDataType;\n        event.detail = selectedOperation;\n    } else {\n        event.type = DND.DragOperationChanged;\n        event.dataType = selectedDataType;\n    }\n    notifyListeners(event.type, event);\n    if (event.detail == DND.DROP_DEFAULT) {\n        event.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;\n    }\n    selectedDataType = null;\n    for (int i = 0; i < allowedDataTypes.length; i++) {\n        if (TransferData.sameType(allowedDataTypes[i], event.dataType)) {\n            selectedDataType = allowedDataTypes[i];\n            break;\n        }\n    }\n    selectedOperation = DND.DROP_NONE;\n    if (selectedDataType != null && ((allowedOperations & event.detail) == event.detail)) {\n        selectedOperation = event.detail;\n    }\n    effect.show(event.feedback, event.x, event.y);\n    OS.MoveMemory(pdwEffect, new int[] { opToOs(selectedOperation) }, 4);\n    return COM.S_OK;\n}",
			"comments":"",
			"methodName":"private int DragOver(int grfKeyState, int pt_x, int pt_y, int pdwEffect)"
		},
		"private void onDispose()":{
			"methodBody":"{\n    if (control == null)\n        return;\n    COM.RevokeDragDrop(control.handle);\n    if (controlListener != null)\n        control.removeListener(SWT.Dispose, controlListener);\n    controlListener = null;\n    control.setData(DROPTARGETID, null);\n    transferAgents = null;\n    control = null;\n    COM.CoLockObjectExternal(iDropTarget.getAddress(), false, true);\n    this.Release();\n    COM.CoFreeUnusedLibraries();\n}",
			"comments":"",
			"methodName":"private void onDispose()"
		},
		"public int method0(int[] args)":{
			"methodBody":"{\n    return QueryInterface(args[0], args[1]);\n}",
			"comments":"",
			"methodName":"public int method0(int[] args)"
		},
		"private boolean setEventData(DNDEvent event, int pDataObject, int grfKeyState, int pt_x, int pt_y, int pdwEffect)":{
			"methodBody":"{\n    if (pDataObject == 0 || pdwEffect == 0)\n        return false;\n    \n    int style = getStyle();\n    int[] operations = new int[1];\n    OS.MoveMemory(operations, pdwEffect, 4);\n    operations[0] = osToOp(operations[0]) & style;\n    if (operations[0] == DND.DROP_NONE)\n        return false;\n    \n    int operation = getOperationFromKeyState(grfKeyState);\n    keyOperation = operation;\n    if (operation == DND.DROP_DEFAULT) {\n        if ((style & DND.DROP_DEFAULT) == 0) {\n            operation = (operations[0] & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;\n        }\n    } else {\n        if ((operation & operations[0]) == 0)\n            operation = DND.DROP_NONE;\n    }\n    \n    TransferData[] dataTypes = new TransferData[0];\n    IDataObject dataObject = new IDataObject(pDataObject);\n    dataObject.AddRef();\n    try {\n        int[] address = new int[1];\n        if (dataObject.EnumFormatEtc(COM.DATADIR_GET, address) != COM.S_OK) {\n            return false;\n        }\n        IEnumFORMATETC enumFormatetc = new IEnumFORMATETC(address[0]);\n        try {\n            \n            int rgelt = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, FORMATETC.sizeof);\n            try {\n                int[] pceltFetched = new int[1];\n                enumFormatetc.Reset();\n                while (enumFormatetc.Next(1, rgelt, pceltFetched) == COM.S_OK && pceltFetched[0] == 1) {\n                    TransferData transferData = new TransferData();\n                    transferData.formatetc = new FORMATETC();\n                    COM.MoveMemory(transferData.formatetc, rgelt, FORMATETC.sizeof);\n                    transferData.type = transferData.formatetc.cfFormat;\n                    transferData.pIDataObject = pDataObject;\n                    for (int i = 0; i < transferAgents.length; i++) {\n                        if (transferAgents[i].isSupportedType(transferData)) {\n                            TransferData[] newDataTypes = new TransferData[dataTypes.length + 1];\n                            System.arraycopy(dataTypes, 0, newDataTypes, 0, dataTypes.length);\n                            newDataTypes[dataTypes.length] = transferData;\n                            dataTypes = newDataTypes;\n                            break;\n                        }\n                    }\n                }\n            } finally {\n                OS.GlobalFree(rgelt);\n            }\n        } finally {\n            enumFormatetc.Release();\n        }\n    } finally {\n        dataObject.Release();\n    }\n    if (dataTypes.length == 0)\n        return false;\n    event.widget = this;\n    event.x = pt_x;\n    event.y = pt_y;\n    event.time = OS.GetMessageTime();\n    event.feedback = DND.FEEDBACK_SELECT;\n    event.dataTypes = dataTypes;\n    event.dataType = dataTypes[0];\n    event.operations = operations[0];\n    event.detail = operation;\n    return true;\n}",
			"comments":"// get allowed operations\n// get current operation\n// Get allowed transfer types\n// Loop over enumerator and save any types that match what we are looking for\n",
			"methodName":"private boolean setEventData(DNDEvent event, int pDataObject, int grfKeyState, int pt_x, int pt_y, int pdwEffect)"
		}
	},
	"ClassORInterfaceName":[
		"DropTarget"
	]
}
