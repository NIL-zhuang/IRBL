{
	"variables":[
		"handle",
		"gdipImage",
		"img",
		"width",
		"height",
		"hHeap",
		"colorRef",
		"rgb",
		"foreColor",
		"backColor",
		"p1",
		"p2",
		"type",
		"device",
		"device",
		"Device",
		"device",
		"SWT",
		"SWT",
		"image",
		"SWT",
		"SWT",
		"image",
		"SWT",
		"SWT",
		"device",
		"device",
		"image",
		"gdipImage",
		"Gdip",
		"img",
		"Gdip",
		"img",
		"handle",
		"Gdip",
		"img",
		"Gdip",
		"width",
		"height",
		"Gdip",
		"img",
		"gdipImage",
		"OS",
		"OS",
		"hHeap",
		"gdipImage",
		"handle",
		"SWT",
		"SWT",
		"device",
		"device",
		"device",
		"device",
		"Device",
		"device",
		"SWT",
		"SWT",
		"color1",
		"SWT",
		"SWT",
		"color1",
		"SWT",
		"SWT",
		"color2",
		"SWT",
		"SWT",
		"color2",
		"SWT",
		"SWT",
		"device",
		"device",
		"color1",
		"colorRef",
		"colorRef",
		"colorRef",
		"Gdip",
		"rgb",
		"colorRef",
		"color2",
		"rgb",
		"colorRef",
		"colorRef",
		"colorRef",
		"Gdip",
		"rgb",
		"p1",
		"x1",
		"p1",
		"y1",
		"p2",
		"x2",
		"p2",
		"y2",
		"handle",
		"Gdip",
		"p1",
		"p2",
		"foreColor",
		"backColor",
		"Gdip",
		"foreColor",
		"Gdip",
		"backColor",
		"handle",
		"SWT",
		"SWT",
		"device",
		"device",
		"handle",
		"device",
		"Gdip",
		"handle",
		"type",
		"Gdip",
		"Gdip",
		"handle",
		"Gdip",
		"Gdip",
		"handle",
		"Gdip",
		"Gdip",
		"handle",
		"Gdip",
		"Gdip",
		"handle",
		"handle",
		"device",
		"device",
		"device",
		"handle",
		"handle",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"device",
		"WrapModeTile",
		"ERROR_NO_HANDLES",
		"tracking",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_INVALID_ARGUMENT",
		"device",
		"handle",
		"handle",
		"X",
		"Y",
		"X",
		"Y",
		"ERROR_NO_HANDLES",
		"tracking",
		"BrushTypeSolidColor",
		"BrushTypeHatchFill",
		"BrushTypeLinearGradient",
		"BrushTypeTextureFill",
		"tracking",
		"device",
		"image",
		"device",
		"x1",
		"y1",
		"x2",
		"y2",
		"color1",
		"color2"
	],
	"extendORImplementFiles":[
		"Resource"
	],
	"package":[
		"org.eclipse.swt.graphics"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.internal.gdip",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"dispose",
		"isDisposed",
		"toString",
		"getDevice",
		"error",
		"error",
		"isDisposed",
		"error",
		"checkGDIP",
		"createGdipImage",
		"Image_GetWidth",
		"Image_GetHeight",
		"TextureBrush_new",
		"Bitmap_delete",
		"GetProcessHeap",
		"HeapFree",
		"error",
		"new_Object",
		"getDevice",
		"error",
		"error",
		"isDisposed",
		"error",
		"error",
		"isDisposed",
		"error",
		"checkGDIP",
		"Color_new",
		"Color_new",
		"LinearGradientBrush_new",
		"Color_delete",
		"Color_delete",
		"error",
		"new_Object",
		"isDisposed",
		"Brush_GetType",
		"SolidBrush_delete",
		"HatchBrush_delete",
		"LinearGradientBrush_delete",
		"TextureBrush_delete",
		"dispose_Object",
		"isDisposed",
		"PointF",
		"PointF"
	],
	"methodsBody":{
		"public String toString()":{
			"methodBody":"{\n    if (isDisposed())\n        return \"Pattern {*DISPOSED*}\";\n    return \"Pattern {\" + handle + \"}\";\n}",
			"comments":"/**\n* Returns a string containing a concise, human-readable\n* description of the receiver.\n*\n* @return a string representation of the receiver\n*/\n",
			"methodName":"public String toString()"
		},
		"public void dispose()":{
			"methodBody":"{\n    if (handle == 0)\n        return;\n    if (device.isDisposed())\n        return;\n    int type = Gdip.Brush_GetType(handle);\n    switch(type) {\n        case Gdip.BrushTypeSolidColor:\n            Gdip.SolidBrush_delete(handle);\n            break;\n        case Gdip.BrushTypeHatchFill:\n            Gdip.HatchBrush_delete(handle);\n            break;\n        case Gdip.BrushTypeLinearGradient:\n            Gdip.LinearGradientBrush_delete(handle);\n            break;\n        case Gdip.BrushTypeTextureFill:\n            Gdip.TextureBrush_delete(handle);\n            break;\n    }\n    handle = 0;\n    if (device.tracking)\n        device.dispose_Object(this);\n    device = null;\n}",
			"comments":"/**\n* Disposes of the operating system resources associated with\n* the Pattern. Applications must dispose of all Patterns that\n* they allocate.\n*/\n",
			"methodName":"public void dispose()"
		},
		"public boolean isDisposed()":{
			"methodBody":"{\n    return handle == 0;\n}",
			"comments":"/**\n* Returns <code>true</code> if the Pattern has been disposed,\n* and <code>false</code> otherwise.\n* <p>\n* This method gets the dispose state for the Pattern.\n* When a Pattern has been disposed, it is an error to\n* invoke any other method using the Pattern.\n*\n* @return <code>true</code> when the Pattern is disposed, and <code>false</code> otherwise\n*/\n",
			"methodName":"public boolean isDisposed()"
		}
	},
	"ClassORInterfaceName":[
		"Pattern"
	]
}
