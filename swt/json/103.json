{
	"variables":[
		"_instance",
		"HTML_FORMAT",
		"HTML_FORMATID",
		"string",
		"count",
		"chars",
		"codePage",
		"cchMultiByte",
		"lpMultiByteStr",
		"data",
		"stgmedium",
		"formatetc",
		"hMem",
		"lpMultiByteStr",
		"codePage",
		"cchWideChar",
		"lpWideCharStr",
		"HTML_FORMAT",
		"_instance",
		"object",
		"transferData",
		"DND",
		"DND",
		"object",
		"string",
		"count",
		"string",
		"count",
		"chars",
		"OS",
		"OS",
		"codePage",
		"chars",
		"cchMultiByte",
		"transferData",
		"transferData",
		"COM",
		"OS",
		"OS",
		"OS",
		"cchMultiByte",
		"OS",
		"codePage",
		"chars",
		"lpMultiByteStr",
		"cchMultiByte",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"lpMultiByteStr",
		"transferData",
		"transferData",
		"COM",
		"transferData",
		"transferData",
		"transferData",
		"data",
		"transferData",
		"stgmedium",
		"COM",
		"transferData",
		"data",
		"formatetc",
		"stgmedium",
		"data",
		"transferData",
		"COM",
		"stgmedium",
		"OS",
		"hMem",
		"lpMultiByteStr",
		"OS",
		"OS",
		"codePage",
		"OS",
		"lpMultiByteStr",
		"cchWideChar",
		"cchWideChar",
		"OS",
		"codePage",
		"OS",
		"lpMultiByteStr",
		"lpWideCharStr",
		"lpWideCharStr",
		"lpWideCharStr",
		"OS",
		"hMem",
		"OS",
		"hMem",
		"HTML_FORMATID",
		"HTML_FORMAT",
		"object",
		"object",
		"object",
		"object",
		"ERROR_INVALID_DATA",
		"stgmedium",
		"result",
		"DV_E_STGMEDIUM",
		"GMEM_FIXED",
		"GMEM_ZEROINIT",
		"stgmedium",
		"tymed",
		"stgmedium",
		"TYMED_HGLOBAL",
		"unionField",
		"stgmedium",
		"pUnkForRelease",
		"stgmedium",
		"result",
		"S_OK",
		"pIDataObject",
		"pIDataObject",
		"formatetc",
		"tymed",
		"TYMED_HGLOBAL",
		"result",
		"result",
		"S_OK",
		"unionField",
		"MB_PRECOMPOSED",
		"MB_PRECOMPOSED",
		"length",
		"object",
		"transferData",
		"transferData",
		"object",
		"object"
	],
	"extendORImplementFiles":[
		"ByteArrayTransfer"
	],
	"package":[
		"org.eclipse.swt.dnd"
	],
	"import":[
		"org.eclipse.swt.internal.ole.win32",
		"org.eclipse.swt.internal.win32"
	],
	"methods":[
		"getInstance",
		"javaToNative",
		"nativeToJava",
		"getTypeIds",
		"getTypeNames",
		"checkHTML",
		"validate",
		"registerType",
		"checkHTML",
		"isSupportedType",
		"error",
		"length",
		"getChars",
		"GetACP",
		"WideCharToMultiByte",
		"GlobalAlloc",
		"WideCharToMultiByte",
		"isSupportedType",
		"AddRef",
		"GetData",
		"Release",
		"GlobalLock",
		"GetACP",
		"MultiByteToWideChar",
		"MultiByteToWideChar",
		"GlobalUnlock",
		"GlobalFree",
		"length",
		"checkHTML",
		"HTMLTransfer",
		"STGMEDIUM",
		"STGMEDIUM",
		"IDataObject",
		"STGMEDIUM",
		"String"
	],
	"methodsBody":{
		"public Object nativeToJava(TransferData transferData)":{
			"methodBody":"{\n    if (!isSupportedType(transferData) || transferData.pIDataObject == 0)\n        return null;\n    IDataObject data = new IDataObject(transferData.pIDataObject);\n    data.AddRef();\n    STGMEDIUM stgmedium = new STGMEDIUM();\n    FORMATETC formatetc = transferData.formatetc;\n    stgmedium.tymed = COM.TYMED_HGLOBAL;\n    transferData.result = data.GetData(formatetc, stgmedium);\n    data.Release();\n    if (transferData.result != COM.S_OK)\n        return null;\n    int hMem = stgmedium.unionField;\n    try {\n        int lpMultiByteStr = OS.GlobalLock(hMem);\n        if (lpMultiByteStr == 0)\n            return null;\n        try {\n            int codePage = OS.GetACP();\n            int cchWideChar = OS.MultiByteToWideChar(codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);\n            if (cchWideChar == 0)\n                return null;\n            char[] lpWideCharStr = new char[cchWideChar - 1];\n            OS.MultiByteToWideChar(codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);\n            return new String(lpWideCharStr);\n        } finally {\n            OS.GlobalUnlock(hMem);\n        }\n    } finally {\n        OS.GlobalFree(hMem);\n    }\n}",
			"comments":"/**\n* This implementation of <code>nativeToJava</code> converts a platform specific\n* representation of HTML text to a java <code>String</code>.\n* For additional information see <code>Transfer#nativeToJava</code>.\n*\n* @param transferData the platform specific representation of the data to be\n* been converted\n* @return a java <code>String</code> containing HTML text if the\n* conversion was successful; otherwise null\n*/\n",
			"methodName":"public Object nativeToJava(TransferData transferData)"
		},
		"public static HTMLTransfer getInstance()":{
			"methodBody":"{\n    return _instance;\n}",
			"comments":"/**\n* Returns the singleton instance of the HTMLTransfer class.\n*\n* @return the singleton instance of the HTMLTransfer class\n*/\n",
			"methodName":"public static HTMLTransfer getInstance()"
		},
		"protected int[] getTypeIds()":{
			"methodBody":"{\n    return new int[] { HTML_FORMATID };\n}",
			"comments":"",
			"methodName":"protected int[] getTypeIds()"
		},
		"protected String[] getTypeNames()":{
			"methodBody":"{\n    return new String[] { HTML_FORMAT };\n}",
			"comments":"",
			"methodName":"protected String[] getTypeNames()"
		},
		"boolean checkHTML(Object object)":{
			"methodBody":"{\n    return (object != null && object instanceof String && ((String) object).length() > 0);\n}",
			"comments":"",
			"methodName":"boolean checkHTML(Object object)"
		},
		"protected boolean validate(Object object)":{
			"methodBody":"{\n    return checkHTML(object);\n}",
			"comments":"",
			"methodName":"protected boolean validate(Object object)"
		},
		"public void javaToNative(Object object, TransferData transferData)":{
			"methodBody":"{\n    if (!checkHTML(object) || !isSupportedType(transferData)) {\n        DND.error(DND.ERROR_INVALID_DATA);\n    }\n    \n    String string = (String) object;\n    int count = string.length();\n    char[] chars = new char[count + 1];\n    string.getChars(0, count, chars, 0);\n    int codePage = OS.GetACP();\n    int cchMultiByte = OS.WideCharToMultiByte(codePage, 0, chars, -1, null, 0, null, null);\n    if (cchMultiByte == 0) {\n        transferData.stgmedium = new STGMEDIUM();\n        transferData.result = COM.DV_E_STGMEDIUM;\n        return;\n    }\n    int lpMultiByteStr = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, cchMultiByte);\n    OS.WideCharToMultiByte(codePage, 0, chars, -1, lpMultiByteStr, cchMultiByte, null, null);\n    transferData.stgmedium = new STGMEDIUM();\n    transferData.stgmedium.tymed = COM.TYMED_HGLOBAL;\n    transferData.stgmedium.unionField = lpMultiByteStr;\n    transferData.stgmedium.pUnkForRelease = 0;\n    transferData.result = COM.S_OK;\n    return;\n}",
			"comments":"/**\n* This implementation of <code>javaToNative</code> converts HTML-formatted text\n* represented by a java <code>String</code> to a platform specific representation.\n* For additional information see <code>Transfer#javaToNative</code>.\n*\n* @param object a java <code>String</code> containing HTML text\n* @param transferData an empty <code>TransferData</code> object; this\n*  object will be filled in on return with the platform specific format of the data\n*/\n// HTML Format is stored as a null terminated byte array\n",
			"methodName":"public void javaToNative(Object object, TransferData transferData)"
		}
	},
	"ClassORInterfaceName":[
		"HTMLTransfer"
	]
}
