{
	"variables":[
		"text",
		"list",
		"visibleItemCount",
		"popup",
		"arrow",
		"hasFocus",
		"listener",
		"filter",
		"foreground",
		"background",
		"font",
		"textStyle",
		"arrowStyle",
		"shell",
		"comboEvents",
		"i",
		"textEvents",
		"i",
		"arrowEvents",
		"i",
		"mask",
		"typedListener",
		"typedListener",
		"shell",
		"display",
		"width",
		"height",
		"items",
		"textWidth",
		"gc",
		"spacer",
		"i",
		"textSize",
		"arrowSize",
		"listSize",
		"borderWidth",
		"style",
		"listStyle",
		"popupEvents",
		"i",
		"listEvents",
		"i",
		"items",
		"selectionIndex",
		"size",
		"itemCount",
		"itemHeight",
		"listSize",
		"index",
		"display",
		"listRect",
		"parentRect",
		"comboSize",
		"displayRect",
		"width",
		"height",
		"x",
		"y",
		"siblings",
		"i",
		"index",
		"length",
		"style",
		"shell",
		"display",
		"e",
		"focusControl",
		"shell",
		"display",
		"e",
		"accessibleAdapter",
		"name",
		"label",
		"shortcut",
		"label",
		"text",
		"mnemonic",
		"testPoint",
		"location",
		"pt",
		"rect",
		"width",
		"height",
		"arrowSize",
		"items",
		"selectionIndex",
		"index",
		"e",
		"e",
		"e",
		"e",
		"e",
		"listRect",
		"black",
		"index",
		"index",
		"length",
		"e",
		"dropped",
		"oldIndex",
		"e",
		"e",
		"e",
		"e",
		"dropped",
		"e",
		"parent",
		"style",
		"style",
		"SWT",
		"style",
		"SWT",
		"textStyle",
		"SWT",
		"style",
		"SWT",
		"textStyle",
		"SWT",
		"text",
		"textStyle",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"arrowStyle",
		"SWT",
		"arrow",
		"arrowStyle",
		"listener",
		"popup",
		"event",
		"event",
		"text",
		"event",
		"event",
		"list",
		"event",
		"event",
		"arrow",
		"event",
		"event",
		"CCombo",
		"event",
		"event",
		"event",
		"SWT",
		"filter",
		"event",
		"shell",
		"CCombo",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"comboEvents",
		"i",
		"comboEvents",
		"i",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"textEvents",
		"i",
		"text",
		"textEvents",
		"i",
		"listener",
		"SWT",
		"SWT",
		"i",
		"arrowEvents",
		"i",
		"arrow",
		"arrowEvents",
		"i",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"mask",
		"string",
		"SWT",
		"SWT",
		"list",
		"string",
		"string",
		"SWT",
		"SWT",
		"list",
		"string",
		"index",
		"listener",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"listener",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"typedListener",
		"SWT",
		"typedListener",
		"event",
		"SWT",
		"SWT",
		"SWT",
		"text",
		"list",
		"event",
		"SWT",
		"popup",
		"popup",
		"list",
		"SWT",
		"listener",
		"popup",
		"shell",
		"SWT",
		"listener",
		"display",
		"SWT",
		"filter",
		"popup",
		"text",
		"list",
		"arrow",
		"SWT",
		"SWT",
		"list",
		"text",
		"gc",
		"i",
		"items",
		"i",
		"textWidth",
		"Math",
		"gc",
		"items",
		"i",
		"textWidth",
		"gc",
		"text",
		"SWT",
		"SWT",
		"changed",
		"arrow",
		"SWT",
		"SWT",
		"changed",
		"list",
		"wHint",
		"SWT",
		"changed",
		"height",
		"Math",
		"hHint",
		"Math",
		"textSize",
		"arrowSize",
		"borderWidth",
		"width",
		"Math",
		"wHint",
		"Math",
		"textWidth",
		"spacer",
		"arrowSize",
		"borderWidth",
		"listSize",
		"width",
		"height",
		"popup",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"SWT",
		"listStyle",
		"SWT",
		"style",
		"SWT",
		"listStyle",
		"SWT",
		"style",
		"SWT",
		"listStyle",
		"SWT",
		"list",
		"popup",
		"listStyle",
		"font",
		"list",
		"font",
		"foreground",
		"list",
		"foreground",
		"background",
		"list",
		"background",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"popupEvents",
		"i",
		"popup",
		"popupEvents",
		"i",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"i",
		"listEvents",
		"i",
		"list",
		"listEvents",
		"i",
		"listener",
		"items",
		"list",
		"items",
		"selectionIndex",
		"list",
		"selectionIndex",
		"list",
		"index",
		"list",
		"drop",
		"drop",
		"popup",
		"arrow",
		"text",
		"popup",
		"list",
		"list",
		"list",
		"SWT",
		"listener",
		"popup",
		"popup",
		"list",
		"items",
		"selectionIndex",
		"list",
		"itemCount",
		"itemCount",
		"visibleItemCount",
		"Math",
		"visibleItemCount",
		"itemCount",
		"list",
		"itemCount",
		"list",
		"SWT",
		"itemHeight",
		"list",
		"Math",
		"size",
		"listSize",
		"listSize",
		"list",
		"index",
		"list",
		"index",
		"list",
		"display",
		"Math",
		"comboSize",
		"listRect",
		"listRect",
		"parentRect",
		"parentRect",
		"comboSize",
		"y",
		"height",
		"displayRect",
		"displayRect",
		"y",
		"parentRect",
		"height",
		"popup",
		"x",
		"y",
		"width",
		"height",
		"popup",
		"list",
		"i",
		"siblings",
		"i",
		"siblings",
		"i",
		"CCombo",
		"i",
		"siblings",
		"i",
		"siblings",
		"i",
		"text",
		"list",
		"index",
		"list",
		"list",
		"list",
		"string",
		"index",
		"length",
		"string",
		"index",
		"index",
		"index",
		"length",
		"string",
		"index",
		"string",
		"index",
		"index",
		"index",
		"length",
		"text",
		"list",
		"style",
		"SWT",
		"text",
		"style",
		"SWT",
		"style",
		"text",
		"text",
		"text",
		"visibleItemCount",
		"type",
		"SWT",
		"hasFocus",
		"text",
		"hasFocus",
		"shell",
		"SWT",
		"listener",
		"shell",
		"SWT",
		"listener",
		"display",
		"SWT",
		"filter",
		"display",
		"SWT",
		"filter",
		"SWT",
		"e",
		"SWT",
		"hasFocus",
		"focusControl",
		"arrow",
		"focusControl",
		"list",
		"focusControl",
		"text",
		"hasFocus",
		"shell",
		"SWT",
		"listener",
		"display",
		"SWT",
		"filter",
		"SWT",
		"e",
		"string",
		"SWT",
		"SWT",
		"list",
		"string",
		"string",
		"SWT",
		"SWT",
		"list",
		"string",
		"start",
		"label",
		"name",
		"label",
		"e",
		"name",
		"label",
		"label",
		"text",
		"text",
		"mnemonic",
		"shortcut",
		"mnemonic",
		"e",
		"shortcut",
		"e",
		"accessibleAdapter",
		"text",
		"accessibleAdapter",
		"list",
		"accessibleAdapter",
		"arrow",
		"e",
		"SWT",
		"SWT",
		"e",
		"e",
		"e",
		"text",
		"e",
		"e",
		"testPoint",
		"e",
		"ACC",
		"location",
		"location",
		"e",
		"pt",
		"e",
		"pt",
		"e",
		"location",
		"e",
		"location",
		"e",
		"e",
		"ACC",
		"e",
		"ACC",
		"e",
		"text",
		"e",
		"text",
		"ACC",
		"ACC",
		"arrow",
		"e",
		"SWT",
		"SWT",
		"popup",
		"text",
		"arrow",
		"list",
		"popup",
		"rect",
		"rect",
		"arrow",
		"SWT",
		"height",
		"changed",
		"text",
		"width",
		"arrowSize",
		"height",
		"arrow",
		"width",
		"arrowSize",
		"arrowSize",
		"arrowSize",
		"event",
		"SWT",
		"popup",
		"list",
		"list",
		"popup",
		"list",
		"items",
		"selectionIndex",
		"SWT",
		"SWT",
		"SWT",
		"event",
		"SWT",
		"list",
		"index",
		"text",
		"list",
		"index",
		"text",
		"list",
		"index",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"event",
		"e",
		"SWT",
		"event",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"event",
		"e",
		"event",
		"e",
		"SWT",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"SWT",
		"event",
		"SWT",
		"event",
		"SWT",
		"event",
		"SWT",
		"event",
		"SWT",
		"event",
		"SWT",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"event",
		"SWT",
		"list",
		"SWT",
		"event",
		"black",
		"event",
		"listRect",
		"listRect",
		"SWT",
		"event",
		"SWT",
		"text",
		"arrow",
		"popup",
		"list",
		"x",
		"y",
		"width",
		"height",
		"list",
		"index",
		"list",
		"start",
		"end",
		"string",
		"SWT",
		"SWT",
		"list",
		"string",
		"text",
		"list",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"listener",
		"listener",
		"SWT",
		"SWT",
		"SWT",
		"listener",
		"SWT",
		"listener",
		"index",
		"list",
		"text",
		"index",
		"index",
		"list",
		"index",
		"text",
		"list",
		"index",
		"text",
		"list",
		"index",
		"list",
		"color",
		"background",
		"color",
		"text",
		"text",
		"color",
		"list",
		"list",
		"color",
		"arrow",
		"arrow",
		"color",
		"text",
		"editable",
		"enabled",
		"popup",
		"popup",
		"text",
		"text",
		"enabled",
		"arrow",
		"arrow",
		"enabled",
		"text",
		"font",
		"font",
		"text",
		"font",
		"list",
		"font",
		"color",
		"foreground",
		"color",
		"text",
		"text",
		"color",
		"list",
		"list",
		"color",
		"arrow",
		"arrow",
		"color",
		"list",
		"index",
		"string",
		"list",
		"items",
		"text",
		"text",
		"selection",
		"SWT",
		"SWT",
		"text",
		"selection",
		"selection",
		"string",
		"SWT",
		"SWT",
		"list",
		"string",
		"index",
		"list",
		"text",
		"string",
		"text",
		"string",
		"text",
		"list",
		"index",
		"list",
		"text",
		"limit",
		"string",
		"arrow",
		"string",
		"text",
		"string",
		"visible",
		"visible",
		"popup",
		"count",
		"visibleItemCount",
		"count",
		"string",
		"index",
		"length",
		"string",
		"index",
		"index",
		"index",
		"length",
		"string",
		"string",
		"index",
		"string",
		"index",
		"string",
		"index",
		"length",
		"index",
		"index",
		"length",
		"string",
		"event",
		"SWT",
		"SWT",
		"SWT",
		"event",
		"SWT",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"event",
		"SWT",
		"event",
		"SWT",
		"event",
		"event",
		"SWT",
		"text",
		"dropped",
		"dropped",
		"event",
		"SWT",
		"Math",
		"oldIndex",
		"Math",
		"oldIndex",
		"oldIndex",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"SWT",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"SWT",
		"list",
		"e",
		"event",
		"SWT",
		"e",
		"SWT",
		"event",
		"text",
		"text",
		"dropped",
		"dropped",
		"SWT",
		"event",
		"text",
		"text",
		"SWT",
		"event",
		"SWT",
		"SWT",
		"SWT",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"e",
		"event",
		"SWT",
		"e",
		"event",
		"e",
		"event",
		"e",
		"SINGLE",
		"READ_ONLY",
		"READ_ONLY",
		"FLAT",
		"FLAT",
		"ARROW",
		"DOWN",
		"FLAT",
		"FLAT",
		"widget",
		"widget",
		"widget",
		"widget",
		"widget",
		"widget",
		"FocusOut",
		"widget",
		"FocusOut",
		"Dispose",
		"Move",
		"Resize",
		"length",
		"KeyDown",
		"KeyUp",
		"Modify",
		"MouseDown",
		"MouseUp",
		"Traverse",
		"FocusIn",
		"length",
		"Selection",
		"FocusIn",
		"length",
		"BORDER",
		"READ_ONLY",
		"FLAT",
		"LEFT_TO_RIGHT",
		"RIGHT_TO_LEFT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"Modify",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"type",
		"FocusIn",
		"FocusIn",
		"Selection",
		"type",
		"Dispose",
		"Dispose",
		"Deactivate",
		"FocusIn",
		"Move",
		"Resize",
		"x",
		"length",
		"x",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"DEFAULT",
		"y",
		"y",
		"x",
		"x",
		"NO_TRIM",
		"ON_TOP",
		"SINGLE",
		"V_SCROLL",
		"FLAT",
		"FLAT",
		"RIGHT_TO_LEFT",
		"RIGHT_TO_LEFT",
		"LEFT_TO_RIGHT",
		"LEFT_TO_RIGHT",
		"Close",
		"Paint",
		"Deactivate",
		"length",
		"MouseUp",
		"Selection",
		"Traverse",
		"KeyDown",
		"KeyUp",
		"FocusIn",
		"Dispose",
		"length",
		"Dispose",
		"DEFAULT",
		"x",
		"x",
		"y",
		"x",
		"width",
		"height",
		"x",
		"y",
		"y",
		"y",
		"height",
		"y",
		"length",
		"READ_ONLY",
		"READ_ONLY",
		"FocusIn",
		"Deactivate",
		"Deactivate",
		"FocusIn",
		"FocusIn",
		"FocusIn",
		"FocusOut",
		"Deactivate",
		"FocusIn",
		"FocusOut",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"result",
		"result",
		"result",
		"result",
		"result",
		"result",
		"offset",
		"x",
		"y",
		"childID",
		"CHILDID_SELF",
		"x",
		"y",
		"x",
		"x",
		"y",
		"y",
		"width",
		"width",
		"height",
		"height",
		"detail",
		"detail",
		"ROLE_COMBOBOX",
		"detail",
		"STATE_NORMAL",
		"result",
		"detail",
		"ROLE_TEXT",
		"ROLE_LABEL",
		"result",
		"width",
		"height",
		"DEFAULT",
		"x",
		"x",
		"x",
		"y",
		"type",
		"Dispose",
		"FocusIn",
		"FocusIn",
		"MouseUp",
		"button",
		"Selection",
		"time",
		"time",
		"stateMask",
		"stateMask",
		"doit",
		"doit",
		"Selection",
		"doit",
		"doit",
		"Traverse",
		"detail",
		"TRAVERSE_RETURN",
		"TRAVERSE_ESCAPE",
		"TRAVERSE_ARROW_PREVIOUS",
		"TRAVERSE_ARROW_NEXT",
		"doit",
		"time",
		"time",
		"detail",
		"detail",
		"doit",
		"doit",
		"character",
		"character",
		"keyCode",
		"keyCode",
		"Traverse",
		"doit",
		"doit",
		"detail",
		"detail",
		"KeyUp",
		"time",
		"time",
		"character",
		"character",
		"keyCode",
		"keyCode",
		"stateMask",
		"stateMask",
		"KeyUp",
		"KeyDown",
		"character",
		"ESC",
		"stateMask",
		"ALT",
		"keyCode",
		"ARROW_UP",
		"keyCode",
		"ARROW_DOWN",
		"character",
		"CR",
		"time",
		"time",
		"stateMask",
		"stateMask",
		"DefaultSelection",
		"time",
		"time",
		"character",
		"character",
		"keyCode",
		"keyCode",
		"stateMask",
		"stateMask",
		"KeyDown",
		"type",
		"Paint",
		"COLOR_BLACK",
		"gc",
		"gc",
		"width",
		"height",
		"Close",
		"doit",
		"Deactivate",
		"ERROR_NULL_ARGUMENT",
		"ERROR_NULL_ARGUMENT",
		"Modify",
		"ERROR_NULL_ARGUMENT",
		"Selection",
		"DefaultSelection",
		"font",
		"ERROR_NULL_ARGUMENT",
		"x",
		"y",
		"ERROR_NULL_ARGUMENT",
		"type",
		"FocusIn",
		"FocusIn",
		"KeyDown",
		"character",
		"CR",
		"time",
		"time",
		"stateMask",
		"stateMask",
		"DefaultSelection",
		"keyCode",
		"ARROW_UP",
		"keyCode",
		"ARROW_DOWN",
		"doit",
		"stateMask",
		"ALT",
		"keyCode",
		"ARROW_UP",
		"time",
		"time",
		"stateMask",
		"stateMask",
		"Selection",
		"time",
		"time",
		"character",
		"character",
		"keyCode",
		"keyCode",
		"stateMask",
		"stateMask",
		"KeyDown",
		"KeyUp",
		"time",
		"time",
		"character",
		"character",
		"keyCode",
		"keyCode",
		"stateMask",
		"stateMask",
		"KeyUp",
		"Modify",
		"time",
		"time",
		"Modify",
		"MouseDown",
		"button",
		"MouseUp",
		"button",
		"Traverse",
		"detail",
		"TRAVERSE_RETURN",
		"TRAVERSE_ARROW_PREVIOUS",
		"TRAVERSE_ARROW_NEXT",
		"doit",
		"time",
		"time",
		"detail",
		"detail",
		"doit",
		"doit",
		"character",
		"character",
		"keyCode",
		"keyCode",
		"Traverse",
		"doit",
		"doit",
		"detail",
		"detail",
		"parent",
		"style",
		"event",
		"event",
		"style",
		"string",
		"string",
		"index",
		"listener",
		"listener",
		"event",
		"event",
		"wHint",
		"hHint",
		"changed",
		"items",
		"selectionIndex",
		"index",
		"drop",
		"index",
		"string",
		"type",
		"string",
		"string",
		"start",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"e",
		"changed",
		"event",
		"event",
		"x",
		"y",
		"width",
		"height",
		"all",
		"index",
		"start",
		"end",
		"string",
		"listener",
		"listener",
		"index",
		"color",
		"editable",
		"enabled",
		"font",
		"color",
		"index",
		"string",
		"items",
		"layout",
		"selection",
		"string",
		"limit",
		"string",
		"visible",
		"count",
		"string",
		"event"
	],
	"extendORImplementFiles":[
		"Composite"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.events",
		"org.eclipse.swt.widgets",
		"org.eclipse.swt.accessibility"
	],
	"methods":[
		"handleEvent",
		"handleEvent",
		"checkStyle",
		"add",
		"add",
		"addModifyListener",
		"addSelectionListener",
		"arrowEvent",
		"clearSelection",
		"comboEvent",
		"computeSize",
		"createPopup",
		"deselect",
		"deselectAll",
		"dropDown",
		"getAssociatedLabel",
		"getChildren",
		"getEditable",
		"getItem",
		"getItemCount",
		"getItemHeight",
		"getItems",
		"getMnemonic",
		"getSelection",
		"getSelectionIndex",
		"getStyle",
		"getText",
		"getTextHeight",
		"getTextLimit",
		"getVisibleItemCount",
		"handleFocus",
		"indexOf",
		"indexOf",
		"initAccessible",
		"getName",
		"getKeyboardShortcut",
		"getHelp",
		"getName",
		"getKeyboardShortcut",
		"getHelp",
		"getCaretOffset",
		"getChildAtPoint",
		"getLocation",
		"getChildCount",
		"getRole",
		"getState",
		"getValue",
		"getRole",
		"getDefaultAction",
		"isDropped",
		"isFocusControl",
		"internalLayout",
		"listEvent",
		"popupEvent",
		"redraw",
		"redraw",
		"remove",
		"remove",
		"remove",
		"removeAll",
		"removeModifyListener",
		"removeSelectionListener",
		"select",
		"setBackground",
		"setEditable",
		"setEnabled",
		"setFocus",
		"setFont",
		"setForeground",
		"setItem",
		"setItems",
		"setLayout",
		"setSelection",
		"setText",
		"setTextLimit",
		"setToolTipText",
		"setVisible",
		"setVisibleItemCount",
		"stripMnemonic",
		"textEvent",
		"checkStyle",
		"popupEvent",
		"textEvent",
		"listEvent",
		"arrowEvent",
		"comboEvent",
		"getShell",
		"handleFocus",
		"getShell",
		"getShell",
		"handleFocus",
		"addListener",
		"addListener",
		"addListener",
		"createPopup",
		"initAccessible",
		"checkWidget",
		"error",
		"add",
		"checkWidget",
		"error",
		"add",
		"checkWidget",
		"error",
		"addListener",
		"checkWidget",
		"error",
		"addListener",
		"addListener",
		"handleFocus",
		"dropDown",
		"isDropped",
		"checkWidget",
		"clearSelection",
		"deselectAll",
		"isDisposed",
		"removeListener",
		"dispose",
		"getShell",
		"removeListener",
		"getDisplay",
		"removeFilter",
		"dropDown",
		"internalLayout",
		"checkWidget",
		"getItems",
		"stringExtent",
		"max",
		"stringExtent",
		"dispose",
		"computeSize",
		"computeSize",
		"computeSize",
		"getBorderWidth",
		"max",
		"max",
		"max",
		"max",
		"getShell",
		"getStyle",
		"setFont",
		"setForeground",
		"setBackground",
		"addListener",
		"addListener",
		"setItems",
		"setSelection",
		"checkWidget",
		"deselect",
		"checkWidget",
		"deselectAll",
		"isDropped",
		"setVisible",
		"isDisposed",
		"isFocusControl",
		"setFocus",
		"getShell",
		"getParent",
		"getItems",
		"getSelectionIndex",
		"removeListener",
		"dispose",
		"createPopup",
		"getSize",
		"getItemCount",
		"min",
		"getItemHeight",
		"computeSize",
		"setBounds",
		"max",
		"getSelectionIndex",
		"setTopIndex",
		"getDisplay",
		"getBounds",
		"map",
		"getParent",
		"getBounds",
		"getSize",
		"getClientArea",
		"getMonitor",
		"max",
		"setBounds",
		"setVisible",
		"setFocus",
		"getChildren",
		"getParent",
		"checkWidget",
		"checkWidget",
		"getEditable",
		"checkWidget",
		"getItem",
		"checkWidget",
		"getItemCount",
		"checkWidget",
		"getItemHeight",
		"checkWidget",
		"getItems",
		"length",
		"charAt",
		"charAt",
		"charAt",
		"checkWidget",
		"getSelection",
		"checkWidget",
		"getSelectionIndex",
		"getStyle",
		"getEditable",
		"checkWidget",
		"getText",
		"checkWidget",
		"getLineHeight",
		"checkWidget",
		"getTextLimit",
		"checkWidget",
		"isDisposed",
		"getEditable",
		"selectAll",
		"getShell",
		"removeListener",
		"addListener",
		"getDisplay",
		"removeFilter",
		"addFilter",
		"notifyListeners",
		"getFocusControl",
		"getDisplay",
		"getShell",
		"removeListener",
		"getDisplay",
		"removeFilter",
		"notifyListeners",
		"checkWidget",
		"error",
		"indexOf",
		"checkWidget",
		"error",
		"indexOf",
		"getAssociatedLabel",
		"stripMnemonic",
		"getText",
		"getAssociatedLabel",
		"getText",
		"getMnemonic",
		"getToolTipText",
		"addAccessibleListener",
		"getAccessible",
		"addAccessibleListener",
		"getAccessible",
		"addAccessibleListener",
		"getAccessible",
		"addAccessibleListener",
		"getAccessible",
		"isDropped",
		"getMessage",
		"getMessage",
		"getToolTipText",
		"addAccessibleTextListener",
		"getAccessible",
		"getCaretPosition",
		"addAccessibleControlListener",
		"getAccessible",
		"toControl",
		"contains",
		"getBounds",
		"getBounds",
		"toDisplay",
		"getText",
		"addAccessibleControlListener",
		"getAccessible",
		"getEditable",
		"addAccessibleControlListener",
		"getAccessible",
		"isDropped",
		"getMessage",
		"getMessage",
		"getVisible",
		"checkWidget",
		"isFocusControl",
		"isFocusControl",
		"isFocusControl",
		"isFocusControl",
		"isFocusControl",
		"isDropped",
		"dropDown",
		"getClientArea",
		"computeSize",
		"setBounds",
		"setBounds",
		"getShell",
		"getParent",
		"getItems",
		"getSelectionIndex",
		"createPopup",
		"handleFocus",
		"dropDown",
		"getSelectionIndex",
		"setText",
		"getItem",
		"selectAll",
		"setSelection",
		"notifyListeners",
		"notifyListeners",
		"notifyListeners",
		"dropDown",
		"dropDown",
		"dropDown",
		"notifyListeners",
		"isDisposed",
		"notifyListeners",
		"getBounds",
		"getSystemColor",
		"getDisplay",
		"setForeground",
		"drawRectangle",
		"dropDown",
		"dropDown",
		"redraw",
		"redraw",
		"redraw",
		"isVisible",
		"redraw",
		"redraw",
		"checkWidget",
		"remove",
		"checkWidget",
		"remove",
		"checkWidget",
		"error",
		"remove",
		"checkWidget",
		"setText",
		"removeAll",
		"checkWidget",
		"error",
		"removeListener",
		"checkWidget",
		"error",
		"removeListener",
		"removeListener",
		"checkWidget",
		"deselectAll",
		"setText",
		"getItemCount",
		"getSelectionIndex",
		"setText",
		"getItem",
		"selectAll",
		"select",
		"showSelection",
		"setBackground",
		"setBackground",
		"setBackground",
		"setBackground",
		"checkWidget",
		"setEditable",
		"setEnabled",
		"setVisible",
		"setEnabled",
		"setEnabled",
		"checkWidget",
		"setFocus",
		"setFont",
		"setFont",
		"setFont",
		"internalLayout",
		"setForeground",
		"setForeground",
		"setForeground",
		"setForeground",
		"checkWidget",
		"setItem",
		"checkWidget",
		"setItems",
		"getEditable",
		"setText",
		"checkWidget",
		"checkWidget",
		"error",
		"setSelection",
		"checkWidget",
		"error",
		"indexOf",
		"deselectAll",
		"setText",
		"setText",
		"selectAll",
		"setSelection",
		"showSelection",
		"checkWidget",
		"setTextLimit",
		"checkWidget",
		"setToolTipText",
		"setToolTipText",
		"setToolTipText",
		"setVisible",
		"setVisible",
		"checkWidget",
		"length",
		"charAt",
		"charAt",
		"substring",
		"substring",
		"handleFocus",
		"dropDown",
		"notifyListeners",
		"isDisposed",
		"isDropped",
		"selectAll",
		"setFocus",
		"dropDown",
		"getSelectionIndex",
		"select",
		"max",
		"select",
		"min",
		"getItemCount",
		"getSelectionIndex",
		"notifyListeners",
		"isDisposed",
		"notifyListeners",
		"notifyListeners",
		"deselectAll",
		"notifyListeners",
		"getEditable",
		"isDropped",
		"selectAll",
		"setFocus",
		"dropDown",
		"getEditable",
		"selectAll",
		"notifyListeners",
		"Text",
		"Button",
		"Listener",
		"Listener",
		"TypedListener",
		"TypedListener",
		"GC",
		"Point",
		"Shell",
		"List",
		"Event",
		"Event",
		"AccessibleAdapter",
		"AccessibleAdapter",
		"AccessibleTextAdapter",
		"AccessibleControlAdapter",
		"AccessibleControlAdapter",
		"AccessibleControlAdapter",
		"Event",
		"Event",
		"Event",
		"Event",
		"Event",
		"Event",
		"Event",
		"Event",
		"Event",
		"Event",
		"Event"
	],
	"methodsBody":{
		"public void setText(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    int index = list.indexOf(string);\n    if (index == -1) {\n        list.deselectAll();\n        text.setText(string);\n        return;\n    }\n    text.setText(string);\n    text.selectAll();\n    list.setSelection(index);\n    list.showSelection();\n}",
			"comments":"/**\n* Sets the contents of the receiver's text field to the\n* given string.\n* <p>\n* Note: The text field in a <code>Combo</code> is typically\n* only capable of displaying a single line of text. Thus,\n* setting the text to a string containing line breaks or\n* other special characters will probably cause it to\n* display incorrectly.\n* </p>\n*\n* @param string the new text\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setText(String string)"
		},
		"public void redraw(int x, int y, int width, int height, boolean all)":{
			"methodBody":"{\n    super.redraw(x, y, width, height, true);\n}",
			"comments":"",
			"methodName":"public void redraw(int x, int y, int width, int height, boolean all)"
		},
		"public void getChildAtPoint(AccessibleControlEvent e)":{
			"methodBody":"{\n    Point testPoint = toControl(e.x, e.y);\n    if (getBounds().contains(testPoint)) {\n        e.childID = ACC.CHILDID_SELF;\n    }\n}",
			"comments":"",
			"methodName":"public void getChildAtPoint(AccessibleControlEvent e)"
		},
		"public void redraw()":{
			"methodBody":"{\n    super.redraw();\n    text.redraw();\n    arrow.redraw();\n    if (popup.isVisible())\n        list.redraw();\n}",
			"comments":"",
			"methodName":"public void redraw()"
		},
		"public int getVisibleItemCount()":{
			"methodBody":"{\n    checkWidget();\n    return visibleItemCount;\n}",
			"comments":"/**\n* Gets the number of items that are visible in the drop\n* down portion of the receiver's list.\n*\n* @return the number of items that are visible\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public int getVisibleItemCount()"
		},
		"public void getKeyboardShortcut(AccessibleEvent e)":{
			"methodBody":"{\n    \n    e.result = \"Alt+Down Arrow\";\n}",
			"comments":"//$NON-NLS-1$\n",
			"methodName":"public void getKeyboardShortcut(AccessibleEvent e)"
		},
		"public void add(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    list.add(string);\n}",
			"comments":"/**\n* Adds the argument to the end of the receiver's list.\n*\n* @param string the new item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see #add(String,int)\n*/\n",
			"methodName":"public void add(String string)"
		},
		"public String getItem(int index)":{
			"methodBody":"{\n    checkWidget();\n    return list.getItem(index);\n}",
			"comments":"/**\n* Returns the item at the given, zero-relative index in the\n* receiver's list. Throws an exception if the index is out\n* of range.\n*\n* @param index the index of the item to return\n* @return the item at the given index\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String getItem(int index)"
		},
		"public void getHelp(AccessibleEvent e)":{
			"methodBody":"{\n    e.result = getToolTipText();\n}",
			"comments":"",
			"methodName":"public void getHelp(AccessibleEvent e)"
		},
		"public Control[] getChildren()":{
			"methodBody":"{\n    checkWidget();\n    return new Control[0];\n}",
			"comments":"",
			"methodName":"public Control[] getChildren()"
		},
		"public void setEnabled(boolean enabled)":{
			"methodBody":"{\n    super.setEnabled(enabled);\n    if (popup != null)\n        popup.setVisible(false);\n    if (text != null)\n        text.setEnabled(enabled);\n    if (arrow != null)\n        arrow.setEnabled(enabled);\n}",
			"comments":"",
			"methodName":"public void setEnabled(boolean enabled)"
		},
		"public void setForeground(Color color)":{
			"methodBody":"{\n    super.setForeground(color);\n    foreground = color;\n    if (text != null)\n        text.setForeground(color);\n    if (list != null)\n        list.setForeground(color);\n    if (arrow != null)\n        arrow.setForeground(color);\n}",
			"comments":"",
			"methodName":"public void setForeground(Color color)"
		},
		"void arrowEvent(Event event)":{
			"methodBody":"{\n    switch(event.type) {\n        case SWT.FocusIn:\n            {\n                handleFocus(SWT.FocusIn);\n                break;\n            }\n        case SWT.Selection:\n            {\n                dropDown(!isDropped());\n                break;\n            }\n    }\n}",
			"comments":"",
			"methodName":"void arrowEvent(Event event)"
		},
		"public void getValue(AccessibleControlEvent e)":{
			"methodBody":"{\n    e.result = getText();\n}",
			"comments":"",
			"methodName":"public void getValue(AccessibleControlEvent e)"
		},
		"public void removeSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    removeListener(SWT.Selection, listener);\n    removeListener(SWT.DefaultSelection, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the receiver's selection changes.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #addSelectionListener\n*/\n",
			"methodName":"public void removeSelectionListener(SelectionListener listener)"
		},
		"public int indexOf(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return list.indexOf(string);\n}",
			"comments":"/**\n* Searches the receiver's list starting at the first item\n* (index 0) until an item is found that is equal to the\n* argument, and returns the index of that item. If no item\n* is found, returns -1.\n*\n* @param string the search item\n* @return the index of the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int indexOf(String string)"
		},
		"public void select(int index)":{
			"methodBody":"{\n    checkWidget();\n    if (index == -1) {\n        list.deselectAll();\n        \n        text.setText(\"\");\n        return;\n    }\n    if (0 <= index && index < list.getItemCount()) {\n        if (index != getSelectionIndex()) {\n            text.setText(list.getItem(index));\n            text.selectAll();\n            list.select(index);\n            list.showSelection();\n        }\n    }\n}",
			"comments":"/**\n* Selects the item at the given zero-relative index in the receiver's\n* list.  If the item at the index was already selected, it remains\n* selected. Indices that are out of range are ignored.\n*\n* @param index the index of the item to select\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n//$NON-NLS-1$\n",
			"methodName":"public void select(int index)"
		},
		"public void getRole(AccessibleControlEvent e)":{
			"methodBody":"{\n    e.detail = text.getEditable() ? ACC.ROLE_TEXT : ACC.ROLE_LABEL;\n}",
			"comments":"",
			"methodName":"public void getRole(AccessibleControlEvent e)"
		},
		"Label getAssociatedLabel()":{
			"methodBody":"{\n    Control[] siblings = getParent().getChildren();\n    for (int i = 0; i < siblings.length; i++) {\n        if (siblings[i] == CCombo.this) {\n            if (i > 0 && siblings[i - 1] instanceof Label) {\n                return (Label) siblings[i - 1];\n            }\n        }\n    }\n    return null;\n}",
			"comments":"/*\n* Return the Label immediately preceding the receiver in the z-order,\n* or null if none.\n*/\n",
			"methodName":"Label getAssociatedLabel()"
		},
		"public String[] getItems()":{
			"methodBody":"{\n    checkWidget();\n    return list.getItems();\n}",
			"comments":"/**\n* Returns an array of <code>String</code>s which are the items\n* in the receiver's list.\n* <p>\n* Note: This is not the actual structure used by the receiver\n* to maintain its list of items, so modifying the array will\n* not affect the receiver.\n* </p>\n*\n* @return the items in the receiver's list\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String[] getItems()"
		},
		"public void remove(int start, int end)":{
			"methodBody":"{\n    checkWidget();\n    list.remove(start, end);\n}",
			"comments":"/**\n* Removes the items from the receiver's list which are\n* between the given zero-relative start and end\n* indices (inclusive).\n*\n* @param start the start of the range\n* @param end the end of the range\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void remove(int start, int end)"
		},
		"public void handleEvent(Event event)":{
			"methodBody":"{\n    Shell shell = ((Control) event.widget).getShell();\n    if (shell == CCombo.this.getShell()) {\n        handleFocus(SWT.FocusOut);\n    }\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event event)"
		},
		"public void getChildCount(AccessibleControlEvent e)":{
			"methodBody":"{\n    e.detail = 0;\n}",
			"comments":"",
			"methodName":"public void getChildCount(AccessibleControlEvent e)"
		},
		"public boolean getEditable()":{
			"methodBody":"{\n    checkWidget();\n    return text.getEditable();\n}",
			"comments":"/**\n* Gets the editable state.\n*\n* @return whether or not the reciever is editable\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public boolean getEditable()"
		},
		"public void getLocation(AccessibleControlEvent e)":{
			"methodBody":"{\n    Rectangle location = getBounds();\n    Point pt = toDisplay(location.x, location.y);\n    e.x = pt.x;\n    e.y = pt.y;\n    e.width = location.width;\n    e.height = location.height;\n}",
			"comments":"",
			"methodName":"public void getLocation(AccessibleControlEvent e)"
		},
		"void dropDown(boolean drop)":{
			"methodBody":"{\n    if (drop == isDropped())\n        return;\n    if (!drop) {\n        popup.setVisible(false);\n        if (!isDisposed() && arrow.isFocusControl()) {\n            text.setFocus();\n        }\n        return;\n    }\n    if (getShell() != popup.getParent()) {\n        String[] items = list.getItems();\n        int selectionIndex = list.getSelectionIndex();\n        list.removeListener(SWT.Dispose, listener);\n        popup.dispose();\n        popup = null;\n        list = null;\n        createPopup(items, selectionIndex);\n    }\n    Point size = getSize();\n    int itemCount = list.getItemCount();\n    itemCount = (itemCount == 0) ? visibleItemCount : Math.min(visibleItemCount, itemCount);\n    int itemHeight = list.getItemHeight() * itemCount;\n    Point listSize = list.computeSize(SWT.DEFAULT, itemHeight, false);\n    list.setBounds(1, 1, Math.max(size.x - 2, listSize.x), listSize.y);\n    int index = list.getSelectionIndex();\n    if (index != -1)\n        list.setTopIndex(index);\n    Display display = getDisplay();\n    Rectangle listRect = list.getBounds();\n    Rectangle parentRect = display.map(getParent(), null, getBounds());\n    Point comboSize = getSize();\n    Rectangle displayRect = getMonitor().getClientArea();\n    int width = Math.max(comboSize.x, listRect.width + 2);\n    int height = listRect.height + 2;\n    int x = parentRect.x;\n    int y = parentRect.y + comboSize.y;\n    if (y + height > displayRect.y + displayRect.height)\n        y = parentRect.y - height;\n    popup.setBounds(x, y, width, height);\n    popup.setVisible(true);\n    list.setFocus();\n}",
			"comments":"",
			"methodName":"void dropDown(boolean drop)"
		},
		"public void remove(int index)":{
			"methodBody":"{\n    checkWidget();\n    list.remove(index);\n}",
			"comments":"/**\n* Removes the item from the receiver's list at the given\n* zero-relative index.\n*\n* @param index the index for the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void remove(int index)"
		},
		"public void add(String string, int index)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    list.add(string, index);\n}",
			"comments":"/**\n* Adds the argument to the receiver's list at the given\n* zero-relative index.\n* <p>\n* Note: To add an item at the end of the list, use the\n* result of calling <code>getItemCount()</code> as the\n* index or use <code>add(String)</code>.\n* </p>\n*\n* @param string the new item\n* @param index the index for the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list (inclusive)</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see #add(String)\n*/\n",
			"methodName":"public void add(String string, int index)"
		},
		"public int getStyle()":{
			"methodBody":"{\n    int style = super.getStyle();\n    style &= ~SWT.READ_ONLY;\n    if (!text.getEditable())\n        style |= SWT.READ_ONLY;\n    return style;\n}",
			"comments":"",
			"methodName":"public int getStyle()"
		},
		"public void setFont(Font font)":{
			"methodBody":"{\n    super.setFont(font);\n    this.font = font;\n    text.setFont(font);\n    list.setFont(font);\n    internalLayout(true);\n}",
			"comments":"",
			"methodName":"public void setFont(Font font)"
		},
		"public void setVisibleItemCount(int count)":{
			"methodBody":"{\n    checkWidget();\n    if (count < 0)\n        return;\n    visibleItemCount = count;\n}",
			"comments":"/**\n* Sets the number of items that are visible in the drop\n* down portion of the receiver's list.\n*\n* @param count the new number of items to be visible\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setVisibleItemCount(int count)"
		},
		"public void getName(AccessibleEvent e)":{
			"methodBody":"{\n    \n    e.result = isDropped() ? SWT.getMessage(\"SWT_Close\") : SWT.getMessage(\"SWT_Open\");\n}",
			"comments":"//$NON-NLS-1$ //$NON-NLS-2$\n",
			"methodName":"public void getName(AccessibleEvent e)"
		},
		"public String getText()":{
			"methodBody":"{\n    checkWidget();\n    return text.getText();\n}",
			"comments":"/**\n* Returns a string containing a copy of the contents of the\n* receiver's text field.\n*\n* @return the receiver's text\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public String getText()"
		},
		"public void getDefaultAction(AccessibleControlEvent e)":{
			"methodBody":"{\n    \n    e.result = isDropped() ? SWT.getMessage(\"SWT_Close\") : SWT.getMessage(\"SWT_Open\");\n}",
			"comments":"//$NON-NLS-1$ //$NON-NLS-2$\n",
			"methodName":"public void getDefaultAction(AccessibleControlEvent e)"
		},
		"void textEvent(Event event)":{
			"methodBody":"{\n    switch(event.type) {\n        case SWT.FocusIn:\n            {\n                handleFocus(SWT.FocusIn);\n                break;\n            }\n        case SWT.KeyDown:\n            {\n                if (event.character == SWT.CR) {\n                    dropDown(false);\n                    Event e = new Event();\n                    e.time = event.time;\n                    e.stateMask = event.stateMask;\n                    notifyListeners(SWT.DefaultSelection, e);\n                }\n                \n                if (isDisposed())\n                    break;\n                if (event.keyCode == SWT.ARROW_UP || event.keyCode == SWT.ARROW_DOWN) {\n                    event.doit = false;\n                    if ((event.stateMask & SWT.ALT) != 0) {\n                        boolean dropped = isDropped();\n                        text.selectAll();\n                        if (!dropped)\n                            setFocus();\n                        dropDown(!dropped);\n                        break;\n                    }\n                    int oldIndex = getSelectionIndex();\n                    if (event.keyCode == SWT.ARROW_UP) {\n                        select(Math.max(oldIndex - 1, 0));\n                    } else {\n                        select(Math.min(oldIndex + 1, getItemCount() - 1));\n                    }\n                    if (oldIndex != getSelectionIndex()) {\n                        Event e = new Event();\n                        e.time = event.time;\n                        e.stateMask = event.stateMask;\n                        notifyListeners(SWT.Selection, e);\n                    }\n                    \n                    if (isDisposed())\n                        break;\n                }\n                \n                \n                Event e = new Event();\n                e.time = event.time;\n                e.character = event.character;\n                e.keyCode = event.keyCode;\n                e.stateMask = event.stateMask;\n                notifyListeners(SWT.KeyDown, e);\n                break;\n            }\n        case SWT.KeyUp:\n            {\n                Event e = new Event();\n                e.time = event.time;\n                e.character = event.character;\n                e.keyCode = event.keyCode;\n                e.stateMask = event.stateMask;\n                notifyListeners(SWT.KeyUp, e);\n                break;\n            }\n        case SWT.Modify:\n            {\n                list.deselectAll();\n                Event e = new Event();\n                e.time = event.time;\n                notifyListeners(SWT.Modify, e);\n                break;\n            }\n        case SWT.MouseDown:\n            {\n                if (event.button != 1)\n                    return;\n                if (text.getEditable())\n                    return;\n                boolean dropped = isDropped();\n                text.selectAll();\n                if (!dropped)\n                    setFocus();\n                dropDown(!dropped);\n                break;\n            }\n        case SWT.MouseUp:\n            {\n                if (event.button != 1)\n                    return;\n                if (text.getEditable())\n                    return;\n                text.selectAll();\n                break;\n            }\n        case SWT.Traverse:\n            {\n                switch(event.detail) {\n                    case SWT.TRAVERSE_RETURN:\n                    case SWT.TRAVERSE_ARROW_PREVIOUS:\n                    case SWT.TRAVERSE_ARROW_NEXT:\n                        \n                        \n                        \n                        event.doit = false;\n                        break;\n                }\n                Event e = new Event();\n                e.time = event.time;\n                e.detail = event.detail;\n                e.doit = event.doit;\n                e.character = event.character;\n                e.keyCode = event.keyCode;\n                notifyListeners(SWT.Traverse, e);\n                event.doit = e.doit;\n                event.detail = e.detail;\n                break;\n            }\n    }\n}",
			"comments":"//At this point the widget may have been disposed.\n// If so, do not continue.\n//At this point the widget may have been disposed.\n// If so, do not continue.\n// Further work : Need to add support for incremental search in\n// pop up list as characters typed in text widget\n// The enter causes default selection and\n// the arrow keys are used to manipulate the list contents so\n// do not use them for traversal.\n",
			"methodName":"void textEvent(Event event)"
		},
		"public void removeAll()":{
			"methodBody":"{\n    checkWidget();\n    \n    text.setText(\"\");\n    list.removeAll();\n}",
			"comments":"/**\n* Removes all of the items from the receiver's list and clear the\n* contents of receiver's text field.\n* <p>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n//$NON-NLS-1$\n",
			"methodName":"public void removeAll()"
		},
		"public void addSelectionListener(SelectionListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Selection, typedListener);\n    addListener(SWT.DefaultSelection, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the receiver's selection changes, by sending\n* it one of the messages defined in the <code>SelectionListener</code>\n* interface.\n* <p>\n* <code>widgetSelected</code> is called when the combo's list selection changes.\n* <code>widgetDefaultSelected</code> is typically called when ENTER is pressed the combo's text area.\n* </p>\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see SelectionListener\n* @see #removeSelectionListener\n* @see SelectionEvent\n*/\n",
			"methodName":"public void addSelectionListener(SelectionListener listener)"
		},
		"public void setItems(String[] items)":{
			"methodBody":"{\n    checkWidget();\n    list.setItems(items);\n    \n    if (!text.getEditable())\n        text.setText(\"\");\n}",
			"comments":"/**\n* Sets the receiver's list to be the given array of items.\n*\n* @param items the array of items\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the items array is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if an item in the items array is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n//$NON-NLS-1$\n",
			"methodName":"public void setItems(String[] items)"
		},
		"public int getTextLimit()":{
			"methodBody":"{\n    checkWidget();\n    return text.getTextLimit();\n}",
			"comments":"/**\n* Returns the maximum number of characters that the receiver's\n* text field is capable of holding. If this has not been changed\n* by <code>setTextLimit()</code>, it will be the constant\n* <code>Combo.LIMIT</code>.\n*\n* @return the text limit\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getTextLimit()"
		},
		"void createPopup(String[] items, int selectionIndex)":{
			"methodBody":"{\n    \n    popup = new Shell(getShell(), SWT.NO_TRIM | SWT.ON_TOP);\n    int style = getStyle();\n    int listStyle = SWT.SINGLE | SWT.V_SCROLL;\n    if ((style & SWT.FLAT) != 0)\n        listStyle |= SWT.FLAT;\n    if ((style & SWT.RIGHT_TO_LEFT) != 0)\n        listStyle |= SWT.RIGHT_TO_LEFT;\n    if ((style & SWT.LEFT_TO_RIGHT) != 0)\n        listStyle |= SWT.LEFT_TO_RIGHT;\n    list = new List(popup, listStyle);\n    if (font != null)\n        list.setFont(font);\n    if (foreground != null)\n        list.setForeground(foreground);\n    if (background != null)\n        list.setBackground(background);\n    int[] popupEvents = { SWT.Close, SWT.Paint, SWT.Deactivate };\n    for (int i = 0; i < popupEvents.length; i++) popup.addListener(popupEvents[i], listener);\n    int[] listEvents = { SWT.MouseUp, SWT.Selection, SWT.Traverse, SWT.KeyDown, SWT.KeyUp, SWT.FocusIn, SWT.Dispose };\n    for (int i = 0; i < listEvents.length; i++) list.addListener(listEvents[i], listener);\n    if (items != null)\n        list.setItems(items);\n    if (selectionIndex != -1)\n        list.setSelection(selectionIndex);\n}",
			"comments":"// create shell and list\n",
			"methodName":"void createPopup(String[] items, int selectionIndex)"
		},
		"public int getItemCount()":{
			"methodBody":"{\n    checkWidget();\n    return list.getItemCount();\n}",
			"comments":"/**\n* Returns the number of items contained in the receiver's list.\n*\n* @return the number of items\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getItemCount()"
		},
		"public void setToolTipText(String string)":{
			"methodBody":"{\n    checkWidget();\n    super.setToolTipText(string);\n    arrow.setToolTipText(string);\n    text.setToolTipText(string);\n}",
			"comments":"",
			"methodName":"public void setToolTipText(String string)"
		},
		"public int getTextHeight()":{
			"methodBody":"{\n    checkWidget();\n    return text.getLineHeight();\n}",
			"comments":"/**\n* Returns the height of the receivers's text field.\n*\n* @return the text height\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getTextHeight()"
		},
		"public void removeModifyListener(ModifyListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    removeListener(SWT.Modify, listener);\n}",
			"comments":"/**\n* Removes the listener from the collection of listeners who will\n* be notified when the receiver's text is modified.\n*\n* @param listener the listener which should no longer be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ModifyListener\n* @see #addModifyListener\n*/\n",
			"methodName":"public void removeModifyListener(ModifyListener listener)"
		},
		"public int getItemHeight()":{
			"methodBody":"{\n    checkWidget();\n    return list.getItemHeight();\n}",
			"comments":"/**\n* Returns the height of the area which would be used to\n* display <em>one</em> of the items in the receiver's list.\n*\n* @return the height of one item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getItemHeight()"
		},
		"public void deselectAll()":{
			"methodBody":"{\n    checkWidget();\n    list.deselectAll();\n}",
			"comments":"/**\n* Deselects all selected items in the receiver's list.\n* <p>\n* Note: To clear the selection in the receiver's text field,\n* use <code>clearSelection()</code>.\n* </p>\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see #clearSelection\n*/\n",
			"methodName":"public void deselectAll()"
		},
		"void handleFocus(int type)":{
			"methodBody":"{\n    if (isDisposed())\n        return;\n    switch(type) {\n        case SWT.FocusIn:\n            {\n                if (hasFocus)\n                    return;\n                if (getEditable())\n                    text.selectAll();\n                hasFocus = true;\n                Shell shell = getShell();\n                shell.removeListener(SWT.Deactivate, listener);\n                shell.addListener(SWT.Deactivate, listener);\n                Display display = getDisplay();\n                display.removeFilter(SWT.FocusIn, filter);\n                display.addFilter(SWT.FocusIn, filter);\n                Event e = new Event();\n                notifyListeners(SWT.FocusIn, e);\n                break;\n            }\n        case SWT.FocusOut:\n            {\n                if (!hasFocus)\n                    return;\n                Control focusControl = getDisplay().getFocusControl();\n                if (focusControl == arrow || focusControl == list || focusControl == text)\n                    return;\n                hasFocus = false;\n                Shell shell = getShell();\n                shell.removeListener(SWT.Deactivate, listener);\n                Display display = getDisplay();\n                display.removeFilter(SWT.FocusIn, filter);\n                Event e = new Event();\n                notifyListeners(SWT.FocusOut, e);\n                break;\n            }\n    }\n}",
			"comments":"",
			"methodName":"void handleFocus(int type)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    int mask = SWT.BORDER | SWT.READ_ONLY | SWT.FLAT | SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;\n    return style & mask;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void setLayout(Layout layout)":{
			"methodBody":"{\n    checkWidget();\n    return;\n}",
			"comments":"/**\n* Sets the layout which is associated with the receiver to be\n* the argument which may be null.\n* <p>\n* Note : No Layout can be set on this Control because it already\n* manages the size and position of its children.\n* </p>\n*\n* @param layout the receiver's new layout or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setLayout(Layout layout)"
		},
		"public void setTextLimit(int limit)":{
			"methodBody":"{\n    checkWidget();\n    text.setTextLimit(limit);\n}",
			"comments":"/**\n* Sets the maximum number of characters that the receiver's\n* text field is capable of holding to be the argument.\n*\n* @param limit new text limit\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_CANNOT_BE_ZERO - if the limit is zero</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setTextLimit(int limit)"
		},
		"public void remove(String string)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    list.remove(string);\n}",
			"comments":"/**\n* Searches the receiver's list starting at the first item\n* until an item is found that is equal to the argument,\n* and removes that item from the list.\n*\n* @param string the item to remove\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n*    <li>ERROR_INVALID_ARGUMENT - if the string is not found in the list</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void remove(String string)"
		},
		"public Point computeSize(int wHint, int hHint, boolean changed)":{
			"methodBody":"{\n    checkWidget();\n    int width = 0, height = 0;\n    String[] items = list.getItems();\n    int textWidth = 0;\n    GC gc = new GC(text);\n    \n    int spacer = gc.stringExtent(\" \").x;\n    for (int i = 0; i < items.length; i++) {\n        textWidth = Math.max(gc.stringExtent(items[i]).x, textWidth);\n    }\n    gc.dispose();\n    Point textSize = text.computeSize(SWT.DEFAULT, SWT.DEFAULT, changed);\n    Point arrowSize = arrow.computeSize(SWT.DEFAULT, SWT.DEFAULT, changed);\n    Point listSize = list.computeSize(wHint, SWT.DEFAULT, changed);\n    int borderWidth = getBorderWidth();\n    height = Math.max(hHint, Math.max(textSize.y, arrowSize.y) + 2 * borderWidth);\n    width = Math.max(wHint, Math.max(textWidth + 2 * spacer + arrowSize.x + 2 * borderWidth, listSize.x));\n    return new Point(width, height);\n}",
			"comments":"//$NON-NLS-1$\n",
			"methodName":"public Point computeSize(int wHint, int hHint, boolean changed)"
		},
		"public void setBackground(Color color)":{
			"methodBody":"{\n    super.setBackground(color);\n    background = color;\n    if (text != null)\n        text.setBackground(color);\n    if (list != null)\n        list.setBackground(color);\n    if (arrow != null)\n        arrow.setBackground(color);\n}",
			"comments":"",
			"methodName":"public void setBackground(Color color)"
		},
		"public void getState(AccessibleControlEvent e)":{
			"methodBody":"{\n    e.detail = ACC.STATE_NORMAL;\n}",
			"comments":"",
			"methodName":"public void getState(AccessibleControlEvent e)"
		},
		"public int indexOf(String string, int start)":{
			"methodBody":"{\n    checkWidget();\n    if (string == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    return list.indexOf(string, start);\n}",
			"comments":"/**\n* Searches the receiver's list starting at the given,\n* zero-relative index until an item is found that is equal\n* to the argument, and returns the index of that item. If\n* no item is found or the starting index is out of range,\n* returns -1.\n*\n* @param string the search item\n* @param start the zero-relative index at which to begin the search\n* @return the index of the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int indexOf(String string, int start)"
		},
		"public void setEditable(boolean editable)":{
			"methodBody":"{\n    checkWidget();\n    text.setEditable(editable);\n}",
			"comments":"/**\n* Sets the editable state.\n*\n* @param editable the new editable state\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 3.0\n*/\n",
			"methodName":"public void setEditable(boolean editable)"
		},
		"public void setVisible(boolean visible)":{
			"methodBody":"{\n    super.setVisible(visible);\n    if (!visible)\n        popup.setVisible(false);\n}",
			"comments":"",
			"methodName":"public void setVisible(boolean visible)"
		},
		"public void setSelection(Point selection)":{
			"methodBody":"{\n    checkWidget();\n    if (selection == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    text.setSelection(selection.x, selection.y);\n}",
			"comments":"/**\n* Sets the selection in the receiver's text field to the\n* range specified by the argument whose x coordinate is the\n* start of the selection and whose y coordinate is the end\n* of the selection.\n*\n* @param selection a point representing the new selection start and end\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the point is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setSelection(Point selection)"
		},
		"void internalLayout(boolean changed)":{
			"methodBody":"{\n    if (isDropped())\n        dropDown(false);\n    Rectangle rect = getClientArea();\n    int width = rect.width;\n    int height = rect.height;\n    Point arrowSize = arrow.computeSize(SWT.DEFAULT, height, changed);\n    text.setBounds(0, 0, width - arrowSize.x, height);\n    arrow.setBounds(width - arrowSize.x, 0, arrowSize.x, arrowSize.y);\n}",
			"comments":"",
			"methodName":"void internalLayout(boolean changed)"
		},
		"void comboEvent(Event event)":{
			"methodBody":"{\n    switch(event.type) {\n        case SWT.Dispose:\n            if (popup != null && !popup.isDisposed()) {\n                list.removeListener(SWT.Dispose, listener);\n                popup.dispose();\n            }\n            Shell shell = getShell();\n            shell.removeListener(SWT.Deactivate, listener);\n            Display display = getDisplay();\n            display.removeFilter(SWT.FocusIn, filter);\n            popup = null;\n            text = null;\n            list = null;\n            arrow = null;\n            break;\n        case SWT.Move:\n            dropDown(false);\n            break;\n        case SWT.Resize:\n            internalLayout(false);\n            break;\n    }\n}",
			"comments":"",
			"methodName":"void comboEvent(Event event)"
		},
		"public void setItem(int index, String string)":{
			"methodBody":"{\n    checkWidget();\n    list.setItem(index, string);\n}",
			"comments":"/**\n* Sets the text of the item in the receiver's list at the given\n* zero-relative index to the string argument. This is equivalent\n* to <code>remove</code>'ing the old item at the index, and then\n* <code>add</code>'ing the new item at that index.\n*\n* @param index the index for the item\n* @param string the new text for the item\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)</li>\n*    <li>ERROR_NULL_ARGUMENT - if the string is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setItem(int index, String string)"
		},
		"public void deselect(int index)":{
			"methodBody":"{\n    checkWidget();\n    list.deselect(index);\n}",
			"comments":"/**\n* Deselects the item at the given zero-relative index in the receiver's\n* list.  If the item at the index was already deselected, it remains\n* deselected. Indices that are out of range are ignored.\n*\n* @param index the index of the item to deselect\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void deselect(int index)"
		},
		"public void getCaretOffset(AccessibleTextEvent e)":{
			"methodBody":"{\n    e.offset = text.getCaretPosition();\n}",
			"comments":"",
			"methodName":"public void getCaretOffset(AccessibleTextEvent e)"
		},
		"public void addModifyListener(ModifyListener listener)":{
			"methodBody":"{\n    checkWidget();\n    if (listener == null)\n        SWT.error(SWT.ERROR_NULL_ARGUMENT);\n    TypedListener typedListener = new TypedListener(listener);\n    addListener(SWT.Modify, typedListener);\n}",
			"comments":"/**\n* Adds the listener to the collection of listeners who will\n* be notified when the receiver's text is modified, by sending\n* it one of the messages defined in the <code>ModifyListener</code>\n* interface.\n*\n* @param listener the listener which should be notified\n*\n* @exception IllegalArgumentException <ul>\n*    <li>ERROR_NULL_ARGUMENT - if the listener is null</li>\n* </ul>\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see ModifyListener\n* @see #removeModifyListener\n*/\n",
			"methodName":"public void addModifyListener(ModifyListener listener)"
		},
		"public boolean setFocus()":{
			"methodBody":"{\n    checkWidget();\n    return text.setFocus();\n}",
			"comments":"",
			"methodName":"public boolean setFocus()"
		},
		"char getMnemonic(String string)":{
			"methodBody":"{\n    int index = 0;\n    int length = string.length();\n    do {\n        while ((index < length) && (string.charAt(index) != '&')) index++;\n        if (++index >= length)\n            return '\\0';\n        if (string.charAt(index) != '&')\n            return string.charAt(index);\n        index++;\n    } while (index < length);\n    return '\\0';\n}",
			"comments":"",
			"methodName":"char getMnemonic(String string)"
		},
		"boolean isDropped()":{
			"methodBody":"{\n    return popup.getVisible();\n}",
			"comments":"",
			"methodName":"boolean isDropped()"
		},
		"public int getSelectionIndex()":{
			"methodBody":"{\n    checkWidget();\n    return list.getSelectionIndex();\n}",
			"comments":"/**\n* Returns the zero-relative index of the item which is currently\n* selected in the receiver's list, or -1 if no item is selected.\n*\n* @return the index of the selected item\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public int getSelectionIndex()"
		},
		"void initAccessible()":{
			"methodBody":"{\n    AccessibleAdapter accessibleAdapter = new AccessibleAdapter() {\n\n        public void getName(AccessibleEvent e) {\n            String name = null;\n            Label label = getAssociatedLabel();\n            if (label != null) {\n                name = stripMnemonic(label.getText());\n            }\n            e.result = name;\n        }\n\n        public void getKeyboardShortcut(AccessibleEvent e) {\n            String shortcut = null;\n            Label label = getAssociatedLabel();\n            if (label != null) {\n                String text = label.getText();\n                if (text != null) {\n                    char mnemonic = getMnemonic(text);\n                    if (mnemonic != '\\0') {\n                        \n                        shortcut = \"Alt+\" + mnemonic;\n                    }\n                }\n            }\n            e.result = shortcut;\n        }\n\n        public void getHelp(AccessibleEvent e) {\n            e.result = getToolTipText();\n        }\n    };\n    getAccessible().addAccessibleListener(accessibleAdapter);\n    text.getAccessible().addAccessibleListener(accessibleAdapter);\n    list.getAccessible().addAccessibleListener(accessibleAdapter);\n    arrow.getAccessible().addAccessibleListener(new AccessibleAdapter() {\n\n        public void getName(AccessibleEvent e) {\n            \n            e.result = isDropped() ? SWT.getMessage(\"SWT_Close\") : SWT.getMessage(\"SWT_Open\");\n        }\n\n        public void getKeyboardShortcut(AccessibleEvent e) {\n            \n            e.result = \"Alt+Down Arrow\";\n        }\n\n        public void getHelp(AccessibleEvent e) {\n            e.result = getToolTipText();\n        }\n    });\n    getAccessible().addAccessibleTextListener(new AccessibleTextAdapter() {\n\n        public void getCaretOffset(AccessibleTextEvent e) {\n            e.offset = text.getCaretPosition();\n        }\n    });\n    getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {\n\n        public void getChildAtPoint(AccessibleControlEvent e) {\n            Point testPoint = toControl(e.x, e.y);\n            if (getBounds().contains(testPoint)) {\n                e.childID = ACC.CHILDID_SELF;\n            }\n        }\n\n        public void getLocation(AccessibleControlEvent e) {\n            Rectangle location = getBounds();\n            Point pt = toDisplay(location.x, location.y);\n            e.x = pt.x;\n            e.y = pt.y;\n            e.width = location.width;\n            e.height = location.height;\n        }\n\n        public void getChildCount(AccessibleControlEvent e) {\n            e.detail = 0;\n        }\n\n        public void getRole(AccessibleControlEvent e) {\n            e.detail = ACC.ROLE_COMBOBOX;\n        }\n\n        public void getState(AccessibleControlEvent e) {\n            e.detail = ACC.STATE_NORMAL;\n        }\n\n        public void getValue(AccessibleControlEvent e) {\n            e.result = getText();\n        }\n    });\n    text.getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {\n\n        public void getRole(AccessibleControlEvent e) {\n            e.detail = text.getEditable() ? ACC.ROLE_TEXT : ACC.ROLE_LABEL;\n        }\n    });\n    arrow.getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {\n\n        public void getDefaultAction(AccessibleControlEvent e) {\n            \n            e.result = isDropped() ? SWT.getMessage(\"SWT_Close\") : SWT.getMessage(\"SWT_Open\");\n        }\n    });\n}",
			"comments":"//$NON-NLS-1$\n//$NON-NLS-1$ //$NON-NLS-2$\n//$NON-NLS-1$\n//$NON-NLS-1$ //$NON-NLS-2$\n",
			"methodName":"void initAccessible()"
		},
		"String stripMnemonic(String string)":{
			"methodBody":"{\n    int index = 0;\n    int length = string.length();\n    do {\n        while ((index < length) && (string.charAt(index) != '&')) index++;\n        if (++index >= length)\n            return string;\n        if (string.charAt(index) != '&') {\n            return string.substring(0, index - 1) + string.substring(index, length);\n        }\n        index++;\n    } while (index < length);\n    return string;\n}",
			"comments":"",
			"methodName":"String stripMnemonic(String string)"
		},
		"void listEvent(Event event)":{
			"methodBody":"{\n    switch(event.type) {\n        case SWT.Dispose:\n            if (getShell() != popup.getParent()) {\n                String[] items = list.getItems();\n                int selectionIndex = list.getSelectionIndex();\n                popup = null;\n                list = null;\n                createPopup(items, selectionIndex);\n            }\n            break;\n        case SWT.FocusIn:\n            {\n                handleFocus(SWT.FocusIn);\n                break;\n            }\n        case SWT.MouseUp:\n            {\n                if (event.button != 1)\n                    return;\n                dropDown(false);\n                break;\n            }\n        case SWT.Selection:\n            {\n                int index = list.getSelectionIndex();\n                if (index == -1)\n                    return;\n                text.setText(list.getItem(index));\n                text.selectAll();\n                list.setSelection(index);\n                Event e = new Event();\n                e.time = event.time;\n                e.stateMask = event.stateMask;\n                e.doit = event.doit;\n                notifyListeners(SWT.Selection, e);\n                event.doit = e.doit;\n                break;\n            }\n        case SWT.Traverse:\n            {\n                switch(event.detail) {\n                    case SWT.TRAVERSE_RETURN:\n                    case SWT.TRAVERSE_ESCAPE:\n                    case SWT.TRAVERSE_ARROW_PREVIOUS:\n                    case SWT.TRAVERSE_ARROW_NEXT:\n                        event.doit = false;\n                        break;\n                }\n                Event e = new Event();\n                e.time = event.time;\n                e.detail = event.detail;\n                e.doit = event.doit;\n                e.character = event.character;\n                e.keyCode = event.keyCode;\n                notifyListeners(SWT.Traverse, e);\n                event.doit = e.doit;\n                event.detail = e.detail;\n                break;\n            }\n        case SWT.KeyUp:\n            {\n                Event e = new Event();\n                e.time = event.time;\n                e.character = event.character;\n                e.keyCode = event.keyCode;\n                e.stateMask = event.stateMask;\n                notifyListeners(SWT.KeyUp, e);\n                break;\n            }\n        case SWT.KeyDown:\n            {\n                if (event.character == SWT.ESC) {\n                    \n                    dropDown(false);\n                }\n                if ((event.stateMask & SWT.ALT) != 0 && (event.keyCode == SWT.ARROW_UP || event.keyCode == SWT.ARROW_DOWN)) {\n                    dropDown(false);\n                }\n                if (event.character == SWT.CR) {\n                    \n                    dropDown(false);\n                    Event e = new Event();\n                    e.time = event.time;\n                    e.stateMask = event.stateMask;\n                    notifyListeners(SWT.DefaultSelection, e);\n                }\n                \n                if (isDisposed())\n                    break;\n                Event e = new Event();\n                e.time = event.time;\n                e.character = event.character;\n                e.keyCode = event.keyCode;\n                e.stateMask = event.stateMask;\n                notifyListeners(SWT.KeyDown, e);\n                break;\n            }\n    }\n}",
			"comments":"// Escape key cancels popup list\n// Enter causes default selection\n// At this point the widget may have been disposed.\n// If so, do not continue.\n",
			"methodName":"void listEvent(Event event)"
		},
		"public void clearSelection()":{
			"methodBody":"{\n    checkWidget();\n    text.clearSelection();\n    list.deselectAll();\n}",
			"comments":"/**\n* Sets the selection in the receiver's text field to an empty\n* selection starting just before the first character. If the\n* text field is editable, this has the effect of placing the\n* i-beam at the start of the text.\n* <p>\n* Note: To clear the selected items in the receiver's list,\n* use <code>deselectAll()</code>.\n* </p>\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @see #deselectAll\n*/\n",
			"methodName":"public void clearSelection()"
		},
		"public Point getSelection()":{
			"methodBody":"{\n    checkWidget();\n    return text.getSelection();\n}",
			"comments":"/**\n* Returns a <code>Point</code> whose x coordinate is the start\n* of the selection in the receiver's text field, and whose y\n* coordinate is the end of the selection. The returned values\n* are zero-relative. An \"empty\" selection as indicated by\n* the the x and y coordinates having the same value.\n*\n* @return a point representing the selection start and end\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public Point getSelection()"
		},
		"public boolean isFocusControl()":{
			"methodBody":"{\n    checkWidget();\n    if (text.isFocusControl() || arrow.isFocusControl() || list.isFocusControl() || popup.isFocusControl()) {\n        return true;\n    }\n    return super.isFocusControl();\n}",
			"comments":"",
			"methodName":"public boolean isFocusControl()"
		},
		"void popupEvent(Event event)":{
			"methodBody":"{\n    switch(event.type) {\n        case SWT.Paint:\n            \n            Rectangle listRect = list.getBounds();\n            Color black = getDisplay().getSystemColor(SWT.COLOR_BLACK);\n            event.gc.setForeground(black);\n            event.gc.drawRectangle(0, 0, listRect.width + 1, listRect.height + 1);\n            break;\n        case SWT.Close:\n            event.doit = false;\n            dropDown(false);\n            break;\n        case SWT.Deactivate:\n            dropDown(false);\n            break;\n    }\n}",
			"comments":"// draw black rectangle around list\n",
			"methodName":"void popupEvent(Event event)"
		}
	},
	"ClassORInterfaceName":[
		"CCombo"
	]
}
