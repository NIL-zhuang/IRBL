{
	"variables":[
		"content",
		"contentListener",
		"minHeight",
		"minWidth",
		"expandHorizontal",
		"expandVertical",
		"alwaysShowScroll",
		"hBar",
		"vBar",
		"mask",
		"location",
		"hBar",
		"hSelection",
		"hBar",
		"hostRect",
		"border",
		"vBar",
		"vBar",
		"hostRect",
		"border",
		"hBar",
		"location",
		"hBar",
		"vBar",
		"hBar",
		"vBar",
		"vBar",
		"hBar",
		"location",
		"vBar",
		"vSelection",
		"parent",
		"style",
		"hBar",
		"hBar",
		"SWT",
		"vBar",
		"vBar",
		"SWT",
		"contentListener",
		"e",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"SWT",
		"style",
		"mask",
		"alwaysShowScroll",
		"content",
		"content",
		"content",
		"hBar",
		"content",
		"hSelection",
		"location",
		"hBar",
		"hostRect",
		"border",
		"vVisible",
		"vBar",
		"hostRect",
		"vBar",
		"expandHorizontal",
		"contentRect",
		"hostRect",
		"expandHorizontal",
		"minWidth",
		"hostRect",
		"vBar",
		"hostRect",
		"border",
		"hVisible",
		"hBar",
		"hostRect",
		"hBar",
		"expandVertical",
		"contentRect",
		"hostRect",
		"expandVertical",
		"minHeight",
		"hostRect",
		"content",
		"content",
		"location",
		"location",
		"origin",
		"origin",
		"content",
		"hBar",
		"hBar",
		"x",
		"x",
		"hBar",
		"x",
		"vBar",
		"vBar",
		"y",
		"y",
		"vBar",
		"y",
		"content",
		"x",
		"y",
		"show",
		"alwaysShowScroll",
		"alwaysShowScroll",
		"show",
		"hBar",
		"alwaysShowScroll",
		"hBar",
		"vBar",
		"alwaysShowScroll",
		"vBar",
		"SWT",
		"contentListener",
		"content",
		"vBar",
		"vBar",
		"vBar",
		"vBar",
		"hBar",
		"hBar",
		"hBar",
		"hBar",
		"content",
		"SWT",
		"contentListener",
		"hBar",
		"hBar",
		"alwaysShowScroll",
		"vBar",
		"vBar",
		"alwaysShowScroll",
		"expand",
		"expandHorizontal",
		"expandHorizontal",
		"expand",
		"expand",
		"expandVertical",
		"expandVertical",
		"expand",
		"minWidth",
		"height",
		"size",
		"size",
		"size",
		"width",
		"minWidth",
		"height",
		"minHeight",
		"minWidth",
		"Math",
		"width",
		"minHeight",
		"Math",
		"height",
		"width",
		"minHeight",
		"content",
		"content",
		"vBar",
		"content",
		"location",
		"vSelection",
		"Selection",
		"Selection",
		"type",
		"Resize",
		"H_SCROLL",
		"V_SCROLL",
		"BORDER",
		"LEFT_TO_RIGHT",
		"RIGHT_TO_LEFT",
		"y",
		"width",
		"width",
		"x",
		"width",
		"width",
		"width",
		"height",
		"height",
		"y",
		"height",
		"height",
		"height",
		"x",
		"y",
		"x",
		"y",
		"content",
		"content",
		"content",
		"Resize",
		"content",
		"content",
		"content",
		"content",
		"Resize",
		"x",
		"y",
		"x",
		"parent",
		"style",
		"e",
		"e",
		"e",
		"style",
		"contentRect",
		"vVisible",
		"contentRect",
		"hVisible",
		"origin",
		"x",
		"y",
		"show",
		"content",
		"expand",
		"expand",
		"layout",
		"height",
		"size",
		"width",
		"height",
		"width"
	],
	"extendORImplementFiles":[
		"Composite"
	],
	"package":[
		"org.eclipse.swt.custom"
	],
	"import":[
		"org.eclipse.swt",
		"org.eclipse.swt.graphics",
		"org.eclipse.swt.widgets"
	],
	"methods":[
		"handleEvent",
		"handleEvent",
		"handleEvent",
		"checkStyle",
		"getAlwaysShowScrollBars",
		"getContent",
		"hScroll",
		"needHScroll",
		"needVScroll",
		"getOrigin",
		"setOrigin",
		"setOrigin",
		"setAlwaysShowScrollBars",
		"setContent",
		"setExpandHorizontal",
		"setExpandVertical",
		"setLayout",
		"setMinHeight",
		"setMinSize",
		"setMinSize",
		"setMinWidth",
		"vScroll",
		"checkStyle",
		"setLayout",
		"getHorizontalBar",
		"addListener",
		"hScroll",
		"getVerticalBar",
		"addListener",
		"vScroll",
		"layout",
		"getLocation",
		"getHorizontalBar",
		"getSelection",
		"setLocation",
		"getHorizontalBar",
		"getBounds",
		"getBorderWidth",
		"getVerticalBar",
		"getSize",
		"getVerticalBar",
		"getBounds",
		"getBorderWidth",
		"getHorizontalBar",
		"getSize",
		"checkWidget",
		"getLocation",
		"setOrigin",
		"checkWidget",
		"getHorizontalBar",
		"setSelection",
		"getSelection",
		"getVerticalBar",
		"setSelection",
		"getSelection",
		"setLocation",
		"checkWidget",
		"getHorizontalBar",
		"setVisible",
		"getVerticalBar",
		"setVisible",
		"layout",
		"checkWidget",
		"isDisposed",
		"removeListener",
		"setBounds",
		"getVerticalBar",
		"getHorizontalBar",
		"setMaximum",
		"setThumb",
		"setSelection",
		"setMaximum",
		"setThumb",
		"setSelection",
		"setLocation",
		"layout",
		"addListener",
		"setVisible",
		"setVisible",
		"checkWidget",
		"layout",
		"checkWidget",
		"layout",
		"checkWidget",
		"setMinSize",
		"setMinSize",
		"setMinSize",
		"checkWidget",
		"max",
		"max",
		"layout",
		"setMinSize",
		"getLocation",
		"getVerticalBar",
		"getSelection",
		"setLocation",
		"ScrolledCompositeLayout",
		"Listener",
		"Listener",
		"Listener",
		"Point",
		"Point",
		"Rectangle"
	],
	"methodsBody":{
		"void vScroll()":{
			"methodBody":"{\n    if (content == null)\n        return;\n    Point location = content.getLocation();\n    ScrollBar vBar = getVerticalBar();\n    int vSelection = vBar.getSelection();\n    content.setLocation(location.x, -vSelection);\n}",
			"comments":"",
			"methodName":"void vScroll()"
		},
		"public void setExpandHorizontal(boolean expand)":{
			"methodBody":"{\n    checkWidget();\n    if (expand == expandHorizontal)\n        return;\n    expandHorizontal = expand;\n    layout(false);\n}",
			"comments":"/**\n* Configure the ScrolledComposite to resize the content object to be as wide as the\n* ScrolledComposite when the width of the ScrolledComposite is greater than the\n* minimum width specified in setMinWidth.  If the ScrolledComposite is less than the\n* minimum width, the content will not resized and instead the horizontal scroll bar will be\n* used to view the entire width.\n* If expand is false, this behaviour is turned off.  By default, this behaviour is turned off.\n*\n* @param expand true to expand the content control to fill available horizontal space\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setExpandHorizontal(boolean expand)"
		},
		"public void setMinSize(Point size)":{
			"methodBody":"{\n    if (size == null) {\n        setMinSize(0, 0);\n    } else {\n        setMinSize(size.x, size.y);\n    }\n}",
			"comments":"/**\n* Specify the minimum width and height at which the ScrolledComposite will begin scrolling the\n* content with the horizontal scroll bar.  This value is only relevant if\n* setExpandHorizontal(true) and setExpandVertical(true) have been set.\n*\n* @param size the minimum size or null for the default size\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMinSize(Point size)"
		},
		"boolean needVScroll(Rectangle contentRect, boolean hVisible)":{
			"methodBody":"{\n    ScrollBar vBar = getVerticalBar();\n    if (vBar == null)\n        return false;\n    Rectangle hostRect = getBounds();\n    int border = getBorderWidth();\n    hostRect.height -= 2 * border;\n    ScrollBar hBar = getHorizontalBar();\n    if (hVisible && hBar != null)\n        hostRect.height -= hBar.getSize().y;\n    if (!expandVertical && contentRect.height > hostRect.height)\n        return true;\n    if (expandVertical && minHeight > hostRect.height)\n        return true;\n    return false;\n}",
			"comments":"",
			"methodName":"boolean needVScroll(Rectangle contentRect, boolean hVisible)"
		},
		"public void handleEvent(Event e)":{
			"methodBody":"{\n    if (e.type != SWT.Resize)\n        return;\n    layout(false);\n}",
			"comments":"",
			"methodName":"public void handleEvent(Event e)"
		},
		"public Point getOrigin()":{
			"methodBody":"{\n    checkWidget();\n    if (content == null)\n        return new Point(0, 0);\n    Point location = content.getLocation();\n    return new Point(-location.x, -location.y);\n}",
			"comments":"/**\n* Return the point in the content that currenly appears in the top left\n* corner of the scrolled composite.\n*\n* @return the point in the content that currenly appears in the top left\n* corner of the scrolled composite.  If no content has been set, this returns\n* (0, 0).\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public Point getOrigin()"
		},
		"public Control getContent()":{
			"methodBody":"{\n    \n    return content;\n}",
			"comments":"/**\n* Get the content that is being scrolled.\n*\n* @return the control displayed in the content area\n*/\n//checkWidget();\n",
			"methodName":"public Control getContent()"
		},
		"public void setAlwaysShowScrollBars(boolean show)":{
			"methodBody":"{\n    checkWidget();\n    if (show == alwaysShowScroll)\n        return;\n    alwaysShowScroll = show;\n    ScrollBar hBar = getHorizontalBar();\n    if (hBar != null && alwaysShowScroll)\n        hBar.setVisible(true);\n    ScrollBar vBar = getVerticalBar();\n    if (vBar != null && alwaysShowScroll)\n        vBar.setVisible(true);\n    layout(false);\n}",
			"comments":"/**\n* Set the Always Show Scrollbars flag.  True if the scrollbars are\n* always shown even if they are not required.  False if the scrollbars are only\n* visible when some part of the composite needs to be scrolled to be seen.\n* The H_SCROLL and V_SCROLL style bits are also required to enable scrollbars in the\n* horizontal and vertical directions.\n*\n* @param show true to show the scrollbars even when not required, false to show scrollbars only when required\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setAlwaysShowScrollBars(boolean show)"
		},
		"void hScroll()":{
			"methodBody":"{\n    if (content == null)\n        return;\n    Point location = content.getLocation();\n    ScrollBar hBar = getHorizontalBar();\n    int hSelection = hBar.getSelection();\n    content.setLocation(-hSelection, location.y);\n}",
			"comments":"",
			"methodName":"void hScroll()"
		},
		"public void setOrigin(int x, int y)":{
			"methodBody":"{\n    checkWidget();\n    if (content == null)\n        return;\n    ScrollBar hBar = getHorizontalBar();\n    if (hBar != null) {\n        hBar.setSelection(x);\n        x = -hBar.getSelection();\n    } else {\n        x = 0;\n    }\n    ScrollBar vBar = getVerticalBar();\n    if (vBar != null) {\n        vBar.setSelection(y);\n        y = -vBar.getSelection();\n    } else {\n        y = 0;\n    }\n    content.setLocation(x, y);\n}",
			"comments":"/**\n* Scrolls the content so that the specified point in the content is in the top\n* left corner.  If no content has been set, nothing will occur.\n*\n* Negative values will be ignored.  Values greater than the maximum scroll\n* distance will result in scrolling to the end of the scrollbar.\n*\n* @param x the x coordinate of the content to appear in the top left corner\n*\n* @param y the y coordinate of the content to appear in the top left corner\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*\n* @since 2.0\n*/\n",
			"methodName":"public void setOrigin(int x, int y)"
		},
		"public void setContent(Control content)":{
			"methodBody":"{\n    checkWidget();\n    if (this.content != null && !this.content.isDisposed()) {\n        this.content.removeListener(SWT.Resize, contentListener);\n        this.content.setBounds(new Rectangle(-200, -200, 0, 0));\n    }\n    this.content = content;\n    ScrollBar vBar = getVerticalBar();\n    ScrollBar hBar = getHorizontalBar();\n    if (this.content != null) {\n        if (vBar != null) {\n            vBar.setMaximum(0);\n            vBar.setThumb(0);\n            vBar.setSelection(0);\n        }\n        if (hBar != null) {\n            hBar.setMaximum(0);\n            hBar.setThumb(0);\n            hBar.setSelection(0);\n        }\n        content.setLocation(0, 0);\n        layout(false);\n        this.content.addListener(SWT.Resize, contentListener);\n    } else {\n        if (hBar != null)\n            hBar.setVisible(alwaysShowScroll);\n        if (vBar != null)\n            vBar.setVisible(alwaysShowScroll);\n    }\n}",
			"comments":"/**\n* Set the content that will be scrolled.\n*\n* @param content the control to be displayed in the content area\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setContent(Control content)"
		},
		"public void setMinSize(int width, int height)":{
			"methodBody":"{\n    checkWidget();\n    if (width == minWidth && height == minHeight)\n        return;\n    minWidth = Math.max(0, width);\n    minHeight = Math.max(0, height);\n    layout(false);\n}",
			"comments":"/**\n* Specify the minimum width and height at which the ScrolledComposite will begin scrolling the\n* content with the horizontal scroll bar.  This value is only relevant if\n* setExpandHorizontal(true) and setExpandVertical(true) have been set.\n*\n* @param width the minimum width or 0 for default width\n* @param height the minimum height or 0 for default height\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMinSize(int width, int height)"
		},
		"boolean needHScroll(Rectangle contentRect, boolean vVisible)":{
			"methodBody":"{\n    ScrollBar hBar = getHorizontalBar();\n    if (hBar == null)\n        return false;\n    Rectangle hostRect = getBounds();\n    int border = getBorderWidth();\n    hostRect.width -= 2 * border;\n    ScrollBar vBar = getVerticalBar();\n    if (vVisible && vBar != null)\n        hostRect.width -= vBar.getSize().x;\n    if (!expandHorizontal && contentRect.width > hostRect.width)\n        return true;\n    if (expandHorizontal && minWidth > hostRect.width)\n        return true;\n    return false;\n}",
			"comments":"",
			"methodName":"boolean needHScroll(Rectangle contentRect, boolean vVisible)"
		},
		"static int checkStyle(int style)":{
			"methodBody":"{\n    int mask = SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER | SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;\n    return style & mask;\n}",
			"comments":"",
			"methodName":"static int checkStyle(int style)"
		},
		"public void setMinHeight(int height)":{
			"methodBody":"{\n    setMinSize(minWidth, height);\n}",
			"comments":"/**\n* Specify the minimum height at which the ScrolledComposite will begin scrolling the\n* content with the vertical scroll bar.  This value is only relevant if\n* setExpandVertical(true) has been set.\n*\n* @param height the minimum height or 0 for default height\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMinHeight(int height)"
		},
		"public boolean getAlwaysShowScrollBars()":{
			"methodBody":"{\n    \n    return alwaysShowScroll;\n}",
			"comments":"/**\n* Returns the Always Show Scrollbars flag.  True if the scrollbars are\n* always shown even if they are not required.  False if the scrollbars are only\n* visible when some part of the composite needs to be scrolled to be seen.\n* The H_SCROLL and V_SCROLL style bits are also required to enable scrollbars in the\n* horizontal and vertical directions.\n*\n* @return the Always Show Scrollbars flag value\n*/\n//checkWidget();\n",
			"methodName":"public boolean getAlwaysShowScrollBars()"
		},
		"public void setLayout(Layout layout)":{
			"methodBody":"{\n    checkWidget();\n    return;\n}",
			"comments":"/**\n* Sets the layout which is associated with the receiver to be\n* the argument which may be null.\n* <p>\n* Note : No Layout can be set on this Control because it already\n* manages the size and position of its children.\n* </p>\n*\n* @param layout the receiver's new layout or null\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setLayout(Layout layout)"
		},
		"public void setOrigin(Point origin)":{
			"methodBody":"{\n    setOrigin(origin.x, origin.y);\n}",
			"comments":"/**\n* Scrolls the content so that the specified point in the content is in the top\n* left corner.  If no content has been set, nothing will occur.\n*\n* Negative values will be ignored.  Values greater than the maximum scroll\n* distance will result in scrolling to the end of the scrollbar.\n*\n* @param origin the point on the content to appear in the top left corner\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n*    <li>ERROR_INVALID_ARGUMENT - value of origin is outside of content\n* </ul>\n* @since 2.0\n*/\n",
			"methodName":"public void setOrigin(Point origin)"
		},
		"public void setMinWidth(int width)":{
			"methodBody":"{\n    setMinSize(width, minHeight);\n}",
			"comments":"/**\n* Specify the minimum width at which the ScrolledComposite will begin scrolling the\n* content with the horizontal scroll bar.  This value is only relevant if\n* setExpandHorizontal(true) has been set.\n*\n* @param width the minimum width or 0 for default width\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setMinWidth(int width)"
		},
		"public void setExpandVertical(boolean expand)":{
			"methodBody":"{\n    checkWidget();\n    if (expand == expandVertical)\n        return;\n    expandVertical = expand;\n    layout(false);\n}",
			"comments":"/**\n* Configure the ScrolledComposite to resize the content object to be as tall as the\n* ScrolledComposite when the height of the ScrolledComposite is greater than the\n* minimum height specified in setMinHeight.  If the ScrolledComposite is less than the\n* minimum height, the content will not resized and instead the vertical scroll bar will be\n* used to view the entire height.\n* If expand is false, this behaviour is turned off.  By default, this behaviour is turned off.\n*\n* @param expand true to expand the content control to fill available vertical space\n*\n* @exception SWTException <ul>\n*    <li>ERROR_WIDGET_DISPOSED - if the receiver has been disposed</li>\n*    <li>ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver</li>\n* </ul>\n*/\n",
			"methodName":"public void setExpandVertical(boolean expand)"
		}
	},
	"ClassORInterfaceName":[
		"ScrolledComposite"
	]
}
